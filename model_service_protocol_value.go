/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// ServiceProtocolValue the model 'ServiceProtocolValue'
type ServiceProtocolValue string

// List of Service_protocol_value
const (
	SERVICEPROTOCOLVALUE_TCP ServiceProtocolValue = "tcp"
	SERVICEPROTOCOLVALUE_UDP ServiceProtocolValue = "udp"
)

// All allowed values of ServiceProtocolValue enum
var AllowedServiceProtocolValueEnumValues = []ServiceProtocolValue{
	"tcp",
	"udp",
}

func (v *ServiceProtocolValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceProtocolValue(value)
	for _, existing := range AllowedServiceProtocolValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceProtocolValue", value)
}

// NewServiceProtocolValueFromValue returns a pointer to a valid ServiceProtocolValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceProtocolValueFromValue(v string) (*ServiceProtocolValue, error) {
	ev := ServiceProtocolValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceProtocolValue: valid values are %v", v, AllowedServiceProtocolValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceProtocolValue) IsValid() bool {
	for _, existing := range AllowedServiceProtocolValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Service_protocol_value value
func (v ServiceProtocolValue) Ptr() *ServiceProtocolValue {
	return &v
}

type NullableServiceProtocolValue struct {
	value *ServiceProtocolValue
	isSet bool
}

func (v NullableServiceProtocolValue) Get() *ServiceProtocolValue {
	return v.value
}

func (v *NullableServiceProtocolValue) Set(val *ServiceProtocolValue) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceProtocolValue) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceProtocolValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceProtocolValue(val *ServiceProtocolValue) *NullableServiceProtocolValue {
	return &NullableServiceProtocolValue{value: val, isSet: true}
}

func (v NullableServiceProtocolValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceProtocolValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

