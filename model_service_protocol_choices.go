/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// ServiceProtocolChoices the model 'ServiceProtocolChoices'
type ServiceProtocolChoices string

// List of ServiceProtocolChoices
const (
	SERVICEPROTOCOLCHOICES_TCP ServiceProtocolChoices = "tcp"
	SERVICEPROTOCOLCHOICES_UDP ServiceProtocolChoices = "udp"
)

// All allowed values of ServiceProtocolChoices enum
var AllowedServiceProtocolChoicesEnumValues = []ServiceProtocolChoices{
	"tcp",
	"udp",
}

func (v *ServiceProtocolChoices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceProtocolChoices(value)
	for _, existing := range AllowedServiceProtocolChoicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceProtocolChoices", value)
}

// NewServiceProtocolChoicesFromValue returns a pointer to a valid ServiceProtocolChoices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceProtocolChoicesFromValue(v string) (*ServiceProtocolChoices, error) {
	ev := ServiceProtocolChoices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceProtocolChoices: valid values are %v", v, AllowedServiceProtocolChoicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceProtocolChoices) IsValid() bool {
	for _, existing := range AllowedServiceProtocolChoicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceProtocolChoices value
func (v ServiceProtocolChoices) Ptr() *ServiceProtocolChoices {
	return &v
}

type NullableServiceProtocolChoices struct {
	value *ServiceProtocolChoices
	isSet bool
}

func (v NullableServiceProtocolChoices) Get() *ServiceProtocolChoices {
	return v.value
}

func (v *NullableServiceProtocolChoices) Set(val *ServiceProtocolChoices) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceProtocolChoices) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceProtocolChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceProtocolChoices(val *ServiceProtocolChoices) *NullableServiceProtocolChoices {
	return &NullableServiceProtocolChoices{value: val, isSet: true}
}

func (v NullableServiceProtocolChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceProtocolChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

