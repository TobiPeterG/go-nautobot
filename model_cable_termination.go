/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CableTermination - struct for CableTermination
type CableTermination struct {
	NestedCircuitTermination *NestedCircuitTermination
	NestedConsolePort *NestedConsolePort
	NestedConsoleServerPort *NestedConsoleServerPort
	NestedFrontPort *NestedFrontPort
	NestedInterface *NestedInterface
	NestedPowerFeed *NestedPowerFeed
	NestedPowerOutlet *NestedPowerOutlet
	NestedPowerPort *NestedPowerPort
	NestedRearPort *NestedRearPort
}

// NestedCircuitTerminationAsCableTermination is a convenience function that returns NestedCircuitTermination wrapped in CableTermination
func NestedCircuitTerminationAsCableTermination(v *NestedCircuitTermination) CableTermination {
	return CableTermination{
		NestedCircuitTermination: v,
	}
}

// NestedConsolePortAsCableTermination is a convenience function that returns NestedConsolePort wrapped in CableTermination
func NestedConsolePortAsCableTermination(v *NestedConsolePort) CableTermination {
	return CableTermination{
		NestedConsolePort: v,
	}
}

// NestedConsoleServerPortAsCableTermination is a convenience function that returns NestedConsoleServerPort wrapped in CableTermination
func NestedConsoleServerPortAsCableTermination(v *NestedConsoleServerPort) CableTermination {
	return CableTermination{
		NestedConsoleServerPort: v,
	}
}

// NestedFrontPortAsCableTermination is a convenience function that returns NestedFrontPort wrapped in CableTermination
func NestedFrontPortAsCableTermination(v *NestedFrontPort) CableTermination {
	return CableTermination{
		NestedFrontPort: v,
	}
}

// NestedInterfaceAsCableTermination is a convenience function that returns NestedInterface wrapped in CableTermination
func NestedInterfaceAsCableTermination(v *NestedInterface) CableTermination {
	return CableTermination{
		NestedInterface: v,
	}
}

// NestedPowerFeedAsCableTermination is a convenience function that returns NestedPowerFeed wrapped in CableTermination
func NestedPowerFeedAsCableTermination(v *NestedPowerFeed) CableTermination {
	return CableTermination{
		NestedPowerFeed: v,
	}
}

// NestedPowerOutletAsCableTermination is a convenience function that returns NestedPowerOutlet wrapped in CableTermination
func NestedPowerOutletAsCableTermination(v *NestedPowerOutlet) CableTermination {
	return CableTermination{
		NestedPowerOutlet: v,
	}
}

// NestedPowerPortAsCableTermination is a convenience function that returns NestedPowerPort wrapped in CableTermination
func NestedPowerPortAsCableTermination(v *NestedPowerPort) CableTermination {
	return CableTermination{
		NestedPowerPort: v,
	}
}

// NestedRearPortAsCableTermination is a convenience function that returns NestedRearPort wrapped in CableTermination
func NestedRearPortAsCableTermination(v *NestedRearPort) CableTermination {
	return CableTermination{
		NestedRearPort: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CableTermination) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NestedCircuitTermination
	err = newStrictDecoder(data).Decode(&dst.NestedCircuitTermination)
	if err == nil {
		jsonNestedCircuitTermination, _ := json.Marshal(dst.NestedCircuitTermination)
		if string(jsonNestedCircuitTermination) == "{}" { // empty struct
			dst.NestedCircuitTermination = nil
		} else {
			if err = validator.Validate(dst.NestedCircuitTermination); err != nil {
				dst.NestedCircuitTermination = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCircuitTermination = nil
	}

	// try to unmarshal data into NestedConsolePort
	err = newStrictDecoder(data).Decode(&dst.NestedConsolePort)
	if err == nil {
		jsonNestedConsolePort, _ := json.Marshal(dst.NestedConsolePort)
		if string(jsonNestedConsolePort) == "{}" { // empty struct
			dst.NestedConsolePort = nil
		} else {
			if err = validator.Validate(dst.NestedConsolePort); err != nil {
				dst.NestedConsolePort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedConsolePort = nil
	}

	// try to unmarshal data into NestedConsoleServerPort
	err = newStrictDecoder(data).Decode(&dst.NestedConsoleServerPort)
	if err == nil {
		jsonNestedConsoleServerPort, _ := json.Marshal(dst.NestedConsoleServerPort)
		if string(jsonNestedConsoleServerPort) == "{}" { // empty struct
			dst.NestedConsoleServerPort = nil
		} else {
			if err = validator.Validate(dst.NestedConsoleServerPort); err != nil {
				dst.NestedConsoleServerPort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedConsoleServerPort = nil
	}

	// try to unmarshal data into NestedFrontPort
	err = newStrictDecoder(data).Decode(&dst.NestedFrontPort)
	if err == nil {
		jsonNestedFrontPort, _ := json.Marshal(dst.NestedFrontPort)
		if string(jsonNestedFrontPort) == "{}" { // empty struct
			dst.NestedFrontPort = nil
		} else {
			if err = validator.Validate(dst.NestedFrontPort); err != nil {
				dst.NestedFrontPort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedFrontPort = nil
	}

	// try to unmarshal data into NestedInterface
	err = newStrictDecoder(data).Decode(&dst.NestedInterface)
	if err == nil {
		jsonNestedInterface, _ := json.Marshal(dst.NestedInterface)
		if string(jsonNestedInterface) == "{}" { // empty struct
			dst.NestedInterface = nil
		} else {
			if err = validator.Validate(dst.NestedInterface); err != nil {
				dst.NestedInterface = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedInterface = nil
	}

	// try to unmarshal data into NestedPowerFeed
	err = newStrictDecoder(data).Decode(&dst.NestedPowerFeed)
	if err == nil {
		jsonNestedPowerFeed, _ := json.Marshal(dst.NestedPowerFeed)
		if string(jsonNestedPowerFeed) == "{}" { // empty struct
			dst.NestedPowerFeed = nil
		} else {
			if err = validator.Validate(dst.NestedPowerFeed); err != nil {
				dst.NestedPowerFeed = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPowerFeed = nil
	}

	// try to unmarshal data into NestedPowerOutlet
	err = newStrictDecoder(data).Decode(&dst.NestedPowerOutlet)
	if err == nil {
		jsonNestedPowerOutlet, _ := json.Marshal(dst.NestedPowerOutlet)
		if string(jsonNestedPowerOutlet) == "{}" { // empty struct
			dst.NestedPowerOutlet = nil
		} else {
			if err = validator.Validate(dst.NestedPowerOutlet); err != nil {
				dst.NestedPowerOutlet = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPowerOutlet = nil
	}

	// try to unmarshal data into NestedPowerPort
	err = newStrictDecoder(data).Decode(&dst.NestedPowerPort)
	if err == nil {
		jsonNestedPowerPort, _ := json.Marshal(dst.NestedPowerPort)
		if string(jsonNestedPowerPort) == "{}" { // empty struct
			dst.NestedPowerPort = nil
		} else {
			if err = validator.Validate(dst.NestedPowerPort); err != nil {
				dst.NestedPowerPort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPowerPort = nil
	}

	// try to unmarshal data into NestedRearPort
	err = newStrictDecoder(data).Decode(&dst.NestedRearPort)
	if err == nil {
		jsonNestedRearPort, _ := json.Marshal(dst.NestedRearPort)
		if string(jsonNestedRearPort) == "{}" { // empty struct
			dst.NestedRearPort = nil
		} else {
			if err = validator.Validate(dst.NestedRearPort); err != nil {
				dst.NestedRearPort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRearPort = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NestedCircuitTermination = nil
		dst.NestedConsolePort = nil
		dst.NestedConsoleServerPort = nil
		dst.NestedFrontPort = nil
		dst.NestedInterface = nil
		dst.NestedPowerFeed = nil
		dst.NestedPowerOutlet = nil
		dst.NestedPowerPort = nil
		dst.NestedRearPort = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CableTermination)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CableTermination)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CableTermination) MarshalJSON() ([]byte, error) {
	if src.NestedCircuitTermination != nil {
		return json.Marshal(&src.NestedCircuitTermination)
	}

	if src.NestedConsolePort != nil {
		return json.Marshal(&src.NestedConsolePort)
	}

	if src.NestedConsoleServerPort != nil {
		return json.Marshal(&src.NestedConsoleServerPort)
	}

	if src.NestedFrontPort != nil {
		return json.Marshal(&src.NestedFrontPort)
	}

	if src.NestedInterface != nil {
		return json.Marshal(&src.NestedInterface)
	}

	if src.NestedPowerFeed != nil {
		return json.Marshal(&src.NestedPowerFeed)
	}

	if src.NestedPowerOutlet != nil {
		return json.Marshal(&src.NestedPowerOutlet)
	}

	if src.NestedPowerPort != nil {
		return json.Marshal(&src.NestedPowerPort)
	}

	if src.NestedRearPort != nil {
		return json.Marshal(&src.NestedRearPort)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CableTermination) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NestedCircuitTermination != nil {
		return obj.NestedCircuitTermination
	}

	if obj.NestedConsolePort != nil {
		return obj.NestedConsolePort
	}

	if obj.NestedConsoleServerPort != nil {
		return obj.NestedConsoleServerPort
	}

	if obj.NestedFrontPort != nil {
		return obj.NestedFrontPort
	}

	if obj.NestedInterface != nil {
		return obj.NestedInterface
	}

	if obj.NestedPowerFeed != nil {
		return obj.NestedPowerFeed
	}

	if obj.NestedPowerOutlet != nil {
		return obj.NestedPowerOutlet
	}

	if obj.NestedPowerPort != nil {
		return obj.NestedPowerPort
	}

	if obj.NestedRearPort != nil {
		return obj.NestedRearPort
	}

	// all schemas are nil
	return nil
}

type NullableCableTermination struct {
	value *CableTermination
	isSet bool
}

func (v NullableCableTermination) Get() *CableTermination {
	return v.value
}

func (v *NullableCableTermination) Set(val *CableTermination) {
	v.value = val
	v.isSet = true
}

func (v NullableCableTermination) IsSet() bool {
	return v.isSet
}

func (v *NullableCableTermination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCableTermination(val *CableTermination) *NullableCableTermination {
	return &NullableCableTermination{value: val, isSet: true}
}

func (v NullableCableTermination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCableTermination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


