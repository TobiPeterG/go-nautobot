/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// checks if the CablePath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CablePath{}

// CablePath struct for CablePath
type CablePath struct {
	Id string `json:"id"`
	OriginType string `json:"origin_type"`
	Origin PathEndpoint `json:"origin"`
	DestinationType string `json:"destination_type"`
	Destination NullablePathEndpoint `json:"destination"`
	Path []CableTermination `json:"path"`
	OriginId string `json:"origin_id"`
	DestinationId NullableString `json:"destination_id,omitempty"`
	IsActive *bool `json:"is_active,omitempty"`
	IsSplit *bool `json:"is_split,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CablePath CablePath

// NewCablePath instantiates a new CablePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCablePath(id string, originType string, origin PathEndpoint, destinationType string, destination NullablePathEndpoint, path []CableTermination, originId string) *CablePath {
	this := CablePath{}
	this.Id = id
	this.OriginType = originType
	this.Origin = origin
	this.DestinationType = destinationType
	this.Destination = destination
	this.Path = path
	this.OriginId = originId
	return &this
}

// NewCablePathWithDefaults instantiates a new CablePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCablePathWithDefaults() *CablePath {
	this := CablePath{}
	return &this
}

// GetId returns the Id field value
func (o *CablePath) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CablePath) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CablePath) SetId(v string) {
	o.Id = v
}

// GetOriginType returns the OriginType field value
func (o *CablePath) GetOriginType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginType
}

// GetOriginTypeOk returns a tuple with the OriginType field value
// and a boolean to check if the value has been set.
func (o *CablePath) GetOriginTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginType, true
}

// SetOriginType sets field value
func (o *CablePath) SetOriginType(v string) {
	o.OriginType = v
}

// GetOrigin returns the Origin field value
func (o *CablePath) GetOrigin() PathEndpoint {
	if o == nil {
		var ret PathEndpoint
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *CablePath) GetOriginOk() (*PathEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *CablePath) SetOrigin(v PathEndpoint) {
	o.Origin = v
}

// GetDestinationType returns the DestinationType field value
func (o *CablePath) GetDestinationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *CablePath) GetDestinationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *CablePath) SetDestinationType(v string) {
	o.DestinationType = v
}

// GetDestination returns the Destination field value
// If the value is explicit nil, the zero value for PathEndpoint will be returned
func (o *CablePath) GetDestination() PathEndpoint {
	if o == nil || o.Destination.Get() == nil {
		var ret PathEndpoint
		return ret
	}

	return *o.Destination.Get()
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CablePath) GetDestinationOk() (*PathEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destination.Get(), o.Destination.IsSet()
}

// SetDestination sets field value
func (o *CablePath) SetDestination(v PathEndpoint) {
	o.Destination.Set(&v)
}

// GetPath returns the Path field value
func (o *CablePath) GetPath() []CableTermination {
	if o == nil {
		var ret []CableTermination
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *CablePath) GetPathOk() ([]CableTermination, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path, true
}

// SetPath sets field value
func (o *CablePath) SetPath(v []CableTermination) {
	o.Path = v
}

// GetOriginId returns the OriginId field value
func (o *CablePath) GetOriginId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginId
}

// GetOriginIdOk returns a tuple with the OriginId field value
// and a boolean to check if the value has been set.
func (o *CablePath) GetOriginIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginId, true
}

// SetOriginId sets field value
func (o *CablePath) SetOriginId(v string) {
	o.OriginId = v
}

// GetDestinationId returns the DestinationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CablePath) GetDestinationId() string {
	if o == nil || IsNil(o.DestinationId.Get()) {
		var ret string
		return ret
	}
	return *o.DestinationId.Get()
}

// GetDestinationIdOk returns a tuple with the DestinationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CablePath) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationId.Get(), o.DestinationId.IsSet()
}

// HasDestinationId returns a boolean if a field has been set.
func (o *CablePath) HasDestinationId() bool {
	if o != nil && o.DestinationId.IsSet() {
		return true
	}

	return false
}

// SetDestinationId gets a reference to the given NullableString and assigns it to the DestinationId field.
func (o *CablePath) SetDestinationId(v string) {
	o.DestinationId.Set(&v)
}
// SetDestinationIdNil sets the value for DestinationId to be an explicit nil
func (o *CablePath) SetDestinationIdNil() {
	o.DestinationId.Set(nil)
}

// UnsetDestinationId ensures that no value is present for DestinationId, not even an explicit nil
func (o *CablePath) UnsetDestinationId() {
	o.DestinationId.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *CablePath) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CablePath) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *CablePath) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *CablePath) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsSplit returns the IsSplit field value if set, zero value otherwise.
func (o *CablePath) GetIsSplit() bool {
	if o == nil || IsNil(o.IsSplit) {
		var ret bool
		return ret
	}
	return *o.IsSplit
}

// GetIsSplitOk returns a tuple with the IsSplit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CablePath) GetIsSplitOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSplit) {
		return nil, false
	}
	return o.IsSplit, true
}

// HasIsSplit returns a boolean if a field has been set.
func (o *CablePath) HasIsSplit() bool {
	if o != nil && !IsNil(o.IsSplit) {
		return true
	}

	return false
}

// SetIsSplit gets a reference to the given bool and assigns it to the IsSplit field.
func (o *CablePath) SetIsSplit(v bool) {
	o.IsSplit = &v
}

func (o CablePath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CablePath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["origin_type"] = o.OriginType
	toSerialize["origin"] = o.Origin
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["destination"] = o.Destination.Get()
	toSerialize["path"] = o.Path
	toSerialize["origin_id"] = o.OriginId
	if o.DestinationId.IsSet() {
		toSerialize["destination_id"] = o.DestinationId.Get()
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.IsSplit) {
		toSerialize["is_split"] = o.IsSplit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CablePath) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"origin_type",
		"origin",
		"destination_type",
		"destination",
		"path",
		"origin_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCablePath := _CablePath{}

	err = json.Unmarshal(data, &varCablePath)

	if err != nil {
		return err
	}

	*o = CablePath(varCablePath)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "origin_type")
		delete(additionalProperties, "origin")
		delete(additionalProperties, "destination_type")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "path")
		delete(additionalProperties, "origin_id")
		delete(additionalProperties, "destination_id")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "is_split")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCablePath struct {
	value *CablePath
	isSet bool
}

func (v NullableCablePath) Get() *CablePath {
	return v.value
}

func (v *NullableCablePath) Set(val *CablePath) {
	v.value = val
	v.isSet = true
}

func (v NullableCablePath) IsSet() bool {
	return v.isSet
}

func (v *NullableCablePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCablePath(val *CablePath) *NullableCablePath {
	return &NullableCablePath{value: val, isSet: true}
}

func (v NullableCablePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCablePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


