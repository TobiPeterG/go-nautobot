/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// PrefixTypeValue the model 'PrefixTypeValue'
type PrefixTypeValue string

// List of Prefix_type_value
const (
	PREFIXTYPEVALUE_CONTAINER PrefixTypeValue = "container"
	PREFIXTYPEVALUE_NETWORK PrefixTypeValue = "network"
	PREFIXTYPEVALUE_POOL PrefixTypeValue = "pool"
)

// All allowed values of PrefixTypeValue enum
var AllowedPrefixTypeValueEnumValues = []PrefixTypeValue{
	"container",
	"network",
	"pool",
}

func (v *PrefixTypeValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrefixTypeValue(value)
	for _, existing := range AllowedPrefixTypeValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrefixTypeValue", value)
}

// NewPrefixTypeValueFromValue returns a pointer to a valid PrefixTypeValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrefixTypeValueFromValue(v string) (*PrefixTypeValue, error) {
	ev := PrefixTypeValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrefixTypeValue: valid values are %v", v, AllowedPrefixTypeValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrefixTypeValue) IsValid() bool {
	for _, existing := range AllowedPrefixTypeValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Prefix_type_value value
func (v PrefixTypeValue) Ptr() *PrefixTypeValue {
	return &v
}

type NullablePrefixTypeValue struct {
	value *PrefixTypeValue
	isSet bool
}

func (v NullablePrefixTypeValue) Get() *PrefixTypeValue {
	return v.value
}

func (v *NullablePrefixTypeValue) Set(val *PrefixTypeValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixTypeValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixTypeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixTypeValue(val *PrefixTypeValue) *NullablePrefixTypeValue {
	return &NullablePrefixTypeValue{value: val, isSet: true}
}

func (v NullablePrefixTypeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixTypeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

