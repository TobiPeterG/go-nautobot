/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// CircuitsAPIService CircuitsAPI service
type CircuitsAPIService service

type ApiCircuitsCircuitTerminationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTerminationsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCircuitsCircuitTerminationsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCircuitsCircuitTerminationsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTerminationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsBulkDestroyExecute(r)
}

/*
CircuitsCircuitTerminationsBulkDestroy Method for CircuitsCircuitTerminationsBulkDestroy

Destroy a list of circuit termination objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTerminationsBulkDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsBulkDestroy(ctx context.Context) ApiCircuitsCircuitTerminationsBulkDestroyRequest {
	return ApiCircuitsCircuitTerminationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsCircuitTerminationsBulkDestroyExecute(r ApiCircuitsCircuitTerminationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	patchedBulkWritableCircuitTerminationRequest *[]PatchedBulkWritableCircuitTerminationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest) PatchedBulkWritableCircuitTerminationRequest(patchedBulkWritableCircuitTerminationRequest []PatchedBulkWritableCircuitTerminationRequest) ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest {
	r.patchedBulkWritableCircuitTerminationRequest = &patchedBulkWritableCircuitTerminationRequest
	return r
}

func (r ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest) Execute() ([]CircuitTermination, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsBulkPartialUpdateExecute(r)
}

/*
CircuitsCircuitTerminationsBulkPartialUpdate Method for CircuitsCircuitTerminationsBulkPartialUpdate

Partial update a list of circuit termination objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsBulkPartialUpdate(ctx context.Context) ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest {
	return ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CircuitTermination
func (a *CircuitsAPIService) CircuitsCircuitTerminationsBulkPartialUpdateExecute(r ApiCircuitsCircuitTerminationsBulkPartialUpdateRequest) ([]CircuitTermination, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CircuitTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCircuitTerminationRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCircuitTerminationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCircuitTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkWritableCircuitTerminationRequest *[]BulkWritableCircuitTerminationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTerminationsBulkUpdateRequest) BulkWritableCircuitTerminationRequest(bulkWritableCircuitTerminationRequest []BulkWritableCircuitTerminationRequest) ApiCircuitsCircuitTerminationsBulkUpdateRequest {
	r.bulkWritableCircuitTerminationRequest = &bulkWritableCircuitTerminationRequest
	return r
}

func (r ApiCircuitsCircuitTerminationsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTerminationsBulkUpdateRequest) Execute() ([]CircuitTermination, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsBulkUpdateExecute(r)
}

/*
CircuitsCircuitTerminationsBulkUpdate Method for CircuitsCircuitTerminationsBulkUpdate

Update a list of circuit termination objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTerminationsBulkUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsBulkUpdate(ctx context.Context) ApiCircuitsCircuitTerminationsBulkUpdateRequest {
	return ApiCircuitsCircuitTerminationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CircuitTermination
func (a *CircuitsAPIService) CircuitsCircuitTerminationsBulkUpdateExecute(r ApiCircuitsCircuitTerminationsBulkUpdateRequest) ([]CircuitTermination, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CircuitTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCircuitTerminationRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCircuitTerminationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCircuitTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	circuitTerminationRequest *CircuitTerminationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTerminationsCreateRequest) CircuitTerminationRequest(circuitTerminationRequest CircuitTerminationRequest) ApiCircuitsCircuitTerminationsCreateRequest {
	r.circuitTerminationRequest = &circuitTerminationRequest
	return r
}

func (r ApiCircuitsCircuitTerminationsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTerminationsCreateRequest) Execute() (*CircuitTermination, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsCreateExecute(r)
}

/*
CircuitsCircuitTerminationsCreate Method for CircuitsCircuitTerminationsCreate

Create one or more circuit termination objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTerminationsCreateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsCreate(ctx context.Context) ApiCircuitsCircuitTerminationsCreateRequest {
	return ApiCircuitsCircuitTerminationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CircuitTermination
func (a *CircuitsAPIService) CircuitsCircuitTerminationsCreateExecute(r ApiCircuitsCircuitTerminationsCreateRequest) (*CircuitTermination, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CircuitTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.circuitTerminationRequest == nil {
		return localVarReturnValue, nil, reportError("circuitTerminationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.circuitTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTerminationsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTerminationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsDestroyExecute(r)
}

/*
CircuitsCircuitTerminationsDestroy Method for CircuitsCircuitTerminationsDestroy

Destroy a circuit termination object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit termination.
 @return ApiCircuitsCircuitTerminationsDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsDestroy(ctx context.Context, id string) ApiCircuitsCircuitTerminationsDestroyRequest {
	return ApiCircuitsCircuitTerminationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsCircuitTerminationsDestroyExecute(r ApiCircuitsCircuitTerminationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	cable *[]string
	cableIsnull *bool
	cableN *[]string
	circuit *[]string
	circuitN *[]string
	connected *bool
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasCable *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	location *[]string
	locationIsnull *bool
	locationN *[]string
	offset *int32
	portSpeed *[]int32
	portSpeedGt *[]int32
	portSpeedGte *[]int32
	portSpeedIsnull *bool
	portSpeedLt *[]int32
	portSpeedLte *[]int32
	portSpeedN *[]int32
	ppInfo *[]string
	ppInfoIc *[]string
	ppInfoIe *[]string
	ppInfoIew *[]string
	ppInfoIre *[]string
	ppInfoIsw *[]string
	ppInfoN *[]string
	ppInfoNic *[]string
	ppInfoNie *[]string
	ppInfoNiew *[]string
	ppInfoNire *[]string
	ppInfoNisw *[]string
	ppInfoNre *[]string
	ppInfoRe *[]string
	providerNetwork *[]string
	providerNetworkIsnull *bool
	providerNetworkN *[]string
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	termSide *[]string
	termSideIc *[]string
	termSideIe *[]string
	termSideIew *[]string
	termSideIre *[]string
	termSideIsw *[]string
	termSideN *[]string
	termSideNic *[]string
	termSideNie *[]string
	termSideNiew *[]string
	termSideNire *[]string
	termSideNisw *[]string
	termSideNre *[]string
	termSideRe *[]string
	upstreamSpeed *[]int32
	upstreamSpeedGt *[]int32
	upstreamSpeedGte *[]int32
	upstreamSpeedIsnull *bool
	upstreamSpeedLt *[]int32
	upstreamSpeedLte *[]int32
	upstreamSpeedN *[]int32
	xconnectId *[]string
	xconnectIdIc *[]string
	xconnectIdIe *[]string
	xconnectIdIew *[]string
	xconnectIdIre *[]string
	xconnectIdIsw *[]string
	xconnectIdN *[]string
	xconnectIdNic *[]string
	xconnectIdNie *[]string
	xconnectIdNiew *[]string
	xconnectIdNire *[]string
	xconnectIdNisw *[]string
	xconnectIdNre *[]string
	xconnectIdRe *[]string
	depth *int32
}

// Cable
func (r ApiCircuitsCircuitTerminationsListRequest) Cable(cable []string) ApiCircuitsCircuitTerminationsListRequest {
	r.cable = &cable
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) CableIsnull(cableIsnull bool) ApiCircuitsCircuitTerminationsListRequest {
	r.cableIsnull = &cableIsnull
	return r
}

// Cable
func (r ApiCircuitsCircuitTerminationsListRequest) CableN(cableN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.cableN = &cableN
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) Circuit(circuit []string) ApiCircuitsCircuitTerminationsListRequest {
	r.circuit = &circuit
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) CircuitN(circuitN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.circuitN = &circuitN
	return r
}

// Connected status (bool)
func (r ApiCircuitsCircuitTerminationsListRequest) Connected(connected bool) ApiCircuitsCircuitTerminationsListRequest {
	r.connected = &connected
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) Description(description []string) ApiCircuitsCircuitTerminationsListRequest {
	r.description = &description
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionIc(descriptionIc []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionIe(descriptionIe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionIew(descriptionIew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionIre(descriptionIre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionIsw(descriptionIsw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionN(descriptionN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionNic(descriptionNic []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionNie(descriptionNie []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionNiew(descriptionNiew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionNire(descriptionNire []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionNisw(descriptionNisw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionNre(descriptionNre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) DescriptionRe(descriptionRe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsListRequest {
	r.format = &format
	return r
}

// Has cable
func (r ApiCircuitsCircuitTerminationsListRequest) HasCable(hasCable bool) ApiCircuitsCircuitTerminationsListRequest {
	r.hasCable = &hasCable
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCircuitsCircuitTerminationsListRequest) Id(id []string) ApiCircuitsCircuitTerminationsListRequest {
	r.id = &id
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdIc(idIc []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdIe(idIe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdIew(idIew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdIre(idIre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdIsw(idIsw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdN(idN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdNic(idNic []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdNie(idNie []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdNiew(idNiew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdNire(idNire []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdNisw(idNisw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdNre(idNre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) IdRe(idRe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiCircuitsCircuitTerminationsListRequest) Limit(limit int32) ApiCircuitsCircuitTerminationsListRequest {
	r.limit = &limit
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) Location(location []string) ApiCircuitsCircuitTerminationsListRequest {
	r.location = &location
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) LocationIsnull(locationIsnull bool) ApiCircuitsCircuitTerminationsListRequest {
	r.locationIsnull = &locationIsnull
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) LocationN(locationN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.locationN = &locationN
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsCircuitTerminationsListRequest) Offset(offset int32) ApiCircuitsCircuitTerminationsListRequest {
	r.offset = &offset
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PortSpeed(portSpeed []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.portSpeed = &portSpeed
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PortSpeedGt(portSpeedGt []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.portSpeedGt = &portSpeedGt
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PortSpeedGte(portSpeedGte []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.portSpeedGte = &portSpeedGte
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PortSpeedIsnull(portSpeedIsnull bool) ApiCircuitsCircuitTerminationsListRequest {
	r.portSpeedIsnull = &portSpeedIsnull
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PortSpeedLt(portSpeedLt []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.portSpeedLt = &portSpeedLt
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PortSpeedLte(portSpeedLte []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.portSpeedLte = &portSpeedLte
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PortSpeedN(portSpeedN []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.portSpeedN = &portSpeedN
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfo(ppInfo []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfo = &ppInfo
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoIc(ppInfoIc []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoIc = &ppInfoIc
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoIe(ppInfoIe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoIe = &ppInfoIe
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoIew(ppInfoIew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoIew = &ppInfoIew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoIre(ppInfoIre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoIre = &ppInfoIre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoIsw(ppInfoIsw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoIsw = &ppInfoIsw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoN(ppInfoN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoN = &ppInfoN
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoNic(ppInfoNic []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoNic = &ppInfoNic
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoNie(ppInfoNie []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoNie = &ppInfoNie
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoNiew(ppInfoNiew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoNiew = &ppInfoNiew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoNire(ppInfoNire []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoNire = &ppInfoNire
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoNisw(ppInfoNisw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoNisw = &ppInfoNisw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoNre(ppInfoNre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoNre = &ppInfoNre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) PpInfoRe(ppInfoRe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.ppInfoRe = &ppInfoRe
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) ProviderNetwork(providerNetwork []string) ApiCircuitsCircuitTerminationsListRequest {
	r.providerNetwork = &providerNetwork
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) ProviderNetworkIsnull(providerNetworkIsnull bool) ApiCircuitsCircuitTerminationsListRequest {
	r.providerNetworkIsnull = &providerNetworkIsnull
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) ProviderNetworkN(providerNetworkN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.providerNetworkN = &providerNetworkN
	return r
}

// Search
func (r ApiCircuitsCircuitTerminationsListRequest) Q(q string) ApiCircuitsCircuitTerminationsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCircuitsCircuitTerminationsListRequest) Sort(sort string) ApiCircuitsCircuitTerminationsListRequest {
	r.sort = &sort
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) Tags(tags []string) ApiCircuitsCircuitTerminationsListRequest {
	r.tags = &tags
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TagsIsnull(tagsIsnull bool) ApiCircuitsCircuitTerminationsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TagsN(tagsN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSide(termSide []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSide = &termSide
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideIc(termSideIc []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideIc = &termSideIc
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideIe(termSideIe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideIe = &termSideIe
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideIew(termSideIew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideIew = &termSideIew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideIre(termSideIre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideIre = &termSideIre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideIsw(termSideIsw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideIsw = &termSideIsw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideN(termSideN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideN = &termSideN
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideNic(termSideNic []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideNic = &termSideNic
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideNie(termSideNie []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideNie = &termSideNie
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideNiew(termSideNiew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideNiew = &termSideNiew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideNire(termSideNire []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideNire = &termSideNire
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideNisw(termSideNisw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideNisw = &termSideNisw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideNre(termSideNre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideNre = &termSideNre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) TermSideRe(termSideRe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.termSideRe = &termSideRe
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) UpstreamSpeed(upstreamSpeed []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.upstreamSpeed = &upstreamSpeed
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) UpstreamSpeedGt(upstreamSpeedGt []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.upstreamSpeedGt = &upstreamSpeedGt
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) UpstreamSpeedGte(upstreamSpeedGte []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.upstreamSpeedGte = &upstreamSpeedGte
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) UpstreamSpeedIsnull(upstreamSpeedIsnull bool) ApiCircuitsCircuitTerminationsListRequest {
	r.upstreamSpeedIsnull = &upstreamSpeedIsnull
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) UpstreamSpeedLt(upstreamSpeedLt []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.upstreamSpeedLt = &upstreamSpeedLt
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) UpstreamSpeedLte(upstreamSpeedLte []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.upstreamSpeedLte = &upstreamSpeedLte
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) UpstreamSpeedN(upstreamSpeedN []int32) ApiCircuitsCircuitTerminationsListRequest {
	r.upstreamSpeedN = &upstreamSpeedN
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectId(xconnectId []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectId = &xconnectId
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdIc(xconnectIdIc []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdIc = &xconnectIdIc
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdIe(xconnectIdIe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdIe = &xconnectIdIe
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdIew(xconnectIdIew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdIew = &xconnectIdIew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdIre(xconnectIdIre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdIre = &xconnectIdIre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdIsw(xconnectIdIsw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdIsw = &xconnectIdIsw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdN(xconnectIdN []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdN = &xconnectIdN
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdNic(xconnectIdNic []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdNic = &xconnectIdNic
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdNie(xconnectIdNie []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdNie = &xconnectIdNie
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdNiew(xconnectIdNiew []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdNiew = &xconnectIdNiew
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdNire(xconnectIdNire []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdNire = &xconnectIdNire
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdNisw(xconnectIdNisw []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdNisw = &xconnectIdNisw
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdNre(xconnectIdNre []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdNre = &xconnectIdNre
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) XconnectIdRe(xconnectIdRe []string) ApiCircuitsCircuitTerminationsListRequest {
	r.xconnectIdRe = &xconnectIdRe
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitTerminationsListRequest) Depth(depth int32) ApiCircuitsCircuitTerminationsListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitTerminationsListRequest) Execute() (*PaginatedCircuitTerminationList, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsListExecute(r)
}

/*
CircuitsCircuitTerminationsList Method for CircuitsCircuitTerminationsList

Retrieve a list of circuit termination objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTerminationsListRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsList(ctx context.Context) ApiCircuitsCircuitTerminationsListRequest {
	return ApiCircuitsCircuitTerminationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCircuitTerminationList
func (a *CircuitsAPIService) CircuitsCircuitTerminationsListExecute(r ApiCircuitsCircuitTerminationsListRequest) (*PaginatedCircuitTerminationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCircuitTerminationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cable != nil {
		t := *r.cable
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable", t, "form", "multi")
		}
	}
	if r.cableIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable__isnull", r.cableIsnull, "form", "")
	}
	if r.cableN != nil {
		t := *r.cableN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable__n", t, "form", "multi")
		}
	}
	if r.circuit != nil {
		t := *r.circuit
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit", t, "form", "multi")
		}
	}
	if r.circuitN != nil {
		t := *r.circuitN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit__n", t, "form", "multi")
		}
	}
	if r.connected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connected", r.connected, "form", "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.hasCable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_cable", r.hasCable, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "form", "multi")
		}
	}
	if r.locationIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location__isnull", r.locationIsnull, "form", "")
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.portSpeed != nil {
		t := *r.portSpeed
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed", t, "form", "multi")
		}
	}
	if r.portSpeedGt != nil {
		t := *r.portSpeedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__gt", t, "form", "multi")
		}
	}
	if r.portSpeedGte != nil {
		t := *r.portSpeedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__gte", t, "form", "multi")
		}
	}
	if r.portSpeedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__isnull", r.portSpeedIsnull, "form", "")
	}
	if r.portSpeedLt != nil {
		t := *r.portSpeedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__lt", t, "form", "multi")
		}
	}
	if r.portSpeedLte != nil {
		t := *r.portSpeedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__lte", t, "form", "multi")
		}
	}
	if r.portSpeedN != nil {
		t := *r.portSpeedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "port_speed__n", t, "form", "multi")
		}
	}
	if r.ppInfo != nil {
		t := *r.ppInfo
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info", t, "form", "multi")
		}
	}
	if r.ppInfoIc != nil {
		t := *r.ppInfoIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__ic", t, "form", "multi")
		}
	}
	if r.ppInfoIe != nil {
		t := *r.ppInfoIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__ie", t, "form", "multi")
		}
	}
	if r.ppInfoIew != nil {
		t := *r.ppInfoIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__iew", t, "form", "multi")
		}
	}
	if r.ppInfoIre != nil {
		t := *r.ppInfoIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__ire", t, "form", "multi")
		}
	}
	if r.ppInfoIsw != nil {
		t := *r.ppInfoIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__isw", t, "form", "multi")
		}
	}
	if r.ppInfoN != nil {
		t := *r.ppInfoN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__n", t, "form", "multi")
		}
	}
	if r.ppInfoNic != nil {
		t := *r.ppInfoNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nic", t, "form", "multi")
		}
	}
	if r.ppInfoNie != nil {
		t := *r.ppInfoNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nie", t, "form", "multi")
		}
	}
	if r.ppInfoNiew != nil {
		t := *r.ppInfoNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__niew", t, "form", "multi")
		}
	}
	if r.ppInfoNire != nil {
		t := *r.ppInfoNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nire", t, "form", "multi")
		}
	}
	if r.ppInfoNisw != nil {
		t := *r.ppInfoNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nisw", t, "form", "multi")
		}
	}
	if r.ppInfoNre != nil {
		t := *r.ppInfoNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__nre", t, "form", "multi")
		}
	}
	if r.ppInfoRe != nil {
		t := *r.ppInfoRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pp_info__re", t, "form", "multi")
		}
	}
	if r.providerNetwork != nil {
		t := *r.providerNetwork
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network", t, "form", "multi")
		}
	}
	if r.providerNetworkIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network__isnull", r.providerNetworkIsnull, "form", "")
	}
	if r.providerNetworkN != nil {
		t := *r.providerNetworkN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.termSide != nil {
		t := *r.termSide
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side", t, "form", "multi")
		}
	}
	if r.termSideIc != nil {
		t := *r.termSideIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__ic", t, "form", "multi")
		}
	}
	if r.termSideIe != nil {
		t := *r.termSideIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__ie", t, "form", "multi")
		}
	}
	if r.termSideIew != nil {
		t := *r.termSideIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__iew", t, "form", "multi")
		}
	}
	if r.termSideIre != nil {
		t := *r.termSideIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__ire", t, "form", "multi")
		}
	}
	if r.termSideIsw != nil {
		t := *r.termSideIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__isw", t, "form", "multi")
		}
	}
	if r.termSideN != nil {
		t := *r.termSideN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__n", t, "form", "multi")
		}
	}
	if r.termSideNic != nil {
		t := *r.termSideNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nic", t, "form", "multi")
		}
	}
	if r.termSideNie != nil {
		t := *r.termSideNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nie", t, "form", "multi")
		}
	}
	if r.termSideNiew != nil {
		t := *r.termSideNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__niew", t, "form", "multi")
		}
	}
	if r.termSideNire != nil {
		t := *r.termSideNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nire", t, "form", "multi")
		}
	}
	if r.termSideNisw != nil {
		t := *r.termSideNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nisw", t, "form", "multi")
		}
	}
	if r.termSideNre != nil {
		t := *r.termSideNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__nre", t, "form", "multi")
		}
	}
	if r.termSideRe != nil {
		t := *r.termSideRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "term_side__re", t, "form", "multi")
		}
	}
	if r.upstreamSpeed != nil {
		t := *r.upstreamSpeed
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed", t, "form", "multi")
		}
	}
	if r.upstreamSpeedGt != nil {
		t := *r.upstreamSpeedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__gt", t, "form", "multi")
		}
	}
	if r.upstreamSpeedGte != nil {
		t := *r.upstreamSpeedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__gte", t, "form", "multi")
		}
	}
	if r.upstreamSpeedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__isnull", r.upstreamSpeedIsnull, "form", "")
	}
	if r.upstreamSpeedLt != nil {
		t := *r.upstreamSpeedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__lt", t, "form", "multi")
		}
	}
	if r.upstreamSpeedLte != nil {
		t := *r.upstreamSpeedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__lte", t, "form", "multi")
		}
	}
	if r.upstreamSpeedN != nil {
		t := *r.upstreamSpeedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "upstream_speed__n", t, "form", "multi")
		}
	}
	if r.xconnectId != nil {
		t := *r.xconnectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id", t, "form", "multi")
		}
	}
	if r.xconnectIdIc != nil {
		t := *r.xconnectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__ic", t, "form", "multi")
		}
	}
	if r.xconnectIdIe != nil {
		t := *r.xconnectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__ie", t, "form", "multi")
		}
	}
	if r.xconnectIdIew != nil {
		t := *r.xconnectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__iew", t, "form", "multi")
		}
	}
	if r.xconnectIdIre != nil {
		t := *r.xconnectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__ire", t, "form", "multi")
		}
	}
	if r.xconnectIdIsw != nil {
		t := *r.xconnectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__isw", t, "form", "multi")
		}
	}
	if r.xconnectIdN != nil {
		t := *r.xconnectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__n", t, "form", "multi")
		}
	}
	if r.xconnectIdNic != nil {
		t := *r.xconnectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nic", t, "form", "multi")
		}
	}
	if r.xconnectIdNie != nil {
		t := *r.xconnectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nie", t, "form", "multi")
		}
	}
	if r.xconnectIdNiew != nil {
		t := *r.xconnectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__niew", t, "form", "multi")
		}
	}
	if r.xconnectIdNire != nil {
		t := *r.xconnectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nire", t, "form", "multi")
		}
	}
	if r.xconnectIdNisw != nil {
		t := *r.xconnectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nisw", t, "form", "multi")
		}
	}
	if r.xconnectIdNre != nil {
		t := *r.xconnectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__nre", t, "form", "multi")
		}
	}
	if r.xconnectIdRe != nil {
		t := *r.xconnectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "xconnect_id__re", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsNotesCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTerminationsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCircuitsCircuitTerminationsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCircuitsCircuitTerminationsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTerminationsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsNotesCreateExecute(r)
}

/*
CircuitsCircuitTerminationsNotesCreate Method for CircuitsCircuitTerminationsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit termination.
 @return ApiCircuitsCircuitTerminationsNotesCreateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsNotesCreate(ctx context.Context, id string) ApiCircuitsCircuitTerminationsNotesCreateRequest {
	return ApiCircuitsCircuitTerminationsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CircuitsAPIService) CircuitsCircuitTerminationsNotesCreateExecute(r ApiCircuitsCircuitTerminationsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsNotesListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCircuitsCircuitTerminationsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCircuitsCircuitTerminationsNotesListRequest) Limit(limit int32) ApiCircuitsCircuitTerminationsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsCircuitTerminationsNotesListRequest) Offset(offset int32) ApiCircuitsCircuitTerminationsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitTerminationsNotesListRequest) Depth(depth int32) ApiCircuitsCircuitTerminationsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitTerminationsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsNotesListExecute(r)
}

/*
CircuitsCircuitTerminationsNotesList Method for CircuitsCircuitTerminationsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit termination.
 @return ApiCircuitsCircuitTerminationsNotesListRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsNotesList(ctx context.Context, id string) ApiCircuitsCircuitTerminationsNotesListRequest {
	return ApiCircuitsCircuitTerminationsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CircuitsAPIService) CircuitsCircuitTerminationsNotesListExecute(r ApiCircuitsCircuitTerminationsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCircuitTerminationRequest *PatchedCircuitTerminationRequest
}

func (r ApiCircuitsCircuitTerminationsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTerminationsPartialUpdateRequest) PatchedCircuitTerminationRequest(patchedCircuitTerminationRequest PatchedCircuitTerminationRequest) ApiCircuitsCircuitTerminationsPartialUpdateRequest {
	r.patchedCircuitTerminationRequest = &patchedCircuitTerminationRequest
	return r
}

func (r ApiCircuitsCircuitTerminationsPartialUpdateRequest) Execute() (*CircuitTermination, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsPartialUpdateExecute(r)
}

/*
CircuitsCircuitTerminationsPartialUpdate Method for CircuitsCircuitTerminationsPartialUpdate

Partial update a circuit termination object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit termination.
 @return ApiCircuitsCircuitTerminationsPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsPartialUpdate(ctx context.Context, id string) ApiCircuitsCircuitTerminationsPartialUpdateRequest {
	return ApiCircuitsCircuitTerminationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CircuitTermination
func (a *CircuitsAPIService) CircuitsCircuitTerminationsPartialUpdateExecute(r ApiCircuitsCircuitTerminationsPartialUpdateRequest) (*CircuitTermination, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CircuitTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCircuitTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsRetrieveRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCircuitsCircuitTerminationsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitTerminationsRetrieveRequest) Depth(depth int32) ApiCircuitsCircuitTerminationsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitTerminationsRetrieveRequest) Execute() (*CircuitTermination, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsRetrieveExecute(r)
}

/*
CircuitsCircuitTerminationsRetrieve Method for CircuitsCircuitTerminationsRetrieve

Retrieve a circuit termination object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit termination.
 @return ApiCircuitsCircuitTerminationsRetrieveRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsRetrieve(ctx context.Context, id string) ApiCircuitsCircuitTerminationsRetrieveRequest {
	return ApiCircuitsCircuitTerminationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CircuitTermination
func (a *CircuitsAPIService) CircuitsCircuitTerminationsRetrieveExecute(r ApiCircuitsCircuitTerminationsRetrieveRequest) (*CircuitTermination, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CircuitTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsTraceRetrieveRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCircuitsCircuitTerminationsTraceRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsTraceRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitTerminationsTraceRetrieveRequest) Depth(depth int32) ApiCircuitsCircuitTerminationsTraceRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitTerminationsTraceRetrieveRequest) Execute() (*CircuitTermination, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsTraceRetrieveExecute(r)
}

/*
CircuitsCircuitTerminationsTraceRetrieve Method for CircuitsCircuitTerminationsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit termination.
 @return ApiCircuitsCircuitTerminationsTraceRetrieveRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsTraceRetrieve(ctx context.Context, id string) ApiCircuitsCircuitTerminationsTraceRetrieveRequest {
	return ApiCircuitsCircuitTerminationsTraceRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CircuitTermination
func (a *CircuitsAPIService) CircuitsCircuitTerminationsTraceRetrieveExecute(r ApiCircuitsCircuitTerminationsTraceRetrieveRequest) (*CircuitTermination, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CircuitTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTerminationsUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	circuitTerminationRequest *CircuitTerminationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTerminationsUpdateRequest) CircuitTerminationRequest(circuitTerminationRequest CircuitTerminationRequest) ApiCircuitsCircuitTerminationsUpdateRequest {
	r.circuitTerminationRequest = &circuitTerminationRequest
	return r
}

func (r ApiCircuitsCircuitTerminationsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTerminationsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTerminationsUpdateRequest) Execute() (*CircuitTermination, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTerminationsUpdateExecute(r)
}

/*
CircuitsCircuitTerminationsUpdate Method for CircuitsCircuitTerminationsUpdate

Update a circuit termination object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit termination.
 @return ApiCircuitsCircuitTerminationsUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTerminationsUpdate(ctx context.Context, id string) ApiCircuitsCircuitTerminationsUpdateRequest {
	return ApiCircuitsCircuitTerminationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CircuitTermination
func (a *CircuitsAPIService) CircuitsCircuitTerminationsUpdateExecute(r ApiCircuitsCircuitTerminationsUpdateRequest) (*CircuitTermination, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CircuitTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTerminationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-terminations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.circuitTerminationRequest == nil {
		return localVarReturnValue, nil, reportError("circuitTerminationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.circuitTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTypesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCircuitsCircuitTypesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCircuitsCircuitTypesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTypesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesBulkDestroyExecute(r)
}

/*
CircuitsCircuitTypesBulkDestroy Method for CircuitsCircuitTypesBulkDestroy

Destroy a list of circuit type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTypesBulkDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesBulkDestroy(ctx context.Context) ApiCircuitsCircuitTypesBulkDestroyRequest {
	return ApiCircuitsCircuitTypesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsCircuitTypesBulkDestroyExecute(r ApiCircuitsCircuitTypesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	patchedBulkWritableCircuitTypeRequest *[]PatchedBulkWritableCircuitTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTypesBulkPartialUpdateRequest) PatchedBulkWritableCircuitTypeRequest(patchedBulkWritableCircuitTypeRequest []PatchedBulkWritableCircuitTypeRequest) ApiCircuitsCircuitTypesBulkPartialUpdateRequest {
	r.patchedBulkWritableCircuitTypeRequest = &patchedBulkWritableCircuitTypeRequest
	return r
}

func (r ApiCircuitsCircuitTypesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTypesBulkPartialUpdateRequest) Execute() ([]CircuitType, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesBulkPartialUpdateExecute(r)
}

/*
CircuitsCircuitTypesBulkPartialUpdate Method for CircuitsCircuitTypesBulkPartialUpdate

Partial update a list of circuit type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTypesBulkPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesBulkPartialUpdate(ctx context.Context) ApiCircuitsCircuitTypesBulkPartialUpdateRequest {
	return ApiCircuitsCircuitTypesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CircuitType
func (a *CircuitsAPIService) CircuitsCircuitTypesBulkPartialUpdateExecute(r ApiCircuitsCircuitTypesBulkPartialUpdateRequest) ([]CircuitType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CircuitType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCircuitTypeRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCircuitTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCircuitTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkWritableCircuitTypeRequest *[]BulkWritableCircuitTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTypesBulkUpdateRequest) BulkWritableCircuitTypeRequest(bulkWritableCircuitTypeRequest []BulkWritableCircuitTypeRequest) ApiCircuitsCircuitTypesBulkUpdateRequest {
	r.bulkWritableCircuitTypeRequest = &bulkWritableCircuitTypeRequest
	return r
}

func (r ApiCircuitsCircuitTypesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTypesBulkUpdateRequest) Execute() ([]CircuitType, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesBulkUpdateExecute(r)
}

/*
CircuitsCircuitTypesBulkUpdate Method for CircuitsCircuitTypesBulkUpdate

Update a list of circuit type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTypesBulkUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesBulkUpdate(ctx context.Context) ApiCircuitsCircuitTypesBulkUpdateRequest {
	return ApiCircuitsCircuitTypesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CircuitType
func (a *CircuitsAPIService) CircuitsCircuitTypesBulkUpdateExecute(r ApiCircuitsCircuitTypesBulkUpdateRequest) ([]CircuitType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CircuitType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCircuitTypeRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCircuitTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCircuitTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	circuitTypeRequest *CircuitTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTypesCreateRequest) CircuitTypeRequest(circuitTypeRequest CircuitTypeRequest) ApiCircuitsCircuitTypesCreateRequest {
	r.circuitTypeRequest = &circuitTypeRequest
	return r
}

func (r ApiCircuitsCircuitTypesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTypesCreateRequest) Execute() (*CircuitType, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesCreateExecute(r)
}

/*
CircuitsCircuitTypesCreate Method for CircuitsCircuitTypesCreate

Create one or more circuit type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTypesCreateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesCreate(ctx context.Context) ApiCircuitsCircuitTypesCreateRequest {
	return ApiCircuitsCircuitTypesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CircuitType
func (a *CircuitsAPIService) CircuitsCircuitTypesCreateExecute(r ApiCircuitsCircuitTypesCreateRequest) (*CircuitType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CircuitType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.circuitTypeRequest == nil {
		return localVarReturnValue, nil, reportError("circuitTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.circuitTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTypesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTypesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesDestroyExecute(r)
}

/*
CircuitsCircuitTypesDestroy Method for CircuitsCircuitTypesDestroy

Destroy a circuit type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit type.
 @return ApiCircuitsCircuitTypesDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesDestroy(ctx context.Context, id string) ApiCircuitsCircuitTypesDestroyRequest {
	return ApiCircuitsCircuitTypesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsCircuitTypesDestroyExecute(r ApiCircuitsCircuitTypesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	depth *int32
}

func (r ApiCircuitsCircuitTypesListRequest) Created(created []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.created = &created
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) CreatedGt(createdGt []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) CreatedGte(createdGte []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) CreatedIsnull(createdIsnull bool) ApiCircuitsCircuitTypesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) CreatedLt(createdLt []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) CreatedLte(createdLte []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) CreatedN(createdN []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) Description(description []string) ApiCircuitsCircuitTypesListRequest {
	r.description = &description
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionIc(descriptionIc []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionIe(descriptionIe []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionIew(descriptionIew []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionIre(descriptionIre []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionIsw(descriptionIsw []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionN(descriptionN []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionNic(descriptionNic []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionNie(descriptionNie []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionNiew(descriptionNiew []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionNire(descriptionNire []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionNisw(descriptionNisw []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionNre(descriptionNre []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) DescriptionRe(descriptionRe []string) ApiCircuitsCircuitTypesListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCircuitsCircuitTypesListRequest) Id(id []string) ApiCircuitsCircuitTypesListRequest {
	r.id = &id
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdIc(idIc []string) ApiCircuitsCircuitTypesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdIe(idIe []string) ApiCircuitsCircuitTypesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdIew(idIew []string) ApiCircuitsCircuitTypesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdIre(idIre []string) ApiCircuitsCircuitTypesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdIsw(idIsw []string) ApiCircuitsCircuitTypesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdN(idN []string) ApiCircuitsCircuitTypesListRequest {
	r.idN = &idN
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdNic(idNic []string) ApiCircuitsCircuitTypesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdNie(idNie []string) ApiCircuitsCircuitTypesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdNiew(idNiew []string) ApiCircuitsCircuitTypesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdNire(idNire []string) ApiCircuitsCircuitTypesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdNisw(idNisw []string) ApiCircuitsCircuitTypesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdNre(idNre []string) ApiCircuitsCircuitTypesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) IdRe(idRe []string) ApiCircuitsCircuitTypesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) LastUpdated(lastUpdated []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiCircuitsCircuitTypesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCircuitsCircuitTypesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCircuitsCircuitTypesListRequest) Limit(limit int32) ApiCircuitsCircuitTypesListRequest {
	r.limit = &limit
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) Name(name []string) ApiCircuitsCircuitTypesListRequest {
	r.name = &name
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameIc(nameIc []string) ApiCircuitsCircuitTypesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameIe(nameIe []string) ApiCircuitsCircuitTypesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameIew(nameIew []string) ApiCircuitsCircuitTypesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameIre(nameIre []string) ApiCircuitsCircuitTypesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameIsw(nameIsw []string) ApiCircuitsCircuitTypesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameN(nameN []string) ApiCircuitsCircuitTypesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameNic(nameNic []string) ApiCircuitsCircuitTypesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameNie(nameNie []string) ApiCircuitsCircuitTypesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameNiew(nameNiew []string) ApiCircuitsCircuitTypesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameNire(nameNire []string) ApiCircuitsCircuitTypesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameNisw(nameNisw []string) ApiCircuitsCircuitTypesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameNre(nameNre []string) ApiCircuitsCircuitTypesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) NameRe(nameRe []string) ApiCircuitsCircuitTypesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsCircuitTypesListRequest) Offset(offset int32) ApiCircuitsCircuitTypesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiCircuitsCircuitTypesListRequest) Q(q string) ApiCircuitsCircuitTypesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCircuitsCircuitTypesListRequest) Sort(sort string) ApiCircuitsCircuitTypesListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitTypesListRequest) Depth(depth int32) ApiCircuitsCircuitTypesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitTypesListRequest) Execute() (*PaginatedCircuitTypeList, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesListExecute(r)
}

/*
CircuitsCircuitTypesList Method for CircuitsCircuitTypesList

Retrieve a list of circuit type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitTypesListRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesList(ctx context.Context) ApiCircuitsCircuitTypesListRequest {
	return ApiCircuitsCircuitTypesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCircuitTypeList
func (a *CircuitsAPIService) CircuitsCircuitTypesListExecute(r ApiCircuitsCircuitTypesListRequest) (*PaginatedCircuitTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCircuitTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesNotesCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTypesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCircuitsCircuitTypesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCircuitsCircuitTypesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTypesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesNotesCreateExecute(r)
}

/*
CircuitsCircuitTypesNotesCreate Method for CircuitsCircuitTypesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit type.
 @return ApiCircuitsCircuitTypesNotesCreateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesNotesCreate(ctx context.Context, id string) ApiCircuitsCircuitTypesNotesCreateRequest {
	return ApiCircuitsCircuitTypesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CircuitsAPIService) CircuitsCircuitTypesNotesCreateExecute(r ApiCircuitsCircuitTypesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesNotesListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCircuitsCircuitTypesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCircuitsCircuitTypesNotesListRequest) Limit(limit int32) ApiCircuitsCircuitTypesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsCircuitTypesNotesListRequest) Offset(offset int32) ApiCircuitsCircuitTypesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitTypesNotesListRequest) Depth(depth int32) ApiCircuitsCircuitTypesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitTypesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesNotesListExecute(r)
}

/*
CircuitsCircuitTypesNotesList Method for CircuitsCircuitTypesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit type.
 @return ApiCircuitsCircuitTypesNotesListRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesNotesList(ctx context.Context, id string) ApiCircuitsCircuitTypesNotesListRequest {
	return ApiCircuitsCircuitTypesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CircuitsAPIService) CircuitsCircuitTypesNotesListExecute(r ApiCircuitsCircuitTypesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCircuitTypeRequest *PatchedCircuitTypeRequest
}

func (r ApiCircuitsCircuitTypesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTypesPartialUpdateRequest) PatchedCircuitTypeRequest(patchedCircuitTypeRequest PatchedCircuitTypeRequest) ApiCircuitsCircuitTypesPartialUpdateRequest {
	r.patchedCircuitTypeRequest = &patchedCircuitTypeRequest
	return r
}

func (r ApiCircuitsCircuitTypesPartialUpdateRequest) Execute() (*CircuitType, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesPartialUpdateExecute(r)
}

/*
CircuitsCircuitTypesPartialUpdate Method for CircuitsCircuitTypesPartialUpdate

Partial update a circuit type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit type.
 @return ApiCircuitsCircuitTypesPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesPartialUpdate(ctx context.Context, id string) ApiCircuitsCircuitTypesPartialUpdateRequest {
	return ApiCircuitsCircuitTypesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CircuitType
func (a *CircuitsAPIService) CircuitsCircuitTypesPartialUpdateExecute(r ApiCircuitsCircuitTypesPartialUpdateRequest) (*CircuitType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CircuitType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCircuitTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesRetrieveRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCircuitsCircuitTypesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitTypesRetrieveRequest) Depth(depth int32) ApiCircuitsCircuitTypesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitTypesRetrieveRequest) Execute() (*CircuitType, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesRetrieveExecute(r)
}

/*
CircuitsCircuitTypesRetrieve Method for CircuitsCircuitTypesRetrieve

Retrieve a circuit type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit type.
 @return ApiCircuitsCircuitTypesRetrieveRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesRetrieve(ctx context.Context, id string) ApiCircuitsCircuitTypesRetrieveRequest {
	return ApiCircuitsCircuitTypesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CircuitType
func (a *CircuitsAPIService) CircuitsCircuitTypesRetrieveExecute(r ApiCircuitsCircuitTypesRetrieveRequest) (*CircuitType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CircuitType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitTypesUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	circuitTypeRequest *CircuitTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitTypesUpdateRequest) CircuitTypeRequest(circuitTypeRequest CircuitTypeRequest) ApiCircuitsCircuitTypesUpdateRequest {
	r.circuitTypeRequest = &circuitTypeRequest
	return r
}

func (r ApiCircuitsCircuitTypesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitTypesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitTypesUpdateRequest) Execute() (*CircuitType, *http.Response, error) {
	return r.ApiService.CircuitsCircuitTypesUpdateExecute(r)
}

/*
CircuitsCircuitTypesUpdate Method for CircuitsCircuitTypesUpdate

Update a circuit type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit type.
 @return ApiCircuitsCircuitTypesUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitTypesUpdate(ctx context.Context, id string) ApiCircuitsCircuitTypesUpdateRequest {
	return ApiCircuitsCircuitTypesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CircuitType
func (a *CircuitsAPIService) CircuitsCircuitTypesUpdateExecute(r ApiCircuitsCircuitTypesUpdateRequest) (*CircuitType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CircuitType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitTypesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuit-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.circuitTypeRequest == nil {
		return localVarReturnValue, nil, reportError("circuitTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.circuitTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCircuitsCircuitsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCircuitsCircuitsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsCircuitsBulkDestroyExecute(r)
}

/*
CircuitsCircuitsBulkDestroy Method for CircuitsCircuitsBulkDestroy

Destroy a list of circuit objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitsBulkDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsBulkDestroy(ctx context.Context) ApiCircuitsCircuitsBulkDestroyRequest {
	return ApiCircuitsCircuitsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsCircuitsBulkDestroyExecute(r ApiCircuitsCircuitsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	patchedBulkWritableCircuitRequest *[]PatchedBulkWritableCircuitRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitsBulkPartialUpdateRequest) PatchedBulkWritableCircuitRequest(patchedBulkWritableCircuitRequest []PatchedBulkWritableCircuitRequest) ApiCircuitsCircuitsBulkPartialUpdateRequest {
	r.patchedBulkWritableCircuitRequest = &patchedBulkWritableCircuitRequest
	return r
}

func (r ApiCircuitsCircuitsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitsBulkPartialUpdateRequest) Execute() ([]Circuit, *http.Response, error) {
	return r.ApiService.CircuitsCircuitsBulkPartialUpdateExecute(r)
}

/*
CircuitsCircuitsBulkPartialUpdate Method for CircuitsCircuitsBulkPartialUpdate

Partial update a list of circuit objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitsBulkPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsBulkPartialUpdate(ctx context.Context) ApiCircuitsCircuitsBulkPartialUpdateRequest {
	return ApiCircuitsCircuitsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Circuit
func (a *CircuitsAPIService) CircuitsCircuitsBulkPartialUpdateExecute(r ApiCircuitsCircuitsBulkPartialUpdateRequest) ([]Circuit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Circuit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCircuitRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCircuitRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCircuitRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkWritableCircuitRequest *[]BulkWritableCircuitRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitsBulkUpdateRequest) BulkWritableCircuitRequest(bulkWritableCircuitRequest []BulkWritableCircuitRequest) ApiCircuitsCircuitsBulkUpdateRequest {
	r.bulkWritableCircuitRequest = &bulkWritableCircuitRequest
	return r
}

func (r ApiCircuitsCircuitsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitsBulkUpdateRequest) Execute() ([]Circuit, *http.Response, error) {
	return r.ApiService.CircuitsCircuitsBulkUpdateExecute(r)
}

/*
CircuitsCircuitsBulkUpdate Method for CircuitsCircuitsBulkUpdate

Update a list of circuit objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitsBulkUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsBulkUpdate(ctx context.Context) ApiCircuitsCircuitsBulkUpdateRequest {
	return ApiCircuitsCircuitsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Circuit
func (a *CircuitsAPIService) CircuitsCircuitsBulkUpdateExecute(r ApiCircuitsCircuitsBulkUpdateRequest) ([]Circuit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Circuit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCircuitRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCircuitRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCircuitRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	circuitRequest *CircuitRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitsCreateRequest) CircuitRequest(circuitRequest CircuitRequest) ApiCircuitsCircuitsCreateRequest {
	r.circuitRequest = &circuitRequest
	return r
}

func (r ApiCircuitsCircuitsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitsCreateRequest) Execute() (*Circuit, *http.Response, error) {
	return r.ApiService.CircuitsCircuitsCreateExecute(r)
}

/*
CircuitsCircuitsCreate Method for CircuitsCircuitsCreate

Create one or more circuit objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitsCreateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsCreate(ctx context.Context) ApiCircuitsCircuitsCreateRequest {
	return ApiCircuitsCircuitsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Circuit
func (a *CircuitsAPIService) CircuitsCircuitsCreateExecute(r ApiCircuitsCircuitsCreateRequest) (*Circuit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Circuit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.circuitRequest == nil {
		return localVarReturnValue, nil, reportError("circuitRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.circuitRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsCircuitsDestroyExecute(r)
}

/*
CircuitsCircuitsDestroy Method for CircuitsCircuitsDestroy

Destroy a circuit object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit.
 @return ApiCircuitsCircuitsDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsDestroy(ctx context.Context, id string) ApiCircuitsCircuitsDestroyRequest {
	return ApiCircuitsCircuitsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsCircuitsDestroyExecute(r ApiCircuitsCircuitsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	cid *[]string
	cidIc *[]string
	cidIe *[]string
	cidIew *[]string
	cidIre *[]string
	cidIsw *[]string
	cidN *[]string
	cidNic *[]string
	cidNie *[]string
	cidNiew *[]string
	cidNire *[]string
	cidNisw *[]string
	cidNre *[]string
	cidRe *[]string
	circuitTerminationA *[]string
	circuitTerminationAIsnull *bool
	circuitTerminationAN *[]string
	circuitTerminationZ *[]string
	circuitTerminationZIsnull *bool
	circuitTerminationZN *[]string
	circuitTerminations *[]string
	circuitTerminationsIsnull *bool
	circuitTerminationsN *[]string
	circuitType *[]string
	circuitTypeN *[]string
	comments *[]string
	commentsIc *[]string
	commentsIe *[]string
	commentsIew *[]string
	commentsIre *[]string
	commentsIsw *[]string
	commentsN *[]string
	commentsNic *[]string
	commentsNie *[]string
	commentsNiew *[]string
	commentsNire *[]string
	commentsNisw *[]string
	commentsNre *[]string
	commentsRe *[]string
	commitRate *[]int32
	commitRateGt *[]int32
	commitRateGte *[]int32
	commitRateIsnull *bool
	commitRateLt *[]int32
	commitRateLte *[]int32
	commitRateN *[]int32
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasTerminations *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	installDate *[]string
	installDateGt *[]string
	installDateGte *[]string
	installDateIsnull *bool
	installDateLt *[]string
	installDateLte *[]string
	installDateN *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	location *[]string
	locationIsnull *bool
	locationN *[]string
	offset *int32
	provider *[]string
	providerN *[]string
	providerNetwork *[]string
	providerNetworkIsnull *bool
	providerNetworkN *[]string
	q *string
	sort *string
	status *[]string
	statusN *[]string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	tenant *[]string
	tenantIsnull *bool
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupIsnull *bool
	tenantGroupN *[]string
	tenantId *[]*string
	tenantIdIsnull *bool
	tenantIdN *[]*string
	depth *int32
}

func (r ApiCircuitsCircuitsListRequest) Cid(cid []string) ApiCircuitsCircuitsListRequest {
	r.cid = &cid
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidIc(cidIc []string) ApiCircuitsCircuitsListRequest {
	r.cidIc = &cidIc
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidIe(cidIe []string) ApiCircuitsCircuitsListRequest {
	r.cidIe = &cidIe
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidIew(cidIew []string) ApiCircuitsCircuitsListRequest {
	r.cidIew = &cidIew
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidIre(cidIre []string) ApiCircuitsCircuitsListRequest {
	r.cidIre = &cidIre
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidIsw(cidIsw []string) ApiCircuitsCircuitsListRequest {
	r.cidIsw = &cidIsw
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidN(cidN []string) ApiCircuitsCircuitsListRequest {
	r.cidN = &cidN
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidNic(cidNic []string) ApiCircuitsCircuitsListRequest {
	r.cidNic = &cidNic
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidNie(cidNie []string) ApiCircuitsCircuitsListRequest {
	r.cidNie = &cidNie
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidNiew(cidNiew []string) ApiCircuitsCircuitsListRequest {
	r.cidNiew = &cidNiew
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidNire(cidNire []string) ApiCircuitsCircuitsListRequest {
	r.cidNire = &cidNire
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidNisw(cidNisw []string) ApiCircuitsCircuitsListRequest {
	r.cidNisw = &cidNisw
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidNre(cidNre []string) ApiCircuitsCircuitsListRequest {
	r.cidNre = &cidNre
	return r
}

func (r ApiCircuitsCircuitsListRequest) CidRe(cidRe []string) ApiCircuitsCircuitsListRequest {
	r.cidRe = &cidRe
	return r
}

// Termination A (ID)
func (r ApiCircuitsCircuitsListRequest) CircuitTerminationA(circuitTerminationA []string) ApiCircuitsCircuitsListRequest {
	r.circuitTerminationA = &circuitTerminationA
	return r
}

func (r ApiCircuitsCircuitsListRequest) CircuitTerminationAIsnull(circuitTerminationAIsnull bool) ApiCircuitsCircuitsListRequest {
	r.circuitTerminationAIsnull = &circuitTerminationAIsnull
	return r
}

// Termination A (ID)
func (r ApiCircuitsCircuitsListRequest) CircuitTerminationAN(circuitTerminationAN []string) ApiCircuitsCircuitsListRequest {
	r.circuitTerminationAN = &circuitTerminationAN
	return r
}

// Termination Z (ID)
func (r ApiCircuitsCircuitsListRequest) CircuitTerminationZ(circuitTerminationZ []string) ApiCircuitsCircuitsListRequest {
	r.circuitTerminationZ = &circuitTerminationZ
	return r
}

func (r ApiCircuitsCircuitsListRequest) CircuitTerminationZIsnull(circuitTerminationZIsnull bool) ApiCircuitsCircuitsListRequest {
	r.circuitTerminationZIsnull = &circuitTerminationZIsnull
	return r
}

// Termination Z (ID)
func (r ApiCircuitsCircuitsListRequest) CircuitTerminationZN(circuitTerminationZN []string) ApiCircuitsCircuitsListRequest {
	r.circuitTerminationZN = &circuitTerminationZN
	return r
}

func (r ApiCircuitsCircuitsListRequest) CircuitTerminations(circuitTerminations []string) ApiCircuitsCircuitsListRequest {
	r.circuitTerminations = &circuitTerminations
	return r
}

func (r ApiCircuitsCircuitsListRequest) CircuitTerminationsIsnull(circuitTerminationsIsnull bool) ApiCircuitsCircuitsListRequest {
	r.circuitTerminationsIsnull = &circuitTerminationsIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) CircuitTerminationsN(circuitTerminationsN []string) ApiCircuitsCircuitsListRequest {
	r.circuitTerminationsN = &circuitTerminationsN
	return r
}

func (r ApiCircuitsCircuitsListRequest) CircuitType(circuitType []string) ApiCircuitsCircuitsListRequest {
	r.circuitType = &circuitType
	return r
}

func (r ApiCircuitsCircuitsListRequest) CircuitTypeN(circuitTypeN []string) ApiCircuitsCircuitsListRequest {
	r.circuitTypeN = &circuitTypeN
	return r
}

func (r ApiCircuitsCircuitsListRequest) Comments(comments []string) ApiCircuitsCircuitsListRequest {
	r.comments = &comments
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsIc(commentsIc []string) ApiCircuitsCircuitsListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsIe(commentsIe []string) ApiCircuitsCircuitsListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsIew(commentsIew []string) ApiCircuitsCircuitsListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsIre(commentsIre []string) ApiCircuitsCircuitsListRequest {
	r.commentsIre = &commentsIre
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsIsw(commentsIsw []string) ApiCircuitsCircuitsListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsN(commentsN []string) ApiCircuitsCircuitsListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsNic(commentsNic []string) ApiCircuitsCircuitsListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsNie(commentsNie []string) ApiCircuitsCircuitsListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsNiew(commentsNiew []string) ApiCircuitsCircuitsListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsNire(commentsNire []string) ApiCircuitsCircuitsListRequest {
	r.commentsNire = &commentsNire
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsNisw(commentsNisw []string) ApiCircuitsCircuitsListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsNre(commentsNre []string) ApiCircuitsCircuitsListRequest {
	r.commentsNre = &commentsNre
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommentsRe(commentsRe []string) ApiCircuitsCircuitsListRequest {
	r.commentsRe = &commentsRe
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommitRate(commitRate []int32) ApiCircuitsCircuitsListRequest {
	r.commitRate = &commitRate
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommitRateGt(commitRateGt []int32) ApiCircuitsCircuitsListRequest {
	r.commitRateGt = &commitRateGt
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommitRateGte(commitRateGte []int32) ApiCircuitsCircuitsListRequest {
	r.commitRateGte = &commitRateGte
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommitRateIsnull(commitRateIsnull bool) ApiCircuitsCircuitsListRequest {
	r.commitRateIsnull = &commitRateIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommitRateLt(commitRateLt []int32) ApiCircuitsCircuitsListRequest {
	r.commitRateLt = &commitRateLt
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommitRateLte(commitRateLte []int32) ApiCircuitsCircuitsListRequest {
	r.commitRateLte = &commitRateLte
	return r
}

func (r ApiCircuitsCircuitsListRequest) CommitRateN(commitRateN []int32) ApiCircuitsCircuitsListRequest {
	r.commitRateN = &commitRateN
	return r
}

func (r ApiCircuitsCircuitsListRequest) Created(created []time.Time) ApiCircuitsCircuitsListRequest {
	r.created = &created
	return r
}

func (r ApiCircuitsCircuitsListRequest) CreatedGt(createdGt []time.Time) ApiCircuitsCircuitsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCircuitsCircuitsListRequest) CreatedGte(createdGte []time.Time) ApiCircuitsCircuitsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCircuitsCircuitsListRequest) CreatedIsnull(createdIsnull bool) ApiCircuitsCircuitsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) CreatedLt(createdLt []time.Time) ApiCircuitsCircuitsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCircuitsCircuitsListRequest) CreatedLte(createdLte []time.Time) ApiCircuitsCircuitsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCircuitsCircuitsListRequest) CreatedN(createdN []time.Time) ApiCircuitsCircuitsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCircuitsCircuitsListRequest) Description(description []string) ApiCircuitsCircuitsListRequest {
	r.description = &description
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionIc(descriptionIc []string) ApiCircuitsCircuitsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionIe(descriptionIe []string) ApiCircuitsCircuitsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionIew(descriptionIew []string) ApiCircuitsCircuitsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionIre(descriptionIre []string) ApiCircuitsCircuitsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionIsw(descriptionIsw []string) ApiCircuitsCircuitsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionN(descriptionN []string) ApiCircuitsCircuitsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionNic(descriptionNic []string) ApiCircuitsCircuitsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionNie(descriptionNie []string) ApiCircuitsCircuitsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionNiew(descriptionNiew []string) ApiCircuitsCircuitsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionNire(descriptionNire []string) ApiCircuitsCircuitsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionNisw(descriptionNisw []string) ApiCircuitsCircuitsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionNre(descriptionNre []string) ApiCircuitsCircuitsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiCircuitsCircuitsListRequest) DescriptionRe(descriptionRe []string) ApiCircuitsCircuitsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiCircuitsCircuitsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsListRequest {
	r.format = &format
	return r
}

// Has terminations
func (r ApiCircuitsCircuitsListRequest) HasTerminations(hasTerminations bool) ApiCircuitsCircuitsListRequest {
	r.hasTerminations = &hasTerminations
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCircuitsCircuitsListRequest) Id(id []string) ApiCircuitsCircuitsListRequest {
	r.id = &id
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdIc(idIc []string) ApiCircuitsCircuitsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdIe(idIe []string) ApiCircuitsCircuitsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdIew(idIew []string) ApiCircuitsCircuitsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdIre(idIre []string) ApiCircuitsCircuitsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdIsw(idIsw []string) ApiCircuitsCircuitsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdN(idN []string) ApiCircuitsCircuitsListRequest {
	r.idN = &idN
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdNic(idNic []string) ApiCircuitsCircuitsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdNie(idNie []string) ApiCircuitsCircuitsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdNiew(idNiew []string) ApiCircuitsCircuitsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdNire(idNire []string) ApiCircuitsCircuitsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdNisw(idNisw []string) ApiCircuitsCircuitsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdNre(idNre []string) ApiCircuitsCircuitsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCircuitsCircuitsListRequest) IdRe(idRe []string) ApiCircuitsCircuitsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiCircuitsCircuitsListRequest) InstallDate(installDate []string) ApiCircuitsCircuitsListRequest {
	r.installDate = &installDate
	return r
}

func (r ApiCircuitsCircuitsListRequest) InstallDateGt(installDateGt []string) ApiCircuitsCircuitsListRequest {
	r.installDateGt = &installDateGt
	return r
}

func (r ApiCircuitsCircuitsListRequest) InstallDateGte(installDateGte []string) ApiCircuitsCircuitsListRequest {
	r.installDateGte = &installDateGte
	return r
}

func (r ApiCircuitsCircuitsListRequest) InstallDateIsnull(installDateIsnull bool) ApiCircuitsCircuitsListRequest {
	r.installDateIsnull = &installDateIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) InstallDateLt(installDateLt []string) ApiCircuitsCircuitsListRequest {
	r.installDateLt = &installDateLt
	return r
}

func (r ApiCircuitsCircuitsListRequest) InstallDateLte(installDateLte []string) ApiCircuitsCircuitsListRequest {
	r.installDateLte = &installDateLte
	return r
}

func (r ApiCircuitsCircuitsListRequest) InstallDateN(installDateN []string) ApiCircuitsCircuitsListRequest {
	r.installDateN = &installDateN
	return r
}

func (r ApiCircuitsCircuitsListRequest) LastUpdated(lastUpdated []time.Time) ApiCircuitsCircuitsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCircuitsCircuitsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCircuitsCircuitsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCircuitsCircuitsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCircuitsCircuitsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCircuitsCircuitsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiCircuitsCircuitsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCircuitsCircuitsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCircuitsCircuitsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCircuitsCircuitsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCircuitsCircuitsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCircuitsCircuitsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCircuitsCircuitsListRequest) Limit(limit int32) ApiCircuitsCircuitsListRequest {
	r.limit = &limit
	return r
}

func (r ApiCircuitsCircuitsListRequest) Location(location []string) ApiCircuitsCircuitsListRequest {
	r.location = &location
	return r
}

func (r ApiCircuitsCircuitsListRequest) LocationIsnull(locationIsnull bool) ApiCircuitsCircuitsListRequest {
	r.locationIsnull = &locationIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) LocationN(locationN []string) ApiCircuitsCircuitsListRequest {
	r.locationN = &locationN
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsCircuitsListRequest) Offset(offset int32) ApiCircuitsCircuitsListRequest {
	r.offset = &offset
	return r
}

func (r ApiCircuitsCircuitsListRequest) Provider(provider []string) ApiCircuitsCircuitsListRequest {
	r.provider = &provider
	return r
}

func (r ApiCircuitsCircuitsListRequest) ProviderN(providerN []string) ApiCircuitsCircuitsListRequest {
	r.providerN = &providerN
	return r
}

func (r ApiCircuitsCircuitsListRequest) ProviderNetwork(providerNetwork []string) ApiCircuitsCircuitsListRequest {
	r.providerNetwork = &providerNetwork
	return r
}

func (r ApiCircuitsCircuitsListRequest) ProviderNetworkIsnull(providerNetworkIsnull bool) ApiCircuitsCircuitsListRequest {
	r.providerNetworkIsnull = &providerNetworkIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) ProviderNetworkN(providerNetworkN []string) ApiCircuitsCircuitsListRequest {
	r.providerNetworkN = &providerNetworkN
	return r
}

// Search
func (r ApiCircuitsCircuitsListRequest) Q(q string) ApiCircuitsCircuitsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCircuitsCircuitsListRequest) Sort(sort string) ApiCircuitsCircuitsListRequest {
	r.sort = &sort
	return r
}

func (r ApiCircuitsCircuitsListRequest) Status(status []string) ApiCircuitsCircuitsListRequest {
	r.status = &status
	return r
}

func (r ApiCircuitsCircuitsListRequest) StatusN(statusN []string) ApiCircuitsCircuitsListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiCircuitsCircuitsListRequest) Tags(tags []string) ApiCircuitsCircuitsListRequest {
	r.tags = &tags
	return r
}

func (r ApiCircuitsCircuitsListRequest) TagsIsnull(tagsIsnull bool) ApiCircuitsCircuitsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) TagsN(tagsN []string) ApiCircuitsCircuitsListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiCircuitsCircuitsListRequest) Tenant(tenant []string) ApiCircuitsCircuitsListRequest {
	r.tenant = &tenant
	return r
}

func (r ApiCircuitsCircuitsListRequest) TenantIsnull(tenantIsnull bool) ApiCircuitsCircuitsListRequest {
	r.tenantIsnull = &tenantIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) TenantN(tenantN []string) ApiCircuitsCircuitsListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiCircuitsCircuitsListRequest) TenantGroup(tenantGroup []string) ApiCircuitsCircuitsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiCircuitsCircuitsListRequest) TenantGroupIsnull(tenantGroupIsnull bool) ApiCircuitsCircuitsListRequest {
	r.tenantGroupIsnull = &tenantGroupIsnull
	return r
}

func (r ApiCircuitsCircuitsListRequest) TenantGroupN(tenantGroupN []string) ApiCircuitsCircuitsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant (ID) (deprecated, use \&quot;tenant\&quot; filter instead)
func (r ApiCircuitsCircuitsListRequest) TenantId(tenantId []*string) ApiCircuitsCircuitsListRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiCircuitsCircuitsListRequest) TenantIdIsnull(tenantIdIsnull bool) ApiCircuitsCircuitsListRequest {
	r.tenantIdIsnull = &tenantIdIsnull
	return r
}

// Tenant (ID) (deprecated, use \&quot;tenant\&quot; filter instead)
func (r ApiCircuitsCircuitsListRequest) TenantIdN(tenantIdN []*string) ApiCircuitsCircuitsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitsListRequest) Depth(depth int32) ApiCircuitsCircuitsListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitsListRequest) Execute() (*PaginatedCircuitList, *http.Response, error) {
	return r.ApiService.CircuitsCircuitsListExecute(r)
}

/*
CircuitsCircuitsList Method for CircuitsCircuitsList

Retrieve a list of circuit objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsCircuitsListRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsList(ctx context.Context) ApiCircuitsCircuitsListRequest {
	return ApiCircuitsCircuitsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCircuitList
func (a *CircuitsAPIService) CircuitsCircuitsListExecute(r ApiCircuitsCircuitsListRequest) (*PaginatedCircuitList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCircuitList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cid != nil {
		t := *r.cid
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid", t, "form", "multi")
		}
	}
	if r.cidIc != nil {
		t := *r.cidIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__ic", t, "form", "multi")
		}
	}
	if r.cidIe != nil {
		t := *r.cidIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__ie", t, "form", "multi")
		}
	}
	if r.cidIew != nil {
		t := *r.cidIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__iew", t, "form", "multi")
		}
	}
	if r.cidIre != nil {
		t := *r.cidIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__ire", t, "form", "multi")
		}
	}
	if r.cidIsw != nil {
		t := *r.cidIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__isw", t, "form", "multi")
		}
	}
	if r.cidN != nil {
		t := *r.cidN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__n", t, "form", "multi")
		}
	}
	if r.cidNic != nil {
		t := *r.cidNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nic", t, "form", "multi")
		}
	}
	if r.cidNie != nil {
		t := *r.cidNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nie", t, "form", "multi")
		}
	}
	if r.cidNiew != nil {
		t := *r.cidNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__niew", t, "form", "multi")
		}
	}
	if r.cidNire != nil {
		t := *r.cidNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nire", t, "form", "multi")
		}
	}
	if r.cidNisw != nil {
		t := *r.cidNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nisw", t, "form", "multi")
		}
	}
	if r.cidNre != nil {
		t := *r.cidNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__nre", t, "form", "multi")
		}
	}
	if r.cidRe != nil {
		t := *r.cidRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cid__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cid__re", t, "form", "multi")
		}
	}
	if r.circuitTerminationA != nil {
		t := *r.circuitTerminationA
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_a", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_a", t, "form", "multi")
		}
	}
	if r.circuitTerminationAIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_a__isnull", r.circuitTerminationAIsnull, "form", "")
	}
	if r.circuitTerminationAN != nil {
		t := *r.circuitTerminationAN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_a__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_a__n", t, "form", "multi")
		}
	}
	if r.circuitTerminationZ != nil {
		t := *r.circuitTerminationZ
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_z", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_z", t, "form", "multi")
		}
	}
	if r.circuitTerminationZIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_z__isnull", r.circuitTerminationZIsnull, "form", "")
	}
	if r.circuitTerminationZN != nil {
		t := *r.circuitTerminationZN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_z__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_termination_z__n", t, "form", "multi")
		}
	}
	if r.circuitTerminations != nil {
		t := *r.circuitTerminations
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations", t, "form", "multi")
		}
	}
	if r.circuitTerminationsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations__isnull", r.circuitTerminationsIsnull, "form", "")
	}
	if r.circuitTerminationsN != nil {
		t := *r.circuitTerminationsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations__n", t, "form", "multi")
		}
	}
	if r.circuitType != nil {
		t := *r.circuitType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_type", t, "form", "multi")
		}
	}
	if r.circuitTypeN != nil {
		t := *r.circuitTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_type__n", t, "form", "multi")
		}
	}
	if r.comments != nil {
		t := *r.comments
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments", t, "form", "multi")
		}
	}
	if r.commentsIc != nil {
		t := *r.commentsIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", t, "form", "multi")
		}
	}
	if r.commentsIe != nil {
		t := *r.commentsIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", t, "form", "multi")
		}
	}
	if r.commentsIew != nil {
		t := *r.commentsIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", t, "form", "multi")
		}
	}
	if r.commentsIre != nil {
		t := *r.commentsIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", t, "form", "multi")
		}
	}
	if r.commentsIsw != nil {
		t := *r.commentsIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", t, "form", "multi")
		}
	}
	if r.commentsN != nil {
		t := *r.commentsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", t, "form", "multi")
		}
	}
	if r.commentsNic != nil {
		t := *r.commentsNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", t, "form", "multi")
		}
	}
	if r.commentsNie != nil {
		t := *r.commentsNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", t, "form", "multi")
		}
	}
	if r.commentsNiew != nil {
		t := *r.commentsNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", t, "form", "multi")
		}
	}
	if r.commentsNire != nil {
		t := *r.commentsNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", t, "form", "multi")
		}
	}
	if r.commentsNisw != nil {
		t := *r.commentsNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", t, "form", "multi")
		}
	}
	if r.commentsNre != nil {
		t := *r.commentsNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", t, "form", "multi")
		}
	}
	if r.commentsRe != nil {
		t := *r.commentsRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", t, "form", "multi")
		}
	}
	if r.commitRate != nil {
		t := *r.commitRate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate", t, "form", "multi")
		}
	}
	if r.commitRateGt != nil {
		t := *r.commitRateGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__gt", t, "form", "multi")
		}
	}
	if r.commitRateGte != nil {
		t := *r.commitRateGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__gte", t, "form", "multi")
		}
	}
	if r.commitRateIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__isnull", r.commitRateIsnull, "form", "")
	}
	if r.commitRateLt != nil {
		t := *r.commitRateLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__lt", t, "form", "multi")
		}
	}
	if r.commitRateLte != nil {
		t := *r.commitRateLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__lte", t, "form", "multi")
		}
	}
	if r.commitRateN != nil {
		t := *r.commitRateN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "commit_rate__n", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.hasTerminations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_terminations", r.hasTerminations, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.installDate != nil {
		t := *r.installDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "install_date", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "install_date", t, "form", "multi")
		}
	}
	if r.installDateGt != nil {
		t := *r.installDateGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__gt", t, "form", "multi")
		}
	}
	if r.installDateGte != nil {
		t := *r.installDateGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__gte", t, "form", "multi")
		}
	}
	if r.installDateIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__isnull", r.installDateIsnull, "form", "")
	}
	if r.installDateLt != nil {
		t := *r.installDateLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__lt", t, "form", "multi")
		}
	}
	if r.installDateLte != nil {
		t := *r.installDateLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__lte", t, "form", "multi")
		}
	}
	if r.installDateN != nil {
		t := *r.installDateN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "install_date__n", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "form", "multi")
		}
	}
	if r.locationIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location__isnull", r.locationIsnull, "form", "")
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.provider != nil {
		t := *r.provider
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider", t, "form", "multi")
		}
	}
	if r.providerN != nil {
		t := *r.providerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", t, "form", "multi")
		}
	}
	if r.providerNetwork != nil {
		t := *r.providerNetwork
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network", t, "form", "multi")
		}
	}
	if r.providerNetworkIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network__isnull", r.providerNetworkIsnull, "form", "")
	}
	if r.providerNetworkN != nil {
		t := *r.providerNetworkN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider_network__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "form", "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "form", "multi")
		}
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "form", "multi")
		}
	}
	if r.tenantIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__isnull", r.tenantIsnull, "form", "")
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "form", "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "form", "multi")
		}
	}
	if r.tenantGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__isnull", r.tenantGroupIsnull, "form", "")
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "form", "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "form", "multi")
		}
	}
	if r.tenantIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__isnull", r.tenantIdIsnull, "form", "")
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsNotesCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCircuitsCircuitsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCircuitsCircuitsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CircuitsCircuitsNotesCreateExecute(r)
}

/*
CircuitsCircuitsNotesCreate Method for CircuitsCircuitsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit.
 @return ApiCircuitsCircuitsNotesCreateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsNotesCreate(ctx context.Context, id string) ApiCircuitsCircuitsNotesCreateRequest {
	return ApiCircuitsCircuitsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CircuitsAPIService) CircuitsCircuitsNotesCreateExecute(r ApiCircuitsCircuitsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsNotesListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCircuitsCircuitsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCircuitsCircuitsNotesListRequest) Limit(limit int32) ApiCircuitsCircuitsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsCircuitsNotesListRequest) Offset(offset int32) ApiCircuitsCircuitsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitsNotesListRequest) Depth(depth int32) ApiCircuitsCircuitsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CircuitsCircuitsNotesListExecute(r)
}

/*
CircuitsCircuitsNotesList Method for CircuitsCircuitsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit.
 @return ApiCircuitsCircuitsNotesListRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsNotesList(ctx context.Context, id string) ApiCircuitsCircuitsNotesListRequest {
	return ApiCircuitsCircuitsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CircuitsAPIService) CircuitsCircuitsNotesListExecute(r ApiCircuitsCircuitsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCircuitRequest *PatchedCircuitRequest
}

func (r ApiCircuitsCircuitsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitsPartialUpdateRequest) PatchedCircuitRequest(patchedCircuitRequest PatchedCircuitRequest) ApiCircuitsCircuitsPartialUpdateRequest {
	r.patchedCircuitRequest = &patchedCircuitRequest
	return r
}

func (r ApiCircuitsCircuitsPartialUpdateRequest) Execute() (*Circuit, *http.Response, error) {
	return r.ApiService.CircuitsCircuitsPartialUpdateExecute(r)
}

/*
CircuitsCircuitsPartialUpdate Method for CircuitsCircuitsPartialUpdate

Partial update a circuit object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit.
 @return ApiCircuitsCircuitsPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsPartialUpdate(ctx context.Context, id string) ApiCircuitsCircuitsPartialUpdateRequest {
	return ApiCircuitsCircuitsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Circuit
func (a *CircuitsAPIService) CircuitsCircuitsPartialUpdateExecute(r ApiCircuitsCircuitsPartialUpdateRequest) (*Circuit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Circuit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCircuitRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsRetrieveRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCircuitsCircuitsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCircuitsCircuitsRetrieveRequest) Depth(depth int32) ApiCircuitsCircuitsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsCircuitsRetrieveRequest) Execute() (*Circuit, *http.Response, error) {
	return r.ApiService.CircuitsCircuitsRetrieveExecute(r)
}

/*
CircuitsCircuitsRetrieve Method for CircuitsCircuitsRetrieve

Retrieve a circuit object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit.
 @return ApiCircuitsCircuitsRetrieveRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsRetrieve(ctx context.Context, id string) ApiCircuitsCircuitsRetrieveRequest {
	return ApiCircuitsCircuitsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Circuit
func (a *CircuitsAPIService) CircuitsCircuitsRetrieveExecute(r ApiCircuitsCircuitsRetrieveRequest) (*Circuit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Circuit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsCircuitsUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	circuitRequest *CircuitRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsCircuitsUpdateRequest) CircuitRequest(circuitRequest CircuitRequest) ApiCircuitsCircuitsUpdateRequest {
	r.circuitRequest = &circuitRequest
	return r
}

func (r ApiCircuitsCircuitsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsCircuitsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsCircuitsUpdateRequest) Execute() (*Circuit, *http.Response, error) {
	return r.ApiService.CircuitsCircuitsUpdateExecute(r)
}

/*
CircuitsCircuitsUpdate Method for CircuitsCircuitsUpdate

Update a circuit object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this circuit.
 @return ApiCircuitsCircuitsUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsCircuitsUpdate(ctx context.Context, id string) ApiCircuitsCircuitsUpdateRequest {
	return ApiCircuitsCircuitsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Circuit
func (a *CircuitsAPIService) CircuitsCircuitsUpdateExecute(r ApiCircuitsCircuitsUpdateRequest) (*Circuit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Circuit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsCircuitsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/circuits/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.circuitRequest == nil {
		return localVarReturnValue, nil, reportError("circuitRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.circuitRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProviderNetworksBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCircuitsProviderNetworksBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCircuitsProviderNetworksBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProviderNetworksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksBulkDestroyExecute(r)
}

/*
CircuitsProviderNetworksBulkDestroy Method for CircuitsProviderNetworksBulkDestroy

Destroy a list of provider network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProviderNetworksBulkDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksBulkDestroy(ctx context.Context) ApiCircuitsProviderNetworksBulkDestroyRequest {
	return ApiCircuitsProviderNetworksBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsProviderNetworksBulkDestroyExecute(r ApiCircuitsProviderNetworksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	patchedBulkWritableProviderNetworkRequest *[]PatchedBulkWritableProviderNetworkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProviderNetworksBulkPartialUpdateRequest) PatchedBulkWritableProviderNetworkRequest(patchedBulkWritableProviderNetworkRequest []PatchedBulkWritableProviderNetworkRequest) ApiCircuitsProviderNetworksBulkPartialUpdateRequest {
	r.patchedBulkWritableProviderNetworkRequest = &patchedBulkWritableProviderNetworkRequest
	return r
}

func (r ApiCircuitsProviderNetworksBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProviderNetworksBulkPartialUpdateRequest) Execute() ([]ProviderNetwork, *http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksBulkPartialUpdateExecute(r)
}

/*
CircuitsProviderNetworksBulkPartialUpdate Method for CircuitsProviderNetworksBulkPartialUpdate

Partial update a list of provider network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProviderNetworksBulkPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksBulkPartialUpdate(ctx context.Context) ApiCircuitsProviderNetworksBulkPartialUpdateRequest {
	return ApiCircuitsProviderNetworksBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProviderNetwork
func (a *CircuitsAPIService) CircuitsProviderNetworksBulkPartialUpdateExecute(r ApiCircuitsProviderNetworksBulkPartialUpdateRequest) ([]ProviderNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProviderNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableProviderNetworkRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableProviderNetworkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableProviderNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkWritableProviderNetworkRequest *[]BulkWritableProviderNetworkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProviderNetworksBulkUpdateRequest) BulkWritableProviderNetworkRequest(bulkWritableProviderNetworkRequest []BulkWritableProviderNetworkRequest) ApiCircuitsProviderNetworksBulkUpdateRequest {
	r.bulkWritableProviderNetworkRequest = &bulkWritableProviderNetworkRequest
	return r
}

func (r ApiCircuitsProviderNetworksBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProviderNetworksBulkUpdateRequest) Execute() ([]ProviderNetwork, *http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksBulkUpdateExecute(r)
}

/*
CircuitsProviderNetworksBulkUpdate Method for CircuitsProviderNetworksBulkUpdate

Update a list of provider network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProviderNetworksBulkUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksBulkUpdate(ctx context.Context) ApiCircuitsProviderNetworksBulkUpdateRequest {
	return ApiCircuitsProviderNetworksBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProviderNetwork
func (a *CircuitsAPIService) CircuitsProviderNetworksBulkUpdateExecute(r ApiCircuitsProviderNetworksBulkUpdateRequest) ([]ProviderNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProviderNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableProviderNetworkRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableProviderNetworkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableProviderNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	providerNetworkRequest *ProviderNetworkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProviderNetworksCreateRequest) ProviderNetworkRequest(providerNetworkRequest ProviderNetworkRequest) ApiCircuitsProviderNetworksCreateRequest {
	r.providerNetworkRequest = &providerNetworkRequest
	return r
}

func (r ApiCircuitsProviderNetworksCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProviderNetworksCreateRequest) Execute() (*ProviderNetwork, *http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksCreateExecute(r)
}

/*
CircuitsProviderNetworksCreate Method for CircuitsProviderNetworksCreate

Create one or more provider network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProviderNetworksCreateRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksCreate(ctx context.Context) ApiCircuitsProviderNetworksCreateRequest {
	return ApiCircuitsProviderNetworksCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProviderNetwork
func (a *CircuitsAPIService) CircuitsProviderNetworksCreateExecute(r ApiCircuitsProviderNetworksCreateRequest) (*ProviderNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProviderNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providerNetworkRequest == nil {
		return localVarReturnValue, nil, reportError("providerNetworkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providerNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProviderNetworksDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProviderNetworksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksDestroyExecute(r)
}

/*
CircuitsProviderNetworksDestroy Method for CircuitsProviderNetworksDestroy

Destroy a provider network object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider network.
 @return ApiCircuitsProviderNetworksDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksDestroy(ctx context.Context, id string) ApiCircuitsProviderNetworksDestroyRequest {
	return ApiCircuitsProviderNetworksDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsProviderNetworksDestroyExecute(r ApiCircuitsProviderNetworksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	circuitTerminations *[]string
	circuitTerminationsIsnull *bool
	circuitTerminationsN *[]string
	comments *[]string
	commentsIc *[]string
	commentsIe *[]string
	commentsIew *[]string
	commentsIre *[]string
	commentsIsw *[]string
	commentsN *[]string
	commentsNic *[]string
	commentsNie *[]string
	commentsNiew *[]string
	commentsNire *[]string
	commentsNisw *[]string
	commentsNre *[]string
	commentsRe *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasCircuitTerminations *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	provider *[]string
	providerN *[]string
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	depth *int32
}

// Circuit Terminations (ID)
func (r ApiCircuitsProviderNetworksListRequest) CircuitTerminations(circuitTerminations []string) ApiCircuitsProviderNetworksListRequest {
	r.circuitTerminations = &circuitTerminations
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CircuitTerminationsIsnull(circuitTerminationsIsnull bool) ApiCircuitsProviderNetworksListRequest {
	r.circuitTerminationsIsnull = &circuitTerminationsIsnull
	return r
}

// Circuit Terminations (ID)
func (r ApiCircuitsProviderNetworksListRequest) CircuitTerminationsN(circuitTerminationsN []string) ApiCircuitsProviderNetworksListRequest {
	r.circuitTerminationsN = &circuitTerminationsN
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) Comments(comments []string) ApiCircuitsProviderNetworksListRequest {
	r.comments = &comments
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsIc(commentsIc []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsIe(commentsIe []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsIew(commentsIew []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsIre(commentsIre []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsIre = &commentsIre
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsIsw(commentsIsw []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsN(commentsN []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsNic(commentsNic []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsNie(commentsNie []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsNiew(commentsNiew []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsNire(commentsNire []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsNire = &commentsNire
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsNisw(commentsNisw []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsNre(commentsNre []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsNre = &commentsNre
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CommentsRe(commentsRe []string) ApiCircuitsProviderNetworksListRequest {
	r.commentsRe = &commentsRe
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) Created(created []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.created = &created
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CreatedGt(createdGt []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CreatedGte(createdGte []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CreatedIsnull(createdIsnull bool) ApiCircuitsProviderNetworksListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CreatedLt(createdLt []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CreatedLte(createdLte []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) CreatedN(createdN []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) Description(description []string) ApiCircuitsProviderNetworksListRequest {
	r.description = &description
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionIc(descriptionIc []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionIe(descriptionIe []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionIew(descriptionIew []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionIre(descriptionIre []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionIsw(descriptionIsw []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionN(descriptionN []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionNic(descriptionNic []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionNie(descriptionNie []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionNiew(descriptionNiew []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionNire(descriptionNire []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionNisw(descriptionNisw []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionNre(descriptionNre []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) DescriptionRe(descriptionRe []string) ApiCircuitsProviderNetworksListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksListRequest {
	r.format = &format
	return r
}

// Has circuit terminations
func (r ApiCircuitsProviderNetworksListRequest) HasCircuitTerminations(hasCircuitTerminations bool) ApiCircuitsProviderNetworksListRequest {
	r.hasCircuitTerminations = &hasCircuitTerminations
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCircuitsProviderNetworksListRequest) Id(id []string) ApiCircuitsProviderNetworksListRequest {
	r.id = &id
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdIc(idIc []string) ApiCircuitsProviderNetworksListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdIe(idIe []string) ApiCircuitsProviderNetworksListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdIew(idIew []string) ApiCircuitsProviderNetworksListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdIre(idIre []string) ApiCircuitsProviderNetworksListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdIsw(idIsw []string) ApiCircuitsProviderNetworksListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdN(idN []string) ApiCircuitsProviderNetworksListRequest {
	r.idN = &idN
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdNic(idNic []string) ApiCircuitsProviderNetworksListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdNie(idNie []string) ApiCircuitsProviderNetworksListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdNiew(idNiew []string) ApiCircuitsProviderNetworksListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdNire(idNire []string) ApiCircuitsProviderNetworksListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdNisw(idNisw []string) ApiCircuitsProviderNetworksListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdNre(idNre []string) ApiCircuitsProviderNetworksListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) IdRe(idRe []string) ApiCircuitsProviderNetworksListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) LastUpdated(lastUpdated []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiCircuitsProviderNetworksListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCircuitsProviderNetworksListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCircuitsProviderNetworksListRequest) Limit(limit int32) ApiCircuitsProviderNetworksListRequest {
	r.limit = &limit
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) Name(name []string) ApiCircuitsProviderNetworksListRequest {
	r.name = &name
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameIc(nameIc []string) ApiCircuitsProviderNetworksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameIe(nameIe []string) ApiCircuitsProviderNetworksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameIew(nameIew []string) ApiCircuitsProviderNetworksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameIre(nameIre []string) ApiCircuitsProviderNetworksListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameIsw(nameIsw []string) ApiCircuitsProviderNetworksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameN(nameN []string) ApiCircuitsProviderNetworksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameNic(nameNic []string) ApiCircuitsProviderNetworksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameNie(nameNie []string) ApiCircuitsProviderNetworksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameNiew(nameNiew []string) ApiCircuitsProviderNetworksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameNire(nameNire []string) ApiCircuitsProviderNetworksListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameNisw(nameNisw []string) ApiCircuitsProviderNetworksListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameNre(nameNre []string) ApiCircuitsProviderNetworksListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) NameRe(nameRe []string) ApiCircuitsProviderNetworksListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsProviderNetworksListRequest) Offset(offset int32) ApiCircuitsProviderNetworksListRequest {
	r.offset = &offset
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) Provider(provider []string) ApiCircuitsProviderNetworksListRequest {
	r.provider = &provider
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) ProviderN(providerN []string) ApiCircuitsProviderNetworksListRequest {
	r.providerN = &providerN
	return r
}

// Search
func (r ApiCircuitsProviderNetworksListRequest) Q(q string) ApiCircuitsProviderNetworksListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCircuitsProviderNetworksListRequest) Sort(sort string) ApiCircuitsProviderNetworksListRequest {
	r.sort = &sort
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) Tags(tags []string) ApiCircuitsProviderNetworksListRequest {
	r.tags = &tags
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) TagsIsnull(tagsIsnull bool) ApiCircuitsProviderNetworksListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) TagsN(tagsN []string) ApiCircuitsProviderNetworksListRequest {
	r.tagsN = &tagsN
	return r
}

// Serializer Depth
func (r ApiCircuitsProviderNetworksListRequest) Depth(depth int32) ApiCircuitsProviderNetworksListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsProviderNetworksListRequest) Execute() (*PaginatedProviderNetworkList, *http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksListExecute(r)
}

/*
CircuitsProviderNetworksList Method for CircuitsProviderNetworksList

Retrieve a list of provider network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProviderNetworksListRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksList(ctx context.Context) ApiCircuitsProviderNetworksListRequest {
	return ApiCircuitsProviderNetworksListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedProviderNetworkList
func (a *CircuitsAPIService) CircuitsProviderNetworksListExecute(r ApiCircuitsProviderNetworksListRequest) (*PaginatedProviderNetworkList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedProviderNetworkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.circuitTerminations != nil {
		t := *r.circuitTerminations
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations", t, "form", "multi")
		}
	}
	if r.circuitTerminationsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations__isnull", r.circuitTerminationsIsnull, "form", "")
	}
	if r.circuitTerminationsN != nil {
		t := *r.circuitTerminationsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuit_terminations__n", t, "form", "multi")
		}
	}
	if r.comments != nil {
		t := *r.comments
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments", t, "form", "multi")
		}
	}
	if r.commentsIc != nil {
		t := *r.commentsIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", t, "form", "multi")
		}
	}
	if r.commentsIe != nil {
		t := *r.commentsIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", t, "form", "multi")
		}
	}
	if r.commentsIew != nil {
		t := *r.commentsIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", t, "form", "multi")
		}
	}
	if r.commentsIre != nil {
		t := *r.commentsIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", t, "form", "multi")
		}
	}
	if r.commentsIsw != nil {
		t := *r.commentsIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", t, "form", "multi")
		}
	}
	if r.commentsN != nil {
		t := *r.commentsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", t, "form", "multi")
		}
	}
	if r.commentsNic != nil {
		t := *r.commentsNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", t, "form", "multi")
		}
	}
	if r.commentsNie != nil {
		t := *r.commentsNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", t, "form", "multi")
		}
	}
	if r.commentsNiew != nil {
		t := *r.commentsNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", t, "form", "multi")
		}
	}
	if r.commentsNire != nil {
		t := *r.commentsNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", t, "form", "multi")
		}
	}
	if r.commentsNisw != nil {
		t := *r.commentsNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", t, "form", "multi")
		}
	}
	if r.commentsNre != nil {
		t := *r.commentsNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", t, "form", "multi")
		}
	}
	if r.commentsRe != nil {
		t := *r.commentsRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.hasCircuitTerminations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_circuit_terminations", r.hasCircuitTerminations, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.provider != nil {
		t := *r.provider
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider", t, "form", "multi")
		}
	}
	if r.providerN != nil {
		t := *r.providerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksNotesCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProviderNetworksNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCircuitsProviderNetworksNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCircuitsProviderNetworksNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProviderNetworksNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksNotesCreateExecute(r)
}

/*
CircuitsProviderNetworksNotesCreate Method for CircuitsProviderNetworksNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider network.
 @return ApiCircuitsProviderNetworksNotesCreateRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksNotesCreate(ctx context.Context, id string) ApiCircuitsProviderNetworksNotesCreateRequest {
	return ApiCircuitsProviderNetworksNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CircuitsAPIService) CircuitsProviderNetworksNotesCreateExecute(r ApiCircuitsProviderNetworksNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksNotesListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCircuitsProviderNetworksNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCircuitsProviderNetworksNotesListRequest) Limit(limit int32) ApiCircuitsProviderNetworksNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsProviderNetworksNotesListRequest) Offset(offset int32) ApiCircuitsProviderNetworksNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCircuitsProviderNetworksNotesListRequest) Depth(depth int32) ApiCircuitsProviderNetworksNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsProviderNetworksNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksNotesListExecute(r)
}

/*
CircuitsProviderNetworksNotesList Method for CircuitsProviderNetworksNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider network.
 @return ApiCircuitsProviderNetworksNotesListRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksNotesList(ctx context.Context, id string) ApiCircuitsProviderNetworksNotesListRequest {
	return ApiCircuitsProviderNetworksNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CircuitsAPIService) CircuitsProviderNetworksNotesListExecute(r ApiCircuitsProviderNetworksNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedProviderNetworkRequest *PatchedProviderNetworkRequest
}

func (r ApiCircuitsProviderNetworksPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProviderNetworksPartialUpdateRequest) PatchedProviderNetworkRequest(patchedProviderNetworkRequest PatchedProviderNetworkRequest) ApiCircuitsProviderNetworksPartialUpdateRequest {
	r.patchedProviderNetworkRequest = &patchedProviderNetworkRequest
	return r
}

func (r ApiCircuitsProviderNetworksPartialUpdateRequest) Execute() (*ProviderNetwork, *http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksPartialUpdateExecute(r)
}

/*
CircuitsProviderNetworksPartialUpdate Method for CircuitsProviderNetworksPartialUpdate

Partial update a provider network object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider network.
 @return ApiCircuitsProviderNetworksPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksPartialUpdate(ctx context.Context, id string) ApiCircuitsProviderNetworksPartialUpdateRequest {
	return ApiCircuitsProviderNetworksPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProviderNetwork
func (a *CircuitsAPIService) CircuitsProviderNetworksPartialUpdateExecute(r ApiCircuitsProviderNetworksPartialUpdateRequest) (*ProviderNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProviderNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedProviderNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksRetrieveRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCircuitsProviderNetworksRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCircuitsProviderNetworksRetrieveRequest) Depth(depth int32) ApiCircuitsProviderNetworksRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsProviderNetworksRetrieveRequest) Execute() (*ProviderNetwork, *http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksRetrieveExecute(r)
}

/*
CircuitsProviderNetworksRetrieve Method for CircuitsProviderNetworksRetrieve

Retrieve a provider network object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider network.
 @return ApiCircuitsProviderNetworksRetrieveRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksRetrieve(ctx context.Context, id string) ApiCircuitsProviderNetworksRetrieveRequest {
	return ApiCircuitsProviderNetworksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProviderNetwork
func (a *CircuitsAPIService) CircuitsProviderNetworksRetrieveExecute(r ApiCircuitsProviderNetworksRetrieveRequest) (*ProviderNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProviderNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProviderNetworksUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	providerNetworkRequest *ProviderNetworkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProviderNetworksUpdateRequest) ProviderNetworkRequest(providerNetworkRequest ProviderNetworkRequest) ApiCircuitsProviderNetworksUpdateRequest {
	r.providerNetworkRequest = &providerNetworkRequest
	return r
}

func (r ApiCircuitsProviderNetworksUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProviderNetworksUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProviderNetworksUpdateRequest) Execute() (*ProviderNetwork, *http.Response, error) {
	return r.ApiService.CircuitsProviderNetworksUpdateExecute(r)
}

/*
CircuitsProviderNetworksUpdate Method for CircuitsProviderNetworksUpdate

Update a provider network object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider network.
 @return ApiCircuitsProviderNetworksUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsProviderNetworksUpdate(ctx context.Context, id string) ApiCircuitsProviderNetworksUpdateRequest {
	return ApiCircuitsProviderNetworksUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProviderNetwork
func (a *CircuitsAPIService) CircuitsProviderNetworksUpdateExecute(r ApiCircuitsProviderNetworksUpdateRequest) (*ProviderNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProviderNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProviderNetworksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/provider-networks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providerNetworkRequest == nil {
		return localVarReturnValue, nil, reportError("providerNetworkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providerNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProvidersBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProvidersBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCircuitsProvidersBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCircuitsProvidersBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProvidersBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsProvidersBulkDestroyExecute(r)
}

/*
CircuitsProvidersBulkDestroy Method for CircuitsProvidersBulkDestroy

Destroy a list of provider objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProvidersBulkDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersBulkDestroy(ctx context.Context) ApiCircuitsProvidersBulkDestroyRequest {
	return ApiCircuitsProvidersBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsProvidersBulkDestroyExecute(r ApiCircuitsProvidersBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsProvidersBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	patchedBulkWritableProviderRequest *[]PatchedBulkWritableProviderRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProvidersBulkPartialUpdateRequest) PatchedBulkWritableProviderRequest(patchedBulkWritableProviderRequest []PatchedBulkWritableProviderRequest) ApiCircuitsProvidersBulkPartialUpdateRequest {
	r.patchedBulkWritableProviderRequest = &patchedBulkWritableProviderRequest
	return r
}

func (r ApiCircuitsProvidersBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProvidersBulkPartialUpdateRequest) Execute() ([]Provider, *http.Response, error) {
	return r.ApiService.CircuitsProvidersBulkPartialUpdateExecute(r)
}

/*
CircuitsProvidersBulkPartialUpdate Method for CircuitsProvidersBulkPartialUpdate

Partial update a list of provider objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProvidersBulkPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersBulkPartialUpdate(ctx context.Context) ApiCircuitsProvidersBulkPartialUpdateRequest {
	return ApiCircuitsProvidersBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Provider
func (a *CircuitsAPIService) CircuitsProvidersBulkPartialUpdateExecute(r ApiCircuitsProvidersBulkPartialUpdateRequest) ([]Provider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Provider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableProviderRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableProviderRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableProviderRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProvidersBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	bulkWritableProviderRequest *[]BulkWritableProviderRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProvidersBulkUpdateRequest) BulkWritableProviderRequest(bulkWritableProviderRequest []BulkWritableProviderRequest) ApiCircuitsProvidersBulkUpdateRequest {
	r.bulkWritableProviderRequest = &bulkWritableProviderRequest
	return r
}

func (r ApiCircuitsProvidersBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProvidersBulkUpdateRequest) Execute() ([]Provider, *http.Response, error) {
	return r.ApiService.CircuitsProvidersBulkUpdateExecute(r)
}

/*
CircuitsProvidersBulkUpdate Method for CircuitsProvidersBulkUpdate

Update a list of provider objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProvidersBulkUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersBulkUpdate(ctx context.Context) ApiCircuitsProvidersBulkUpdateRequest {
	return ApiCircuitsProvidersBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Provider
func (a *CircuitsAPIService) CircuitsProvidersBulkUpdateExecute(r ApiCircuitsProvidersBulkUpdateRequest) ([]Provider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Provider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableProviderRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableProviderRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableProviderRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProvidersCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	providerRequest *ProviderRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProvidersCreateRequest) ProviderRequest(providerRequest ProviderRequest) ApiCircuitsProvidersCreateRequest {
	r.providerRequest = &providerRequest
	return r
}

func (r ApiCircuitsProvidersCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProvidersCreateRequest) Execute() (*Provider, *http.Response, error) {
	return r.ApiService.CircuitsProvidersCreateExecute(r)
}

/*
CircuitsProvidersCreate Method for CircuitsProvidersCreate

Create one or more provider objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProvidersCreateRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersCreate(ctx context.Context) ApiCircuitsProvidersCreateRequest {
	return ApiCircuitsProvidersCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Provider
func (a *CircuitsAPIService) CircuitsProvidersCreateExecute(r ApiCircuitsProvidersCreateRequest) (*Provider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Provider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providerRequest == nil {
		return localVarReturnValue, nil, reportError("providerRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProvidersDestroyRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProvidersDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProvidersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CircuitsProvidersDestroyExecute(r)
}

/*
CircuitsProvidersDestroy Method for CircuitsProvidersDestroy

Destroy a provider object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider.
 @return ApiCircuitsProvidersDestroyRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersDestroy(ctx context.Context, id string) ApiCircuitsProvidersDestroyRequest {
	return ApiCircuitsProvidersDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CircuitsAPIService) CircuitsProvidersDestroyExecute(r ApiCircuitsProvidersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCircuitsProvidersListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	account *[]string
	accountIc *[]string
	accountIe *[]string
	accountIew *[]string
	accountIre *[]string
	accountIsw *[]string
	accountN *[]string
	accountNic *[]string
	accountNie *[]string
	accountNiew *[]string
	accountNire *[]string
	accountNisw *[]string
	accountNre *[]string
	accountRe *[]string
	adminContact *[]string
	adminContactIc *[]string
	adminContactIe *[]string
	adminContactIew *[]string
	adminContactIre *[]string
	adminContactIsw *[]string
	adminContactN *[]string
	adminContactNic *[]string
	adminContactNie *[]string
	adminContactNiew *[]string
	adminContactNire *[]string
	adminContactNisw *[]string
	adminContactNre *[]string
	adminContactRe *[]string
	asn *[]int32
	asnGt *[]int32
	asnGte *[]int32
	asnIsnull *bool
	asnLt *[]int32
	asnLte *[]int32
	asnN *[]int32
	circuits *[]string
	circuitsIsnull *bool
	circuitsN *[]string
	comments *[]string
	commentsIc *[]string
	commentsIe *[]string
	commentsIew *[]string
	commentsIre *[]string
	commentsIsw *[]string
	commentsN *[]string
	commentsNic *[]string
	commentsNie *[]string
	commentsNiew *[]string
	commentsNire *[]string
	commentsNisw *[]string
	commentsNre *[]string
	commentsRe *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	format *CircuitsCircuitTerminationsListFormatParameter
	hasCircuits *bool
	hasProviderNetworks *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	location *[]string
	locationIsnull *bool
	locationN *[]string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	nocContact *[]string
	nocContactIc *[]string
	nocContactIe *[]string
	nocContactIew *[]string
	nocContactIre *[]string
	nocContactIsw *[]string
	nocContactN *[]string
	nocContactNic *[]string
	nocContactNie *[]string
	nocContactNiew *[]string
	nocContactNire *[]string
	nocContactNisw *[]string
	nocContactNre *[]string
	nocContactRe *[]string
	offset *int32
	portalUrl *[]string
	portalUrlIc *[]string
	portalUrlIe *[]string
	portalUrlIew *[]string
	portalUrlIre *[]string
	portalUrlIsw *[]string
	portalUrlN *[]string
	portalUrlNic *[]string
	portalUrlNie *[]string
	portalUrlNiew *[]string
	portalUrlNire *[]string
	portalUrlNisw *[]string
	portalUrlNre *[]string
	portalUrlRe *[]string
	providerNetworks *[]string
	providerNetworksIsnull *bool
	providerNetworksN *[]string
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	depth *int32
}

func (r ApiCircuitsProvidersListRequest) Account(account []string) ApiCircuitsProvidersListRequest {
	r.account = &account
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountIc(accountIc []string) ApiCircuitsProvidersListRequest {
	r.accountIc = &accountIc
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountIe(accountIe []string) ApiCircuitsProvidersListRequest {
	r.accountIe = &accountIe
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountIew(accountIew []string) ApiCircuitsProvidersListRequest {
	r.accountIew = &accountIew
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountIre(accountIre []string) ApiCircuitsProvidersListRequest {
	r.accountIre = &accountIre
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountIsw(accountIsw []string) ApiCircuitsProvidersListRequest {
	r.accountIsw = &accountIsw
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountN(accountN []string) ApiCircuitsProvidersListRequest {
	r.accountN = &accountN
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountNic(accountNic []string) ApiCircuitsProvidersListRequest {
	r.accountNic = &accountNic
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountNie(accountNie []string) ApiCircuitsProvidersListRequest {
	r.accountNie = &accountNie
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountNiew(accountNiew []string) ApiCircuitsProvidersListRequest {
	r.accountNiew = &accountNiew
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountNire(accountNire []string) ApiCircuitsProvidersListRequest {
	r.accountNire = &accountNire
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountNisw(accountNisw []string) ApiCircuitsProvidersListRequest {
	r.accountNisw = &accountNisw
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountNre(accountNre []string) ApiCircuitsProvidersListRequest {
	r.accountNre = &accountNre
	return r
}

func (r ApiCircuitsProvidersListRequest) AccountRe(accountRe []string) ApiCircuitsProvidersListRequest {
	r.accountRe = &accountRe
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContact(adminContact []string) ApiCircuitsProvidersListRequest {
	r.adminContact = &adminContact
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactIc(adminContactIc []string) ApiCircuitsProvidersListRequest {
	r.adminContactIc = &adminContactIc
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactIe(adminContactIe []string) ApiCircuitsProvidersListRequest {
	r.adminContactIe = &adminContactIe
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactIew(adminContactIew []string) ApiCircuitsProvidersListRequest {
	r.adminContactIew = &adminContactIew
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactIre(adminContactIre []string) ApiCircuitsProvidersListRequest {
	r.adminContactIre = &adminContactIre
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactIsw(adminContactIsw []string) ApiCircuitsProvidersListRequest {
	r.adminContactIsw = &adminContactIsw
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactN(adminContactN []string) ApiCircuitsProvidersListRequest {
	r.adminContactN = &adminContactN
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactNic(adminContactNic []string) ApiCircuitsProvidersListRequest {
	r.adminContactNic = &adminContactNic
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactNie(adminContactNie []string) ApiCircuitsProvidersListRequest {
	r.adminContactNie = &adminContactNie
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactNiew(adminContactNiew []string) ApiCircuitsProvidersListRequest {
	r.adminContactNiew = &adminContactNiew
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactNire(adminContactNire []string) ApiCircuitsProvidersListRequest {
	r.adminContactNire = &adminContactNire
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactNisw(adminContactNisw []string) ApiCircuitsProvidersListRequest {
	r.adminContactNisw = &adminContactNisw
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactNre(adminContactNre []string) ApiCircuitsProvidersListRequest {
	r.adminContactNre = &adminContactNre
	return r
}

func (r ApiCircuitsProvidersListRequest) AdminContactRe(adminContactRe []string) ApiCircuitsProvidersListRequest {
	r.adminContactRe = &adminContactRe
	return r
}

func (r ApiCircuitsProvidersListRequest) Asn(asn []int32) ApiCircuitsProvidersListRequest {
	r.asn = &asn
	return r
}

func (r ApiCircuitsProvidersListRequest) AsnGt(asnGt []int32) ApiCircuitsProvidersListRequest {
	r.asnGt = &asnGt
	return r
}

func (r ApiCircuitsProvidersListRequest) AsnGte(asnGte []int32) ApiCircuitsProvidersListRequest {
	r.asnGte = &asnGte
	return r
}

func (r ApiCircuitsProvidersListRequest) AsnIsnull(asnIsnull bool) ApiCircuitsProvidersListRequest {
	r.asnIsnull = &asnIsnull
	return r
}

func (r ApiCircuitsProvidersListRequest) AsnLt(asnLt []int32) ApiCircuitsProvidersListRequest {
	r.asnLt = &asnLt
	return r
}

func (r ApiCircuitsProvidersListRequest) AsnLte(asnLte []int32) ApiCircuitsProvidersListRequest {
	r.asnLte = &asnLte
	return r
}

func (r ApiCircuitsProvidersListRequest) AsnN(asnN []int32) ApiCircuitsProvidersListRequest {
	r.asnN = &asnN
	return r
}

func (r ApiCircuitsProvidersListRequest) Circuits(circuits []string) ApiCircuitsProvidersListRequest {
	r.circuits = &circuits
	return r
}

func (r ApiCircuitsProvidersListRequest) CircuitsIsnull(circuitsIsnull bool) ApiCircuitsProvidersListRequest {
	r.circuitsIsnull = &circuitsIsnull
	return r
}

func (r ApiCircuitsProvidersListRequest) CircuitsN(circuitsN []string) ApiCircuitsProvidersListRequest {
	r.circuitsN = &circuitsN
	return r
}

func (r ApiCircuitsProvidersListRequest) Comments(comments []string) ApiCircuitsProvidersListRequest {
	r.comments = &comments
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsIc(commentsIc []string) ApiCircuitsProvidersListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsIe(commentsIe []string) ApiCircuitsProvidersListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsIew(commentsIew []string) ApiCircuitsProvidersListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsIre(commentsIre []string) ApiCircuitsProvidersListRequest {
	r.commentsIre = &commentsIre
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsIsw(commentsIsw []string) ApiCircuitsProvidersListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsN(commentsN []string) ApiCircuitsProvidersListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsNic(commentsNic []string) ApiCircuitsProvidersListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsNie(commentsNie []string) ApiCircuitsProvidersListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsNiew(commentsNiew []string) ApiCircuitsProvidersListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsNire(commentsNire []string) ApiCircuitsProvidersListRequest {
	r.commentsNire = &commentsNire
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsNisw(commentsNisw []string) ApiCircuitsProvidersListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsNre(commentsNre []string) ApiCircuitsProvidersListRequest {
	r.commentsNre = &commentsNre
	return r
}

func (r ApiCircuitsProvidersListRequest) CommentsRe(commentsRe []string) ApiCircuitsProvidersListRequest {
	r.commentsRe = &commentsRe
	return r
}

func (r ApiCircuitsProvidersListRequest) Created(created []time.Time) ApiCircuitsProvidersListRequest {
	r.created = &created
	return r
}

func (r ApiCircuitsProvidersListRequest) CreatedGt(createdGt []time.Time) ApiCircuitsProvidersListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCircuitsProvidersListRequest) CreatedGte(createdGte []time.Time) ApiCircuitsProvidersListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCircuitsProvidersListRequest) CreatedIsnull(createdIsnull bool) ApiCircuitsProvidersListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiCircuitsProvidersListRequest) CreatedLt(createdLt []time.Time) ApiCircuitsProvidersListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCircuitsProvidersListRequest) CreatedLte(createdLte []time.Time) ApiCircuitsProvidersListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCircuitsProvidersListRequest) CreatedN(createdN []time.Time) ApiCircuitsProvidersListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCircuitsProvidersListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersListRequest {
	r.format = &format
	return r
}

// Has circuits
func (r ApiCircuitsProvidersListRequest) HasCircuits(hasCircuits bool) ApiCircuitsProvidersListRequest {
	r.hasCircuits = &hasCircuits
	return r
}

// Has provider networks
func (r ApiCircuitsProvidersListRequest) HasProviderNetworks(hasProviderNetworks bool) ApiCircuitsProvidersListRequest {
	r.hasProviderNetworks = &hasProviderNetworks
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCircuitsProvidersListRequest) Id(id []string) ApiCircuitsProvidersListRequest {
	r.id = &id
	return r
}

func (r ApiCircuitsProvidersListRequest) IdIc(idIc []string) ApiCircuitsProvidersListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCircuitsProvidersListRequest) IdIe(idIe []string) ApiCircuitsProvidersListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCircuitsProvidersListRequest) IdIew(idIew []string) ApiCircuitsProvidersListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCircuitsProvidersListRequest) IdIre(idIre []string) ApiCircuitsProvidersListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCircuitsProvidersListRequest) IdIsw(idIsw []string) ApiCircuitsProvidersListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCircuitsProvidersListRequest) IdN(idN []string) ApiCircuitsProvidersListRequest {
	r.idN = &idN
	return r
}

func (r ApiCircuitsProvidersListRequest) IdNic(idNic []string) ApiCircuitsProvidersListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCircuitsProvidersListRequest) IdNie(idNie []string) ApiCircuitsProvidersListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCircuitsProvidersListRequest) IdNiew(idNiew []string) ApiCircuitsProvidersListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCircuitsProvidersListRequest) IdNire(idNire []string) ApiCircuitsProvidersListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCircuitsProvidersListRequest) IdNisw(idNisw []string) ApiCircuitsProvidersListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCircuitsProvidersListRequest) IdNre(idNre []string) ApiCircuitsProvidersListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCircuitsProvidersListRequest) IdRe(idRe []string) ApiCircuitsProvidersListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiCircuitsProvidersListRequest) LastUpdated(lastUpdated []time.Time) ApiCircuitsProvidersListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCircuitsProvidersListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCircuitsProvidersListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCircuitsProvidersListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCircuitsProvidersListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCircuitsProvidersListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiCircuitsProvidersListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiCircuitsProvidersListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCircuitsProvidersListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCircuitsProvidersListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCircuitsProvidersListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCircuitsProvidersListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCircuitsProvidersListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCircuitsProvidersListRequest) Limit(limit int32) ApiCircuitsProvidersListRequest {
	r.limit = &limit
	return r
}

func (r ApiCircuitsProvidersListRequest) Location(location []string) ApiCircuitsProvidersListRequest {
	r.location = &location
	return r
}

func (r ApiCircuitsProvidersListRequest) LocationIsnull(locationIsnull bool) ApiCircuitsProvidersListRequest {
	r.locationIsnull = &locationIsnull
	return r
}

func (r ApiCircuitsProvidersListRequest) LocationN(locationN []string) ApiCircuitsProvidersListRequest {
	r.locationN = &locationN
	return r
}

func (r ApiCircuitsProvidersListRequest) Name(name []string) ApiCircuitsProvidersListRequest {
	r.name = &name
	return r
}

func (r ApiCircuitsProvidersListRequest) NameIc(nameIc []string) ApiCircuitsProvidersListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiCircuitsProvidersListRequest) NameIe(nameIe []string) ApiCircuitsProvidersListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiCircuitsProvidersListRequest) NameIew(nameIew []string) ApiCircuitsProvidersListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiCircuitsProvidersListRequest) NameIre(nameIre []string) ApiCircuitsProvidersListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiCircuitsProvidersListRequest) NameIsw(nameIsw []string) ApiCircuitsProvidersListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiCircuitsProvidersListRequest) NameN(nameN []string) ApiCircuitsProvidersListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiCircuitsProvidersListRequest) NameNic(nameNic []string) ApiCircuitsProvidersListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiCircuitsProvidersListRequest) NameNie(nameNie []string) ApiCircuitsProvidersListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiCircuitsProvidersListRequest) NameNiew(nameNiew []string) ApiCircuitsProvidersListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiCircuitsProvidersListRequest) NameNire(nameNire []string) ApiCircuitsProvidersListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiCircuitsProvidersListRequest) NameNisw(nameNisw []string) ApiCircuitsProvidersListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiCircuitsProvidersListRequest) NameNre(nameNre []string) ApiCircuitsProvidersListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiCircuitsProvidersListRequest) NameRe(nameRe []string) ApiCircuitsProvidersListRequest {
	r.nameRe = &nameRe
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContact(nocContact []string) ApiCircuitsProvidersListRequest {
	r.nocContact = &nocContact
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactIc(nocContactIc []string) ApiCircuitsProvidersListRequest {
	r.nocContactIc = &nocContactIc
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactIe(nocContactIe []string) ApiCircuitsProvidersListRequest {
	r.nocContactIe = &nocContactIe
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactIew(nocContactIew []string) ApiCircuitsProvidersListRequest {
	r.nocContactIew = &nocContactIew
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactIre(nocContactIre []string) ApiCircuitsProvidersListRequest {
	r.nocContactIre = &nocContactIre
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactIsw(nocContactIsw []string) ApiCircuitsProvidersListRequest {
	r.nocContactIsw = &nocContactIsw
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactN(nocContactN []string) ApiCircuitsProvidersListRequest {
	r.nocContactN = &nocContactN
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactNic(nocContactNic []string) ApiCircuitsProvidersListRequest {
	r.nocContactNic = &nocContactNic
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactNie(nocContactNie []string) ApiCircuitsProvidersListRequest {
	r.nocContactNie = &nocContactNie
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactNiew(nocContactNiew []string) ApiCircuitsProvidersListRequest {
	r.nocContactNiew = &nocContactNiew
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactNire(nocContactNire []string) ApiCircuitsProvidersListRequest {
	r.nocContactNire = &nocContactNire
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactNisw(nocContactNisw []string) ApiCircuitsProvidersListRequest {
	r.nocContactNisw = &nocContactNisw
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactNre(nocContactNre []string) ApiCircuitsProvidersListRequest {
	r.nocContactNre = &nocContactNre
	return r
}

func (r ApiCircuitsProvidersListRequest) NocContactRe(nocContactRe []string) ApiCircuitsProvidersListRequest {
	r.nocContactRe = &nocContactRe
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsProvidersListRequest) Offset(offset int32) ApiCircuitsProvidersListRequest {
	r.offset = &offset
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrl(portalUrl []string) ApiCircuitsProvidersListRequest {
	r.portalUrl = &portalUrl
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlIc(portalUrlIc []string) ApiCircuitsProvidersListRequest {
	r.portalUrlIc = &portalUrlIc
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlIe(portalUrlIe []string) ApiCircuitsProvidersListRequest {
	r.portalUrlIe = &portalUrlIe
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlIew(portalUrlIew []string) ApiCircuitsProvidersListRequest {
	r.portalUrlIew = &portalUrlIew
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlIre(portalUrlIre []string) ApiCircuitsProvidersListRequest {
	r.portalUrlIre = &portalUrlIre
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlIsw(portalUrlIsw []string) ApiCircuitsProvidersListRequest {
	r.portalUrlIsw = &portalUrlIsw
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlN(portalUrlN []string) ApiCircuitsProvidersListRequest {
	r.portalUrlN = &portalUrlN
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlNic(portalUrlNic []string) ApiCircuitsProvidersListRequest {
	r.portalUrlNic = &portalUrlNic
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlNie(portalUrlNie []string) ApiCircuitsProvidersListRequest {
	r.portalUrlNie = &portalUrlNie
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlNiew(portalUrlNiew []string) ApiCircuitsProvidersListRequest {
	r.portalUrlNiew = &portalUrlNiew
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlNire(portalUrlNire []string) ApiCircuitsProvidersListRequest {
	r.portalUrlNire = &portalUrlNire
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlNisw(portalUrlNisw []string) ApiCircuitsProvidersListRequest {
	r.portalUrlNisw = &portalUrlNisw
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlNre(portalUrlNre []string) ApiCircuitsProvidersListRequest {
	r.portalUrlNre = &portalUrlNre
	return r
}

func (r ApiCircuitsProvidersListRequest) PortalUrlRe(portalUrlRe []string) ApiCircuitsProvidersListRequest {
	r.portalUrlRe = &portalUrlRe
	return r
}

func (r ApiCircuitsProvidersListRequest) ProviderNetworks(providerNetworks []string) ApiCircuitsProvidersListRequest {
	r.providerNetworks = &providerNetworks
	return r
}

func (r ApiCircuitsProvidersListRequest) ProviderNetworksIsnull(providerNetworksIsnull bool) ApiCircuitsProvidersListRequest {
	r.providerNetworksIsnull = &providerNetworksIsnull
	return r
}

func (r ApiCircuitsProvidersListRequest) ProviderNetworksN(providerNetworksN []string) ApiCircuitsProvidersListRequest {
	r.providerNetworksN = &providerNetworksN
	return r
}

// Search
func (r ApiCircuitsProvidersListRequest) Q(q string) ApiCircuitsProvidersListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCircuitsProvidersListRequest) Sort(sort string) ApiCircuitsProvidersListRequest {
	r.sort = &sort
	return r
}

func (r ApiCircuitsProvidersListRequest) Tags(tags []string) ApiCircuitsProvidersListRequest {
	r.tags = &tags
	return r
}

func (r ApiCircuitsProvidersListRequest) TagsIsnull(tagsIsnull bool) ApiCircuitsProvidersListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiCircuitsProvidersListRequest) TagsN(tagsN []string) ApiCircuitsProvidersListRequest {
	r.tagsN = &tagsN
	return r
}

// Serializer Depth
func (r ApiCircuitsProvidersListRequest) Depth(depth int32) ApiCircuitsProvidersListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsProvidersListRequest) Execute() (*PaginatedProviderList, *http.Response, error) {
	return r.ApiService.CircuitsProvidersListExecute(r)
}

/*
CircuitsProvidersList Method for CircuitsProvidersList

Retrieve a list of provider objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCircuitsProvidersListRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersList(ctx context.Context) ApiCircuitsProvidersListRequest {
	return ApiCircuitsProvidersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedProviderList
func (a *CircuitsAPIService) CircuitsProvidersListExecute(r ApiCircuitsProvidersListRequest) (*PaginatedProviderList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedProviderList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.account != nil {
		t := *r.account
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account", t, "form", "multi")
		}
	}
	if r.accountIc != nil {
		t := *r.accountIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__ic", t, "form", "multi")
		}
	}
	if r.accountIe != nil {
		t := *r.accountIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__ie", t, "form", "multi")
		}
	}
	if r.accountIew != nil {
		t := *r.accountIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__iew", t, "form", "multi")
		}
	}
	if r.accountIre != nil {
		t := *r.accountIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__ire", t, "form", "multi")
		}
	}
	if r.accountIsw != nil {
		t := *r.accountIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__isw", t, "form", "multi")
		}
	}
	if r.accountN != nil {
		t := *r.accountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__n", t, "form", "multi")
		}
	}
	if r.accountNic != nil {
		t := *r.accountNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__nic", t, "form", "multi")
		}
	}
	if r.accountNie != nil {
		t := *r.accountNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__nie", t, "form", "multi")
		}
	}
	if r.accountNiew != nil {
		t := *r.accountNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__niew", t, "form", "multi")
		}
	}
	if r.accountNire != nil {
		t := *r.accountNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__nire", t, "form", "multi")
		}
	}
	if r.accountNisw != nil {
		t := *r.accountNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__nisw", t, "form", "multi")
		}
	}
	if r.accountNre != nil {
		t := *r.accountNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__nre", t, "form", "multi")
		}
	}
	if r.accountRe != nil {
		t := *r.accountRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account__re", t, "form", "multi")
		}
	}
	if r.adminContact != nil {
		t := *r.adminContact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact", t, "form", "multi")
		}
	}
	if r.adminContactIc != nil {
		t := *r.adminContactIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__ic", t, "form", "multi")
		}
	}
	if r.adminContactIe != nil {
		t := *r.adminContactIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__ie", t, "form", "multi")
		}
	}
	if r.adminContactIew != nil {
		t := *r.adminContactIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__iew", t, "form", "multi")
		}
	}
	if r.adminContactIre != nil {
		t := *r.adminContactIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__ire", t, "form", "multi")
		}
	}
	if r.adminContactIsw != nil {
		t := *r.adminContactIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__isw", t, "form", "multi")
		}
	}
	if r.adminContactN != nil {
		t := *r.adminContactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__n", t, "form", "multi")
		}
	}
	if r.adminContactNic != nil {
		t := *r.adminContactNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nic", t, "form", "multi")
		}
	}
	if r.adminContactNie != nil {
		t := *r.adminContactNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nie", t, "form", "multi")
		}
	}
	if r.adminContactNiew != nil {
		t := *r.adminContactNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__niew", t, "form", "multi")
		}
	}
	if r.adminContactNire != nil {
		t := *r.adminContactNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nire", t, "form", "multi")
		}
	}
	if r.adminContactNisw != nil {
		t := *r.adminContactNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nisw", t, "form", "multi")
		}
	}
	if r.adminContactNre != nil {
		t := *r.adminContactNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__nre", t, "form", "multi")
		}
	}
	if r.adminContactRe != nil {
		t := *r.adminContactRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "admin_contact__re", t, "form", "multi")
		}
	}
	if r.asn != nil {
		t := *r.asn
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn", t, "form", "multi")
		}
	}
	if r.asnGt != nil {
		t := *r.asnGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn__gt", t, "form", "multi")
		}
	}
	if r.asnGte != nil {
		t := *r.asnGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn__gte", t, "form", "multi")
		}
	}
	if r.asnIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asn__isnull", r.asnIsnull, "form", "")
	}
	if r.asnLt != nil {
		t := *r.asnLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn__lt", t, "form", "multi")
		}
	}
	if r.asnLte != nil {
		t := *r.asnLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn__lte", t, "form", "multi")
		}
	}
	if r.asnN != nil {
		t := *r.asnN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn__n", t, "form", "multi")
		}
	}
	if r.circuits != nil {
		t := *r.circuits
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuits", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuits", t, "form", "multi")
		}
	}
	if r.circuitsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "circuits__isnull", r.circuitsIsnull, "form", "")
	}
	if r.circuitsN != nil {
		t := *r.circuitsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuits__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuits__n", t, "form", "multi")
		}
	}
	if r.comments != nil {
		t := *r.comments
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments", t, "form", "multi")
		}
	}
	if r.commentsIc != nil {
		t := *r.commentsIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", t, "form", "multi")
		}
	}
	if r.commentsIe != nil {
		t := *r.commentsIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", t, "form", "multi")
		}
	}
	if r.commentsIew != nil {
		t := *r.commentsIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", t, "form", "multi")
		}
	}
	if r.commentsIre != nil {
		t := *r.commentsIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", t, "form", "multi")
		}
	}
	if r.commentsIsw != nil {
		t := *r.commentsIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", t, "form", "multi")
		}
	}
	if r.commentsN != nil {
		t := *r.commentsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", t, "form", "multi")
		}
	}
	if r.commentsNic != nil {
		t := *r.commentsNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", t, "form", "multi")
		}
	}
	if r.commentsNie != nil {
		t := *r.commentsNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", t, "form", "multi")
		}
	}
	if r.commentsNiew != nil {
		t := *r.commentsNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", t, "form", "multi")
		}
	}
	if r.commentsNire != nil {
		t := *r.commentsNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", t, "form", "multi")
		}
	}
	if r.commentsNisw != nil {
		t := *r.commentsNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", t, "form", "multi")
		}
	}
	if r.commentsNre != nil {
		t := *r.commentsNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", t, "form", "multi")
		}
	}
	if r.commentsRe != nil {
		t := *r.commentsRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.hasCircuits != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_circuits", r.hasCircuits, "form", "")
	}
	if r.hasProviderNetworks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_provider_networks", r.hasProviderNetworks, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "form", "multi")
		}
	}
	if r.locationIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location__isnull", r.locationIsnull, "form", "")
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "form", "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.nocContact != nil {
		t := *r.nocContact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact", t, "form", "multi")
		}
	}
	if r.nocContactIc != nil {
		t := *r.nocContactIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__ic", t, "form", "multi")
		}
	}
	if r.nocContactIe != nil {
		t := *r.nocContactIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__ie", t, "form", "multi")
		}
	}
	if r.nocContactIew != nil {
		t := *r.nocContactIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__iew", t, "form", "multi")
		}
	}
	if r.nocContactIre != nil {
		t := *r.nocContactIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__ire", t, "form", "multi")
		}
	}
	if r.nocContactIsw != nil {
		t := *r.nocContactIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__isw", t, "form", "multi")
		}
	}
	if r.nocContactN != nil {
		t := *r.nocContactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__n", t, "form", "multi")
		}
	}
	if r.nocContactNic != nil {
		t := *r.nocContactNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nic", t, "form", "multi")
		}
	}
	if r.nocContactNie != nil {
		t := *r.nocContactNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nie", t, "form", "multi")
		}
	}
	if r.nocContactNiew != nil {
		t := *r.nocContactNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__niew", t, "form", "multi")
		}
	}
	if r.nocContactNire != nil {
		t := *r.nocContactNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nire", t, "form", "multi")
		}
	}
	if r.nocContactNisw != nil {
		t := *r.nocContactNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nisw", t, "form", "multi")
		}
	}
	if r.nocContactNre != nil {
		t := *r.nocContactNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__nre", t, "form", "multi")
		}
	}
	if r.nocContactRe != nil {
		t := *r.nocContactRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "noc_contact__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.portalUrl != nil {
		t := *r.portalUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url", t, "form", "multi")
		}
	}
	if r.portalUrlIc != nil {
		t := *r.portalUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__ic", t, "form", "multi")
		}
	}
	if r.portalUrlIe != nil {
		t := *r.portalUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__ie", t, "form", "multi")
		}
	}
	if r.portalUrlIew != nil {
		t := *r.portalUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__iew", t, "form", "multi")
		}
	}
	if r.portalUrlIre != nil {
		t := *r.portalUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__ire", t, "form", "multi")
		}
	}
	if r.portalUrlIsw != nil {
		t := *r.portalUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__isw", t, "form", "multi")
		}
	}
	if r.portalUrlN != nil {
		t := *r.portalUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__n", t, "form", "multi")
		}
	}
	if r.portalUrlNic != nil {
		t := *r.portalUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nic", t, "form", "multi")
		}
	}
	if r.portalUrlNie != nil {
		t := *r.portalUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nie", t, "form", "multi")
		}
	}
	if r.portalUrlNiew != nil {
		t := *r.portalUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__niew", t, "form", "multi")
		}
	}
	if r.portalUrlNire != nil {
		t := *r.portalUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nire", t, "form", "multi")
		}
	}
	if r.portalUrlNisw != nil {
		t := *r.portalUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nisw", t, "form", "multi")
		}
	}
	if r.portalUrlNre != nil {
		t := *r.portalUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__nre", t, "form", "multi")
		}
	}
	if r.portalUrlRe != nil {
		t := *r.portalUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "portal_url__re", t, "form", "multi")
		}
	}
	if r.providerNetworks != nil {
		t := *r.providerNetworks
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider_networks", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider_networks", t, "form", "multi")
		}
	}
	if r.providerNetworksIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider_networks__isnull", r.providerNetworksIsnull, "form", "")
	}
	if r.providerNetworksN != nil {
		t := *r.providerNetworksN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider_networks__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider_networks__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProvidersNotesCreateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProvidersNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCircuitsProvidersNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCircuitsProvidersNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProvidersNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CircuitsProvidersNotesCreateExecute(r)
}

/*
CircuitsProvidersNotesCreate Method for CircuitsProvidersNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider.
 @return ApiCircuitsProvidersNotesCreateRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersNotesCreate(ctx context.Context, id string) ApiCircuitsProvidersNotesCreateRequest {
	return ApiCircuitsProvidersNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CircuitsAPIService) CircuitsProvidersNotesCreateExecute(r ApiCircuitsProvidersNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProvidersNotesListRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCircuitsProvidersNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCircuitsProvidersNotesListRequest) Limit(limit int32) ApiCircuitsProvidersNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCircuitsProvidersNotesListRequest) Offset(offset int32) ApiCircuitsProvidersNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCircuitsProvidersNotesListRequest) Depth(depth int32) ApiCircuitsProvidersNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsProvidersNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CircuitsProvidersNotesListExecute(r)
}

/*
CircuitsProvidersNotesList Method for CircuitsProvidersNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider.
 @return ApiCircuitsProvidersNotesListRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersNotesList(ctx context.Context, id string) ApiCircuitsProvidersNotesListRequest {
	return ApiCircuitsProvidersNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CircuitsAPIService) CircuitsProvidersNotesListExecute(r ApiCircuitsProvidersNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProvidersPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedProviderRequest *PatchedProviderRequest
}

func (r ApiCircuitsProvidersPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProvidersPartialUpdateRequest) PatchedProviderRequest(patchedProviderRequest PatchedProviderRequest) ApiCircuitsProvidersPartialUpdateRequest {
	r.patchedProviderRequest = &patchedProviderRequest
	return r
}

func (r ApiCircuitsProvidersPartialUpdateRequest) Execute() (*Provider, *http.Response, error) {
	return r.ApiService.CircuitsProvidersPartialUpdateExecute(r)
}

/*
CircuitsProvidersPartialUpdate Method for CircuitsProvidersPartialUpdate

Partial update a provider object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider.
 @return ApiCircuitsProvidersPartialUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersPartialUpdate(ctx context.Context, id string) ApiCircuitsProvidersPartialUpdateRequest {
	return ApiCircuitsProvidersPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Provider
func (a *CircuitsAPIService) CircuitsProvidersPartialUpdateExecute(r ApiCircuitsProvidersPartialUpdateRequest) (*Provider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Provider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedProviderRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProvidersRetrieveRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCircuitsProvidersRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCircuitsProvidersRetrieveRequest) Depth(depth int32) ApiCircuitsProvidersRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCircuitsProvidersRetrieveRequest) Execute() (*Provider, *http.Response, error) {
	return r.ApiService.CircuitsProvidersRetrieveExecute(r)
}

/*
CircuitsProvidersRetrieve Method for CircuitsProvidersRetrieve

Retrieve a provider object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider.
 @return ApiCircuitsProvidersRetrieveRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersRetrieve(ctx context.Context, id string) ApiCircuitsProvidersRetrieveRequest {
	return ApiCircuitsProvidersRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Provider
func (a *CircuitsAPIService) CircuitsProvidersRetrieveExecute(r ApiCircuitsProvidersRetrieveRequest) (*Provider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Provider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCircuitsProvidersUpdateRequest struct {
	ctx context.Context
	ApiService *CircuitsAPIService
	id string
	providerRequest *ProviderRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCircuitsProvidersUpdateRequest) ProviderRequest(providerRequest ProviderRequest) ApiCircuitsProvidersUpdateRequest {
	r.providerRequest = &providerRequest
	return r
}

func (r ApiCircuitsProvidersUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCircuitsProvidersUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCircuitsProvidersUpdateRequest) Execute() (*Provider, *http.Response, error) {
	return r.ApiService.CircuitsProvidersUpdateExecute(r)
}

/*
CircuitsProvidersUpdate Method for CircuitsProvidersUpdate

Update a provider object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this provider.
 @return ApiCircuitsProvidersUpdateRequest
*/
func (a *CircuitsAPIService) CircuitsProvidersUpdate(ctx context.Context, id string) ApiCircuitsProvidersUpdateRequest {
	return ApiCircuitsProvidersUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Provider
func (a *CircuitsAPIService) CircuitsProvidersUpdateExecute(r ApiCircuitsProvidersUpdateRequest) (*Provider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Provider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CircuitsAPIService.CircuitsProvidersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/circuits/providers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.providerRequest == nil {
		return localVarReturnValue, nil, reportError("providerRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.providerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
