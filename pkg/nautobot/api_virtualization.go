/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// VirtualizationAPIService VirtualizationAPI service
type VirtualizationAPIService service

type ApiVirtualizationClusterGroupsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterGroupsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiVirtualizationClusterGroupsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiVirtualizationClusterGroupsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsBulkDestroyExecute(r)
}

/*
VirtualizationClusterGroupsBulkDestroy Method for VirtualizationClusterGroupsBulkDestroy

Destroy a list of cluster group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsBulkDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsBulkDestroy(ctx context.Context) ApiVirtualizationClusterGroupsBulkDestroyRequest {
	return ApiVirtualizationClusterGroupsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationClusterGroupsBulkDestroyExecute(r ApiVirtualizationClusterGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	patchedBulkWritableClusterGroupRequest *[]PatchedBulkWritableClusterGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterGroupsBulkPartialUpdateRequest) PatchedBulkWritableClusterGroupRequest(patchedBulkWritableClusterGroupRequest []PatchedBulkWritableClusterGroupRequest) ApiVirtualizationClusterGroupsBulkPartialUpdateRequest {
	r.patchedBulkWritableClusterGroupRequest = &patchedBulkWritableClusterGroupRequest
	return r
}

func (r ApiVirtualizationClusterGroupsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterGroupsBulkPartialUpdateRequest) Execute() ([]ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsBulkPartialUpdateExecute(r)
}

/*
VirtualizationClusterGroupsBulkPartialUpdate Method for VirtualizationClusterGroupsBulkPartialUpdate

Partial update a list of cluster group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsBulkPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsBulkPartialUpdate(ctx context.Context) ApiVirtualizationClusterGroupsBulkPartialUpdateRequest {
	return ApiVirtualizationClusterGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ClusterGroup
func (a *VirtualizationAPIService) VirtualizationClusterGroupsBulkPartialUpdateExecute(r ApiVirtualizationClusterGroupsBulkPartialUpdateRequest) ([]ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableClusterGroupRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableClusterGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableClusterGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkWritableClusterGroupRequest *[]BulkWritableClusterGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterGroupsBulkUpdateRequest) BulkWritableClusterGroupRequest(bulkWritableClusterGroupRequest []BulkWritableClusterGroupRequest) ApiVirtualizationClusterGroupsBulkUpdateRequest {
	r.bulkWritableClusterGroupRequest = &bulkWritableClusterGroupRequest
	return r
}

func (r ApiVirtualizationClusterGroupsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterGroupsBulkUpdateRequest) Execute() ([]ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsBulkUpdateExecute(r)
}

/*
VirtualizationClusterGroupsBulkUpdate Method for VirtualizationClusterGroupsBulkUpdate

Update a list of cluster group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsBulkUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsBulkUpdate(ctx context.Context) ApiVirtualizationClusterGroupsBulkUpdateRequest {
	return ApiVirtualizationClusterGroupsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ClusterGroup
func (a *VirtualizationAPIService) VirtualizationClusterGroupsBulkUpdateExecute(r ApiVirtualizationClusterGroupsBulkUpdateRequest) ([]ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableClusterGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableClusterGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableClusterGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	clusterGroupRequest *ClusterGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterGroupsCreateRequest) ClusterGroupRequest(clusterGroupRequest ClusterGroupRequest) ApiVirtualizationClusterGroupsCreateRequest {
	r.clusterGroupRequest = &clusterGroupRequest
	return r
}

func (r ApiVirtualizationClusterGroupsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterGroupsCreateRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsCreateExecute(r)
}

/*
VirtualizationClusterGroupsCreate Method for VirtualizationClusterGroupsCreate

Create one or more cluster group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsCreate(ctx context.Context) ApiVirtualizationClusterGroupsCreateRequest {
	return ApiVirtualizationClusterGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationAPIService) VirtualizationClusterGroupsCreateExecute(r ApiVirtualizationClusterGroupsCreateRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterGroupRequest == nil {
		return localVarReturnValue, nil, reportError("clusterGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterGroupsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsDestroyExecute(r)
}

/*
VirtualizationClusterGroupsDestroy Method for VirtualizationClusterGroupsDestroy

Destroy a cluster group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsDestroy(ctx context.Context, id string) ApiVirtualizationClusterGroupsDestroyRequest {
	return ApiVirtualizationClusterGroupsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationClusterGroupsDestroyExecute(r ApiVirtualizationClusterGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	clusters *[]string
	clustersIsnull *bool
	clustersN *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasClusters *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	depth *int32
}

func (r ApiVirtualizationClusterGroupsListRequest) Clusters(clusters []string) ApiVirtualizationClusterGroupsListRequest {
	r.clusters = &clusters
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) ClustersIsnull(clustersIsnull bool) ApiVirtualizationClusterGroupsListRequest {
	r.clustersIsnull = &clustersIsnull
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) ClustersN(clustersN []string) ApiVirtualizationClusterGroupsListRequest {
	r.clustersN = &clustersN
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Created(created []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) CreatedGt(createdGt []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) CreatedGte(createdGte []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) CreatedIsnull(createdIsnull bool) ApiVirtualizationClusterGroupsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) CreatedLt(createdLt []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) CreatedLte(createdLte []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) CreatedN(createdN []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Description(description []string) ApiVirtualizationClusterGroupsListRequest {
	r.description = &description
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIc(descriptionIc []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIe(descriptionIe []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIew(descriptionIew []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIre(descriptionIre []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIsw(descriptionIsw []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionN(descriptionN []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNic(descriptionNic []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNie(descriptionNie []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNiew(descriptionNiew []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNire(descriptionNire []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNisw(descriptionNisw []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNre(descriptionNre []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionRe(descriptionRe []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsListRequest {
	r.format = &format
	return r
}

// Has clusters
func (r ApiVirtualizationClusterGroupsListRequest) HasClusters(hasClusters bool) ApiVirtualizationClusterGroupsListRequest {
	r.hasClusters = &hasClusters
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiVirtualizationClusterGroupsListRequest) Id(id []string) ApiVirtualizationClusterGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIc(idIc []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIe(idIe []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIew(idIew []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIre(idIre []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIsw(idIsw []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdN(idN []string) ApiVirtualizationClusterGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNic(idNic []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNie(idNie []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNiew(idNiew []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNire(idNire []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNisw(idNisw []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNre(idNre []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdRe(idRe []string) ApiVirtualizationClusterGroupsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdated(lastUpdated []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationClusterGroupsListRequest) Limit(limit int32) ApiVirtualizationClusterGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Name(name []string) ApiVirtualizationClusterGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIc(nameIc []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIe(nameIe []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIew(nameIew []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIre(nameIre []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIsw(nameIsw []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameN(nameN []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNic(nameNic []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNie(nameNie []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNiew(nameNiew []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNire(nameNire []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNisw(nameNisw []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNre(nameNre []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameRe(nameRe []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationClusterGroupsListRequest) Offset(offset int32) ApiVirtualizationClusterGroupsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiVirtualizationClusterGroupsListRequest) Q(q string) ApiVirtualizationClusterGroupsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiVirtualizationClusterGroupsListRequest) Sort(sort string) ApiVirtualizationClusterGroupsListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiVirtualizationClusterGroupsListRequest) Depth(depth int32) ApiVirtualizationClusterGroupsListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Execute() (*PaginatedClusterGroupList, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsListExecute(r)
}

/*
VirtualizationClusterGroupsList Method for VirtualizationClusterGroupsList

Retrieve a list of cluster group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsListRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsList(ctx context.Context) ApiVirtualizationClusterGroupsListRequest {
	return ApiVirtualizationClusterGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedClusterGroupList
func (a *VirtualizationAPIService) VirtualizationClusterGroupsListExecute(r ApiVirtualizationClusterGroupsListRequest) (*PaginatedClusterGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedClusterGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusters != nil {
		t := *r.clusters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusters", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusters", t, "multi")
		}
	}
	if r.clustersIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clusters__isnull", r.clustersIsnull, "")
	}
	if r.clustersN != nil {
		t := *r.clustersN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusters__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusters__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.hasClusters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_clusters", r.hasClusters, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsNotesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterGroupsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiVirtualizationClusterGroupsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiVirtualizationClusterGroupsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterGroupsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsNotesCreateExecute(r)
}

/*
VirtualizationClusterGroupsNotesCreate Method for VirtualizationClusterGroupsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsNotesCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsNotesCreate(ctx context.Context, id string) ApiVirtualizationClusterGroupsNotesCreateRequest {
	return ApiVirtualizationClusterGroupsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *VirtualizationAPIService) VirtualizationClusterGroupsNotesCreateExecute(r ApiVirtualizationClusterGroupsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsNotesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiVirtualizationClusterGroupsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationClusterGroupsNotesListRequest) Limit(limit int32) ApiVirtualizationClusterGroupsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationClusterGroupsNotesListRequest) Offset(offset int32) ApiVirtualizationClusterGroupsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiVirtualizationClusterGroupsNotesListRequest) Depth(depth int32) ApiVirtualizationClusterGroupsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationClusterGroupsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsNotesListExecute(r)
}

/*
VirtualizationClusterGroupsNotesList Method for VirtualizationClusterGroupsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsNotesListRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsNotesList(ctx context.Context, id string) ApiVirtualizationClusterGroupsNotesListRequest {
	return ApiVirtualizationClusterGroupsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *VirtualizationAPIService) VirtualizationClusterGroupsNotesListExecute(r ApiVirtualizationClusterGroupsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedClusterGroupRequest *PatchedClusterGroupRequest
}

func (r ApiVirtualizationClusterGroupsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterGroupsPartialUpdateRequest) PatchedClusterGroupRequest(patchedClusterGroupRequest PatchedClusterGroupRequest) ApiVirtualizationClusterGroupsPartialUpdateRequest {
	r.patchedClusterGroupRequest = &patchedClusterGroupRequest
	return r
}

func (r ApiVirtualizationClusterGroupsPartialUpdateRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsPartialUpdateExecute(r)
}

/*
VirtualizationClusterGroupsPartialUpdate Method for VirtualizationClusterGroupsPartialUpdate

Partial update a cluster group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsPartialUpdate(ctx context.Context, id string) ApiVirtualizationClusterGroupsPartialUpdateRequest {
	return ApiVirtualizationClusterGroupsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationAPIService) VirtualizationClusterGroupsPartialUpdateExecute(r ApiVirtualizationClusterGroupsPartialUpdateRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedClusterGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiVirtualizationClusterGroupsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiVirtualizationClusterGroupsRetrieveRequest) Depth(depth int32) ApiVirtualizationClusterGroupsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationClusterGroupsRetrieveRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsRetrieveExecute(r)
}

/*
VirtualizationClusterGroupsRetrieve Method for VirtualizationClusterGroupsRetrieve

Retrieve a cluster group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsRetrieveRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsRetrieve(ctx context.Context, id string) ApiVirtualizationClusterGroupsRetrieveRequest {
	return ApiVirtualizationClusterGroupsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationAPIService) VirtualizationClusterGroupsRetrieveExecute(r ApiVirtualizationClusterGroupsRetrieveRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	clusterGroupRequest *ClusterGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterGroupsUpdateRequest) ClusterGroupRequest(clusterGroupRequest ClusterGroupRequest) ApiVirtualizationClusterGroupsUpdateRequest {
	r.clusterGroupRequest = &clusterGroupRequest
	return r
}

func (r ApiVirtualizationClusterGroupsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterGroupsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterGroupsUpdateRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsUpdateExecute(r)
}

/*
VirtualizationClusterGroupsUpdate Method for VirtualizationClusterGroupsUpdate

Update a cluster group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterGroupsUpdate(ctx context.Context, id string) ApiVirtualizationClusterGroupsUpdateRequest {
	return ApiVirtualizationClusterGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationAPIService) VirtualizationClusterGroupsUpdateExecute(r ApiVirtualizationClusterGroupsUpdateRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterGroupRequest == nil {
		return localVarReturnValue, nil, reportError("clusterGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterTypesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiVirtualizationClusterTypesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiVirtualizationClusterTypesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterTypesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesBulkDestroyExecute(r)
}

/*
VirtualizationClusterTypesBulkDestroy Method for VirtualizationClusterTypesBulkDestroy

Destroy a list of cluster type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesBulkDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesBulkDestroy(ctx context.Context) ApiVirtualizationClusterTypesBulkDestroyRequest {
	return ApiVirtualizationClusterTypesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationClusterTypesBulkDestroyExecute(r ApiVirtualizationClusterTypesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	patchedBulkWritableClusterTypeRequest *[]PatchedBulkWritableClusterTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterTypesBulkPartialUpdateRequest) PatchedBulkWritableClusterTypeRequest(patchedBulkWritableClusterTypeRequest []PatchedBulkWritableClusterTypeRequest) ApiVirtualizationClusterTypesBulkPartialUpdateRequest {
	r.patchedBulkWritableClusterTypeRequest = &patchedBulkWritableClusterTypeRequest
	return r
}

func (r ApiVirtualizationClusterTypesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterTypesBulkPartialUpdateRequest) Execute() ([]ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesBulkPartialUpdateExecute(r)
}

/*
VirtualizationClusterTypesBulkPartialUpdate Method for VirtualizationClusterTypesBulkPartialUpdate

Partial update a list of cluster type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesBulkPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesBulkPartialUpdate(ctx context.Context) ApiVirtualizationClusterTypesBulkPartialUpdateRequest {
	return ApiVirtualizationClusterTypesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ClusterType
func (a *VirtualizationAPIService) VirtualizationClusterTypesBulkPartialUpdateExecute(r ApiVirtualizationClusterTypesBulkPartialUpdateRequest) ([]ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableClusterTypeRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableClusterTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableClusterTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkWritableClusterTypeRequest *[]BulkWritableClusterTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterTypesBulkUpdateRequest) BulkWritableClusterTypeRequest(bulkWritableClusterTypeRequest []BulkWritableClusterTypeRequest) ApiVirtualizationClusterTypesBulkUpdateRequest {
	r.bulkWritableClusterTypeRequest = &bulkWritableClusterTypeRequest
	return r
}

func (r ApiVirtualizationClusterTypesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterTypesBulkUpdateRequest) Execute() ([]ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesBulkUpdateExecute(r)
}

/*
VirtualizationClusterTypesBulkUpdate Method for VirtualizationClusterTypesBulkUpdate

Update a list of cluster type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesBulkUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesBulkUpdate(ctx context.Context) ApiVirtualizationClusterTypesBulkUpdateRequest {
	return ApiVirtualizationClusterTypesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ClusterType
func (a *VirtualizationAPIService) VirtualizationClusterTypesBulkUpdateExecute(r ApiVirtualizationClusterTypesBulkUpdateRequest) ([]ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableClusterTypeRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableClusterTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableClusterTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	clusterTypeRequest *ClusterTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterTypesCreateRequest) ClusterTypeRequest(clusterTypeRequest ClusterTypeRequest) ApiVirtualizationClusterTypesCreateRequest {
	r.clusterTypeRequest = &clusterTypeRequest
	return r
}

func (r ApiVirtualizationClusterTypesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterTypesCreateRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesCreateExecute(r)
}

/*
VirtualizationClusterTypesCreate Method for VirtualizationClusterTypesCreate

Create one or more cluster type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesCreate(ctx context.Context) ApiVirtualizationClusterTypesCreateRequest {
	return ApiVirtualizationClusterTypesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationAPIService) VirtualizationClusterTypesCreateExecute(r ApiVirtualizationClusterTypesCreateRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterTypeRequest == nil {
		return localVarReturnValue, nil, reportError("clusterTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterTypesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterTypesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesDestroyExecute(r)
}

/*
VirtualizationClusterTypesDestroy Method for VirtualizationClusterTypesDestroy

Destroy a cluster type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesDestroy(ctx context.Context, id string) ApiVirtualizationClusterTypesDestroyRequest {
	return ApiVirtualizationClusterTypesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationClusterTypesDestroyExecute(r ApiVirtualizationClusterTypesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	clusters *[]string
	clustersIsnull *bool
	clustersN *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasClusters *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	depth *int32
}

func (r ApiVirtualizationClusterTypesListRequest) Clusters(clusters []string) ApiVirtualizationClusterTypesListRequest {
	r.clusters = &clusters
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) ClustersIsnull(clustersIsnull bool) ApiVirtualizationClusterTypesListRequest {
	r.clustersIsnull = &clustersIsnull
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) ClustersN(clustersN []string) ApiVirtualizationClusterTypesListRequest {
	r.clustersN = &clustersN
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Created(created []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.created = &created
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) CreatedGt(createdGt []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) CreatedGte(createdGte []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) CreatedIsnull(createdIsnull bool) ApiVirtualizationClusterTypesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) CreatedLt(createdLt []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) CreatedLte(createdLte []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) CreatedN(createdN []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Description(description []string) ApiVirtualizationClusterTypesListRequest {
	r.description = &description
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIc(descriptionIc []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIe(descriptionIe []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIew(descriptionIew []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIre(descriptionIre []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIsw(descriptionIsw []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionN(descriptionN []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNic(descriptionNic []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNie(descriptionNie []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNiew(descriptionNiew []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNire(descriptionNire []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNisw(descriptionNisw []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNre(descriptionNre []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionRe(descriptionRe []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesListRequest {
	r.format = &format
	return r
}

// Has clusters
func (r ApiVirtualizationClusterTypesListRequest) HasClusters(hasClusters bool) ApiVirtualizationClusterTypesListRequest {
	r.hasClusters = &hasClusters
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiVirtualizationClusterTypesListRequest) Id(id []string) ApiVirtualizationClusterTypesListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIc(idIc []string) ApiVirtualizationClusterTypesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIe(idIe []string) ApiVirtualizationClusterTypesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIew(idIew []string) ApiVirtualizationClusterTypesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIre(idIre []string) ApiVirtualizationClusterTypesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIsw(idIsw []string) ApiVirtualizationClusterTypesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdN(idN []string) ApiVirtualizationClusterTypesListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNic(idNic []string) ApiVirtualizationClusterTypesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNie(idNie []string) ApiVirtualizationClusterTypesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNiew(idNiew []string) ApiVirtualizationClusterTypesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNire(idNire []string) ApiVirtualizationClusterTypesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNisw(idNisw []string) ApiVirtualizationClusterTypesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNre(idNre []string) ApiVirtualizationClusterTypesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdRe(idRe []string) ApiVirtualizationClusterTypesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdated(lastUpdated []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationClusterTypesListRequest) Limit(limit int32) ApiVirtualizationClusterTypesListRequest {
	r.limit = &limit
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Name(name []string) ApiVirtualizationClusterTypesListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIc(nameIc []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIe(nameIe []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIew(nameIew []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIre(nameIre []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIsw(nameIsw []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameN(nameN []string) ApiVirtualizationClusterTypesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNic(nameNic []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNie(nameNie []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNiew(nameNiew []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNire(nameNire []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNisw(nameNisw []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNre(nameNre []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameRe(nameRe []string) ApiVirtualizationClusterTypesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationClusterTypesListRequest) Offset(offset int32) ApiVirtualizationClusterTypesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiVirtualizationClusterTypesListRequest) Q(q string) ApiVirtualizationClusterTypesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiVirtualizationClusterTypesListRequest) Sort(sort string) ApiVirtualizationClusterTypesListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiVirtualizationClusterTypesListRequest) Depth(depth int32) ApiVirtualizationClusterTypesListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Execute() (*PaginatedClusterTypeList, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesListExecute(r)
}

/*
VirtualizationClusterTypesList Method for VirtualizationClusterTypesList

Retrieve a list of cluster type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesListRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesList(ctx context.Context) ApiVirtualizationClusterTypesListRequest {
	return ApiVirtualizationClusterTypesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedClusterTypeList
func (a *VirtualizationAPIService) VirtualizationClusterTypesListExecute(r ApiVirtualizationClusterTypesListRequest) (*PaginatedClusterTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedClusterTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusters != nil {
		t := *r.clusters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusters", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusters", t, "multi")
		}
	}
	if r.clustersIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clusters__isnull", r.clustersIsnull, "")
	}
	if r.clustersN != nil {
		t := *r.clustersN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusters__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusters__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.hasClusters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_clusters", r.hasClusters, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesNotesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterTypesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiVirtualizationClusterTypesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiVirtualizationClusterTypesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterTypesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesNotesCreateExecute(r)
}

/*
VirtualizationClusterTypesNotesCreate Method for VirtualizationClusterTypesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesNotesCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesNotesCreate(ctx context.Context, id string) ApiVirtualizationClusterTypesNotesCreateRequest {
	return ApiVirtualizationClusterTypesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *VirtualizationAPIService) VirtualizationClusterTypesNotesCreateExecute(r ApiVirtualizationClusterTypesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesNotesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiVirtualizationClusterTypesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationClusterTypesNotesListRequest) Limit(limit int32) ApiVirtualizationClusterTypesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationClusterTypesNotesListRequest) Offset(offset int32) ApiVirtualizationClusterTypesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiVirtualizationClusterTypesNotesListRequest) Depth(depth int32) ApiVirtualizationClusterTypesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationClusterTypesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesNotesListExecute(r)
}

/*
VirtualizationClusterTypesNotesList Method for VirtualizationClusterTypesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesNotesListRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesNotesList(ctx context.Context, id string) ApiVirtualizationClusterTypesNotesListRequest {
	return ApiVirtualizationClusterTypesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *VirtualizationAPIService) VirtualizationClusterTypesNotesListExecute(r ApiVirtualizationClusterTypesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedClusterTypeRequest *PatchedClusterTypeRequest
}

func (r ApiVirtualizationClusterTypesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterTypesPartialUpdateRequest) PatchedClusterTypeRequest(patchedClusterTypeRequest PatchedClusterTypeRequest) ApiVirtualizationClusterTypesPartialUpdateRequest {
	r.patchedClusterTypeRequest = &patchedClusterTypeRequest
	return r
}

func (r ApiVirtualizationClusterTypesPartialUpdateRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesPartialUpdateExecute(r)
}

/*
VirtualizationClusterTypesPartialUpdate Method for VirtualizationClusterTypesPartialUpdate

Partial update a cluster type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesPartialUpdate(ctx context.Context, id string) ApiVirtualizationClusterTypesPartialUpdateRequest {
	return ApiVirtualizationClusterTypesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationAPIService) VirtualizationClusterTypesPartialUpdateExecute(r ApiVirtualizationClusterTypesPartialUpdateRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedClusterTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiVirtualizationClusterTypesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiVirtualizationClusterTypesRetrieveRequest) Depth(depth int32) ApiVirtualizationClusterTypesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationClusterTypesRetrieveRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesRetrieveExecute(r)
}

/*
VirtualizationClusterTypesRetrieve Method for VirtualizationClusterTypesRetrieve

Retrieve a cluster type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesRetrieveRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesRetrieve(ctx context.Context, id string) ApiVirtualizationClusterTypesRetrieveRequest {
	return ApiVirtualizationClusterTypesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationAPIService) VirtualizationClusterTypesRetrieveExecute(r ApiVirtualizationClusterTypesRetrieveRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	clusterTypeRequest *ClusterTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClusterTypesUpdateRequest) ClusterTypeRequest(clusterTypeRequest ClusterTypeRequest) ApiVirtualizationClusterTypesUpdateRequest {
	r.clusterTypeRequest = &clusterTypeRequest
	return r
}

func (r ApiVirtualizationClusterTypesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClusterTypesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClusterTypesUpdateRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesUpdateExecute(r)
}

/*
VirtualizationClusterTypesUpdate Method for VirtualizationClusterTypesUpdate

Update a cluster type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClusterTypesUpdate(ctx context.Context, id string) ApiVirtualizationClusterTypesUpdateRequest {
	return ApiVirtualizationClusterTypesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationAPIService) VirtualizationClusterTypesUpdateExecute(r ApiVirtualizationClusterTypesUpdateRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClusterTypesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterTypeRequest == nil {
		return localVarReturnValue, nil, reportError("clusterTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClustersBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiVirtualizationClustersBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiVirtualizationClustersBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClustersBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClustersBulkDestroyExecute(r)
}

/*
VirtualizationClustersBulkDestroy Method for VirtualizationClustersBulkDestroy

Destroy a list of cluster objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersBulkDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersBulkDestroy(ctx context.Context) ApiVirtualizationClustersBulkDestroyRequest {
	return ApiVirtualizationClustersBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationClustersBulkDestroyExecute(r ApiVirtualizationClustersBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClustersBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	patchedBulkWritableClusterRequest *[]PatchedBulkWritableClusterRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClustersBulkPartialUpdateRequest) PatchedBulkWritableClusterRequest(patchedBulkWritableClusterRequest []PatchedBulkWritableClusterRequest) ApiVirtualizationClustersBulkPartialUpdateRequest {
	r.patchedBulkWritableClusterRequest = &patchedBulkWritableClusterRequest
	return r
}

func (r ApiVirtualizationClustersBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClustersBulkPartialUpdateRequest) Execute() ([]Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersBulkPartialUpdateExecute(r)
}

/*
VirtualizationClustersBulkPartialUpdate Method for VirtualizationClustersBulkPartialUpdate

Partial update a list of cluster objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersBulkPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersBulkPartialUpdate(ctx context.Context) ApiVirtualizationClustersBulkPartialUpdateRequest {
	return ApiVirtualizationClustersBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Cluster
func (a *VirtualizationAPIService) VirtualizationClustersBulkPartialUpdateExecute(r ApiVirtualizationClustersBulkPartialUpdateRequest) ([]Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableClusterRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableClusterRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableClusterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkWritableClusterRequest *[]BulkWritableClusterRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClustersBulkUpdateRequest) BulkWritableClusterRequest(bulkWritableClusterRequest []BulkWritableClusterRequest) ApiVirtualizationClustersBulkUpdateRequest {
	r.bulkWritableClusterRequest = &bulkWritableClusterRequest
	return r
}

func (r ApiVirtualizationClustersBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClustersBulkUpdateRequest) Execute() ([]Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersBulkUpdateExecute(r)
}

/*
VirtualizationClustersBulkUpdate Method for VirtualizationClustersBulkUpdate

Update a list of cluster objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersBulkUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersBulkUpdate(ctx context.Context) ApiVirtualizationClustersBulkUpdateRequest {
	return ApiVirtualizationClustersBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Cluster
func (a *VirtualizationAPIService) VirtualizationClustersBulkUpdateExecute(r ApiVirtualizationClustersBulkUpdateRequest) ([]Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableClusterRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableClusterRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableClusterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	clusterRequest *ClusterRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClustersCreateRequest) ClusterRequest(clusterRequest ClusterRequest) ApiVirtualizationClustersCreateRequest {
	r.clusterRequest = &clusterRequest
	return r
}

func (r ApiVirtualizationClustersCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClustersCreateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersCreateExecute(r)
}

/*
VirtualizationClustersCreate Method for VirtualizationClustersCreate

Create one or more cluster objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersCreate(ctx context.Context) ApiVirtualizationClustersCreateRequest {
	return ApiVirtualizationClustersCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationAPIService) VirtualizationClustersCreateExecute(r ApiVirtualizationClustersCreateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterRequest == nil {
		return localVarReturnValue, nil, reportError("clusterRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClustersDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClustersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClustersDestroyExecute(r)
}

/*
VirtualizationClustersDestroy Method for VirtualizationClustersDestroy

Destroy a cluster object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersDestroy(ctx context.Context, id string) ApiVirtualizationClustersDestroyRequest {
	return ApiVirtualizationClustersDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationClustersDestroyExecute(r ApiVirtualizationClustersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClustersListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	clusterGroup *[]string
	clusterGroupIsnull *bool
	clusterGroupN *[]string
	clusterGroupId *[]string
	clusterGroupIdIsnull *bool
	clusterGroupIdN *[]string
	clusterType *[]string
	clusterTypeN *[]string
	clusterTypeId *[]string
	clusterTypeIdN *[]string
	comments *[]string
	commentsIc *[]string
	commentsIe *[]string
	commentsIew *[]string
	commentsIre *[]string
	commentsIsw *[]string
	commentsN *[]string
	commentsNic *[]string
	commentsNie *[]string
	commentsNiew *[]string
	commentsNire *[]string
	commentsNisw *[]string
	commentsNre *[]string
	commentsRe *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	devices *[]string
	devicesIsnull *bool
	devicesN *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasDevices *bool
	hasVirtualMachines *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	location *[]string
	locationIsnull *bool
	locationN *[]string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	tenant *[]string
	tenantIsnull *bool
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupIsnull *bool
	tenantGroupN *[]string
	tenantId *[]*string
	tenantIdIsnull *bool
	tenantIdN *[]*string
	virtualMachines *[]string
	virtualMachinesIsnull *bool
	virtualMachinesN *[]string
	depth *int32
}

func (r ApiVirtualizationClustersListRequest) ClusterGroup(clusterGroup []string) ApiVirtualizationClustersListRequest {
	r.clusterGroup = &clusterGroup
	return r
}

func (r ApiVirtualizationClustersListRequest) ClusterGroupIsnull(clusterGroupIsnull bool) ApiVirtualizationClustersListRequest {
	r.clusterGroupIsnull = &clusterGroupIsnull
	return r
}

func (r ApiVirtualizationClustersListRequest) ClusterGroupN(clusterGroupN []string) ApiVirtualizationClustersListRequest {
	r.clusterGroupN = &clusterGroupN
	return r
}

// Parent group (ID) - Deprecated (use group filter)
func (r ApiVirtualizationClustersListRequest) ClusterGroupId(clusterGroupId []string) ApiVirtualizationClustersListRequest {
	r.clusterGroupId = &clusterGroupId
	return r
}

func (r ApiVirtualizationClustersListRequest) ClusterGroupIdIsnull(clusterGroupIdIsnull bool) ApiVirtualizationClustersListRequest {
	r.clusterGroupIdIsnull = &clusterGroupIdIsnull
	return r
}

// Parent group (ID) - Deprecated (use group filter)
func (r ApiVirtualizationClustersListRequest) ClusterGroupIdN(clusterGroupIdN []string) ApiVirtualizationClustersListRequest {
	r.clusterGroupIdN = &clusterGroupIdN
	return r
}

func (r ApiVirtualizationClustersListRequest) ClusterType(clusterType []string) ApiVirtualizationClustersListRequest {
	r.clusterType = &clusterType
	return r
}

func (r ApiVirtualizationClustersListRequest) ClusterTypeN(clusterTypeN []string) ApiVirtualizationClustersListRequest {
	r.clusterTypeN = &clusterTypeN
	return r
}

// Cluster type (ID) - Deprecated (use type filter)
func (r ApiVirtualizationClustersListRequest) ClusterTypeId(clusterTypeId []string) ApiVirtualizationClustersListRequest {
	r.clusterTypeId = &clusterTypeId
	return r
}

// Cluster type (ID) - Deprecated (use type filter)
func (r ApiVirtualizationClustersListRequest) ClusterTypeIdN(clusterTypeIdN []string) ApiVirtualizationClustersListRequest {
	r.clusterTypeIdN = &clusterTypeIdN
	return r
}

func (r ApiVirtualizationClustersListRequest) Comments(comments []string) ApiVirtualizationClustersListRequest {
	r.comments = &comments
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsIc(commentsIc []string) ApiVirtualizationClustersListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsIe(commentsIe []string) ApiVirtualizationClustersListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsIew(commentsIew []string) ApiVirtualizationClustersListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsIre(commentsIre []string) ApiVirtualizationClustersListRequest {
	r.commentsIre = &commentsIre
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsIsw(commentsIsw []string) ApiVirtualizationClustersListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsN(commentsN []string) ApiVirtualizationClustersListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsNic(commentsNic []string) ApiVirtualizationClustersListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsNie(commentsNie []string) ApiVirtualizationClustersListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsNiew(commentsNiew []string) ApiVirtualizationClustersListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsNire(commentsNire []string) ApiVirtualizationClustersListRequest {
	r.commentsNire = &commentsNire
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsNisw(commentsNisw []string) ApiVirtualizationClustersListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsNre(commentsNre []string) ApiVirtualizationClustersListRequest {
	r.commentsNre = &commentsNre
	return r
}

func (r ApiVirtualizationClustersListRequest) CommentsRe(commentsRe []string) ApiVirtualizationClustersListRequest {
	r.commentsRe = &commentsRe
	return r
}

func (r ApiVirtualizationClustersListRequest) Created(created []time.Time) ApiVirtualizationClustersListRequest {
	r.created = &created
	return r
}

func (r ApiVirtualizationClustersListRequest) CreatedGt(createdGt []time.Time) ApiVirtualizationClustersListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiVirtualizationClustersListRequest) CreatedGte(createdGte []time.Time) ApiVirtualizationClustersListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiVirtualizationClustersListRequest) CreatedIsnull(createdIsnull bool) ApiVirtualizationClustersListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiVirtualizationClustersListRequest) CreatedLt(createdLt []time.Time) ApiVirtualizationClustersListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiVirtualizationClustersListRequest) CreatedLte(createdLte []time.Time) ApiVirtualizationClustersListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiVirtualizationClustersListRequest) CreatedN(createdN []time.Time) ApiVirtualizationClustersListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiVirtualizationClustersListRequest) Devices(devices []string) ApiVirtualizationClustersListRequest {
	r.devices = &devices
	return r
}

func (r ApiVirtualizationClustersListRequest) DevicesIsnull(devicesIsnull bool) ApiVirtualizationClustersListRequest {
	r.devicesIsnull = &devicesIsnull
	return r
}

func (r ApiVirtualizationClustersListRequest) DevicesN(devicesN []string) ApiVirtualizationClustersListRequest {
	r.devicesN = &devicesN
	return r
}

func (r ApiVirtualizationClustersListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersListRequest {
	r.format = &format
	return r
}

// Has devices
func (r ApiVirtualizationClustersListRequest) HasDevices(hasDevices bool) ApiVirtualizationClustersListRequest {
	r.hasDevices = &hasDevices
	return r
}

// Has virtual machines
func (r ApiVirtualizationClustersListRequest) HasVirtualMachines(hasVirtualMachines bool) ApiVirtualizationClustersListRequest {
	r.hasVirtualMachines = &hasVirtualMachines
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiVirtualizationClustersListRequest) Id(id []string) ApiVirtualizationClustersListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIc(idIc []string) ApiVirtualizationClustersListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIe(idIe []string) ApiVirtualizationClustersListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIew(idIew []string) ApiVirtualizationClustersListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIre(idIre []string) ApiVirtualizationClustersListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIsw(idIsw []string) ApiVirtualizationClustersListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationClustersListRequest) IdN(idN []string) ApiVirtualizationClustersListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNic(idNic []string) ApiVirtualizationClustersListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNie(idNie []string) ApiVirtualizationClustersListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNiew(idNiew []string) ApiVirtualizationClustersListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNire(idNire []string) ApiVirtualizationClustersListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNisw(idNisw []string) ApiVirtualizationClustersListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNre(idNre []string) ApiVirtualizationClustersListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationClustersListRequest) IdRe(idRe []string) ApiVirtualizationClustersListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdated(lastUpdated []time.Time) ApiVirtualizationClustersListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiVirtualizationClustersListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiVirtualizationClustersListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiVirtualizationClustersListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiVirtualizationClustersListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiVirtualizationClustersListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiVirtualizationClustersListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationClustersListRequest) Limit(limit int32) ApiVirtualizationClustersListRequest {
	r.limit = &limit
	return r
}

func (r ApiVirtualizationClustersListRequest) Location(location []string) ApiVirtualizationClustersListRequest {
	r.location = &location
	return r
}

func (r ApiVirtualizationClustersListRequest) LocationIsnull(locationIsnull bool) ApiVirtualizationClustersListRequest {
	r.locationIsnull = &locationIsnull
	return r
}

func (r ApiVirtualizationClustersListRequest) LocationN(locationN []string) ApiVirtualizationClustersListRequest {
	r.locationN = &locationN
	return r
}

func (r ApiVirtualizationClustersListRequest) Name(name []string) ApiVirtualizationClustersListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIc(nameIc []string) ApiVirtualizationClustersListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIe(nameIe []string) ApiVirtualizationClustersListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIew(nameIew []string) ApiVirtualizationClustersListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIre(nameIre []string) ApiVirtualizationClustersListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIsw(nameIsw []string) ApiVirtualizationClustersListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationClustersListRequest) NameN(nameN []string) ApiVirtualizationClustersListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNic(nameNic []string) ApiVirtualizationClustersListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNie(nameNie []string) ApiVirtualizationClustersListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNiew(nameNiew []string) ApiVirtualizationClustersListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNire(nameNire []string) ApiVirtualizationClustersListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNisw(nameNisw []string) ApiVirtualizationClustersListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNre(nameNre []string) ApiVirtualizationClustersListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationClustersListRequest) NameRe(nameRe []string) ApiVirtualizationClustersListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationClustersListRequest) Offset(offset int32) ApiVirtualizationClustersListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiVirtualizationClustersListRequest) Q(q string) ApiVirtualizationClustersListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiVirtualizationClustersListRequest) Sort(sort string) ApiVirtualizationClustersListRequest {
	r.sort = &sort
	return r
}

func (r ApiVirtualizationClustersListRequest) Tags(tags []string) ApiVirtualizationClustersListRequest {
	r.tags = &tags
	return r
}

func (r ApiVirtualizationClustersListRequest) TagsIsnull(tagsIsnull bool) ApiVirtualizationClustersListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiVirtualizationClustersListRequest) TagsN(tagsN []string) ApiVirtualizationClustersListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiVirtualizationClustersListRequest) Tenant(tenant []string) ApiVirtualizationClustersListRequest {
	r.tenant = &tenant
	return r
}

func (r ApiVirtualizationClustersListRequest) TenantIsnull(tenantIsnull bool) ApiVirtualizationClustersListRequest {
	r.tenantIsnull = &tenantIsnull
	return r
}

func (r ApiVirtualizationClustersListRequest) TenantN(tenantN []string) ApiVirtualizationClustersListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiVirtualizationClustersListRequest) TenantGroup(tenantGroup []string) ApiVirtualizationClustersListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiVirtualizationClustersListRequest) TenantGroupIsnull(tenantGroupIsnull bool) ApiVirtualizationClustersListRequest {
	r.tenantGroupIsnull = &tenantGroupIsnull
	return r
}

func (r ApiVirtualizationClustersListRequest) TenantGroupN(tenantGroupN []string) ApiVirtualizationClustersListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant (ID) (deprecated, use \&quot;tenant\&quot; filter instead)
func (r ApiVirtualizationClustersListRequest) TenantId(tenantId []*string) ApiVirtualizationClustersListRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiVirtualizationClustersListRequest) TenantIdIsnull(tenantIdIsnull bool) ApiVirtualizationClustersListRequest {
	r.tenantIdIsnull = &tenantIdIsnull
	return r
}

// Tenant (ID) (deprecated, use \&quot;tenant\&quot; filter instead)
func (r ApiVirtualizationClustersListRequest) TenantIdN(tenantIdN []*string) ApiVirtualizationClustersListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiVirtualizationClustersListRequest) VirtualMachines(virtualMachines []string) ApiVirtualizationClustersListRequest {
	r.virtualMachines = &virtualMachines
	return r
}

func (r ApiVirtualizationClustersListRequest) VirtualMachinesIsnull(virtualMachinesIsnull bool) ApiVirtualizationClustersListRequest {
	r.virtualMachinesIsnull = &virtualMachinesIsnull
	return r
}

func (r ApiVirtualizationClustersListRequest) VirtualMachinesN(virtualMachinesN []string) ApiVirtualizationClustersListRequest {
	r.virtualMachinesN = &virtualMachinesN
	return r
}

// Serializer Depth
func (r ApiVirtualizationClustersListRequest) Depth(depth int32) ApiVirtualizationClustersListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationClustersListRequest) Execute() (*PaginatedClusterList, *http.Response, error) {
	return r.ApiService.VirtualizationClustersListExecute(r)
}

/*
VirtualizationClustersList Method for VirtualizationClustersList

Retrieve a list of cluster objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersListRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersList(ctx context.Context) ApiVirtualizationClustersListRequest {
	return ApiVirtualizationClustersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedClusterList
func (a *VirtualizationAPIService) VirtualizationClustersListExecute(r ApiVirtualizationClustersListRequest) (*PaginatedClusterList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedClusterList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterGroup != nil {
		t := *r.clusterGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", t, "multi")
		}
	}
	if r.clusterGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__isnull", r.clusterGroupIsnull, "")
	}
	if r.clusterGroupN != nil {
		t := *r.clusterGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", t, "multi")
		}
	}
	if r.clusterGroupId != nil {
		t := *r.clusterGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", t, "multi")
		}
	}
	if r.clusterGroupIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__isnull", r.clusterGroupIdIsnull, "")
	}
	if r.clusterGroupIdN != nil {
		t := *r.clusterGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", t, "multi")
		}
	}
	if r.clusterType != nil {
		t := *r.clusterType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type", t, "multi")
		}
	}
	if r.clusterTypeN != nil {
		t := *r.clusterTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type__n", t, "multi")
		}
	}
	if r.clusterTypeId != nil {
		t := *r.clusterTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id", t, "multi")
		}
	}
	if r.clusterTypeIdN != nil {
		t := *r.clusterTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id__n", t, "multi")
		}
	}
	if r.comments != nil {
		t := *r.comments
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments", t, "multi")
		}
	}
	if r.commentsIc != nil {
		t := *r.commentsIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", t, "multi")
		}
	}
	if r.commentsIe != nil {
		t := *r.commentsIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", t, "multi")
		}
	}
	if r.commentsIew != nil {
		t := *r.commentsIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", t, "multi")
		}
	}
	if r.commentsIre != nil {
		t := *r.commentsIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", t, "multi")
		}
	}
	if r.commentsIsw != nil {
		t := *r.commentsIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", t, "multi")
		}
	}
	if r.commentsN != nil {
		t := *r.commentsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", t, "multi")
		}
	}
	if r.commentsNic != nil {
		t := *r.commentsNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", t, "multi")
		}
	}
	if r.commentsNie != nil {
		t := *r.commentsNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", t, "multi")
		}
	}
	if r.commentsNiew != nil {
		t := *r.commentsNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", t, "multi")
		}
	}
	if r.commentsNire != nil {
		t := *r.commentsNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", t, "multi")
		}
	}
	if r.commentsNisw != nil {
		t := *r.commentsNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", t, "multi")
		}
	}
	if r.commentsNre != nil {
		t := *r.commentsNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", t, "multi")
		}
	}
	if r.commentsRe != nil {
		t := *r.commentsRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.devices != nil {
		t := *r.devices
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devices", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devices", t, "multi")
		}
	}
	if r.devicesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "devices__isnull", r.devicesIsnull, "")
	}
	if r.devicesN != nil {
		t := *r.devicesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devices__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devices__n", t, "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.hasDevices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_devices", r.hasDevices, "")
	}
	if r.hasVirtualMachines != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_virtual_machines", r.hasVirtualMachines, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location__isnull", r.locationIsnull, "")
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__isnull", r.tenantIsnull, "")
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__isnull", r.tenantGroupIsnull, "")
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__isnull", r.tenantIdIsnull, "")
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.virtualMachines != nil {
		t := *r.virtualMachines
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines", t, "multi")
		}
	}
	if r.virtualMachinesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines__isnull", r.virtualMachinesIsnull, "")
	}
	if r.virtualMachinesN != nil {
		t := *r.virtualMachinesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines__n", t, "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersNotesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClustersNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiVirtualizationClustersNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiVirtualizationClustersNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClustersNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.VirtualizationClustersNotesCreateExecute(r)
}

/*
VirtualizationClustersNotesCreate Method for VirtualizationClustersNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersNotesCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersNotesCreate(ctx context.Context, id string) ApiVirtualizationClustersNotesCreateRequest {
	return ApiVirtualizationClustersNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *VirtualizationAPIService) VirtualizationClustersNotesCreateExecute(r ApiVirtualizationClustersNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersNotesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiVirtualizationClustersNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationClustersNotesListRequest) Limit(limit int32) ApiVirtualizationClustersNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationClustersNotesListRequest) Offset(offset int32) ApiVirtualizationClustersNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiVirtualizationClustersNotesListRequest) Depth(depth int32) ApiVirtualizationClustersNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationClustersNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.VirtualizationClustersNotesListExecute(r)
}

/*
VirtualizationClustersNotesList Method for VirtualizationClustersNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersNotesListRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersNotesList(ctx context.Context, id string) ApiVirtualizationClustersNotesListRequest {
	return ApiVirtualizationClustersNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *VirtualizationAPIService) VirtualizationClustersNotesListExecute(r ApiVirtualizationClustersNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedClusterRequest *PatchedClusterRequest
}

func (r ApiVirtualizationClustersPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClustersPartialUpdateRequest) PatchedClusterRequest(patchedClusterRequest PatchedClusterRequest) ApiVirtualizationClustersPartialUpdateRequest {
	r.patchedClusterRequest = &patchedClusterRequest
	return r
}

func (r ApiVirtualizationClustersPartialUpdateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersPartialUpdateExecute(r)
}

/*
VirtualizationClustersPartialUpdate Method for VirtualizationClustersPartialUpdate

Partial update a cluster object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersPartialUpdate(ctx context.Context, id string) ApiVirtualizationClustersPartialUpdateRequest {
	return ApiVirtualizationClustersPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationAPIService) VirtualizationClustersPartialUpdateExecute(r ApiVirtualizationClustersPartialUpdateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedClusterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiVirtualizationClustersRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiVirtualizationClustersRetrieveRequest) Depth(depth int32) ApiVirtualizationClustersRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationClustersRetrieveRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersRetrieveExecute(r)
}

/*
VirtualizationClustersRetrieve Method for VirtualizationClustersRetrieve

Retrieve a cluster object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersRetrieveRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersRetrieve(ctx context.Context, id string) ApiVirtualizationClustersRetrieveRequest {
	return ApiVirtualizationClustersRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationAPIService) VirtualizationClustersRetrieveExecute(r ApiVirtualizationClustersRetrieveRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	clusterRequest *ClusterRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationClustersUpdateRequest) ClusterRequest(clusterRequest ClusterRequest) ApiVirtualizationClustersUpdateRequest {
	r.clusterRequest = &clusterRequest
	return r
}

func (r ApiVirtualizationClustersUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationClustersUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationClustersUpdateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersUpdateExecute(r)
}

/*
VirtualizationClustersUpdate Method for VirtualizationClustersUpdate

Update a cluster object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationClustersUpdate(ctx context.Context, id string) ApiVirtualizationClustersUpdateRequest {
	return ApiVirtualizationClustersUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationAPIService) VirtualizationClustersUpdateExecute(r ApiVirtualizationClustersUpdateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationClustersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterRequest == nil {
		return localVarReturnValue, nil, reportError("clusterRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationInterfacesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiVirtualizationInterfacesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiVirtualizationInterfacesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationInterfacesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationInterfacesBulkDestroyExecute(r)
}

/*
VirtualizationInterfacesBulkDestroy Method for VirtualizationInterfacesBulkDestroy

Destroy a list of VM interface objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesBulkDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesBulkDestroy(ctx context.Context) ApiVirtualizationInterfacesBulkDestroyRequest {
	return ApiVirtualizationInterfacesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationInterfacesBulkDestroyExecute(r ApiVirtualizationInterfacesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	patchedBulkWritableVMInterfaceRequest *[]PatchedBulkWritableVMInterfaceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationInterfacesBulkPartialUpdateRequest) PatchedBulkWritableVMInterfaceRequest(patchedBulkWritableVMInterfaceRequest []PatchedBulkWritableVMInterfaceRequest) ApiVirtualizationInterfacesBulkPartialUpdateRequest {
	r.patchedBulkWritableVMInterfaceRequest = &patchedBulkWritableVMInterfaceRequest
	return r
}

func (r ApiVirtualizationInterfacesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationInterfacesBulkPartialUpdateRequest) Execute() ([]VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesBulkPartialUpdateExecute(r)
}

/*
VirtualizationInterfacesBulkPartialUpdate Method for VirtualizationInterfacesBulkPartialUpdate

Partial update a list of VM interface objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesBulkPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesBulkPartialUpdate(ctx context.Context) ApiVirtualizationInterfacesBulkPartialUpdateRequest {
	return ApiVirtualizationInterfacesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []VMInterface
func (a *VirtualizationAPIService) VirtualizationInterfacesBulkPartialUpdateExecute(r ApiVirtualizationInterfacesBulkPartialUpdateRequest) ([]VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableVMInterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableVMInterfaceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableVMInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkWritableVMInterfaceRequest *[]BulkWritableVMInterfaceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationInterfacesBulkUpdateRequest) BulkWritableVMInterfaceRequest(bulkWritableVMInterfaceRequest []BulkWritableVMInterfaceRequest) ApiVirtualizationInterfacesBulkUpdateRequest {
	r.bulkWritableVMInterfaceRequest = &bulkWritableVMInterfaceRequest
	return r
}

func (r ApiVirtualizationInterfacesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationInterfacesBulkUpdateRequest) Execute() ([]VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesBulkUpdateExecute(r)
}

/*
VirtualizationInterfacesBulkUpdate Method for VirtualizationInterfacesBulkUpdate

Update a list of VM interface objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesBulkUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesBulkUpdate(ctx context.Context) ApiVirtualizationInterfacesBulkUpdateRequest {
	return ApiVirtualizationInterfacesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []VMInterface
func (a *VirtualizationAPIService) VirtualizationInterfacesBulkUpdateExecute(r ApiVirtualizationInterfacesBulkUpdateRequest) ([]VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableVMInterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableVMInterfaceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableVMInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	writableVMInterfaceRequest *WritableVMInterfaceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationInterfacesCreateRequest) WritableVMInterfaceRequest(writableVMInterfaceRequest WritableVMInterfaceRequest) ApiVirtualizationInterfacesCreateRequest {
	r.writableVMInterfaceRequest = &writableVMInterfaceRequest
	return r
}

func (r ApiVirtualizationInterfacesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationInterfacesCreateRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesCreateExecute(r)
}

/*
VirtualizationInterfacesCreate Method for VirtualizationInterfacesCreate

Create one or more VM interface objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesCreate(ctx context.Context) ApiVirtualizationInterfacesCreateRequest {
	return ApiVirtualizationInterfacesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationAPIService) VirtualizationInterfacesCreateExecute(r ApiVirtualizationInterfacesCreateRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVMInterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("writableVMInterfaceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVMInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationInterfacesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationInterfacesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationInterfacesDestroyExecute(r)
}

/*
VirtualizationInterfacesDestroy Method for VirtualizationInterfacesDestroy

Destroy a VM interface object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesDestroy(ctx context.Context, id string) ApiVirtualizationInterfacesDestroyRequest {
	return ApiVirtualizationInterfacesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationInterfacesDestroyExecute(r ApiVirtualizationInterfacesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bridge *[]string
	bridgeIsnull *bool
	bridgeN *[]string
	bridgedInterfaces *[]string
	bridgedInterfacesIsnull *bool
	bridgedInterfacesN *[]string
	childInterfaces *[]string
	childInterfacesIsnull *bool
	childInterfacesN *[]string
	cluster *[]string
	clusterN *[]string
	clusterId *[]string
	clusterIdN *[]string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	enabled *bool
	format *CircuitsCircuitTerminationsListFormatParameter
	hasBridgedInterfaces *bool
	hasChildInterfaces *bool
	hasIpAddresses *bool
	hasTaggedVlans *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	ipAddresses *[]string
	limit *int32
	macAddress *[]string
	macAddressIc *[]string
	macAddressIe *[]string
	macAddressIew *[]string
	macAddressIre *[]string
	macAddressIsw *[]string
	macAddressN *[]string
	macAddressNic *[]string
	macAddressNie *[]string
	macAddressNiew *[]string
	macAddressNire *[]string
	macAddressNisw *[]string
	macAddressNre *[]string
	macAddressRe *[]string
	mode *[]string
	modeIc *[]string
	modeIe *[]string
	modeIew *[]string
	modeIre *[]string
	modeIsw *[]string
	modeN *[]string
	modeNic *[]string
	modeNie *[]string
	modeNiew *[]string
	modeNire *[]string
	modeNisw *[]string
	modeNre *[]string
	modeRe *[]string
	mtu *[]int32
	mtuGt *[]int32
	mtuGte *[]int32
	mtuIsnull *bool
	mtuLt *[]int32
	mtuLte *[]int32
	mtuN *[]int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	parentInterface *[]string
	parentInterfaceIsnull *bool
	parentInterfaceN *[]string
	q *string
	sort *string
	status *[]string
	statusN *[]string
	taggedVlans *[]string
	taggedVlansN *[]string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	untaggedVlan *[]string
	untaggedVlanIsnull *bool
	untaggedVlanN *[]string
	virtualMachine *[]string
	virtualMachineN *[]string
	virtualMachineId *[]string
	virtualMachineIdN *[]string
	depth *int32
}

func (r ApiVirtualizationInterfacesListRequest) Bridge(bridge []string) ApiVirtualizationInterfacesListRequest {
	r.bridge = &bridge
	return r
}

func (r ApiVirtualizationInterfacesListRequest) BridgeIsnull(bridgeIsnull bool) ApiVirtualizationInterfacesListRequest {
	r.bridgeIsnull = &bridgeIsnull
	return r
}

func (r ApiVirtualizationInterfacesListRequest) BridgeN(bridgeN []string) ApiVirtualizationInterfacesListRequest {
	r.bridgeN = &bridgeN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) BridgedInterfaces(bridgedInterfaces []string) ApiVirtualizationInterfacesListRequest {
	r.bridgedInterfaces = &bridgedInterfaces
	return r
}

func (r ApiVirtualizationInterfacesListRequest) BridgedInterfacesIsnull(bridgedInterfacesIsnull bool) ApiVirtualizationInterfacesListRequest {
	r.bridgedInterfacesIsnull = &bridgedInterfacesIsnull
	return r
}

func (r ApiVirtualizationInterfacesListRequest) BridgedInterfacesN(bridgedInterfacesN []string) ApiVirtualizationInterfacesListRequest {
	r.bridgedInterfacesN = &bridgedInterfacesN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ChildInterfaces(childInterfaces []string) ApiVirtualizationInterfacesListRequest {
	r.childInterfaces = &childInterfaces
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ChildInterfacesIsnull(childInterfacesIsnull bool) ApiVirtualizationInterfacesListRequest {
	r.childInterfacesIsnull = &childInterfacesIsnull
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ChildInterfacesN(childInterfacesN []string) ApiVirtualizationInterfacesListRequest {
	r.childInterfacesN = &childInterfacesN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Cluster(cluster []string) ApiVirtualizationInterfacesListRequest {
	r.cluster = &cluster
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ClusterN(clusterN []string) ApiVirtualizationInterfacesListRequest {
	r.clusterN = &clusterN
	return r
}

// Cluster (ID) - Deprecated (use cluster filter)
func (r ApiVirtualizationInterfacesListRequest) ClusterId(clusterId []string) ApiVirtualizationInterfacesListRequest {
	r.clusterId = &clusterId
	return r
}

// Cluster (ID) - Deprecated (use cluster filter)
func (r ApiVirtualizationInterfacesListRequest) ClusterIdN(clusterIdN []string) ApiVirtualizationInterfacesListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Description(description []string) ApiVirtualizationInterfacesListRequest {
	r.description = &description
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionIc(descriptionIc []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionIe(descriptionIe []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionIew(descriptionIew []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionIre(descriptionIre []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionIsw(descriptionIsw []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionN(descriptionN []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionNic(descriptionNic []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionNie(descriptionNie []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionNiew(descriptionNiew []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionNire(descriptionNire []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionNisw(descriptionNisw []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionNre(descriptionNre []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) DescriptionRe(descriptionRe []string) ApiVirtualizationInterfacesListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Enabled(enabled bool) ApiVirtualizationInterfacesListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesListRequest {
	r.format = &format
	return r
}

// Has Bridged Interfaces
func (r ApiVirtualizationInterfacesListRequest) HasBridgedInterfaces(hasBridgedInterfaces bool) ApiVirtualizationInterfacesListRequest {
	r.hasBridgedInterfaces = &hasBridgedInterfaces
	return r
}

// Has child interfaces
func (r ApiVirtualizationInterfacesListRequest) HasChildInterfaces(hasChildInterfaces bool) ApiVirtualizationInterfacesListRequest {
	r.hasChildInterfaces = &hasChildInterfaces
	return r
}

// Has IP addresses
func (r ApiVirtualizationInterfacesListRequest) HasIpAddresses(hasIpAddresses bool) ApiVirtualizationInterfacesListRequest {
	r.hasIpAddresses = &hasIpAddresses
	return r
}

// Has Tagged VLANs
func (r ApiVirtualizationInterfacesListRequest) HasTaggedVlans(hasTaggedVlans bool) ApiVirtualizationInterfacesListRequest {
	r.hasTaggedVlans = &hasTaggedVlans
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiVirtualizationInterfacesListRequest) Id(id []string) ApiVirtualizationInterfacesListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIc(idIc []string) ApiVirtualizationInterfacesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIe(idIe []string) ApiVirtualizationInterfacesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIew(idIew []string) ApiVirtualizationInterfacesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIre(idIre []string) ApiVirtualizationInterfacesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIsw(idIsw []string) ApiVirtualizationInterfacesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdN(idN []string) ApiVirtualizationInterfacesListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNic(idNic []string) ApiVirtualizationInterfacesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNie(idNie []string) ApiVirtualizationInterfacesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNiew(idNiew []string) ApiVirtualizationInterfacesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNire(idNire []string) ApiVirtualizationInterfacesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNisw(idNisw []string) ApiVirtualizationInterfacesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNre(idNre []string) ApiVirtualizationInterfacesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdRe(idRe []string) ApiVirtualizationInterfacesListRequest {
	r.idRe = &idRe
	return r
}

// IP addresses (address or ID)
func (r ApiVirtualizationInterfacesListRequest) IpAddresses(ipAddresses []string) ApiVirtualizationInterfacesListRequest {
	r.ipAddresses = &ipAddresses
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationInterfacesListRequest) Limit(limit int32) ApiVirtualizationInterfacesListRequest {
	r.limit = &limit
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddress(macAddress []string) ApiVirtualizationInterfacesListRequest {
	r.macAddress = &macAddress
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIc(macAddressIc []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIc = &macAddressIc
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIe(macAddressIe []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIe = &macAddressIe
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIew(macAddressIew []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIew = &macAddressIew
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIre(macAddressIre []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIre = &macAddressIre
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIsw(macAddressIsw []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIsw = &macAddressIsw
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressN(macAddressN []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressN = &macAddressN
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNic(macAddressNic []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNic = &macAddressNic
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNie(macAddressNie []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNie = &macAddressNie
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNiew(macAddressNiew []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNiew = &macAddressNiew
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNire(macAddressNire []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNire = &macAddressNire
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNisw(macAddressNisw []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNisw = &macAddressNisw
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNre(macAddressNre []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNre = &macAddressNre
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressRe(macAddressRe []string) ApiVirtualizationInterfacesListRequest {
	r.macAddressRe = &macAddressRe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Mode(mode []string) ApiVirtualizationInterfacesListRequest {
	r.mode = &mode
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeIc(modeIc []string) ApiVirtualizationInterfacesListRequest {
	r.modeIc = &modeIc
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeIe(modeIe []string) ApiVirtualizationInterfacesListRequest {
	r.modeIe = &modeIe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeIew(modeIew []string) ApiVirtualizationInterfacesListRequest {
	r.modeIew = &modeIew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeIre(modeIre []string) ApiVirtualizationInterfacesListRequest {
	r.modeIre = &modeIre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeIsw(modeIsw []string) ApiVirtualizationInterfacesListRequest {
	r.modeIsw = &modeIsw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeN(modeN []string) ApiVirtualizationInterfacesListRequest {
	r.modeN = &modeN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeNic(modeNic []string) ApiVirtualizationInterfacesListRequest {
	r.modeNic = &modeNic
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeNie(modeNie []string) ApiVirtualizationInterfacesListRequest {
	r.modeNie = &modeNie
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeNiew(modeNiew []string) ApiVirtualizationInterfacesListRequest {
	r.modeNiew = &modeNiew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeNire(modeNire []string) ApiVirtualizationInterfacesListRequest {
	r.modeNire = &modeNire
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeNisw(modeNisw []string) ApiVirtualizationInterfacesListRequest {
	r.modeNisw = &modeNisw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeNre(modeNre []string) ApiVirtualizationInterfacesListRequest {
	r.modeNre = &modeNre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ModeRe(modeRe []string) ApiVirtualizationInterfacesListRequest {
	r.modeRe = &modeRe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Mtu(mtu []int32) ApiVirtualizationInterfacesListRequest {
	r.mtu = &mtu
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuGt(mtuGt []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuGt = &mtuGt
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuGte(mtuGte []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuGte = &mtuGte
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuIsnull(mtuIsnull bool) ApiVirtualizationInterfacesListRequest {
	r.mtuIsnull = &mtuIsnull
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuLt(mtuLt []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuLt = &mtuLt
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuLte(mtuLte []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuLte = &mtuLte
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuN(mtuN []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuN = &mtuN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Name(name []string) ApiVirtualizationInterfacesListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIc(nameIc []string) ApiVirtualizationInterfacesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIe(nameIe []string) ApiVirtualizationInterfacesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIew(nameIew []string) ApiVirtualizationInterfacesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIre(nameIre []string) ApiVirtualizationInterfacesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIsw(nameIsw []string) ApiVirtualizationInterfacesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameN(nameN []string) ApiVirtualizationInterfacesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNic(nameNic []string) ApiVirtualizationInterfacesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNie(nameNie []string) ApiVirtualizationInterfacesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNiew(nameNiew []string) ApiVirtualizationInterfacesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNire(nameNire []string) ApiVirtualizationInterfacesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNisw(nameNisw []string) ApiVirtualizationInterfacesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNre(nameNre []string) ApiVirtualizationInterfacesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameRe(nameRe []string) ApiVirtualizationInterfacesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationInterfacesListRequest) Offset(offset int32) ApiVirtualizationInterfacesListRequest {
	r.offset = &offset
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ParentInterface(parentInterface []string) ApiVirtualizationInterfacesListRequest {
	r.parentInterface = &parentInterface
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ParentInterfaceIsnull(parentInterfaceIsnull bool) ApiVirtualizationInterfacesListRequest {
	r.parentInterfaceIsnull = &parentInterfaceIsnull
	return r
}

func (r ApiVirtualizationInterfacesListRequest) ParentInterfaceN(parentInterfaceN []string) ApiVirtualizationInterfacesListRequest {
	r.parentInterfaceN = &parentInterfaceN
	return r
}

// Search
func (r ApiVirtualizationInterfacesListRequest) Q(q string) ApiVirtualizationInterfacesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiVirtualizationInterfacesListRequest) Sort(sort string) ApiVirtualizationInterfacesListRequest {
	r.sort = &sort
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Status(status []string) ApiVirtualizationInterfacesListRequest {
	r.status = &status
	return r
}

func (r ApiVirtualizationInterfacesListRequest) StatusN(statusN []string) ApiVirtualizationInterfacesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) TaggedVlans(taggedVlans []string) ApiVirtualizationInterfacesListRequest {
	r.taggedVlans = &taggedVlans
	return r
}

func (r ApiVirtualizationInterfacesListRequest) TaggedVlansN(taggedVlansN []string) ApiVirtualizationInterfacesListRequest {
	r.taggedVlansN = &taggedVlansN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Tags(tags []string) ApiVirtualizationInterfacesListRequest {
	r.tags = &tags
	return r
}

func (r ApiVirtualizationInterfacesListRequest) TagsIsnull(tagsIsnull bool) ApiVirtualizationInterfacesListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiVirtualizationInterfacesListRequest) TagsN(tagsN []string) ApiVirtualizationInterfacesListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) UntaggedVlan(untaggedVlan []string) ApiVirtualizationInterfacesListRequest {
	r.untaggedVlan = &untaggedVlan
	return r
}

func (r ApiVirtualizationInterfacesListRequest) UntaggedVlanIsnull(untaggedVlanIsnull bool) ApiVirtualizationInterfacesListRequest {
	r.untaggedVlanIsnull = &untaggedVlanIsnull
	return r
}

func (r ApiVirtualizationInterfacesListRequest) UntaggedVlanN(untaggedVlanN []string) ApiVirtualizationInterfacesListRequest {
	r.untaggedVlanN = &untaggedVlanN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) VirtualMachine(virtualMachine []string) ApiVirtualizationInterfacesListRequest {
	r.virtualMachine = &virtualMachine
	return r
}

func (r ApiVirtualizationInterfacesListRequest) VirtualMachineN(virtualMachineN []string) ApiVirtualizationInterfacesListRequest {
	r.virtualMachineN = &virtualMachineN
	return r
}

// Virtual machine (ID) - Deprecated (use virtual_machine filter)
func (r ApiVirtualizationInterfacesListRequest) VirtualMachineId(virtualMachineId []string) ApiVirtualizationInterfacesListRequest {
	r.virtualMachineId = &virtualMachineId
	return r
}

// Virtual machine (ID) - Deprecated (use virtual_machine filter)
func (r ApiVirtualizationInterfacesListRequest) VirtualMachineIdN(virtualMachineIdN []string) ApiVirtualizationInterfacesListRequest {
	r.virtualMachineIdN = &virtualMachineIdN
	return r
}

// Serializer Depth
func (r ApiVirtualizationInterfacesListRequest) Depth(depth int32) ApiVirtualizationInterfacesListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Execute() (*PaginatedVMInterfaceList, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesListExecute(r)
}

/*
VirtualizationInterfacesList Method for VirtualizationInterfacesList

Retrieve a list of VM interface objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesListRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesList(ctx context.Context) ApiVirtualizationInterfacesListRequest {
	return ApiVirtualizationInterfacesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedVMInterfaceList
func (a *VirtualizationAPIService) VirtualizationInterfacesListExecute(r ApiVirtualizationInterfacesListRequest) (*PaginatedVMInterfaceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedVMInterfaceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bridge != nil {
		t := *r.bridge
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bridge", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bridge", t, "multi")
		}
	}
	if r.bridgeIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bridge__isnull", r.bridgeIsnull, "")
	}
	if r.bridgeN != nil {
		t := *r.bridgeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bridge__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bridge__n", t, "multi")
		}
	}
	if r.bridgedInterfaces != nil {
		t := *r.bridgedInterfaces
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bridged_interfaces", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bridged_interfaces", t, "multi")
		}
	}
	if r.bridgedInterfacesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bridged_interfaces__isnull", r.bridgedInterfacesIsnull, "")
	}
	if r.bridgedInterfacesN != nil {
		t := *r.bridgedInterfacesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bridged_interfaces__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bridged_interfaces__n", t, "multi")
		}
	}
	if r.childInterfaces != nil {
		t := *r.childInterfaces
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "child_interfaces", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "child_interfaces", t, "multi")
		}
	}
	if r.childInterfacesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "child_interfaces__isnull", r.childInterfacesIsnull, "")
	}
	if r.childInterfacesN != nil {
		t := *r.childInterfacesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "child_interfaces__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "child_interfaces__n", t, "multi")
		}
	}
	if r.cluster != nil {
		t := *r.cluster
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster", t, "multi")
		}
	}
	if r.clusterN != nil {
		t := *r.clusterN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster__n", t, "multi")
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", t, "multi")
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", t, "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "multi")
		}
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.hasBridgedInterfaces != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_bridged_interfaces", r.hasBridgedInterfaces, "")
	}
	if r.hasChildInterfaces != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_child_interfaces", r.hasChildInterfaces, "")
	}
	if r.hasIpAddresses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_ip_addresses", r.hasIpAddresses, "")
	}
	if r.hasTaggedVlans != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_tagged_vlans", r.hasTaggedVlans, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "multi")
		}
	}
	if r.ipAddresses != nil {
		t := *r.ipAddresses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ip_addresses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ip_addresses", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.macAddress != nil {
		t := *r.macAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", t, "multi")
		}
	}
	if r.macAddressIc != nil {
		t := *r.macAddressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", t, "multi")
		}
	}
	if r.macAddressIe != nil {
		t := *r.macAddressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", t, "multi")
		}
	}
	if r.macAddressIew != nil {
		t := *r.macAddressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", t, "multi")
		}
	}
	if r.macAddressIre != nil {
		t := *r.macAddressIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ire", t, "multi")
		}
	}
	if r.macAddressIsw != nil {
		t := *r.macAddressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", t, "multi")
		}
	}
	if r.macAddressN != nil {
		t := *r.macAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", t, "multi")
		}
	}
	if r.macAddressNic != nil {
		t := *r.macAddressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", t, "multi")
		}
	}
	if r.macAddressNie != nil {
		t := *r.macAddressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", t, "multi")
		}
	}
	if r.macAddressNiew != nil {
		t := *r.macAddressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", t, "multi")
		}
	}
	if r.macAddressNire != nil {
		t := *r.macAddressNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nire", t, "multi")
		}
	}
	if r.macAddressNisw != nil {
		t := *r.macAddressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", t, "multi")
		}
	}
	if r.macAddressNre != nil {
		t := *r.macAddressNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nre", t, "multi")
		}
	}
	if r.macAddressRe != nil {
		t := *r.macAddressRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__re", t, "multi")
		}
	}
	if r.mode != nil {
		t := *r.mode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode", t, "multi")
		}
	}
	if r.modeIc != nil {
		t := *r.modeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__ic", t, "multi")
		}
	}
	if r.modeIe != nil {
		t := *r.modeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__ie", t, "multi")
		}
	}
	if r.modeIew != nil {
		t := *r.modeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__iew", t, "multi")
		}
	}
	if r.modeIre != nil {
		t := *r.modeIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__ire", t, "multi")
		}
	}
	if r.modeIsw != nil {
		t := *r.modeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__isw", t, "multi")
		}
	}
	if r.modeN != nil {
		t := *r.modeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__n", t, "multi")
		}
	}
	if r.modeNic != nil {
		t := *r.modeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nic", t, "multi")
		}
	}
	if r.modeNie != nil {
		t := *r.modeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nie", t, "multi")
		}
	}
	if r.modeNiew != nil {
		t := *r.modeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__niew", t, "multi")
		}
	}
	if r.modeNire != nil {
		t := *r.modeNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nire", t, "multi")
		}
	}
	if r.modeNisw != nil {
		t := *r.modeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nisw", t, "multi")
		}
	}
	if r.modeNre != nil {
		t := *r.modeNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__nre", t, "multi")
		}
	}
	if r.modeRe != nil {
		t := *r.modeRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mode__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mode__re", t, "multi")
		}
	}
	if r.mtu != nil {
		t := *r.mtu
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu", t, "multi")
		}
	}
	if r.mtuGt != nil {
		t := *r.mtuGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__gt", t, "multi")
		}
	}
	if r.mtuGte != nil {
		t := *r.mtuGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__gte", t, "multi")
		}
	}
	if r.mtuIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__isnull", r.mtuIsnull, "")
	}
	if r.mtuLt != nil {
		t := *r.mtuLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__lt", t, "multi")
		}
	}
	if r.mtuLte != nil {
		t := *r.mtuLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__lte", t, "multi")
		}
	}
	if r.mtuN != nil {
		t := *r.mtuN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.parentInterface != nil {
		t := *r.parentInterface
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_interface", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_interface", t, "multi")
		}
	}
	if r.parentInterfaceIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parent_interface__isnull", r.parentInterfaceIsnull, "")
	}
	if r.parentInterfaceN != nil {
		t := *r.parentInterfaceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_interface__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_interface__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.taggedVlans != nil {
		t := *r.taggedVlans
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tagged_vlans", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tagged_vlans", t, "multi")
		}
	}
	if r.taggedVlansN != nil {
		t := *r.taggedVlansN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tagged_vlans__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tagged_vlans__n", t, "multi")
		}
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "multi")
		}
	}
	if r.untaggedVlan != nil {
		t := *r.untaggedVlan
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "untagged_vlan", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "untagged_vlan", t, "multi")
		}
	}
	if r.untaggedVlanIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "untagged_vlan__isnull", r.untaggedVlanIsnull, "")
	}
	if r.untaggedVlanN != nil {
		t := *r.untaggedVlanN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "untagged_vlan__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "untagged_vlan__n", t, "multi")
		}
	}
	if r.virtualMachine != nil {
		t := *r.virtualMachine
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machine", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machine", t, "multi")
		}
	}
	if r.virtualMachineN != nil {
		t := *r.virtualMachineN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machine__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machine__n", t, "multi")
		}
	}
	if r.virtualMachineId != nil {
		t := *r.virtualMachineId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machine_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machine_id", t, "multi")
		}
	}
	if r.virtualMachineIdN != nil {
		t := *r.virtualMachineIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machine_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machine_id__n", t, "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesNotesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationInterfacesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiVirtualizationInterfacesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiVirtualizationInterfacesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationInterfacesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesNotesCreateExecute(r)
}

/*
VirtualizationInterfacesNotesCreate Method for VirtualizationInterfacesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesNotesCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesNotesCreate(ctx context.Context, id string) ApiVirtualizationInterfacesNotesCreateRequest {
	return ApiVirtualizationInterfacesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *VirtualizationAPIService) VirtualizationInterfacesNotesCreateExecute(r ApiVirtualizationInterfacesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesNotesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiVirtualizationInterfacesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationInterfacesNotesListRequest) Limit(limit int32) ApiVirtualizationInterfacesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationInterfacesNotesListRequest) Offset(offset int32) ApiVirtualizationInterfacesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiVirtualizationInterfacesNotesListRequest) Depth(depth int32) ApiVirtualizationInterfacesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationInterfacesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesNotesListExecute(r)
}

/*
VirtualizationInterfacesNotesList Method for VirtualizationInterfacesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesNotesListRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesNotesList(ctx context.Context, id string) ApiVirtualizationInterfacesNotesListRequest {
	return ApiVirtualizationInterfacesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *VirtualizationAPIService) VirtualizationInterfacesNotesListExecute(r ApiVirtualizationInterfacesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedWritableVMInterfaceRequest *PatchedWritableVMInterfaceRequest
}

func (r ApiVirtualizationInterfacesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationInterfacesPartialUpdateRequest) PatchedWritableVMInterfaceRequest(patchedWritableVMInterfaceRequest PatchedWritableVMInterfaceRequest) ApiVirtualizationInterfacesPartialUpdateRequest {
	r.patchedWritableVMInterfaceRequest = &patchedWritableVMInterfaceRequest
	return r
}

func (r ApiVirtualizationInterfacesPartialUpdateRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesPartialUpdateExecute(r)
}

/*
VirtualizationInterfacesPartialUpdate Method for VirtualizationInterfacesPartialUpdate

Partial update a VM interface object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesPartialUpdate(ctx context.Context, id string) ApiVirtualizationInterfacesPartialUpdateRequest {
	return ApiVirtualizationInterfacesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationAPIService) VirtualizationInterfacesPartialUpdateExecute(r ApiVirtualizationInterfacesPartialUpdateRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableVMInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiVirtualizationInterfacesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiVirtualizationInterfacesRetrieveRequest) Depth(depth int32) ApiVirtualizationInterfacesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationInterfacesRetrieveRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesRetrieveExecute(r)
}

/*
VirtualizationInterfacesRetrieve Method for VirtualizationInterfacesRetrieve

Retrieve a VM interface object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesRetrieveRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesRetrieve(ctx context.Context, id string) ApiVirtualizationInterfacesRetrieveRequest {
	return ApiVirtualizationInterfacesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationAPIService) VirtualizationInterfacesRetrieveExecute(r ApiVirtualizationInterfacesRetrieveRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	writableVMInterfaceRequest *WritableVMInterfaceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationInterfacesUpdateRequest) WritableVMInterfaceRequest(writableVMInterfaceRequest WritableVMInterfaceRequest) ApiVirtualizationInterfacesUpdateRequest {
	r.writableVMInterfaceRequest = &writableVMInterfaceRequest
	return r
}

func (r ApiVirtualizationInterfacesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationInterfacesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationInterfacesUpdateRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesUpdateExecute(r)
}

/*
VirtualizationInterfacesUpdate Method for VirtualizationInterfacesUpdate

Update a VM interface object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationInterfacesUpdate(ctx context.Context, id string) ApiVirtualizationInterfacesUpdateRequest {
	return ApiVirtualizationInterfacesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationAPIService) VirtualizationInterfacesUpdateExecute(r ApiVirtualizationInterfacesUpdateRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationInterfacesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVMInterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("writableVMInterfaceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVMInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationVirtualMachinesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiVirtualizationVirtualMachinesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiVirtualizationVirtualMachinesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationVirtualMachinesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesBulkDestroyExecute(r)
}

/*
VirtualizationVirtualMachinesBulkDestroy Method for VirtualizationVirtualMachinesBulkDestroy

Destroy a list of virtual machine objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesBulkDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesBulkDestroy(ctx context.Context) ApiVirtualizationVirtualMachinesBulkDestroyRequest {
	return ApiVirtualizationVirtualMachinesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesBulkDestroyExecute(r ApiVirtualizationVirtualMachinesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	patchedBulkWritableVirtualMachineRequest *[]PatchedBulkWritableVirtualMachineRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest) PatchedBulkWritableVirtualMachineRequest(patchedBulkWritableVirtualMachineRequest []PatchedBulkWritableVirtualMachineRequest) ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest {
	r.patchedBulkWritableVirtualMachineRequest = &patchedBulkWritableVirtualMachineRequest
	return r
}

func (r ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest) Execute() ([]VirtualMachine, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesBulkPartialUpdateExecute(r)
}

/*
VirtualizationVirtualMachinesBulkPartialUpdate Method for VirtualizationVirtualMachinesBulkPartialUpdate

Partial update a list of virtual machine objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesBulkPartialUpdate(ctx context.Context) ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest {
	return ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []VirtualMachine
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesBulkPartialUpdateExecute(r ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest) ([]VirtualMachine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []VirtualMachine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableVirtualMachineRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableVirtualMachineRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableVirtualMachineRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	bulkWritableVirtualMachineRequest *[]BulkWritableVirtualMachineRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationVirtualMachinesBulkUpdateRequest) BulkWritableVirtualMachineRequest(bulkWritableVirtualMachineRequest []BulkWritableVirtualMachineRequest) ApiVirtualizationVirtualMachinesBulkUpdateRequest {
	r.bulkWritableVirtualMachineRequest = &bulkWritableVirtualMachineRequest
	return r
}

func (r ApiVirtualizationVirtualMachinesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationVirtualMachinesBulkUpdateRequest) Execute() ([]VirtualMachine, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesBulkUpdateExecute(r)
}

/*
VirtualizationVirtualMachinesBulkUpdate Method for VirtualizationVirtualMachinesBulkUpdate

Update a list of virtual machine objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesBulkUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesBulkUpdate(ctx context.Context) ApiVirtualizationVirtualMachinesBulkUpdateRequest {
	return ApiVirtualizationVirtualMachinesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []VirtualMachine
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesBulkUpdateExecute(r ApiVirtualizationVirtualMachinesBulkUpdateRequest) ([]VirtualMachine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []VirtualMachine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableVirtualMachineRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableVirtualMachineRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableVirtualMachineRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	virtualMachineRequest *VirtualMachineRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationVirtualMachinesCreateRequest) VirtualMachineRequest(virtualMachineRequest VirtualMachineRequest) ApiVirtualizationVirtualMachinesCreateRequest {
	r.virtualMachineRequest = &virtualMachineRequest
	return r
}

func (r ApiVirtualizationVirtualMachinesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationVirtualMachinesCreateRequest) Execute() (*VirtualMachine, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesCreateExecute(r)
}

/*
VirtualizationVirtualMachinesCreate Method for VirtualizationVirtualMachinesCreate

Create one or more virtual machine objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesCreate(ctx context.Context) ApiVirtualizationVirtualMachinesCreateRequest {
	return ApiVirtualizationVirtualMachinesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VirtualMachine
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesCreateExecute(r ApiVirtualizationVirtualMachinesCreateRequest) (*VirtualMachine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.virtualMachineRequest == nil {
		return localVarReturnValue, nil, reportError("virtualMachineRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.virtualMachineRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationVirtualMachinesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationVirtualMachinesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesDestroyExecute(r)
}

/*
VirtualizationVirtualMachinesDestroy Method for VirtualizationVirtualMachinesDestroy

Destroy a virtual machine object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesDestroyRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesDestroy(ctx context.Context, id string) ApiVirtualizationVirtualMachinesDestroyRequest {
	return ApiVirtualizationVirtualMachinesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesDestroyExecute(r ApiVirtualizationVirtualMachinesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	cluster *string
	clusterN *string
	clusterGroup *[]string
	clusterGroupIsnull *bool
	clusterGroupN *[]string
	clusterGroupId *[]string
	clusterGroupIdIsnull *bool
	clusterGroupIdN *[]string
	clusterId *[]string
	clusterIdN *[]string
	clusterType *[]string
	clusterTypeN *[]string
	clusterTypeId *[]string
	clusterTypeIdN *[]string
	comments *[]string
	commentsIc *[]string
	commentsIe *[]string
	commentsIew *[]string
	commentsIre *[]string
	commentsIsw *[]string
	commentsN *[]string
	commentsNic *[]string
	commentsNie *[]string
	commentsNiew *[]string
	commentsNire *[]string
	commentsNisw *[]string
	commentsNre *[]string
	commentsRe *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	disk *[]int32
	diskGt *[]int32
	diskGte *[]int32
	diskIsnull *bool
	diskLt *[]int32
	diskLte *[]int32
	diskN *[]int32
	format *CircuitsCircuitTerminationsListFormatParameter
	hasInterfaces *bool
	hasPrimaryIp *bool
	hasServices *bool
	hasSoftwareImageFiles *bool
	hasSoftwareVersion *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	interfaces *[]string
	interfacesIsnull *bool
	interfacesN *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	localConfigContextData *bool
	localConfigContextSchema *[]string
	localConfigContextSchemaIsnull *bool
	localConfigContextSchemaN *[]string
	localConfigContextSchemaId *[]*string
	localConfigContextSchemaIdIsnull *bool
	localConfigContextSchemaIdN *[]*string
	location *[]string
	locationIsnull *bool
	locationN *[]string
	macAddress *[]string
	macAddressIc *[]string
	macAddressIe *[]string
	macAddressIew *[]string
	macAddressIre *[]string
	macAddressIsw *[]string
	macAddressN *[]string
	macAddressNic *[]string
	macAddressNie *[]string
	macAddressNiew *[]string
	macAddressNire *[]string
	macAddressNisw *[]string
	macAddressNre *[]string
	macAddressRe *[]string
	memory *[]int32
	memoryGt *[]int32
	memoryGte *[]int32
	memoryIsnull *bool
	memoryLt *[]int32
	memoryLte *[]int32
	memoryN *[]int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	platform *[]string
	platformIsnull *bool
	platformN *[]string
	platformId *[]*string
	platformIdIsnull *bool
	platformIdN *[]*string
	primaryIp4 *[]string
	primaryIp6 *[]string
	q *string
	role *[]string
	roleIsnull *bool
	roleN *[]string
	services *[]string
	servicesIsnull *bool
	servicesN *[]string
	softwareImageFiles *[]string
	softwareImageFilesN *[]string
	softwareVersion *[]string
	softwareVersionIsnull *bool
	softwareVersionN *[]string
	sort *string
	status *[]string
	statusN *[]string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	tenant *[]string
	tenantIsnull *bool
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupIsnull *bool
	tenantGroupN *[]string
	tenantId *[]*string
	tenantIdIsnull *bool
	tenantIdN *[]*string
	vcpus *[]int32
	vcpusGt *[]int32
	vcpusGte *[]int32
	vcpusIsnull *bool
	vcpusLt *[]int32
	vcpusLte *[]int32
	vcpusN *[]int32
	depth *int32
}

func (r ApiVirtualizationVirtualMachinesListRequest) Cluster(cluster string) ApiVirtualizationVirtualMachinesListRequest {
	r.cluster = &cluster
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ClusterN(clusterN string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterN = &clusterN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroup(clusterGroup []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroup = &clusterGroup
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroupIsnull(clusterGroupIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroupIsnull = &clusterGroupIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroupN(clusterGroupN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroupN = &clusterGroupN
	return r
}

// Cluster group (ID) - Deprecated (use cluster_group filter)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroupId(clusterGroupId []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroupId = &clusterGroupId
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroupIdIsnull(clusterGroupIdIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroupIdIsnull = &clusterGroupIdIsnull
	return r
}

// Cluster group (ID) - Deprecated (use cluster_group filter)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroupIdN(clusterGroupIdN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroupIdN = &clusterGroupIdN
	return r
}

// Cluster (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterId(clusterId []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterId = &clusterId
	return r
}

// Cluster (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterIdN(clusterIdN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ClusterType(clusterType []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterType = &clusterType
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ClusterTypeN(clusterTypeN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterTypeN = &clusterTypeN
	return r
}

// Cluster type (ID) - Deprecated (use cluster_type filter)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterTypeId(clusterTypeId []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterTypeId = &clusterTypeId
	return r
}

// Cluster type (ID) - Deprecated (use cluster_type filter)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterTypeIdN(clusterTypeIdN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterTypeIdN = &clusterTypeIdN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Comments(comments []string) ApiVirtualizationVirtualMachinesListRequest {
	r.comments = &comments
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsIc(commentsIc []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsIe(commentsIe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsIew(commentsIew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsIre(commentsIre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsIre = &commentsIre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsIsw(commentsIsw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsN(commentsN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsNic(commentsNic []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsNie(commentsNie []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsNiew(commentsNiew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsNire(commentsNire []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsNire = &commentsNire
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsNisw(commentsNisw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsNre(commentsNre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsNre = &commentsNre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CommentsRe(commentsRe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.commentsRe = &commentsRe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Created(created []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.created = &created
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CreatedGt(createdGt []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CreatedGte(createdGte []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CreatedIsnull(createdIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CreatedLt(createdLt []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CreatedLte(createdLte []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CreatedN(createdN []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Disk(disk []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.disk = &disk
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskGt(diskGt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskGt = &diskGt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskGte(diskGte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskGte = &diskGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskIsnull(diskIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.diskIsnull = &diskIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskLt(diskLt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskLt = &diskLt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskLte(diskLte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskLte = &diskLte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskN(diskN []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskN = &diskN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesListRequest {
	r.format = &format
	return r
}

// Has interfaces
func (r ApiVirtualizationVirtualMachinesListRequest) HasInterfaces(hasInterfaces bool) ApiVirtualizationVirtualMachinesListRequest {
	r.hasInterfaces = &hasInterfaces
	return r
}

// Has a primary IP
func (r ApiVirtualizationVirtualMachinesListRequest) HasPrimaryIp(hasPrimaryIp bool) ApiVirtualizationVirtualMachinesListRequest {
	r.hasPrimaryIp = &hasPrimaryIp
	return r
}

// Has services
func (r ApiVirtualizationVirtualMachinesListRequest) HasServices(hasServices bool) ApiVirtualizationVirtualMachinesListRequest {
	r.hasServices = &hasServices
	return r
}

// Has software image files
func (r ApiVirtualizationVirtualMachinesListRequest) HasSoftwareImageFiles(hasSoftwareImageFiles bool) ApiVirtualizationVirtualMachinesListRequest {
	r.hasSoftwareImageFiles = &hasSoftwareImageFiles
	return r
}

// Has software version
func (r ApiVirtualizationVirtualMachinesListRequest) HasSoftwareVersion(hasSoftwareVersion bool) ApiVirtualizationVirtualMachinesListRequest {
	r.hasSoftwareVersion = &hasSoftwareVersion
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiVirtualizationVirtualMachinesListRequest) Id(id []string) ApiVirtualizationVirtualMachinesListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIc(idIc []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIe(idIe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIew(idIew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIre(idIre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIsw(idIsw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdN(idN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNic(idNic []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNie(idNie []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNiew(idNiew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNire(idNire []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNisw(idNisw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNre(idNre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdRe(idRe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Interfaces(interfaces []string) ApiVirtualizationVirtualMachinesListRequest {
	r.interfaces = &interfaces
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) InterfacesIsnull(interfacesIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.interfacesIsnull = &interfacesIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) InterfacesN(interfacesN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.interfacesN = &interfacesN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdated(lastUpdated []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationVirtualMachinesListRequest) Limit(limit int32) ApiVirtualizationVirtualMachinesListRequest {
	r.limit = &limit
	return r
}

// Has local config context data
func (r ApiVirtualizationVirtualMachinesListRequest) LocalConfigContextData(localConfigContextData bool) ApiVirtualizationVirtualMachinesListRequest {
	r.localConfigContextData = &localConfigContextData
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LocalConfigContextSchema(localConfigContextSchema []string) ApiVirtualizationVirtualMachinesListRequest {
	r.localConfigContextSchema = &localConfigContextSchema
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LocalConfigContextSchemaIsnull(localConfigContextSchemaIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.localConfigContextSchemaIsnull = &localConfigContextSchemaIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LocalConfigContextSchemaN(localConfigContextSchemaN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.localConfigContextSchemaN = &localConfigContextSchemaN
	return r
}

// Schema (ID) - Deprecated (use local_context_schema filter)
func (r ApiVirtualizationVirtualMachinesListRequest) LocalConfigContextSchemaId(localConfigContextSchemaId []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.localConfigContextSchemaId = &localConfigContextSchemaId
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LocalConfigContextSchemaIdIsnull(localConfigContextSchemaIdIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.localConfigContextSchemaIdIsnull = &localConfigContextSchemaIdIsnull
	return r
}

// Schema (ID) - Deprecated (use local_context_schema filter)
func (r ApiVirtualizationVirtualMachinesListRequest) LocalConfigContextSchemaIdN(localConfigContextSchemaIdN []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.localConfigContextSchemaIdN = &localConfigContextSchemaIdN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Location(location []string) ApiVirtualizationVirtualMachinesListRequest {
	r.location = &location
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LocationIsnull(locationIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.locationIsnull = &locationIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LocationN(locationN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.locationN = &locationN
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddress(macAddress []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddress = &macAddress
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIc(macAddressIc []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIc = &macAddressIc
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIe(macAddressIe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIe = &macAddressIe
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIew(macAddressIew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIew = &macAddressIew
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIre(macAddressIre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIre = &macAddressIre
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIsw(macAddressIsw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIsw = &macAddressIsw
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressN(macAddressN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressN = &macAddressN
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNic(macAddressNic []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNic = &macAddressNic
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNie(macAddressNie []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNie = &macAddressNie
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNiew(macAddressNiew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNiew = &macAddressNiew
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNire(macAddressNire []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNire = &macAddressNire
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNisw(macAddressNisw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNisw = &macAddressNisw
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNre(macAddressNre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNre = &macAddressNre
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressRe(macAddressRe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressRe = &macAddressRe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Memory(memory []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memory = &memory
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryGt(memoryGt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryGt = &memoryGt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryGte(memoryGte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryGte = &memoryGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryIsnull(memoryIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryIsnull = &memoryIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryLt(memoryLt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryLt = &memoryLt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryLte(memoryLte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryLte = &memoryLte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryN(memoryN []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryN = &memoryN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Name(name []string) ApiVirtualizationVirtualMachinesListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIc(nameIc []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIe(nameIe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIew(nameIew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIre(nameIre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIsw(nameIsw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameN(nameN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNic(nameNic []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNie(nameNie []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNiew(nameNiew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNire(nameNire []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNisw(nameNisw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNre(nameNre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameRe(nameRe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationVirtualMachinesListRequest) Offset(offset int32) ApiVirtualizationVirtualMachinesListRequest {
	r.offset = &offset
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Platform(platform []string) ApiVirtualizationVirtualMachinesListRequest {
	r.platform = &platform
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) PlatformIsnull(platformIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.platformIsnull = &platformIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) PlatformN(platformN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.platformN = &platformN
	return r
}

// Platform (ID) - Deprecated (use platform filter)
func (r ApiVirtualizationVirtualMachinesListRequest) PlatformId(platformId []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.platformId = &platformId
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) PlatformIdIsnull(platformIdIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.platformIdIsnull = &platformIdIsnull
	return r
}

// Platform (ID) - Deprecated (use platform filter)
func (r ApiVirtualizationVirtualMachinesListRequest) PlatformIdN(platformIdN []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.platformIdN = &platformIdN
	return r
}

// Primary IPv4 Address (address or ID)
func (r ApiVirtualizationVirtualMachinesListRequest) PrimaryIp4(primaryIp4 []string) ApiVirtualizationVirtualMachinesListRequest {
	r.primaryIp4 = &primaryIp4
	return r
}

// Primary IPv6 Address (address or ID)
func (r ApiVirtualizationVirtualMachinesListRequest) PrimaryIp6(primaryIp6 []string) ApiVirtualizationVirtualMachinesListRequest {
	r.primaryIp6 = &primaryIp6
	return r
}

// Search
func (r ApiVirtualizationVirtualMachinesListRequest) Q(q string) ApiVirtualizationVirtualMachinesListRequest {
	r.q = &q
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Role(role []string) ApiVirtualizationVirtualMachinesListRequest {
	r.role = &role
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) RoleIsnull(roleIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.roleIsnull = &roleIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) RoleN(roleN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.roleN = &roleN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Services(services []string) ApiVirtualizationVirtualMachinesListRequest {
	r.services = &services
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ServicesIsnull(servicesIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.servicesIsnull = &servicesIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ServicesN(servicesN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.servicesN = &servicesN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) SoftwareImageFiles(softwareImageFiles []string) ApiVirtualizationVirtualMachinesListRequest {
	r.softwareImageFiles = &softwareImageFiles
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) SoftwareImageFilesN(softwareImageFilesN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.softwareImageFilesN = &softwareImageFilesN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) SoftwareVersion(softwareVersion []string) ApiVirtualizationVirtualMachinesListRequest {
	r.softwareVersion = &softwareVersion
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) SoftwareVersionIsnull(softwareVersionIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.softwareVersionIsnull = &softwareVersionIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) SoftwareVersionN(softwareVersionN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.softwareVersionN = &softwareVersionN
	return r
}

// Which field to use when ordering the results.
func (r ApiVirtualizationVirtualMachinesListRequest) Sort(sort string) ApiVirtualizationVirtualMachinesListRequest {
	r.sort = &sort
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Status(status []string) ApiVirtualizationVirtualMachinesListRequest {
	r.status = &status
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) StatusN(statusN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Tags(tags []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tags = &tags
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) TagsIsnull(tagsIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) TagsN(tagsN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Tenant(tenant []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenant = &tenant
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) TenantIsnull(tenantIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantIsnull = &tenantIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) TenantN(tenantN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) TenantGroup(tenantGroup []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) TenantGroupIsnull(tenantGroupIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantGroupIsnull = &tenantGroupIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) TenantGroupN(tenantGroupN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant (ID) (deprecated, use \&quot;tenant\&quot; filter instead)
func (r ApiVirtualizationVirtualMachinesListRequest) TenantId(tenantId []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) TenantIdIsnull(tenantIdIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantIdIsnull = &tenantIdIsnull
	return r
}

// Tenant (ID) (deprecated, use \&quot;tenant\&quot; filter instead)
func (r ApiVirtualizationVirtualMachinesListRequest) TenantIdN(tenantIdN []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Vcpus(vcpus []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpus = &vcpus
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusGt(vcpusGt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusGt = &vcpusGt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusGte(vcpusGte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusGte = &vcpusGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusIsnull(vcpusIsnull bool) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusIsnull = &vcpusIsnull
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusLt(vcpusLt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusLt = &vcpusLt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusLte(vcpusLte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusLte = &vcpusLte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusN(vcpusN []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusN = &vcpusN
	return r
}

// Serializer Depth
func (r ApiVirtualizationVirtualMachinesListRequest) Depth(depth int32) ApiVirtualizationVirtualMachinesListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Execute() (*PaginatedVirtualMachineList, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesListExecute(r)
}

/*
VirtualizationVirtualMachinesList Method for VirtualizationVirtualMachinesList

Retrieve a list of virtual machine objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesListRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesList(ctx context.Context) ApiVirtualizationVirtualMachinesListRequest {
	return ApiVirtualizationVirtualMachinesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedVirtualMachineList
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesListExecute(r ApiVirtualizationVirtualMachinesListRequest) (*PaginatedVirtualMachineList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedVirtualMachineList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cluster != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster", r.cluster, "")
	}
	if r.clusterN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster__n", r.clusterN, "")
	}
	if r.clusterGroup != nil {
		t := *r.clusterGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", t, "multi")
		}
	}
	if r.clusterGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__isnull", r.clusterGroupIsnull, "")
	}
	if r.clusterGroupN != nil {
		t := *r.clusterGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", t, "multi")
		}
	}
	if r.clusterGroupId != nil {
		t := *r.clusterGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", t, "multi")
		}
	}
	if r.clusterGroupIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__isnull", r.clusterGroupIdIsnull, "")
	}
	if r.clusterGroupIdN != nil {
		t := *r.clusterGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", t, "multi")
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", t, "multi")
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", t, "multi")
		}
	}
	if r.clusterType != nil {
		t := *r.clusterType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type", t, "multi")
		}
	}
	if r.clusterTypeN != nil {
		t := *r.clusterTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type__n", t, "multi")
		}
	}
	if r.clusterTypeId != nil {
		t := *r.clusterTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id", t, "multi")
		}
	}
	if r.clusterTypeIdN != nil {
		t := *r.clusterTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id__n", t, "multi")
		}
	}
	if r.comments != nil {
		t := *r.comments
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments", t, "multi")
		}
	}
	if r.commentsIc != nil {
		t := *r.commentsIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", t, "multi")
		}
	}
	if r.commentsIe != nil {
		t := *r.commentsIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", t, "multi")
		}
	}
	if r.commentsIew != nil {
		t := *r.commentsIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", t, "multi")
		}
	}
	if r.commentsIre != nil {
		t := *r.commentsIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", t, "multi")
		}
	}
	if r.commentsIsw != nil {
		t := *r.commentsIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", t, "multi")
		}
	}
	if r.commentsN != nil {
		t := *r.commentsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", t, "multi")
		}
	}
	if r.commentsNic != nil {
		t := *r.commentsNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", t, "multi")
		}
	}
	if r.commentsNie != nil {
		t := *r.commentsNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", t, "multi")
		}
	}
	if r.commentsNiew != nil {
		t := *r.commentsNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", t, "multi")
		}
	}
	if r.commentsNire != nil {
		t := *r.commentsNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", t, "multi")
		}
	}
	if r.commentsNisw != nil {
		t := *r.commentsNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", t, "multi")
		}
	}
	if r.commentsNre != nil {
		t := *r.commentsNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", t, "multi")
		}
	}
	if r.commentsRe != nil {
		t := *r.commentsRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.disk != nil {
		t := *r.disk
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "disk", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "disk", t, "multi")
		}
	}
	if r.diskGt != nil {
		t := *r.diskGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "disk__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "disk__gt", t, "multi")
		}
	}
	if r.diskGte != nil {
		t := *r.diskGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "disk__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "disk__gte", t, "multi")
		}
	}
	if r.diskIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disk__isnull", r.diskIsnull, "")
	}
	if r.diskLt != nil {
		t := *r.diskLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "disk__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "disk__lt", t, "multi")
		}
	}
	if r.diskLte != nil {
		t := *r.diskLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "disk__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "disk__lte", t, "multi")
		}
	}
	if r.diskN != nil {
		t := *r.diskN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "disk__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "disk__n", t, "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.hasInterfaces != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_interfaces", r.hasInterfaces, "")
	}
	if r.hasPrimaryIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_primary_ip", r.hasPrimaryIp, "")
	}
	if r.hasServices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_services", r.hasServices, "")
	}
	if r.hasSoftwareImageFiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_software_image_files", r.hasSoftwareImageFiles, "")
	}
	if r.hasSoftwareVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_software_version", r.hasSoftwareVersion, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "multi")
		}
	}
	if r.interfaces != nil {
		t := *r.interfaces
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interfaces", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interfaces", t, "multi")
		}
	}
	if r.interfacesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaces__isnull", r.interfacesIsnull, "")
	}
	if r.interfacesN != nil {
		t := *r.interfacesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interfaces__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interfaces__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.localConfigContextData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_data", r.localConfigContextData, "")
	}
	if r.localConfigContextSchema != nil {
		t := *r.localConfigContextSchema
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema", t, "multi")
		}
	}
	if r.localConfigContextSchemaIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema__isnull", r.localConfigContextSchemaIsnull, "")
	}
	if r.localConfigContextSchemaN != nil {
		t := *r.localConfigContextSchemaN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema__n", t, "multi")
		}
	}
	if r.localConfigContextSchemaId != nil {
		t := *r.localConfigContextSchemaId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema_id", t, "multi")
		}
	}
	if r.localConfigContextSchemaIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema_id__isnull", r.localConfigContextSchemaIdIsnull, "")
	}
	if r.localConfigContextSchemaIdN != nil {
		t := *r.localConfigContextSchemaIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "local_config_context_schema_id__n", t, "multi")
		}
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location__isnull", r.locationIsnull, "")
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.macAddress != nil {
		t := *r.macAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", t, "multi")
		}
	}
	if r.macAddressIc != nil {
		t := *r.macAddressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", t, "multi")
		}
	}
	if r.macAddressIe != nil {
		t := *r.macAddressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", t, "multi")
		}
	}
	if r.macAddressIew != nil {
		t := *r.macAddressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", t, "multi")
		}
	}
	if r.macAddressIre != nil {
		t := *r.macAddressIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ire", t, "multi")
		}
	}
	if r.macAddressIsw != nil {
		t := *r.macAddressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", t, "multi")
		}
	}
	if r.macAddressN != nil {
		t := *r.macAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", t, "multi")
		}
	}
	if r.macAddressNic != nil {
		t := *r.macAddressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", t, "multi")
		}
	}
	if r.macAddressNie != nil {
		t := *r.macAddressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", t, "multi")
		}
	}
	if r.macAddressNiew != nil {
		t := *r.macAddressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", t, "multi")
		}
	}
	if r.macAddressNire != nil {
		t := *r.macAddressNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nire", t, "multi")
		}
	}
	if r.macAddressNisw != nil {
		t := *r.macAddressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", t, "multi")
		}
	}
	if r.macAddressNre != nil {
		t := *r.macAddressNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nre", t, "multi")
		}
	}
	if r.macAddressRe != nil {
		t := *r.macAddressRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__re", t, "multi")
		}
	}
	if r.memory != nil {
		t := *r.memory
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "memory", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "memory", t, "multi")
		}
	}
	if r.memoryGt != nil {
		t := *r.memoryGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "memory__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "memory__gt", t, "multi")
		}
	}
	if r.memoryGte != nil {
		t := *r.memoryGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "memory__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "memory__gte", t, "multi")
		}
	}
	if r.memoryIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "memory__isnull", r.memoryIsnull, "")
	}
	if r.memoryLt != nil {
		t := *r.memoryLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "memory__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "memory__lt", t, "multi")
		}
	}
	if r.memoryLte != nil {
		t := *r.memoryLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "memory__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "memory__lte", t, "multi")
		}
	}
	if r.memoryN != nil {
		t := *r.memoryN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "memory__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "memory__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.platform != nil {
		t := *r.platform
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform", t, "multi")
		}
	}
	if r.platformIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__isnull", r.platformIsnull, "")
	}
	if r.platformN != nil {
		t := *r.platformN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", t, "multi")
		}
	}
	if r.platformId != nil {
		t := *r.platformId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", t, "multi")
		}
	}
	if r.platformIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__isnull", r.platformIdIsnull, "")
	}
	if r.platformIdN != nil {
		t := *r.platformIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", t, "multi")
		}
	}
	if r.primaryIp4 != nil {
		t := *r.primaryIp4
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4", t, "multi")
		}
	}
	if r.primaryIp6 != nil {
		t := *r.primaryIp6
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "role__isnull", r.roleIsnull, "")
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.services != nil {
		t := *r.services
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "services", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "services", t, "multi")
		}
	}
	if r.servicesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "services__isnull", r.servicesIsnull, "")
	}
	if r.servicesN != nil {
		t := *r.servicesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "services__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "services__n", t, "multi")
		}
	}
	if r.softwareImageFiles != nil {
		t := *r.softwareImageFiles
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "software_image_files", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "software_image_files", t, "multi")
		}
	}
	if r.softwareImageFilesN != nil {
		t := *r.softwareImageFilesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "software_image_files__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "software_image_files__n", t, "multi")
		}
	}
	if r.softwareVersion != nil {
		t := *r.softwareVersion
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "software_version", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "software_version", t, "multi")
		}
	}
	if r.softwareVersionIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "software_version__isnull", r.softwareVersionIsnull, "")
	}
	if r.softwareVersionN != nil {
		t := *r.softwareVersionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "software_version__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "software_version__n", t, "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__isnull", r.tenantIsnull, "")
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__isnull", r.tenantGroupIsnull, "")
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__isnull", r.tenantIdIsnull, "")
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.vcpus != nil {
		t := *r.vcpus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus", t, "multi")
		}
	}
	if r.vcpusGt != nil {
		t := *r.vcpusGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__gt", t, "multi")
		}
	}
	if r.vcpusGte != nil {
		t := *r.vcpusGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__gte", t, "multi")
		}
	}
	if r.vcpusIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__isnull", r.vcpusIsnull, "")
	}
	if r.vcpusLt != nil {
		t := *r.vcpusLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__lt", t, "multi")
		}
	}
	if r.vcpusLte != nil {
		t := *r.vcpusLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__lte", t, "multi")
		}
	}
	if r.vcpusN != nil {
		t := *r.vcpusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vcpus__n", t, "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesNotesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationVirtualMachinesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiVirtualizationVirtualMachinesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiVirtualizationVirtualMachinesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationVirtualMachinesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesNotesCreateExecute(r)
}

/*
VirtualizationVirtualMachinesNotesCreate Method for VirtualizationVirtualMachinesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesNotesCreateRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesNotesCreate(ctx context.Context, id string) ApiVirtualizationVirtualMachinesNotesCreateRequest {
	return ApiVirtualizationVirtualMachinesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesNotesCreateExecute(r ApiVirtualizationVirtualMachinesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesNotesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiVirtualizationVirtualMachinesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationVirtualMachinesNotesListRequest) Limit(limit int32) ApiVirtualizationVirtualMachinesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationVirtualMachinesNotesListRequest) Offset(offset int32) ApiVirtualizationVirtualMachinesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiVirtualizationVirtualMachinesNotesListRequest) Depth(depth int32) ApiVirtualizationVirtualMachinesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationVirtualMachinesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesNotesListExecute(r)
}

/*
VirtualizationVirtualMachinesNotesList Method for VirtualizationVirtualMachinesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesNotesListRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesNotesList(ctx context.Context, id string) ApiVirtualizationVirtualMachinesNotesListRequest {
	return ApiVirtualizationVirtualMachinesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesNotesListExecute(r ApiVirtualizationVirtualMachinesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedVirtualMachineRequest *PatchedVirtualMachineRequest
}

func (r ApiVirtualizationVirtualMachinesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationVirtualMachinesPartialUpdateRequest) PatchedVirtualMachineRequest(patchedVirtualMachineRequest PatchedVirtualMachineRequest) ApiVirtualizationVirtualMachinesPartialUpdateRequest {
	r.patchedVirtualMachineRequest = &patchedVirtualMachineRequest
	return r
}

func (r ApiVirtualizationVirtualMachinesPartialUpdateRequest) Execute() (*VirtualMachine, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesPartialUpdateExecute(r)
}

/*
VirtualizationVirtualMachinesPartialUpdate Method for VirtualizationVirtualMachinesPartialUpdate

Partial update a virtual machine object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesPartialUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesPartialUpdate(ctx context.Context, id string) ApiVirtualizationVirtualMachinesPartialUpdateRequest {
	return ApiVirtualizationVirtualMachinesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VirtualMachine
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesPartialUpdateExecute(r ApiVirtualizationVirtualMachinesPartialUpdateRequest) (*VirtualMachine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedVirtualMachineRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiVirtualizationVirtualMachinesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiVirtualizationVirtualMachinesRetrieveRequest) Depth(depth int32) ApiVirtualizationVirtualMachinesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiVirtualizationVirtualMachinesRetrieveRequest) Execute() (*VirtualMachine, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesRetrieveExecute(r)
}

/*
VirtualizationVirtualMachinesRetrieve Method for VirtualizationVirtualMachinesRetrieve

Retrieve a virtual machine object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesRetrieveRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesRetrieve(ctx context.Context, id string) ApiVirtualizationVirtualMachinesRetrieveRequest {
	return ApiVirtualizationVirtualMachinesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VirtualMachine
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesRetrieveExecute(r ApiVirtualizationVirtualMachinesRetrieveRequest) (*VirtualMachine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationAPIService
	id string
	virtualMachineRequest *VirtualMachineRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiVirtualizationVirtualMachinesUpdateRequest) VirtualMachineRequest(virtualMachineRequest VirtualMachineRequest) ApiVirtualizationVirtualMachinesUpdateRequest {
	r.virtualMachineRequest = &virtualMachineRequest
	return r
}

func (r ApiVirtualizationVirtualMachinesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiVirtualizationVirtualMachinesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualizationVirtualMachinesUpdateRequest) Execute() (*VirtualMachine, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesUpdateExecute(r)
}

/*
VirtualizationVirtualMachinesUpdate Method for VirtualizationVirtualMachinesUpdate

Update a virtual machine object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesUpdateRequest
*/
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesUpdate(ctx context.Context, id string) ApiVirtualizationVirtualMachinesUpdateRequest {
	return ApiVirtualizationVirtualMachinesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VirtualMachine
func (a *VirtualizationAPIService) VirtualizationVirtualMachinesUpdateExecute(r ApiVirtualizationVirtualMachinesUpdateRequest) (*VirtualMachine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationAPIService.VirtualizationVirtualMachinesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.virtualMachineRequest == nil {
		return localVarReturnValue, nil, reportError("virtualMachineRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.virtualMachineRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
