/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// PrefixTypeLabel the model 'PrefixTypeLabel'
type PrefixTypeLabel string

// List of Prefix_type_label
const (
	PREFIXTYPELABEL_CONTAINER PrefixTypeLabel = "Container"
	PREFIXTYPELABEL_NETWORK PrefixTypeLabel = "Network"
	PREFIXTYPELABEL_POOL PrefixTypeLabel = "Pool"
)

// All allowed values of PrefixTypeLabel enum
var AllowedPrefixTypeLabelEnumValues = []PrefixTypeLabel{
	"Container",
	"Network",
	"Pool",
}

func (v *PrefixTypeLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrefixTypeLabel(value)
	for _, existing := range AllowedPrefixTypeLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrefixTypeLabel", value)
}

// NewPrefixTypeLabelFromValue returns a pointer to a valid PrefixTypeLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrefixTypeLabelFromValue(v string) (*PrefixTypeLabel, error) {
	ev := PrefixTypeLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrefixTypeLabel: valid values are %v", v, AllowedPrefixTypeLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrefixTypeLabel) IsValid() bool {
	for _, existing := range AllowedPrefixTypeLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Prefix_type_label value
func (v PrefixTypeLabel) Ptr() *PrefixTypeLabel {
	return &v
}

type NullablePrefixTypeLabel struct {
	value *PrefixTypeLabel
	isSet bool
}

func (v NullablePrefixTypeLabel) Get() *PrefixTypeLabel {
	return v.value
}

func (v *NullablePrefixTypeLabel) Set(val *PrefixTypeLabel) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixTypeLabel) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixTypeLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixTypeLabel(val *PrefixTypeLabel) *NullablePrefixTypeLabel {
	return &NullablePrefixTypeLabel{value: val, isSet: true}
}

func (v NullablePrefixTypeLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixTypeLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

