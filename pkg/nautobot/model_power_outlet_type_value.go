/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// PowerOutletTypeValue the model 'PowerOutletTypeValue'
type PowerOutletTypeValue string

// List of PowerOutlet_type_value
const (
	POWEROUTLETTYPEVALUE_IEC_60320_C5 PowerOutletTypeValue = "iec-60320-c5"
	POWEROUTLETTYPEVALUE_IEC_60320_C7 PowerOutletTypeValue = "iec-60320-c7"
	POWEROUTLETTYPEVALUE_IEC_60320_C13 PowerOutletTypeValue = "iec-60320-c13"
	POWEROUTLETTYPEVALUE_IEC_60320_C15 PowerOutletTypeValue = "iec-60320-c15"
	POWEROUTLETTYPEVALUE_IEC_60320_C19 PowerOutletTypeValue = "iec-60320-c19"
	POWEROUTLETTYPEVALUE_IEC_60320_C21 PowerOutletTypeValue = "iec-60320-c21"
	POWEROUTLETTYPEVALUE_IEC_60309_P_N_E_4H PowerOutletTypeValue = "iec-60309-p-n-e-4h"
	POWEROUTLETTYPEVALUE_IEC_60309_P_N_E_6H PowerOutletTypeValue = "iec-60309-p-n-e-6h"
	POWEROUTLETTYPEVALUE_IEC_60309_P_N_E_9H PowerOutletTypeValue = "iec-60309-p-n-e-9h"
	POWEROUTLETTYPEVALUE_IEC_60309_2P_E_4H PowerOutletTypeValue = "iec-60309-2p-e-4h"
	POWEROUTLETTYPEVALUE_IEC_60309_2P_E_6H PowerOutletTypeValue = "iec-60309-2p-e-6h"
	POWEROUTLETTYPEVALUE_IEC_60309_2P_E_9H PowerOutletTypeValue = "iec-60309-2p-e-9h"
	POWEROUTLETTYPEVALUE_IEC_60309_3P_E_4H PowerOutletTypeValue = "iec-60309-3p-e-4h"
	POWEROUTLETTYPEVALUE_IEC_60309_3P_E_6H PowerOutletTypeValue = "iec-60309-3p-e-6h"
	POWEROUTLETTYPEVALUE_IEC_60309_3P_E_9H PowerOutletTypeValue = "iec-60309-3p-e-9h"
	POWEROUTLETTYPEVALUE_IEC_60309_3P_N_E_4H PowerOutletTypeValue = "iec-60309-3p-n-e-4h"
	POWEROUTLETTYPEVALUE_IEC_60309_3P_N_E_6H PowerOutletTypeValue = "iec-60309-3p-n-e-6h"
	POWEROUTLETTYPEVALUE_IEC_60309_3P_N_E_9H PowerOutletTypeValue = "iec-60309-3p-n-e-9h"
	POWEROUTLETTYPEVALUE_IEC_60906_1 PowerOutletTypeValue = "iec-60906-1"
	POWEROUTLETTYPEVALUE_NBR_14136_10A PowerOutletTypeValue = "nbr-14136-10a"
	POWEROUTLETTYPEVALUE_NBR_14136_20A PowerOutletTypeValue = "nbr-14136-20a"
	POWEROUTLETTYPEVALUE_NEMA_1_15R PowerOutletTypeValue = "nema-1-15r"
	POWEROUTLETTYPEVALUE_NEMA_5_15R PowerOutletTypeValue = "nema-5-15r"
	POWEROUTLETTYPEVALUE_NEMA_5_20R PowerOutletTypeValue = "nema-5-20r"
	POWEROUTLETTYPEVALUE_NEMA_5_30R PowerOutletTypeValue = "nema-5-30r"
	POWEROUTLETTYPEVALUE_NEMA_5_50R PowerOutletTypeValue = "nema-5-50r"
	POWEROUTLETTYPEVALUE_NEMA_6_15R PowerOutletTypeValue = "nema-6-15r"
	POWEROUTLETTYPEVALUE_NEMA_6_20R PowerOutletTypeValue = "nema-6-20r"
	POWEROUTLETTYPEVALUE_NEMA_6_30R PowerOutletTypeValue = "nema-6-30r"
	POWEROUTLETTYPEVALUE_NEMA_6_50R PowerOutletTypeValue = "nema-6-50r"
	POWEROUTLETTYPEVALUE_NEMA_10_30R PowerOutletTypeValue = "nema-10-30r"
	POWEROUTLETTYPEVALUE_NEMA_10_50R PowerOutletTypeValue = "nema-10-50r"
	POWEROUTLETTYPEVALUE_NEMA_14_20R PowerOutletTypeValue = "nema-14-20r"
	POWEROUTLETTYPEVALUE_NEMA_14_30R PowerOutletTypeValue = "nema-14-30r"
	POWEROUTLETTYPEVALUE_NEMA_14_50R PowerOutletTypeValue = "nema-14-50r"
	POWEROUTLETTYPEVALUE_NEMA_14_60R PowerOutletTypeValue = "nema-14-60r"
	POWEROUTLETTYPEVALUE_NEMA_15_15R PowerOutletTypeValue = "nema-15-15r"
	POWEROUTLETTYPEVALUE_NEMA_15_20R PowerOutletTypeValue = "nema-15-20r"
	POWEROUTLETTYPEVALUE_NEMA_15_30R PowerOutletTypeValue = "nema-15-30r"
	POWEROUTLETTYPEVALUE_NEMA_15_50R PowerOutletTypeValue = "nema-15-50r"
	POWEROUTLETTYPEVALUE_NEMA_15_60R PowerOutletTypeValue = "nema-15-60r"
	POWEROUTLETTYPEVALUE_NEMA_L1_15R PowerOutletTypeValue = "nema-l1-15r"
	POWEROUTLETTYPEVALUE_NEMA_L5_15R PowerOutletTypeValue = "nema-l5-15r"
	POWEROUTLETTYPEVALUE_NEMA_L5_20R PowerOutletTypeValue = "nema-l5-20r"
	POWEROUTLETTYPEVALUE_NEMA_L5_30R PowerOutletTypeValue = "nema-l5-30r"
	POWEROUTLETTYPEVALUE_NEMA_L5_50R PowerOutletTypeValue = "nema-l5-50r"
	POWEROUTLETTYPEVALUE_NEMA_L6_15R PowerOutletTypeValue = "nema-l6-15r"
	POWEROUTLETTYPEVALUE_NEMA_L6_20R PowerOutletTypeValue = "nema-l6-20r"
	POWEROUTLETTYPEVALUE_NEMA_L6_30R PowerOutletTypeValue = "nema-l6-30r"
	POWEROUTLETTYPEVALUE_NEMA_L6_50R PowerOutletTypeValue = "nema-l6-50r"
	POWEROUTLETTYPEVALUE_NEMA_L10_30R PowerOutletTypeValue = "nema-l10-30r"
	POWEROUTLETTYPEVALUE_NEMA_L14_20R PowerOutletTypeValue = "nema-l14-20r"
	POWEROUTLETTYPEVALUE_NEMA_L14_30R PowerOutletTypeValue = "nema-l14-30r"
	POWEROUTLETTYPEVALUE_NEMA_L14_50R PowerOutletTypeValue = "nema-l14-50r"
	POWEROUTLETTYPEVALUE_NEMA_L14_60R PowerOutletTypeValue = "nema-l14-60r"
	POWEROUTLETTYPEVALUE_NEMA_L15_20R PowerOutletTypeValue = "nema-l15-20r"
	POWEROUTLETTYPEVALUE_NEMA_L15_30R PowerOutletTypeValue = "nema-l15-30r"
	POWEROUTLETTYPEVALUE_NEMA_L15_50R PowerOutletTypeValue = "nema-l15-50r"
	POWEROUTLETTYPEVALUE_NEMA_L15_60R PowerOutletTypeValue = "nema-l15-60r"
	POWEROUTLETTYPEVALUE_NEMA_L21_20R PowerOutletTypeValue = "nema-l21-20r"
	POWEROUTLETTYPEVALUE_NEMA_L21_30R PowerOutletTypeValue = "nema-l21-30r"
	POWEROUTLETTYPEVALUE_NEMA_L22_30R PowerOutletTypeValue = "nema-l22-30r"
	POWEROUTLETTYPEVALUE_CS6360_C PowerOutletTypeValue = "CS6360C"
	POWEROUTLETTYPEVALUE_CS6364_C PowerOutletTypeValue = "CS6364C"
	POWEROUTLETTYPEVALUE_CS8164_C PowerOutletTypeValue = "CS8164C"
	POWEROUTLETTYPEVALUE_CS8264_C PowerOutletTypeValue = "CS8264C"
	POWEROUTLETTYPEVALUE_CS8364_C PowerOutletTypeValue = "CS8364C"
	POWEROUTLETTYPEVALUE_CS8464_C PowerOutletTypeValue = "CS8464C"
	POWEROUTLETTYPEVALUE_ITA_E PowerOutletTypeValue = "ita-e"
	POWEROUTLETTYPEVALUE_ITA_F PowerOutletTypeValue = "ita-f"
	POWEROUTLETTYPEVALUE_ITA_G PowerOutletTypeValue = "ita-g"
	POWEROUTLETTYPEVALUE_ITA_H PowerOutletTypeValue = "ita-h"
	POWEROUTLETTYPEVALUE_ITA_I PowerOutletTypeValue = "ita-i"
	POWEROUTLETTYPEVALUE_ITA_J PowerOutletTypeValue = "ita-j"
	POWEROUTLETTYPEVALUE_ITA_K PowerOutletTypeValue = "ita-k"
	POWEROUTLETTYPEVALUE_ITA_L PowerOutletTypeValue = "ita-l"
	POWEROUTLETTYPEVALUE_ITA_M PowerOutletTypeValue = "ita-m"
	POWEROUTLETTYPEVALUE_ITA_N PowerOutletTypeValue = "ita-n"
	POWEROUTLETTYPEVALUE_ITA_O PowerOutletTypeValue = "ita-o"
	POWEROUTLETTYPEVALUE_ITA_MULTISTANDARD PowerOutletTypeValue = "ita-multistandard"
	POWEROUTLETTYPEVALUE_USB_A PowerOutletTypeValue = "usb-a"
	POWEROUTLETTYPEVALUE_USB_MICRO_B PowerOutletTypeValue = "usb-micro-b"
	POWEROUTLETTYPEVALUE_USB_C PowerOutletTypeValue = "usb-c"
	POWEROUTLETTYPEVALUE_DC_TERMINAL PowerOutletTypeValue = "dc-terminal"
	POWEROUTLETTYPEVALUE_HDOT_CX PowerOutletTypeValue = "hdot-cx"
	POWEROUTLETTYPEVALUE_SAF_D_GRID PowerOutletTypeValue = "saf-d-grid"
	POWEROUTLETTYPEVALUE_NEUTRIK_POWERCON_20A PowerOutletTypeValue = "neutrik-powercon-20a"
	POWEROUTLETTYPEVALUE_NEUTRIK_POWERCON_32A PowerOutletTypeValue = "neutrik-powercon-32a"
	POWEROUTLETTYPEVALUE_NEUTRIK_POWERCON_TRUE1 PowerOutletTypeValue = "neutrik-powercon-true1"
	POWEROUTLETTYPEVALUE_NEUTRIK_POWERCON_TRUE1_TOP PowerOutletTypeValue = "neutrik-powercon-true1-top"
	POWEROUTLETTYPEVALUE_UBIQUITI_SMARTPOWER PowerOutletTypeValue = "ubiquiti-smartpower"
	POWEROUTLETTYPEVALUE_HARDWIRED PowerOutletTypeValue = "hardwired"
	POWEROUTLETTYPEVALUE_OTHER PowerOutletTypeValue = "other"
)

// All allowed values of PowerOutletTypeValue enum
var AllowedPowerOutletTypeValueEnumValues = []PowerOutletTypeValue{
	"iec-60320-c5",
	"iec-60320-c7",
	"iec-60320-c13",
	"iec-60320-c15",
	"iec-60320-c19",
	"iec-60320-c21",
	"iec-60309-p-n-e-4h",
	"iec-60309-p-n-e-6h",
	"iec-60309-p-n-e-9h",
	"iec-60309-2p-e-4h",
	"iec-60309-2p-e-6h",
	"iec-60309-2p-e-9h",
	"iec-60309-3p-e-4h",
	"iec-60309-3p-e-6h",
	"iec-60309-3p-e-9h",
	"iec-60309-3p-n-e-4h",
	"iec-60309-3p-n-e-6h",
	"iec-60309-3p-n-e-9h",
	"iec-60906-1",
	"nbr-14136-10a",
	"nbr-14136-20a",
	"nema-1-15r",
	"nema-5-15r",
	"nema-5-20r",
	"nema-5-30r",
	"nema-5-50r",
	"nema-6-15r",
	"nema-6-20r",
	"nema-6-30r",
	"nema-6-50r",
	"nema-10-30r",
	"nema-10-50r",
	"nema-14-20r",
	"nema-14-30r",
	"nema-14-50r",
	"nema-14-60r",
	"nema-15-15r",
	"nema-15-20r",
	"nema-15-30r",
	"nema-15-50r",
	"nema-15-60r",
	"nema-l1-15r",
	"nema-l5-15r",
	"nema-l5-20r",
	"nema-l5-30r",
	"nema-l5-50r",
	"nema-l6-15r",
	"nema-l6-20r",
	"nema-l6-30r",
	"nema-l6-50r",
	"nema-l10-30r",
	"nema-l14-20r",
	"nema-l14-30r",
	"nema-l14-50r",
	"nema-l14-60r",
	"nema-l15-20r",
	"nema-l15-30r",
	"nema-l15-50r",
	"nema-l15-60r",
	"nema-l21-20r",
	"nema-l21-30r",
	"nema-l22-30r",
	"CS6360C",
	"CS6364C",
	"CS8164C",
	"CS8264C",
	"CS8364C",
	"CS8464C",
	"ita-e",
	"ita-f",
	"ita-g",
	"ita-h",
	"ita-i",
	"ita-j",
	"ita-k",
	"ita-l",
	"ita-m",
	"ita-n",
	"ita-o",
	"ita-multistandard",
	"usb-a",
	"usb-micro-b",
	"usb-c",
	"dc-terminal",
	"hdot-cx",
	"saf-d-grid",
	"neutrik-powercon-20a",
	"neutrik-powercon-32a",
	"neutrik-powercon-true1",
	"neutrik-powercon-true1-top",
	"ubiquiti-smartpower",
	"hardwired",
	"other",
}

func (v *PowerOutletTypeValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerOutletTypeValue(value)
	for _, existing := range AllowedPowerOutletTypeValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerOutletTypeValue", value)
}

// NewPowerOutletTypeValueFromValue returns a pointer to a valid PowerOutletTypeValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerOutletTypeValueFromValue(v string) (*PowerOutletTypeValue, error) {
	ev := PowerOutletTypeValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerOutletTypeValue: valid values are %v", v, AllowedPowerOutletTypeValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerOutletTypeValue) IsValid() bool {
	for _, existing := range AllowedPowerOutletTypeValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerOutlet_type_value value
func (v PowerOutletTypeValue) Ptr() *PowerOutletTypeValue {
	return &v
}

type NullablePowerOutletTypeValue struct {
	value *PowerOutletTypeValue
	isSet bool
}

func (v NullablePowerOutletTypeValue) Get() *PowerOutletTypeValue {
	return v.value
}

func (v *NullablePowerOutletTypeValue) Set(val *PowerOutletTypeValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerOutletTypeValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerOutletTypeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerOutletTypeValue(val *PowerOutletTypeValue) *NullablePowerOutletTypeValue {
	return &NullablePowerOutletTypeValue{value: val, isSet: true}
}

func (v NullablePowerOutletTypeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerOutletTypeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

