/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Job type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Job{}

// Job Base class to use for serializers based on OrganizationalModel or PrimaryModel.  Can also be used for models derived from BaseModel, so long as they support custom fields, notes, and relationships.
type Job struct {
	Id string `json:"id"`
	ObjectType string `json:"object_type" validate:"regexp=^[a-z][a-z0-9_]+\\\\.[a-z][a-z0-9_]+$"`
	// Human friendly display value
	Display string `json:"display"`
	Url string `json:"url"`
	NaturalSlug string `json:"natural_slug"`
	// Dotted name of the Python module providing this job
	ModuleName string `json:"module_name"`
	// Name of the Python class providing this job
	JobClassName string `json:"job_class_name"`
	// Human-readable grouping that this job belongs to
	Grouping string `json:"grouping"`
	// Human-readable name of this job
	Name string `json:"name"`
	// Markdown formatting and a limited subset of HTML are supported
	Description *string `json:"description,omitempty"`
	// Whether the Python module and class providing this job are presently installed and loadable
	Installed bool `json:"installed"`
	// Whether this job can be executed by users
	Enabled *bool `json:"enabled,omitempty"`
	// Whether this job is a job hook receiver
	IsJobHookReceiver bool `json:"is_job_hook_receiver"`
	// Whether this job is a job button receiver
	IsJobButtonReceiver bool `json:"is_job_button_receiver"`
	// Whether this job contains sensitive variables
	HasSensitiveVariables *bool `json:"has_sensitive_variables,omitempty"`
	// Whether the job requires approval from another user before running
	ApprovalRequired *bool `json:"approval_required,omitempty"`
	// Whether the job defaults to not being shown in the UI
	Hidden *bool `json:"hidden,omitempty"`
	// Whether the job defaults to running with dryrun argument set to true
	DryrunDefault *bool `json:"dryrun_default,omitempty"`
	// Set to true if the job does not make any changes to the environment
	ReadOnly bool `json:"read_only"`
	// Maximum runtime in seconds before the job will receive a <code>SoftTimeLimitExceeded</code> exception.<br>Set to 0 to use Nautobot system default
	SoftTimeLimit *float64 `json:"soft_time_limit,omitempty"`
	// Maximum runtime in seconds before the job will be forcibly terminated.<br>Set to 0 to use Nautobot system default
	TimeLimit *float64 `json:"time_limit,omitempty"`
	// Comma separated list of task queues that this job can run on. A blank list will use the default queue
	TaskQueues map[string]interface{} `json:"task_queues,omitempty"`
	// If supported, allows the job to bypass approval when running with dryrun argument set to true
	SupportsDryrun bool `json:"supports_dryrun"`
	// If set, the configured grouping will remain even if the underlying Job source code changes
	GroupingOverride *bool `json:"grouping_override,omitempty"`
	// If set, the configured name will remain even if the underlying Job source code changes
	NameOverride *bool `json:"name_override,omitempty"`
	// If set, the configured description will remain even if the underlying Job source code changes
	DescriptionOverride *bool `json:"description_override,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	ApprovalRequiredOverride *bool `json:"approval_required_override,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	DryrunDefaultOverride *bool `json:"dryrun_default_override,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	HiddenOverride *bool `json:"hidden_override,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	SoftTimeLimitOverride *bool `json:"soft_time_limit_override,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	TimeLimitOverride *bool `json:"time_limit_override,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	HasSensitiveVariablesOverride *bool `json:"has_sensitive_variables_override,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	TaskQueuesOverride *bool `json:"task_queues_override,omitempty"`
	Created NullableTime `json:"created"`
	LastUpdated NullableTime `json:"last_updated"`
	Tags []BulkWritableCableRequestStatus `json:"tags,omitempty"`
	NotesUrl string `json:"notes_url"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Job Job

// NewJob instantiates a new Job object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJob(id string, objectType string, display string, url string, naturalSlug string, moduleName string, jobClassName string, grouping string, name string, installed bool, isJobHookReceiver bool, isJobButtonReceiver bool, readOnly bool, supportsDryrun bool, created NullableTime, lastUpdated NullableTime, notesUrl string) *Job {
	this := Job{}
	this.Id = id
	this.ObjectType = objectType
	this.Display = display
	this.Url = url
	this.NaturalSlug = naturalSlug
	this.ModuleName = moduleName
	this.JobClassName = jobClassName
	this.Grouping = grouping
	this.Name = name
	this.Installed = installed
	this.IsJobHookReceiver = isJobHookReceiver
	this.IsJobButtonReceiver = isJobButtonReceiver
	this.ReadOnly = readOnly
	this.SupportsDryrun = supportsDryrun
	this.Created = created
	this.LastUpdated = lastUpdated
	this.NotesUrl = notesUrl
	return &this
}

// NewJobWithDefaults instantiates a new Job object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobWithDefaults() *Job {
	this := Job{}
	return &this
}

// GetId returns the Id field value
func (o *Job) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Job) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Job) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *Job) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *Job) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *Job) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDisplay returns the Display field value
func (o *Job) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *Job) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *Job) SetDisplay(v string) {
	o.Display = v
}

// GetUrl returns the Url field value
func (o *Job) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Job) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Job) SetUrl(v string) {
	o.Url = v
}

// GetNaturalSlug returns the NaturalSlug field value
func (o *Job) GetNaturalSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NaturalSlug
}

// GetNaturalSlugOk returns a tuple with the NaturalSlug field value
// and a boolean to check if the value has been set.
func (o *Job) GetNaturalSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NaturalSlug, true
}

// SetNaturalSlug sets field value
func (o *Job) SetNaturalSlug(v string) {
	o.NaturalSlug = v
}

// GetModuleName returns the ModuleName field value
func (o *Job) GetModuleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModuleName
}

// GetModuleNameOk returns a tuple with the ModuleName field value
// and a boolean to check if the value has been set.
func (o *Job) GetModuleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModuleName, true
}

// SetModuleName sets field value
func (o *Job) SetModuleName(v string) {
	o.ModuleName = v
}

// GetJobClassName returns the JobClassName field value
func (o *Job) GetJobClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobClassName
}

// GetJobClassNameOk returns a tuple with the JobClassName field value
// and a boolean to check if the value has been set.
func (o *Job) GetJobClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobClassName, true
}

// SetJobClassName sets field value
func (o *Job) SetJobClassName(v string) {
	o.JobClassName = v
}

// GetGrouping returns the Grouping field value
func (o *Job) GetGrouping() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Grouping
}

// GetGroupingOk returns a tuple with the Grouping field value
// and a boolean to check if the value has been set.
func (o *Job) GetGroupingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Grouping, true
}

// SetGrouping sets field value
func (o *Job) SetGrouping(v string) {
	o.Grouping = v
}

// GetName returns the Name field value
func (o *Job) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Job) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Job) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Job) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Job) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Job) SetDescription(v string) {
	o.Description = &v
}

// GetInstalled returns the Installed field value
func (o *Job) GetInstalled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Installed
}

// GetInstalledOk returns a tuple with the Installed field value
// and a boolean to check if the value has been set.
func (o *Job) GetInstalledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Installed, true
}

// SetInstalled sets field value
func (o *Job) SetInstalled(v bool) {
	o.Installed = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Job) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Job) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Job) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetIsJobHookReceiver returns the IsJobHookReceiver field value
func (o *Job) GetIsJobHookReceiver() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsJobHookReceiver
}

// GetIsJobHookReceiverOk returns a tuple with the IsJobHookReceiver field value
// and a boolean to check if the value has been set.
func (o *Job) GetIsJobHookReceiverOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsJobHookReceiver, true
}

// SetIsJobHookReceiver sets field value
func (o *Job) SetIsJobHookReceiver(v bool) {
	o.IsJobHookReceiver = v
}

// GetIsJobButtonReceiver returns the IsJobButtonReceiver field value
func (o *Job) GetIsJobButtonReceiver() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsJobButtonReceiver
}

// GetIsJobButtonReceiverOk returns a tuple with the IsJobButtonReceiver field value
// and a boolean to check if the value has been set.
func (o *Job) GetIsJobButtonReceiverOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsJobButtonReceiver, true
}

// SetIsJobButtonReceiver sets field value
func (o *Job) SetIsJobButtonReceiver(v bool) {
	o.IsJobButtonReceiver = v
}

// GetHasSensitiveVariables returns the HasSensitiveVariables field value if set, zero value otherwise.
func (o *Job) GetHasSensitiveVariables() bool {
	if o == nil || IsNil(o.HasSensitiveVariables) {
		var ret bool
		return ret
	}
	return *o.HasSensitiveVariables
}

// GetHasSensitiveVariablesOk returns a tuple with the HasSensitiveVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetHasSensitiveVariablesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasSensitiveVariables) {
		return nil, false
	}
	return o.HasSensitiveVariables, true
}

// HasHasSensitiveVariables returns a boolean if a field has been set.
func (o *Job) HasHasSensitiveVariables() bool {
	if o != nil && !IsNil(o.HasSensitiveVariables) {
		return true
	}

	return false
}

// SetHasSensitiveVariables gets a reference to the given bool and assigns it to the HasSensitiveVariables field.
func (o *Job) SetHasSensitiveVariables(v bool) {
	o.HasSensitiveVariables = &v
}

// GetApprovalRequired returns the ApprovalRequired field value if set, zero value otherwise.
func (o *Job) GetApprovalRequired() bool {
	if o == nil || IsNil(o.ApprovalRequired) {
		var ret bool
		return ret
	}
	return *o.ApprovalRequired
}

// GetApprovalRequiredOk returns a tuple with the ApprovalRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetApprovalRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.ApprovalRequired) {
		return nil, false
	}
	return o.ApprovalRequired, true
}

// HasApprovalRequired returns a boolean if a field has been set.
func (o *Job) HasApprovalRequired() bool {
	if o != nil && !IsNil(o.ApprovalRequired) {
		return true
	}

	return false
}

// SetApprovalRequired gets a reference to the given bool and assigns it to the ApprovalRequired field.
func (o *Job) SetApprovalRequired(v bool) {
	o.ApprovalRequired = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *Job) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *Job) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *Job) SetHidden(v bool) {
	o.Hidden = &v
}

// GetDryrunDefault returns the DryrunDefault field value if set, zero value otherwise.
func (o *Job) GetDryrunDefault() bool {
	if o == nil || IsNil(o.DryrunDefault) {
		var ret bool
		return ret
	}
	return *o.DryrunDefault
}

// GetDryrunDefaultOk returns a tuple with the DryrunDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDryrunDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.DryrunDefault) {
		return nil, false
	}
	return o.DryrunDefault, true
}

// HasDryrunDefault returns a boolean if a field has been set.
func (o *Job) HasDryrunDefault() bool {
	if o != nil && !IsNil(o.DryrunDefault) {
		return true
	}

	return false
}

// SetDryrunDefault gets a reference to the given bool and assigns it to the DryrunDefault field.
func (o *Job) SetDryrunDefault(v bool) {
	o.DryrunDefault = &v
}

// GetReadOnly returns the ReadOnly field value
func (o *Job) GetReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value
// and a boolean to check if the value has been set.
func (o *Job) GetReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadOnly, true
}

// SetReadOnly sets field value
func (o *Job) SetReadOnly(v bool) {
	o.ReadOnly = v
}

// GetSoftTimeLimit returns the SoftTimeLimit field value if set, zero value otherwise.
func (o *Job) GetSoftTimeLimit() float64 {
	if o == nil || IsNil(o.SoftTimeLimit) {
		var ret float64
		return ret
	}
	return *o.SoftTimeLimit
}

// GetSoftTimeLimitOk returns a tuple with the SoftTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetSoftTimeLimitOk() (*float64, bool) {
	if o == nil || IsNil(o.SoftTimeLimit) {
		return nil, false
	}
	return o.SoftTimeLimit, true
}

// HasSoftTimeLimit returns a boolean if a field has been set.
func (o *Job) HasSoftTimeLimit() bool {
	if o != nil && !IsNil(o.SoftTimeLimit) {
		return true
	}

	return false
}

// SetSoftTimeLimit gets a reference to the given float64 and assigns it to the SoftTimeLimit field.
func (o *Job) SetSoftTimeLimit(v float64) {
	o.SoftTimeLimit = &v
}

// GetTimeLimit returns the TimeLimit field value if set, zero value otherwise.
func (o *Job) GetTimeLimit() float64 {
	if o == nil || IsNil(o.TimeLimit) {
		var ret float64
		return ret
	}
	return *o.TimeLimit
}

// GetTimeLimitOk returns a tuple with the TimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTimeLimitOk() (*float64, bool) {
	if o == nil || IsNil(o.TimeLimit) {
		return nil, false
	}
	return o.TimeLimit, true
}

// HasTimeLimit returns a boolean if a field has been set.
func (o *Job) HasTimeLimit() bool {
	if o != nil && !IsNil(o.TimeLimit) {
		return true
	}

	return false
}

// SetTimeLimit gets a reference to the given float64 and assigns it to the TimeLimit field.
func (o *Job) SetTimeLimit(v float64) {
	o.TimeLimit = &v
}

// GetTaskQueues returns the TaskQueues field value if set, zero value otherwise.
func (o *Job) GetTaskQueues() map[string]interface{} {
	if o == nil || IsNil(o.TaskQueues) {
		var ret map[string]interface{}
		return ret
	}
	return o.TaskQueues
}

// GetTaskQueuesOk returns a tuple with the TaskQueues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTaskQueuesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TaskQueues) {
		return map[string]interface{}{}, false
	}
	return o.TaskQueues, true
}

// HasTaskQueues returns a boolean if a field has been set.
func (o *Job) HasTaskQueues() bool {
	if o != nil && !IsNil(o.TaskQueues) {
		return true
	}

	return false
}

// SetTaskQueues gets a reference to the given map[string]interface{} and assigns it to the TaskQueues field.
func (o *Job) SetTaskQueues(v map[string]interface{}) {
	o.TaskQueues = v
}

// GetSupportsDryrun returns the SupportsDryrun field value
func (o *Job) GetSupportsDryrun() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportsDryrun
}

// GetSupportsDryrunOk returns a tuple with the SupportsDryrun field value
// and a boolean to check if the value has been set.
func (o *Job) GetSupportsDryrunOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportsDryrun, true
}

// SetSupportsDryrun sets field value
func (o *Job) SetSupportsDryrun(v bool) {
	o.SupportsDryrun = v
}

// GetGroupingOverride returns the GroupingOverride field value if set, zero value otherwise.
func (o *Job) GetGroupingOverride() bool {
	if o == nil || IsNil(o.GroupingOverride) {
		var ret bool
		return ret
	}
	return *o.GroupingOverride
}

// GetGroupingOverrideOk returns a tuple with the GroupingOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetGroupingOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupingOverride) {
		return nil, false
	}
	return o.GroupingOverride, true
}

// HasGroupingOverride returns a boolean if a field has been set.
func (o *Job) HasGroupingOverride() bool {
	if o != nil && !IsNil(o.GroupingOverride) {
		return true
	}

	return false
}

// SetGroupingOverride gets a reference to the given bool and assigns it to the GroupingOverride field.
func (o *Job) SetGroupingOverride(v bool) {
	o.GroupingOverride = &v
}

// GetNameOverride returns the NameOverride field value if set, zero value otherwise.
func (o *Job) GetNameOverride() bool {
	if o == nil || IsNil(o.NameOverride) {
		var ret bool
		return ret
	}
	return *o.NameOverride
}

// GetNameOverrideOk returns a tuple with the NameOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetNameOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.NameOverride) {
		return nil, false
	}
	return o.NameOverride, true
}

// HasNameOverride returns a boolean if a field has been set.
func (o *Job) HasNameOverride() bool {
	if o != nil && !IsNil(o.NameOverride) {
		return true
	}

	return false
}

// SetNameOverride gets a reference to the given bool and assigns it to the NameOverride field.
func (o *Job) SetNameOverride(v bool) {
	o.NameOverride = &v
}

// GetDescriptionOverride returns the DescriptionOverride field value if set, zero value otherwise.
func (o *Job) GetDescriptionOverride() bool {
	if o == nil || IsNil(o.DescriptionOverride) {
		var ret bool
		return ret
	}
	return *o.DescriptionOverride
}

// GetDescriptionOverrideOk returns a tuple with the DescriptionOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDescriptionOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.DescriptionOverride) {
		return nil, false
	}
	return o.DescriptionOverride, true
}

// HasDescriptionOverride returns a boolean if a field has been set.
func (o *Job) HasDescriptionOverride() bool {
	if o != nil && !IsNil(o.DescriptionOverride) {
		return true
	}

	return false
}

// SetDescriptionOverride gets a reference to the given bool and assigns it to the DescriptionOverride field.
func (o *Job) SetDescriptionOverride(v bool) {
	o.DescriptionOverride = &v
}

// GetApprovalRequiredOverride returns the ApprovalRequiredOverride field value if set, zero value otherwise.
func (o *Job) GetApprovalRequiredOverride() bool {
	if o == nil || IsNil(o.ApprovalRequiredOverride) {
		var ret bool
		return ret
	}
	return *o.ApprovalRequiredOverride
}

// GetApprovalRequiredOverrideOk returns a tuple with the ApprovalRequiredOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetApprovalRequiredOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.ApprovalRequiredOverride) {
		return nil, false
	}
	return o.ApprovalRequiredOverride, true
}

// HasApprovalRequiredOverride returns a boolean if a field has been set.
func (o *Job) HasApprovalRequiredOverride() bool {
	if o != nil && !IsNil(o.ApprovalRequiredOverride) {
		return true
	}

	return false
}

// SetApprovalRequiredOverride gets a reference to the given bool and assigns it to the ApprovalRequiredOverride field.
func (o *Job) SetApprovalRequiredOverride(v bool) {
	o.ApprovalRequiredOverride = &v
}

// GetDryrunDefaultOverride returns the DryrunDefaultOverride field value if set, zero value otherwise.
func (o *Job) GetDryrunDefaultOverride() bool {
	if o == nil || IsNil(o.DryrunDefaultOverride) {
		var ret bool
		return ret
	}
	return *o.DryrunDefaultOverride
}

// GetDryrunDefaultOverrideOk returns a tuple with the DryrunDefaultOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDryrunDefaultOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.DryrunDefaultOverride) {
		return nil, false
	}
	return o.DryrunDefaultOverride, true
}

// HasDryrunDefaultOverride returns a boolean if a field has been set.
func (o *Job) HasDryrunDefaultOverride() bool {
	if o != nil && !IsNil(o.DryrunDefaultOverride) {
		return true
	}

	return false
}

// SetDryrunDefaultOverride gets a reference to the given bool and assigns it to the DryrunDefaultOverride field.
func (o *Job) SetDryrunDefaultOverride(v bool) {
	o.DryrunDefaultOverride = &v
}

// GetHiddenOverride returns the HiddenOverride field value if set, zero value otherwise.
func (o *Job) GetHiddenOverride() bool {
	if o == nil || IsNil(o.HiddenOverride) {
		var ret bool
		return ret
	}
	return *o.HiddenOverride
}

// GetHiddenOverrideOk returns a tuple with the HiddenOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetHiddenOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.HiddenOverride) {
		return nil, false
	}
	return o.HiddenOverride, true
}

// HasHiddenOverride returns a boolean if a field has been set.
func (o *Job) HasHiddenOverride() bool {
	if o != nil && !IsNil(o.HiddenOverride) {
		return true
	}

	return false
}

// SetHiddenOverride gets a reference to the given bool and assigns it to the HiddenOverride field.
func (o *Job) SetHiddenOverride(v bool) {
	o.HiddenOverride = &v
}

// GetSoftTimeLimitOverride returns the SoftTimeLimitOverride field value if set, zero value otherwise.
func (o *Job) GetSoftTimeLimitOverride() bool {
	if o == nil || IsNil(o.SoftTimeLimitOverride) {
		var ret bool
		return ret
	}
	return *o.SoftTimeLimitOverride
}

// GetSoftTimeLimitOverrideOk returns a tuple with the SoftTimeLimitOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetSoftTimeLimitOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.SoftTimeLimitOverride) {
		return nil, false
	}
	return o.SoftTimeLimitOverride, true
}

// HasSoftTimeLimitOverride returns a boolean if a field has been set.
func (o *Job) HasSoftTimeLimitOverride() bool {
	if o != nil && !IsNil(o.SoftTimeLimitOverride) {
		return true
	}

	return false
}

// SetSoftTimeLimitOverride gets a reference to the given bool and assigns it to the SoftTimeLimitOverride field.
func (o *Job) SetSoftTimeLimitOverride(v bool) {
	o.SoftTimeLimitOverride = &v
}

// GetTimeLimitOverride returns the TimeLimitOverride field value if set, zero value otherwise.
func (o *Job) GetTimeLimitOverride() bool {
	if o == nil || IsNil(o.TimeLimitOverride) {
		var ret bool
		return ret
	}
	return *o.TimeLimitOverride
}

// GetTimeLimitOverrideOk returns a tuple with the TimeLimitOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTimeLimitOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.TimeLimitOverride) {
		return nil, false
	}
	return o.TimeLimitOverride, true
}

// HasTimeLimitOverride returns a boolean if a field has been set.
func (o *Job) HasTimeLimitOverride() bool {
	if o != nil && !IsNil(o.TimeLimitOverride) {
		return true
	}

	return false
}

// SetTimeLimitOverride gets a reference to the given bool and assigns it to the TimeLimitOverride field.
func (o *Job) SetTimeLimitOverride(v bool) {
	o.TimeLimitOverride = &v
}

// GetHasSensitiveVariablesOverride returns the HasSensitiveVariablesOverride field value if set, zero value otherwise.
func (o *Job) GetHasSensitiveVariablesOverride() bool {
	if o == nil || IsNil(o.HasSensitiveVariablesOverride) {
		var ret bool
		return ret
	}
	return *o.HasSensitiveVariablesOverride
}

// GetHasSensitiveVariablesOverrideOk returns a tuple with the HasSensitiveVariablesOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetHasSensitiveVariablesOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.HasSensitiveVariablesOverride) {
		return nil, false
	}
	return o.HasSensitiveVariablesOverride, true
}

// HasHasSensitiveVariablesOverride returns a boolean if a field has been set.
func (o *Job) HasHasSensitiveVariablesOverride() bool {
	if o != nil && !IsNil(o.HasSensitiveVariablesOverride) {
		return true
	}

	return false
}

// SetHasSensitiveVariablesOverride gets a reference to the given bool and assigns it to the HasSensitiveVariablesOverride field.
func (o *Job) SetHasSensitiveVariablesOverride(v bool) {
	o.HasSensitiveVariablesOverride = &v
}

// GetTaskQueuesOverride returns the TaskQueuesOverride field value if set, zero value otherwise.
func (o *Job) GetTaskQueuesOverride() bool {
	if o == nil || IsNil(o.TaskQueuesOverride) {
		var ret bool
		return ret
	}
	return *o.TaskQueuesOverride
}

// GetTaskQueuesOverrideOk returns a tuple with the TaskQueuesOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTaskQueuesOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.TaskQueuesOverride) {
		return nil, false
	}
	return o.TaskQueuesOverride, true
}

// HasTaskQueuesOverride returns a boolean if a field has been set.
func (o *Job) HasTaskQueuesOverride() bool {
	if o != nil && !IsNil(o.TaskQueuesOverride) {
		return true
	}

	return false
}

// SetTaskQueuesOverride gets a reference to the given bool and assigns it to the TaskQueuesOverride field.
func (o *Job) SetTaskQueuesOverride(v bool) {
	o.TaskQueuesOverride = &v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Job) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *Job) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetLastUpdated returns the LastUpdated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Job) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// SetLastUpdated sets field value
func (o *Job) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Job) GetTags() []BulkWritableCableRequestStatus {
	if o == nil || IsNil(o.Tags) {
		var ret []BulkWritableCableRequestStatus
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTagsOk() ([]BulkWritableCableRequestStatus, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Job) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []BulkWritableCableRequestStatus and assigns it to the Tags field.
func (o *Job) SetTags(v []BulkWritableCableRequestStatus) {
	o.Tags = v
}

// GetNotesUrl returns the NotesUrl field value
func (o *Job) GetNotesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotesUrl
}

// GetNotesUrlOk returns a tuple with the NotesUrl field value
// and a boolean to check if the value has been set.
func (o *Job) GetNotesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotesUrl, true
}

// SetNotesUrl sets field value
func (o *Job) SetNotesUrl(v string) {
	o.NotesUrl = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Job) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Job) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Job) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o Job) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Job) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object_type"] = o.ObjectType
	toSerialize["display"] = o.Display
	toSerialize["url"] = o.Url
	toSerialize["natural_slug"] = o.NaturalSlug
	toSerialize["module_name"] = o.ModuleName
	toSerialize["job_class_name"] = o.JobClassName
	toSerialize["grouping"] = o.Grouping
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["installed"] = o.Installed
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["is_job_hook_receiver"] = o.IsJobHookReceiver
	toSerialize["is_job_button_receiver"] = o.IsJobButtonReceiver
	if !IsNil(o.HasSensitiveVariables) {
		toSerialize["has_sensitive_variables"] = o.HasSensitiveVariables
	}
	if !IsNil(o.ApprovalRequired) {
		toSerialize["approval_required"] = o.ApprovalRequired
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.DryrunDefault) {
		toSerialize["dryrun_default"] = o.DryrunDefault
	}
	toSerialize["read_only"] = o.ReadOnly
	if !IsNil(o.SoftTimeLimit) {
		toSerialize["soft_time_limit"] = o.SoftTimeLimit
	}
	if !IsNil(o.TimeLimit) {
		toSerialize["time_limit"] = o.TimeLimit
	}
	if !IsNil(o.TaskQueues) {
		toSerialize["task_queues"] = o.TaskQueues
	}
	toSerialize["supports_dryrun"] = o.SupportsDryrun
	if !IsNil(o.GroupingOverride) {
		toSerialize["grouping_override"] = o.GroupingOverride
	}
	if !IsNil(o.NameOverride) {
		toSerialize["name_override"] = o.NameOverride
	}
	if !IsNil(o.DescriptionOverride) {
		toSerialize["description_override"] = o.DescriptionOverride
	}
	if !IsNil(o.ApprovalRequiredOverride) {
		toSerialize["approval_required_override"] = o.ApprovalRequiredOverride
	}
	if !IsNil(o.DryrunDefaultOverride) {
		toSerialize["dryrun_default_override"] = o.DryrunDefaultOverride
	}
	if !IsNil(o.HiddenOverride) {
		toSerialize["hidden_override"] = o.HiddenOverride
	}
	if !IsNil(o.SoftTimeLimitOverride) {
		toSerialize["soft_time_limit_override"] = o.SoftTimeLimitOverride
	}
	if !IsNil(o.TimeLimitOverride) {
		toSerialize["time_limit_override"] = o.TimeLimitOverride
	}
	if !IsNil(o.HasSensitiveVariablesOverride) {
		toSerialize["has_sensitive_variables_override"] = o.HasSensitiveVariablesOverride
	}
	if !IsNil(o.TaskQueuesOverride) {
		toSerialize["task_queues_override"] = o.TaskQueuesOverride
	}
	toSerialize["created"] = o.Created.Get()
	toSerialize["last_updated"] = o.LastUpdated.Get()
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["notes_url"] = o.NotesUrl
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Job) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object_type",
		"display",
		"url",
		"natural_slug",
		"module_name",
		"job_class_name",
		"grouping",
		"name",
		"installed",
		"is_job_hook_receiver",
		"is_job_button_receiver",
		"read_only",
		"supports_dryrun",
		"created",
		"last_updated",
		"notes_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJob := _Job{}

	err = json.Unmarshal(data, &varJob)

	if err != nil {
		return err
	}

	*o = Job(varJob)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "display")
		delete(additionalProperties, "url")
		delete(additionalProperties, "natural_slug")
		delete(additionalProperties, "module_name")
		delete(additionalProperties, "job_class_name")
		delete(additionalProperties, "grouping")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "installed")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "is_job_hook_receiver")
		delete(additionalProperties, "is_job_button_receiver")
		delete(additionalProperties, "has_sensitive_variables")
		delete(additionalProperties, "approval_required")
		delete(additionalProperties, "hidden")
		delete(additionalProperties, "dryrun_default")
		delete(additionalProperties, "read_only")
		delete(additionalProperties, "soft_time_limit")
		delete(additionalProperties, "time_limit")
		delete(additionalProperties, "task_queues")
		delete(additionalProperties, "supports_dryrun")
		delete(additionalProperties, "grouping_override")
		delete(additionalProperties, "name_override")
		delete(additionalProperties, "description_override")
		delete(additionalProperties, "approval_required_override")
		delete(additionalProperties, "dryrun_default_override")
		delete(additionalProperties, "hidden_override")
		delete(additionalProperties, "soft_time_limit_override")
		delete(additionalProperties, "time_limit_override")
		delete(additionalProperties, "has_sensitive_variables_override")
		delete(additionalProperties, "task_queues_override")
		delete(additionalProperties, "created")
		delete(additionalProperties, "last_updated")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "notes_url")
		delete(additionalProperties, "custom_fields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJob struct {
	value *Job
	isSet bool
}

func (v NullableJob) Get() *Job {
	return v.value
}

func (v *NullableJob) Set(val *Job) {
	v.value = val
	v.isSet = true
}

func (v NullableJob) IsSet() bool {
	return v.isSet
}

func (v *NullableJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJob(val *Job) *NullableJob {
	return &NullableJob{value: val, isSet: true}
}

func (v NullableJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


