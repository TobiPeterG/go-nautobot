/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// JobResultStatusValue the model 'JobResultStatusValue'
type JobResultStatusValue string

// List of JobResult_status_value
const (
	JOBRESULTSTATUSVALUE_FAILURE JobResultStatusValue = "FAILURE"
	JOBRESULTSTATUSVALUE_PENDING JobResultStatusValue = "PENDING"
	JOBRESULTSTATUSVALUE_RECEIVED JobResultStatusValue = "RECEIVED"
	JOBRESULTSTATUSVALUE_RETRY JobResultStatusValue = "RETRY"
	JOBRESULTSTATUSVALUE_REVOKED JobResultStatusValue = "REVOKED"
	JOBRESULTSTATUSVALUE_STARTED JobResultStatusValue = "STARTED"
	JOBRESULTSTATUSVALUE_SUCCESS JobResultStatusValue = "SUCCESS"
)

// All allowed values of JobResultStatusValue enum
var AllowedJobResultStatusValueEnumValues = []JobResultStatusValue{
	"FAILURE",
	"PENDING",
	"RECEIVED",
	"RETRY",
	"REVOKED",
	"STARTED",
	"SUCCESS",
}

func (v *JobResultStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobResultStatusValue(value)
	for _, existing := range AllowedJobResultStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobResultStatusValue", value)
}

// NewJobResultStatusValueFromValue returns a pointer to a valid JobResultStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobResultStatusValueFromValue(v string) (*JobResultStatusValue, error) {
	ev := JobResultStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobResultStatusValue: valid values are %v", v, AllowedJobResultStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobResultStatusValue) IsValid() bool {
	for _, existing := range AllowedJobResultStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobResult_status_value value
func (v JobResultStatusValue) Ptr() *JobResultStatusValue {
	return &v
}

type NullableJobResultStatusValue struct {
	value *JobResultStatusValue
	isSet bool
}

func (v NullableJobResultStatusValue) Get() *JobResultStatusValue {
	return v.value
}

func (v *NullableJobResultStatusValue) Set(val *JobResultStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableJobResultStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableJobResultStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobResultStatusValue(val *JobResultStatusValue) *NullableJobResultStatusValue {
	return &NullableJobResultStatusValue{value: val, isSet: true}
}

func (v NullableJobResultStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobResultStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

