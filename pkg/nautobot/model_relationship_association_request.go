/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// checks if the RelationshipAssociationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipAssociationRequest{}

// RelationshipAssociationRequest Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type RelationshipAssociationRequest struct {
	SourceType string `json:"source_type"`
	DestinationType string `json:"destination_type"`
	SourceId string `json:"source_id"`
	DestinationId string `json:"destination_id"`
	Relationship BulkWritableCableRequestStatus `json:"relationship"`
	AdditionalProperties map[string]interface{}
}

type _RelationshipAssociationRequest RelationshipAssociationRequest

// NewRelationshipAssociationRequest instantiates a new RelationshipAssociationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipAssociationRequest(sourceType string, destinationType string, sourceId string, destinationId string, relationship BulkWritableCableRequestStatus) *RelationshipAssociationRequest {
	this := RelationshipAssociationRequest{}
	this.SourceType = sourceType
	this.DestinationType = destinationType
	this.SourceId = sourceId
	this.DestinationId = destinationId
	this.Relationship = relationship
	return &this
}

// NewRelationshipAssociationRequestWithDefaults instantiates a new RelationshipAssociationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipAssociationRequestWithDefaults() *RelationshipAssociationRequest {
	this := RelationshipAssociationRequest{}
	return &this
}

// GetSourceType returns the SourceType field value
func (o *RelationshipAssociationRequest) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociationRequest) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *RelationshipAssociationRequest) SetSourceType(v string) {
	o.SourceType = v
}

// GetDestinationType returns the DestinationType field value
func (o *RelationshipAssociationRequest) GetDestinationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociationRequest) GetDestinationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *RelationshipAssociationRequest) SetDestinationType(v string) {
	o.DestinationType = v
}

// GetSourceId returns the SourceId field value
func (o *RelationshipAssociationRequest) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociationRequest) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *RelationshipAssociationRequest) SetSourceId(v string) {
	o.SourceId = v
}

// GetDestinationId returns the DestinationId field value
func (o *RelationshipAssociationRequest) GetDestinationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociationRequest) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationId, true
}

// SetDestinationId sets field value
func (o *RelationshipAssociationRequest) SetDestinationId(v string) {
	o.DestinationId = v
}

// GetRelationship returns the Relationship field value
func (o *RelationshipAssociationRequest) GetRelationship() BulkWritableCableRequestStatus {
	if o == nil {
		var ret BulkWritableCableRequestStatus
		return ret
	}

	return o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociationRequest) GetRelationshipOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationship, true
}

// SetRelationship sets field value
func (o *RelationshipAssociationRequest) SetRelationship(v BulkWritableCableRequestStatus) {
	o.Relationship = v
}

func (o RelationshipAssociationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipAssociationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_type"] = o.SourceType
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["source_id"] = o.SourceId
	toSerialize["destination_id"] = o.DestinationId
	toSerialize["relationship"] = o.Relationship

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RelationshipAssociationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_type",
		"destination_type",
		"source_id",
		"destination_id",
		"relationship",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelationshipAssociationRequest := _RelationshipAssociationRequest{}

	err = json.Unmarshal(data, &varRelationshipAssociationRequest)

	if err != nil {
		return err
	}

	*o = RelationshipAssociationRequest(varRelationshipAssociationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "source_type")
		delete(additionalProperties, "destination_type")
		delete(additionalProperties, "source_id")
		delete(additionalProperties, "destination_id")
		delete(additionalProperties, "relationship")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRelationshipAssociationRequest struct {
	value *RelationshipAssociationRequest
	isSet bool
}

func (v NullableRelationshipAssociationRequest) Get() *RelationshipAssociationRequest {
	return v.value
}

func (v *NullableRelationshipAssociationRequest) Set(val *RelationshipAssociationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipAssociationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipAssociationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipAssociationRequest(val *RelationshipAssociationRequest) *NullableRelationshipAssociationRequest {
	return &NullableRelationshipAssociationRequest{value: val, isSet: true}
}

func (v NullableRelationshipAssociationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipAssociationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


