/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// BulkWritableSoftwareImageFileRequestHashingAlgorithm - Hashing algorithm for image file checksum
type BulkWritableSoftwareImageFileRequestHashingAlgorithm struct {
	BlankEnum *BlankEnum
	HashingAlgorithmEnum *HashingAlgorithmEnum
}

// BlankEnumAsBulkWritableSoftwareImageFileRequestHashingAlgorithm is a convenience function that returns BlankEnum wrapped in BulkWritableSoftwareImageFileRequestHashingAlgorithm
func BlankEnumAsBulkWritableSoftwareImageFileRequestHashingAlgorithm(v *BlankEnum) BulkWritableSoftwareImageFileRequestHashingAlgorithm {
	return BulkWritableSoftwareImageFileRequestHashingAlgorithm{
		BlankEnum: v,
	}
}

// HashingAlgorithmEnumAsBulkWritableSoftwareImageFileRequestHashingAlgorithm is a convenience function that returns HashingAlgorithmEnum wrapped in BulkWritableSoftwareImageFileRequestHashingAlgorithm
func HashingAlgorithmEnumAsBulkWritableSoftwareImageFileRequestHashingAlgorithm(v *HashingAlgorithmEnum) BulkWritableSoftwareImageFileRequestHashingAlgorithm {
	return BulkWritableSoftwareImageFileRequestHashingAlgorithm{
		HashingAlgorithmEnum: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BulkWritableSoftwareImageFileRequestHashingAlgorithm) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BlankEnum
	err = newStrictDecoder(data).Decode(&dst.BlankEnum)
	if err == nil {
		jsonBlankEnum, _ := json.Marshal(dst.BlankEnum)
		if string(jsonBlankEnum) == "{}" { // empty struct
			dst.BlankEnum = nil
		} else {
			if err = validator.Validate(dst.BlankEnum); err != nil {
				dst.BlankEnum = nil
			} else {
				match++
			}
		}
	} else {
		dst.BlankEnum = nil
	}

	// try to unmarshal data into HashingAlgorithmEnum
	err = newStrictDecoder(data).Decode(&dst.HashingAlgorithmEnum)
	if err == nil {
		jsonHashingAlgorithmEnum, _ := json.Marshal(dst.HashingAlgorithmEnum)
		if string(jsonHashingAlgorithmEnum) == "{}" { // empty struct
			dst.HashingAlgorithmEnum = nil
		} else {
			if err = validator.Validate(dst.HashingAlgorithmEnum); err != nil {
				dst.HashingAlgorithmEnum = nil
			} else {
				match++
			}
		}
	} else {
		dst.HashingAlgorithmEnum = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BlankEnum = nil
		dst.HashingAlgorithmEnum = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BulkWritableSoftwareImageFileRequestHashingAlgorithm)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BulkWritableSoftwareImageFileRequestHashingAlgorithm)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BulkWritableSoftwareImageFileRequestHashingAlgorithm) MarshalJSON() ([]byte, error) {
	if src.BlankEnum != nil {
		return json.Marshal(&src.BlankEnum)
	}

	if src.HashingAlgorithmEnum != nil {
		return json.Marshal(&src.HashingAlgorithmEnum)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BulkWritableSoftwareImageFileRequestHashingAlgorithm) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BlankEnum != nil {
		return obj.BlankEnum
	}

	if obj.HashingAlgorithmEnum != nil {
		return obj.HashingAlgorithmEnum
	}

	// all schemas are nil
	return nil
}

type NullableBulkWritableSoftwareImageFileRequestHashingAlgorithm struct {
	value *BulkWritableSoftwareImageFileRequestHashingAlgorithm
	isSet bool
}

func (v NullableBulkWritableSoftwareImageFileRequestHashingAlgorithm) Get() *BulkWritableSoftwareImageFileRequestHashingAlgorithm {
	return v.value
}

func (v *NullableBulkWritableSoftwareImageFileRequestHashingAlgorithm) Set(val *BulkWritableSoftwareImageFileRequestHashingAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkWritableSoftwareImageFileRequestHashingAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkWritableSoftwareImageFileRequestHashingAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkWritableSoftwareImageFileRequestHashingAlgorithm(val *BulkWritableSoftwareImageFileRequestHashingAlgorithm) *NullableBulkWritableSoftwareImageFileRequestHashingAlgorithm {
	return &NullableBulkWritableSoftwareImageFileRequestHashingAlgorithm{value: val, isSet: true}
}

func (v NullableBulkWritableSoftwareImageFileRequestHashingAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkWritableSoftwareImageFileRequestHashingAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


