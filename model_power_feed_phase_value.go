/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// PowerFeedPhaseValue the model 'PowerFeedPhaseValue'
type PowerFeedPhaseValue string

// List of PowerFeed_phase_value
const (
	POWERFEEDPHASEVALUE_SINGLE_PHASE PowerFeedPhaseValue = "single-phase"
	POWERFEEDPHASEVALUE_THREE_PHASE PowerFeedPhaseValue = "three-phase"
)

// All allowed values of PowerFeedPhaseValue enum
var AllowedPowerFeedPhaseValueEnumValues = []PowerFeedPhaseValue{
	"single-phase",
	"three-phase",
}

func (v *PowerFeedPhaseValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerFeedPhaseValue(value)
	for _, existing := range AllowedPowerFeedPhaseValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerFeedPhaseValue", value)
}

// NewPowerFeedPhaseValueFromValue returns a pointer to a valid PowerFeedPhaseValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerFeedPhaseValueFromValue(v string) (*PowerFeedPhaseValue, error) {
	ev := PowerFeedPhaseValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerFeedPhaseValue: valid values are %v", v, AllowedPowerFeedPhaseValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerFeedPhaseValue) IsValid() bool {
	for _, existing := range AllowedPowerFeedPhaseValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerFeed_phase_value value
func (v PowerFeedPhaseValue) Ptr() *PowerFeedPhaseValue {
	return &v
}

type NullablePowerFeedPhaseValue struct {
	value *PowerFeedPhaseValue
	isSet bool
}

func (v NullablePowerFeedPhaseValue) Get() *PowerFeedPhaseValue {
	return v.value
}

func (v *NullablePowerFeedPhaseValue) Set(val *PowerFeedPhaseValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerFeedPhaseValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerFeedPhaseValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerFeedPhaseValue(val *PowerFeedPhaseValue) *NullablePowerFeedPhaseValue {
	return &NullablePowerFeedPhaseValue{value: val, isSet: true}
}

func (v NullablePowerFeedPhaseValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerFeedPhaseValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

