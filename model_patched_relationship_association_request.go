/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
)

// checks if the PatchedRelationshipAssociationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedRelationshipAssociationRequest{}

// PatchedRelationshipAssociationRequest Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type PatchedRelationshipAssociationRequest struct {
	SourceType *string `json:"source_type,omitempty"`
	DestinationType *string `json:"destination_type,omitempty"`
	SourceId *string `json:"source_id,omitempty"`
	DestinationId *string `json:"destination_id,omitempty"`
	Relationship *BulkWritableCableRequestStatus `json:"relationship,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedRelationshipAssociationRequest PatchedRelationshipAssociationRequest

// NewPatchedRelationshipAssociationRequest instantiates a new PatchedRelationshipAssociationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedRelationshipAssociationRequest() *PatchedRelationshipAssociationRequest {
	this := PatchedRelationshipAssociationRequest{}
	return &this
}

// NewPatchedRelationshipAssociationRequestWithDefaults instantiates a new PatchedRelationshipAssociationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedRelationshipAssociationRequestWithDefaults() *PatchedRelationshipAssociationRequest {
	this := PatchedRelationshipAssociationRequest{}
	return &this
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *PatchedRelationshipAssociationRequest) GetSourceType() string {
	if o == nil || IsNil(o.SourceType) {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationshipAssociationRequest) GetSourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *PatchedRelationshipAssociationRequest) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *PatchedRelationshipAssociationRequest) SetSourceType(v string) {
	o.SourceType = &v
}

// GetDestinationType returns the DestinationType field value if set, zero value otherwise.
func (o *PatchedRelationshipAssociationRequest) GetDestinationType() string {
	if o == nil || IsNil(o.DestinationType) {
		var ret string
		return ret
	}
	return *o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationshipAssociationRequest) GetDestinationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationType) {
		return nil, false
	}
	return o.DestinationType, true
}

// HasDestinationType returns a boolean if a field has been set.
func (o *PatchedRelationshipAssociationRequest) HasDestinationType() bool {
	if o != nil && !IsNil(o.DestinationType) {
		return true
	}

	return false
}

// SetDestinationType gets a reference to the given string and assigns it to the DestinationType field.
func (o *PatchedRelationshipAssociationRequest) SetDestinationType(v string) {
	o.DestinationType = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *PatchedRelationshipAssociationRequest) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationshipAssociationRequest) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *PatchedRelationshipAssociationRequest) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *PatchedRelationshipAssociationRequest) SetSourceId(v string) {
	o.SourceId = &v
}

// GetDestinationId returns the DestinationId field value if set, zero value otherwise.
func (o *PatchedRelationshipAssociationRequest) GetDestinationId() string {
	if o == nil || IsNil(o.DestinationId) {
		var ret string
		return ret
	}
	return *o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationshipAssociationRequest) GetDestinationIdOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationId) {
		return nil, false
	}
	return o.DestinationId, true
}

// HasDestinationId returns a boolean if a field has been set.
func (o *PatchedRelationshipAssociationRequest) HasDestinationId() bool {
	if o != nil && !IsNil(o.DestinationId) {
		return true
	}

	return false
}

// SetDestinationId gets a reference to the given string and assigns it to the DestinationId field.
func (o *PatchedRelationshipAssociationRequest) SetDestinationId(v string) {
	o.DestinationId = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *PatchedRelationshipAssociationRequest) GetRelationship() BulkWritableCableRequestStatus {
	if o == nil || IsNil(o.Relationship) {
		var ret BulkWritableCableRequestStatus
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationshipAssociationRequest) GetRelationshipOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil || IsNil(o.Relationship) {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *PatchedRelationshipAssociationRequest) HasRelationship() bool {
	if o != nil && !IsNil(o.Relationship) {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given BulkWritableCableRequestStatus and assigns it to the Relationship field.
func (o *PatchedRelationshipAssociationRequest) SetRelationship(v BulkWritableCableRequestStatus) {
	o.Relationship = &v
}

func (o PatchedRelationshipAssociationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedRelationshipAssociationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceType) {
		toSerialize["source_type"] = o.SourceType
	}
	if !IsNil(o.DestinationType) {
		toSerialize["destination_type"] = o.DestinationType
	}
	if !IsNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	if !IsNil(o.DestinationId) {
		toSerialize["destination_id"] = o.DestinationId
	}
	if !IsNil(o.Relationship) {
		toSerialize["relationship"] = o.Relationship
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedRelationshipAssociationRequest) UnmarshalJSON(data []byte) (err error) {
	varPatchedRelationshipAssociationRequest := _PatchedRelationshipAssociationRequest{}

	err = json.Unmarshal(data, &varPatchedRelationshipAssociationRequest)

	if err != nil {
		return err
	}

	*o = PatchedRelationshipAssociationRequest(varPatchedRelationshipAssociationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "source_type")
		delete(additionalProperties, "destination_type")
		delete(additionalProperties, "source_id")
		delete(additionalProperties, "destination_id")
		delete(additionalProperties, "relationship")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedRelationshipAssociationRequest struct {
	value *PatchedRelationshipAssociationRequest
	isSet bool
}

func (v NullablePatchedRelationshipAssociationRequest) Get() *PatchedRelationshipAssociationRequest {
	return v.value
}

func (v *NullablePatchedRelationshipAssociationRequest) Set(val *PatchedRelationshipAssociationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedRelationshipAssociationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedRelationshipAssociationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedRelationshipAssociationRequest(val *PatchedRelationshipAssociationRequest) *NullablePatchedRelationshipAssociationRequest {
	return &NullablePatchedRelationshipAssociationRequest{value: val, isSet: true}
}

func (v NullablePatchedRelationshipAssociationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedRelationshipAssociationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


