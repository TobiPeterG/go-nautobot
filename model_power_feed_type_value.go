/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// PowerFeedTypeValue the model 'PowerFeedTypeValue'
type PowerFeedTypeValue string

// List of PowerFeed_type_value
const (
	POWERFEEDTYPEVALUE_PRIMARY PowerFeedTypeValue = "primary"
	POWERFEEDTYPEVALUE_REDUNDANT PowerFeedTypeValue = "redundant"
)

// All allowed values of PowerFeedTypeValue enum
var AllowedPowerFeedTypeValueEnumValues = []PowerFeedTypeValue{
	"primary",
	"redundant",
}

func (v *PowerFeedTypeValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerFeedTypeValue(value)
	for _, existing := range AllowedPowerFeedTypeValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerFeedTypeValue", value)
}

// NewPowerFeedTypeValueFromValue returns a pointer to a valid PowerFeedTypeValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerFeedTypeValueFromValue(v string) (*PowerFeedTypeValue, error) {
	ev := PowerFeedTypeValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerFeedTypeValue: valid values are %v", v, AllowedPowerFeedTypeValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerFeedTypeValue) IsValid() bool {
	for _, existing := range AllowedPowerFeedTypeValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerFeed_type_value value
func (v PowerFeedTypeValue) Ptr() *PowerFeedTypeValue {
	return &v
}

type NullablePowerFeedTypeValue struct {
	value *PowerFeedTypeValue
	isSet bool
}

func (v NullablePowerFeedTypeValue) Get() *PowerFeedTypeValue {
	return v.value
}

func (v *NullablePowerFeedTypeValue) Set(val *PowerFeedTypeValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerFeedTypeValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerFeedTypeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerFeedTypeValue(val *PowerFeedTypeValue) *NullablePowerFeedTypeValue {
	return &NullablePowerFeedTypeValue{value: val, isSet: true}
}

func (v NullablePowerFeedTypeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerFeedTypeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

