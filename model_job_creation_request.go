/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the JobCreationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobCreationRequest{}

// JobCreationRequest Nested serializer specifically for use with `JobInputSerializer.schedule`.  We don't use `WritableNestedSerializer` here because this is not used to look up an existing `ScheduledJob`, but instead used to specify parameters for creating one.
type JobCreationRequest struct {
	Name *string `json:"name,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty"`
	Interval JobExecutionTypeIntervalChoices `json:"interval"`
	// Cronjob syntax string for custom scheduling
	Crontab *string `json:"crontab,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobCreationRequest JobCreationRequest

// NewJobCreationRequest instantiates a new JobCreationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobCreationRequest(interval JobExecutionTypeIntervalChoices) *JobCreationRequest {
	this := JobCreationRequest{}
	this.Interval = interval
	return &this
}

// NewJobCreationRequestWithDefaults instantiates a new JobCreationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobCreationRequestWithDefaults() *JobCreationRequest {
	this := JobCreationRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JobCreationRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobCreationRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JobCreationRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JobCreationRequest) SetName(v string) {
	o.Name = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *JobCreationRequest) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobCreationRequest) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *JobCreationRequest) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *JobCreationRequest) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetInterval returns the Interval field value
func (o *JobCreationRequest) GetInterval() JobExecutionTypeIntervalChoices {
	if o == nil {
		var ret JobExecutionTypeIntervalChoices
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *JobCreationRequest) GetIntervalOk() (*JobExecutionTypeIntervalChoices, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *JobCreationRequest) SetInterval(v JobExecutionTypeIntervalChoices) {
	o.Interval = v
}

// GetCrontab returns the Crontab field value if set, zero value otherwise.
func (o *JobCreationRequest) GetCrontab() string {
	if o == nil || IsNil(o.Crontab) {
		var ret string
		return ret
	}
	return *o.Crontab
}

// GetCrontabOk returns a tuple with the Crontab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobCreationRequest) GetCrontabOk() (*string, bool) {
	if o == nil || IsNil(o.Crontab) {
		return nil, false
	}
	return o.Crontab, true
}

// HasCrontab returns a boolean if a field has been set.
func (o *JobCreationRequest) HasCrontab() bool {
	if o != nil && !IsNil(o.Crontab) {
		return true
	}

	return false
}

// SetCrontab gets a reference to the given string and assigns it to the Crontab field.
func (o *JobCreationRequest) SetCrontab(v string) {
	o.Crontab = &v
}

func (o JobCreationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobCreationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	toSerialize["interval"] = o.Interval
	if !IsNil(o.Crontab) {
		toSerialize["crontab"] = o.Crontab
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobCreationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interval",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobCreationRequest := _JobCreationRequest{}

	err = json.Unmarshal(data, &varJobCreationRequest)

	if err != nil {
		return err
	}

	*o = JobCreationRequest(varJobCreationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "start_time")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "crontab")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobCreationRequest struct {
	value *JobCreationRequest
	isSet bool
}

func (v NullableJobCreationRequest) Get() *JobCreationRequest {
	return v.value
}

func (v *NullableJobCreationRequest) Set(val *JobCreationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJobCreationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJobCreationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobCreationRequest(val *JobCreationRequest) *NullableJobCreationRequest {
	return &NullableJobCreationRequest{value: val, isSet: true}
}

func (v NullableJobCreationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobCreationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


