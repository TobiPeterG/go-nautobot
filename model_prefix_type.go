/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// PrefixType the model 'PrefixType'
type PrefixType string

// List of Prefix_type
const (
	PREFIXTYPE_CONTAINER PrefixType = "container"
	PREFIXTYPE_NETWORK PrefixType = "network"
	PREFIXTYPE_POOL PrefixType = "pool"
)

// All allowed values of PrefixType enum
var AllowedPrefixTypeEnumValues = []PrefixType{
	"container",
	"network",
	"pool",
}

func (v *PrefixType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrefixType(value)
	for _, existing := range AllowedPrefixTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrefixType", value)
}

// NewPrefixTypeFromValue returns a pointer to a valid PrefixType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrefixTypeFromValue(v string) (*PrefixType, error) {
	ev := PrefixType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrefixType: valid values are %v", v, AllowedPrefixTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrefixType) IsValid() bool {
	for _, existing := range AllowedPrefixTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Prefix_type value
func (v PrefixType) Ptr() *PrefixType {
	return &v
}

type NullablePrefixType struct {
	value *PrefixType
	isSet bool
}

func (v NullablePrefixType) Get() *PrefixType {
	return v.value
}

func (v *NullablePrefixType) Set(val *PrefixType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixType(val *PrefixType) *NullablePrefixType {
	return &NullablePrefixType{value: val, isSet: true}
}

func (v NullablePrefixType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

