/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// PrefixTypeChoices the model 'PrefixTypeChoices'
type PrefixTypeChoices string

// List of PrefixTypeChoices
const (
	PREFIXTYPECHOICES_CONTAINER PrefixTypeChoices = "container"
	PREFIXTYPECHOICES_NETWORK PrefixTypeChoices = "network"
	PREFIXTYPECHOICES_POOL PrefixTypeChoices = "pool"
)

// All allowed values of PrefixTypeChoices enum
var AllowedPrefixTypeChoicesEnumValues = []PrefixTypeChoices{
	"container",
	"network",
	"pool",
}

func (v *PrefixTypeChoices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrefixTypeChoices(value)
	for _, existing := range AllowedPrefixTypeChoicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrefixTypeChoices", value)
}

// NewPrefixTypeChoicesFromValue returns a pointer to a valid PrefixTypeChoices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrefixTypeChoicesFromValue(v string) (*PrefixTypeChoices, error) {
	ev := PrefixTypeChoices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrefixTypeChoices: valid values are %v", v, AllowedPrefixTypeChoicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrefixTypeChoices) IsValid() bool {
	for _, existing := range AllowedPrefixTypeChoicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrefixTypeChoices value
func (v PrefixTypeChoices) Ptr() *PrefixTypeChoices {
	return &v
}

type NullablePrefixTypeChoices struct {
	value *PrefixTypeChoices
	isSet bool
}

func (v NullablePrefixTypeChoices) Get() *PrefixTypeChoices {
	return v.value
}

func (v *NullablePrefixTypeChoices) Set(val *PrefixTypeChoices) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixTypeChoices) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixTypeChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixTypeChoices(val *PrefixTypeChoices) *NullablePrefixTypeChoices {
	return &NullablePrefixTypeChoices{value: val, isSet: true}
}

func (v NullablePrefixTypeChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixTypeChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

