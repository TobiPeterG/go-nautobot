/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the FileProxy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileProxy{}

// FileProxy This base serializer implements common fields and logic for all ModelSerializers.  Namely, it:  - defines the `display` field which exposes a human friendly value for the given object. - ensures that `id` field is always present on the serializer as well. - ensures that `created` and `last_updated` fields are always present if applicable to this model and serializer. - ensures that `object_type` field is always present on the serializer which represents the content-type of this   serializer's associated model (e.g. \"dcim.device\"). This is required as the OpenAPI schema, using the   PolymorphicProxySerializer class defined below, relies upon this field as a way to identify to the client   which of several possible serializers are in use for a given attribute. - supports `?depth` query parameter. It is passed in as `nested_depth` to the `build_nested_field()` function   to enable the dynamic generation of nested serializers.
type FileProxy struct {
	Id string `json:"id"`
	ObjectType string `json:"object_type" validate:"regexp=^[a-z][a-z0-9_]+\\\\.[a-z][a-z0-9_]+$"`
	// Human friendly display value
	Display string `json:"display"`
	Url string `json:"url"`
	NaturalSlug string `json:"natural_slug"`
	Name string `json:"name"`
	UploadedAt time.Time `json:"uploaded_at"`
	JobResult NullableBulkWritableCircuitRequestTenant `json:"job_result,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FileProxy FileProxy

// NewFileProxy instantiates a new FileProxy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileProxy(id string, objectType string, display string, url string, naturalSlug string, name string, uploadedAt time.Time) *FileProxy {
	this := FileProxy{}
	this.Id = id
	this.ObjectType = objectType
	this.Display = display
	this.Url = url
	this.NaturalSlug = naturalSlug
	this.Name = name
	this.UploadedAt = uploadedAt
	return &this
}

// NewFileProxyWithDefaults instantiates a new FileProxy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileProxyWithDefaults() *FileProxy {
	this := FileProxy{}
	return &this
}

// GetId returns the Id field value
func (o *FileProxy) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FileProxy) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FileProxy) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *FileProxy) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *FileProxy) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *FileProxy) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDisplay returns the Display field value
func (o *FileProxy) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *FileProxy) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *FileProxy) SetDisplay(v string) {
	o.Display = v
}

// GetUrl returns the Url field value
func (o *FileProxy) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FileProxy) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FileProxy) SetUrl(v string) {
	o.Url = v
}

// GetNaturalSlug returns the NaturalSlug field value
func (o *FileProxy) GetNaturalSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NaturalSlug
}

// GetNaturalSlugOk returns a tuple with the NaturalSlug field value
// and a boolean to check if the value has been set.
func (o *FileProxy) GetNaturalSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NaturalSlug, true
}

// SetNaturalSlug sets field value
func (o *FileProxy) SetNaturalSlug(v string) {
	o.NaturalSlug = v
}

// GetName returns the Name field value
func (o *FileProxy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FileProxy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FileProxy) SetName(v string) {
	o.Name = v
}

// GetUploadedAt returns the UploadedAt field value
func (o *FileProxy) GetUploadedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UploadedAt
}

// GetUploadedAtOk returns a tuple with the UploadedAt field value
// and a boolean to check if the value has been set.
func (o *FileProxy) GetUploadedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadedAt, true
}

// SetUploadedAt sets field value
func (o *FileProxy) SetUploadedAt(v time.Time) {
	o.UploadedAt = v
}

// GetJobResult returns the JobResult field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileProxy) GetJobResult() BulkWritableCircuitRequestTenant {
	if o == nil || IsNil(o.JobResult.Get()) {
		var ret BulkWritableCircuitRequestTenant
		return ret
	}
	return *o.JobResult.Get()
}

// GetJobResultOk returns a tuple with the JobResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileProxy) GetJobResultOk() (*BulkWritableCircuitRequestTenant, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobResult.Get(), o.JobResult.IsSet()
}

// HasJobResult returns a boolean if a field has been set.
func (o *FileProxy) HasJobResult() bool {
	if o != nil && o.JobResult.IsSet() {
		return true
	}

	return false
}

// SetJobResult gets a reference to the given NullableBulkWritableCircuitRequestTenant and assigns it to the JobResult field.
func (o *FileProxy) SetJobResult(v BulkWritableCircuitRequestTenant) {
	o.JobResult.Set(&v)
}
// SetJobResultNil sets the value for JobResult to be an explicit nil
func (o *FileProxy) SetJobResultNil() {
	o.JobResult.Set(nil)
}

// UnsetJobResult ensures that no value is present for JobResult, not even an explicit nil
func (o *FileProxy) UnsetJobResult() {
	o.JobResult.Unset()
}

func (o FileProxy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileProxy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object_type"] = o.ObjectType
	toSerialize["display"] = o.Display
	toSerialize["url"] = o.Url
	toSerialize["natural_slug"] = o.NaturalSlug
	toSerialize["name"] = o.Name
	toSerialize["uploaded_at"] = o.UploadedAt
	if o.JobResult.IsSet() {
		toSerialize["job_result"] = o.JobResult.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FileProxy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object_type",
		"display",
		"url",
		"natural_slug",
		"name",
		"uploaded_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileProxy := _FileProxy{}

	err = json.Unmarshal(data, &varFileProxy)

	if err != nil {
		return err
	}

	*o = FileProxy(varFileProxy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "display")
		delete(additionalProperties, "url")
		delete(additionalProperties, "natural_slug")
		delete(additionalProperties, "name")
		delete(additionalProperties, "uploaded_at")
		delete(additionalProperties, "job_result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFileProxy struct {
	value *FileProxy
	isSet bool
}

func (v NullableFileProxy) Get() *FileProxy {
	return v.value
}

func (v *NullableFileProxy) Set(val *FileProxy) {
	v.value = val
	v.isSet = true
}

func (v NullableFileProxy) IsSet() bool {
	return v.isSet
}

func (v *NullableFileProxy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileProxy(val *FileProxy) *NullableFileProxy {
	return &NullableFileProxy{value: val, isSet: true}
}

func (v NullableFileProxy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileProxy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


