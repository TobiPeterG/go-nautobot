/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// IPAddressTypeChoices the model 'IPAddressTypeChoices'
type IPAddressTypeChoices string

// List of IPAddressTypeChoices
const (
	IPADDRESSTYPECHOICES_DHCP IPAddressTypeChoices = "dhcp"
	IPADDRESSTYPECHOICES_HOST IPAddressTypeChoices = "host"
	IPADDRESSTYPECHOICES_SLAAC IPAddressTypeChoices = "slaac"
)

// All allowed values of IPAddressTypeChoices enum
var AllowedIPAddressTypeChoicesEnumValues = []IPAddressTypeChoices{
	"dhcp",
	"host",
	"slaac",
}

func (v *IPAddressTypeChoices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IPAddressTypeChoices(value)
	for _, existing := range AllowedIPAddressTypeChoicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IPAddressTypeChoices", value)
}

// NewIPAddressTypeChoicesFromValue returns a pointer to a valid IPAddressTypeChoices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIPAddressTypeChoicesFromValue(v string) (*IPAddressTypeChoices, error) {
	ev := IPAddressTypeChoices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IPAddressTypeChoices: valid values are %v", v, AllowedIPAddressTypeChoicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IPAddressTypeChoices) IsValid() bool {
	for _, existing := range AllowedIPAddressTypeChoicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IPAddressTypeChoices value
func (v IPAddressTypeChoices) Ptr() *IPAddressTypeChoices {
	return &v
}

type NullableIPAddressTypeChoices struct {
	value *IPAddressTypeChoices
	isSet bool
}

func (v NullableIPAddressTypeChoices) Get() *IPAddressTypeChoices {
	return v.value
}

func (v *NullableIPAddressTypeChoices) Set(val *IPAddressTypeChoices) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAddressTypeChoices) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAddressTypeChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAddressTypeChoices(val *IPAddressTypeChoices) *NullableIPAddressTypeChoices {
	return &NullableIPAddressTypeChoices{value: val, isSet: true}
}

func (v NullableIPAddressTypeChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAddressTypeChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

