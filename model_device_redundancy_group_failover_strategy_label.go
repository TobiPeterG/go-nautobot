/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// DeviceRedundancyGroupFailoverStrategyLabel the model 'DeviceRedundancyGroupFailoverStrategyLabel'
type DeviceRedundancyGroupFailoverStrategyLabel string

// List of DeviceRedundancyGroup_failover_strategy_label
const (
	DEVICEREDUNDANCYGROUPFAILOVERSTRATEGYLABEL_UNSPECIFIED DeviceRedundancyGroupFailoverStrategyLabel = "(unspecified)"
	DEVICEREDUNDANCYGROUPFAILOVERSTRATEGYLABEL_ACTIVE_ACTIVE DeviceRedundancyGroupFailoverStrategyLabel = "Active/Active"
	DEVICEREDUNDANCYGROUPFAILOVERSTRATEGYLABEL_ACTIVE_PASSIVE DeviceRedundancyGroupFailoverStrategyLabel = "Active/Passive"
)

// All allowed values of DeviceRedundancyGroupFailoverStrategyLabel enum
var AllowedDeviceRedundancyGroupFailoverStrategyLabelEnumValues = []DeviceRedundancyGroupFailoverStrategyLabel{
	"(unspecified)",
	"Active/Active",
	"Active/Passive",
}

func (v *DeviceRedundancyGroupFailoverStrategyLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceRedundancyGroupFailoverStrategyLabel(value)
	for _, existing := range AllowedDeviceRedundancyGroupFailoverStrategyLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceRedundancyGroupFailoverStrategyLabel", value)
}

// NewDeviceRedundancyGroupFailoverStrategyLabelFromValue returns a pointer to a valid DeviceRedundancyGroupFailoverStrategyLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceRedundancyGroupFailoverStrategyLabelFromValue(v string) (*DeviceRedundancyGroupFailoverStrategyLabel, error) {
	ev := DeviceRedundancyGroupFailoverStrategyLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceRedundancyGroupFailoverStrategyLabel: valid values are %v", v, AllowedDeviceRedundancyGroupFailoverStrategyLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceRedundancyGroupFailoverStrategyLabel) IsValid() bool {
	for _, existing := range AllowedDeviceRedundancyGroupFailoverStrategyLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceRedundancyGroup_failover_strategy_label value
func (v DeviceRedundancyGroupFailoverStrategyLabel) Ptr() *DeviceRedundancyGroupFailoverStrategyLabel {
	return &v
}

type NullableDeviceRedundancyGroupFailoverStrategyLabel struct {
	value *DeviceRedundancyGroupFailoverStrategyLabel
	isSet bool
}

func (v NullableDeviceRedundancyGroupFailoverStrategyLabel) Get() *DeviceRedundancyGroupFailoverStrategyLabel {
	return v.value
}

func (v *NullableDeviceRedundancyGroupFailoverStrategyLabel) Set(val *DeviceRedundancyGroupFailoverStrategyLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceRedundancyGroupFailoverStrategyLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceRedundancyGroupFailoverStrategyLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceRedundancyGroupFailoverStrategyLabel(val *DeviceRedundancyGroupFailoverStrategyLabel) *NullableDeviceRedundancyGroupFailoverStrategyLabel {
	return &NullableDeviceRedundancyGroupFailoverStrategyLabel{value: val, isSet: true}
}

func (v NullableDeviceRedundancyGroupFailoverStrategyLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceRedundancyGroupFailoverStrategyLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

