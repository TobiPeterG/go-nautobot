/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"time"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"os"
)


// ExtrasAPIService ExtrasAPI service
type ExtrasAPIService service

type ApiExtrasComputedFieldsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasComputedFieldsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasComputedFieldsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasComputedFieldsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasComputedFieldsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsBulkDestroyExecute(r)
}

/*
ExtrasComputedFieldsBulkDestroy Method for ExtrasComputedFieldsBulkDestroy

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsBulkDestroy(ctx context.Context) ApiExtrasComputedFieldsBulkDestroyRequest {
	return ApiExtrasComputedFieldsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasComputedFieldsBulkDestroyExecute(r ApiExtrasComputedFieldsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableComputedFieldRequest *[]PatchedBulkWritableComputedFieldRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasComputedFieldsBulkPartialUpdateRequest) PatchedBulkWritableComputedFieldRequest(patchedBulkWritableComputedFieldRequest []PatchedBulkWritableComputedFieldRequest) ApiExtrasComputedFieldsBulkPartialUpdateRequest {
	r.patchedBulkWritableComputedFieldRequest = &patchedBulkWritableComputedFieldRequest
	return r
}

func (r ApiExtrasComputedFieldsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasComputedFieldsBulkPartialUpdateRequest) Execute() ([]ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsBulkPartialUpdateExecute(r)
}

/*
ExtrasComputedFieldsBulkPartialUpdate Method for ExtrasComputedFieldsBulkPartialUpdate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsBulkPartialUpdate(ctx context.Context) ApiExtrasComputedFieldsBulkPartialUpdateRequest {
	return ApiExtrasComputedFieldsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ComputedField
func (a *ExtrasAPIService) ExtrasComputedFieldsBulkPartialUpdateExecute(r ApiExtrasComputedFieldsBulkPartialUpdateRequest) ([]ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableComputedFieldRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableComputedFieldRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableComputedFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableComputedFieldRequest *[]BulkWritableComputedFieldRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasComputedFieldsBulkUpdateRequest) BulkWritableComputedFieldRequest(bulkWritableComputedFieldRequest []BulkWritableComputedFieldRequest) ApiExtrasComputedFieldsBulkUpdateRequest {
	r.bulkWritableComputedFieldRequest = &bulkWritableComputedFieldRequest
	return r
}

func (r ApiExtrasComputedFieldsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasComputedFieldsBulkUpdateRequest) Execute() ([]ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsBulkUpdateExecute(r)
}

/*
ExtrasComputedFieldsBulkUpdate Method for ExtrasComputedFieldsBulkUpdate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsBulkUpdate(ctx context.Context) ApiExtrasComputedFieldsBulkUpdateRequest {
	return ApiExtrasComputedFieldsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ComputedField
func (a *ExtrasAPIService) ExtrasComputedFieldsBulkUpdateExecute(r ApiExtrasComputedFieldsBulkUpdateRequest) ([]ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableComputedFieldRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableComputedFieldRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableComputedFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	computedFieldRequest *ComputedFieldRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasComputedFieldsCreateRequest) ComputedFieldRequest(computedFieldRequest ComputedFieldRequest) ApiExtrasComputedFieldsCreateRequest {
	r.computedFieldRequest = &computedFieldRequest
	return r
}

func (r ApiExtrasComputedFieldsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasComputedFieldsCreateRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsCreateExecute(r)
}

/*
ExtrasComputedFieldsCreate Method for ExtrasComputedFieldsCreate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsCreate(ctx context.Context) ApiExtrasComputedFieldsCreateRequest {
	return ApiExtrasComputedFieldsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasAPIService) ExtrasComputedFieldsCreateExecute(r ApiExtrasComputedFieldsCreateRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.computedFieldRequest == nil {
		return localVarReturnValue, nil, reportError("computedFieldRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.computedFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasComputedFieldsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasComputedFieldsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsDestroyExecute(r)
}

/*
ExtrasComputedFieldsDestroy Method for ExtrasComputedFieldsDestroy

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsDestroy(ctx context.Context, id string) ApiExtrasComputedFieldsDestroyRequest {
	return ApiExtrasComputedFieldsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasComputedFieldsDestroyExecute(r ApiExtrasComputedFieldsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentType *string
	contentTypeN *string
	dynamicGroups *[]string
	dynamicGroupsN *string
	fallbackValue *[]string
	fallbackValueIc *[]string
	fallbackValueIe *[]string
	fallbackValueIew *[]string
	fallbackValueIre *[]string
	fallbackValueIsw *[]string
	fallbackValueN *[]string
	fallbackValueNic *[]string
	fallbackValueNie *[]string
	fallbackValueNiew *[]string
	fallbackValueNire *[]string
	fallbackValueNisw *[]string
	fallbackValueNre *[]string
	fallbackValueRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	grouping *[]string
	groupingIc *[]string
	groupingIe *[]string
	groupingIew *[]string
	groupingIre *[]string
	groupingIsw *[]string
	groupingN *[]string
	groupingNic *[]string
	groupingNie *[]string
	groupingNiew *[]string
	groupingNire *[]string
	groupingNisw *[]string
	groupingNre *[]string
	groupingRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	key *[]string
	keyIc *[]string
	keyIe *[]string
	keyIew *[]string
	keyIre *[]string
	keyIsw *[]string
	keyN *[]string
	keyNic *[]string
	keyNie *[]string
	keyNiew *[]string
	keyNire *[]string
	keyNisw *[]string
	keyNre *[]string
	keyRe *[]string
	limit *int32
	offset *int32
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	template *[]string
	templateIc *[]string
	templateIe *[]string
	templateIew *[]string
	templateIre *[]string
	templateIsw *[]string
	templateN *[]string
	templateNic *[]string
	templateNie *[]string
	templateNiew *[]string
	templateNire *[]string
	templateNisw *[]string
	templateNre *[]string
	templateRe *[]string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
	depth *int32
}

func (r ApiExtrasComputedFieldsListRequest) Contacts(contacts []string) ApiExtrasComputedFieldsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasComputedFieldsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasComputedFieldsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasComputedFieldsListRequest) ContactsN(contactsN string) ApiExtrasComputedFieldsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) ContentType(contentType string) ApiExtrasComputedFieldsListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasComputedFieldsListRequest) ContentTypeN(contentTypeN string) ApiExtrasComputedFieldsListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasComputedFieldsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasComputedFieldsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasComputedFieldsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValue(fallbackValue []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValue = &fallbackValue
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIc(fallbackValueIc []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIc = &fallbackValueIc
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIe(fallbackValueIe []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIe = &fallbackValueIe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIew(fallbackValueIew []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIew = &fallbackValueIew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIre(fallbackValueIre []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIre = &fallbackValueIre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIsw(fallbackValueIsw []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIsw = &fallbackValueIsw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueN(fallbackValueN []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueN = &fallbackValueN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNic(fallbackValueNic []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNic = &fallbackValueNic
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNie(fallbackValueNie []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNie = &fallbackValueNie
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNiew(fallbackValueNiew []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNiew = &fallbackValueNiew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNire(fallbackValueNire []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNire = &fallbackValueNire
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNisw(fallbackValueNisw []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNisw = &fallbackValueNisw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNre(fallbackValueNre []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNre = &fallbackValueNre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueRe(fallbackValueRe []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueRe = &fallbackValueRe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsListRequest {
	r.format = &format
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Grouping(grouping []string) ApiExtrasComputedFieldsListRequest {
	r.grouping = &grouping
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingIc(groupingIc []string) ApiExtrasComputedFieldsListRequest {
	r.groupingIc = &groupingIc
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingIe(groupingIe []string) ApiExtrasComputedFieldsListRequest {
	r.groupingIe = &groupingIe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingIew(groupingIew []string) ApiExtrasComputedFieldsListRequest {
	r.groupingIew = &groupingIew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingIre(groupingIre []string) ApiExtrasComputedFieldsListRequest {
	r.groupingIre = &groupingIre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingIsw(groupingIsw []string) ApiExtrasComputedFieldsListRequest {
	r.groupingIsw = &groupingIsw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingN(groupingN []string) ApiExtrasComputedFieldsListRequest {
	r.groupingN = &groupingN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingNic(groupingNic []string) ApiExtrasComputedFieldsListRequest {
	r.groupingNic = &groupingNic
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingNie(groupingNie []string) ApiExtrasComputedFieldsListRequest {
	r.groupingNie = &groupingNie
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingNiew(groupingNiew []string) ApiExtrasComputedFieldsListRequest {
	r.groupingNiew = &groupingNiew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingNire(groupingNire []string) ApiExtrasComputedFieldsListRequest {
	r.groupingNire = &groupingNire
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingNisw(groupingNisw []string) ApiExtrasComputedFieldsListRequest {
	r.groupingNisw = &groupingNisw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingNre(groupingNre []string) ApiExtrasComputedFieldsListRequest {
	r.groupingNre = &groupingNre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) GroupingRe(groupingRe []string) ApiExtrasComputedFieldsListRequest {
	r.groupingRe = &groupingRe
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasComputedFieldsListRequest) Id(id []string) ApiExtrasComputedFieldsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdIc(idIc []string) ApiExtrasComputedFieldsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdIe(idIe []string) ApiExtrasComputedFieldsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdIew(idIew []string) ApiExtrasComputedFieldsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdIre(idIre []string) ApiExtrasComputedFieldsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdIsw(idIsw []string) ApiExtrasComputedFieldsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdN(idN []string) ApiExtrasComputedFieldsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdNic(idNic []string) ApiExtrasComputedFieldsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdNie(idNie []string) ApiExtrasComputedFieldsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdNiew(idNiew []string) ApiExtrasComputedFieldsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdNire(idNire []string) ApiExtrasComputedFieldsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdNisw(idNisw []string) ApiExtrasComputedFieldsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdNre(idNre []string) ApiExtrasComputedFieldsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) IdRe(idRe []string) ApiExtrasComputedFieldsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Key(key []string) ApiExtrasComputedFieldsListRequest {
	r.key = &key
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyIc(keyIc []string) ApiExtrasComputedFieldsListRequest {
	r.keyIc = &keyIc
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyIe(keyIe []string) ApiExtrasComputedFieldsListRequest {
	r.keyIe = &keyIe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyIew(keyIew []string) ApiExtrasComputedFieldsListRequest {
	r.keyIew = &keyIew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyIre(keyIre []string) ApiExtrasComputedFieldsListRequest {
	r.keyIre = &keyIre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyIsw(keyIsw []string) ApiExtrasComputedFieldsListRequest {
	r.keyIsw = &keyIsw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyN(keyN []string) ApiExtrasComputedFieldsListRequest {
	r.keyN = &keyN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyNic(keyNic []string) ApiExtrasComputedFieldsListRequest {
	r.keyNic = &keyNic
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyNie(keyNie []string) ApiExtrasComputedFieldsListRequest {
	r.keyNie = &keyNie
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyNiew(keyNiew []string) ApiExtrasComputedFieldsListRequest {
	r.keyNiew = &keyNiew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyNire(keyNire []string) ApiExtrasComputedFieldsListRequest {
	r.keyNire = &keyNire
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyNisw(keyNisw []string) ApiExtrasComputedFieldsListRequest {
	r.keyNisw = &keyNisw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyNre(keyNre []string) ApiExtrasComputedFieldsListRequest {
	r.keyNre = &keyNre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) KeyRe(keyRe []string) ApiExtrasComputedFieldsListRequest {
	r.keyRe = &keyRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasComputedFieldsListRequest) Limit(limit int32) ApiExtrasComputedFieldsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasComputedFieldsListRequest) Offset(offset int32) ApiExtrasComputedFieldsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasComputedFieldsListRequest) Q(q string) ApiExtrasComputedFieldsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasComputedFieldsListRequest) Sort(sort string) ApiExtrasComputedFieldsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Teams(teams []string) ApiExtrasComputedFieldsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasComputedFieldsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasComputedFieldsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasComputedFieldsListRequest) TeamsN(teamsN string) ApiExtrasComputedFieldsListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Template(template []string) ApiExtrasComputedFieldsListRequest {
	r.template = &template
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIc(templateIc []string) ApiExtrasComputedFieldsListRequest {
	r.templateIc = &templateIc
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIe(templateIe []string) ApiExtrasComputedFieldsListRequest {
	r.templateIe = &templateIe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIew(templateIew []string) ApiExtrasComputedFieldsListRequest {
	r.templateIew = &templateIew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIre(templateIre []string) ApiExtrasComputedFieldsListRequest {
	r.templateIre = &templateIre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIsw(templateIsw []string) ApiExtrasComputedFieldsListRequest {
	r.templateIsw = &templateIsw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateN(templateN []string) ApiExtrasComputedFieldsListRequest {
	r.templateN = &templateN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNic(templateNic []string) ApiExtrasComputedFieldsListRequest {
	r.templateNic = &templateNic
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNie(templateNie []string) ApiExtrasComputedFieldsListRequest {
	r.templateNie = &templateNie
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNiew(templateNiew []string) ApiExtrasComputedFieldsListRequest {
	r.templateNiew = &templateNiew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNire(templateNire []string) ApiExtrasComputedFieldsListRequest {
	r.templateNire = &templateNire
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNisw(templateNisw []string) ApiExtrasComputedFieldsListRequest {
	r.templateNisw = &templateNisw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNre(templateNre []string) ApiExtrasComputedFieldsListRequest {
	r.templateNre = &templateNre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateRe(templateRe []string) ApiExtrasComputedFieldsListRequest {
	r.templateRe = &templateRe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Weight(weight []int32) ApiExtrasComputedFieldsListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightGt(weightGt []int32) ApiExtrasComputedFieldsListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightGte(weightGte []int32) ApiExtrasComputedFieldsListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightLt(weightLt []int32) ApiExtrasComputedFieldsListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightLte(weightLte []int32) ApiExtrasComputedFieldsListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightN(weightN []int32) ApiExtrasComputedFieldsListRequest {
	r.weightN = &weightN
	return r
}

// Serializer Depth
func (r ApiExtrasComputedFieldsListRequest) Depth(depth int32) ApiExtrasComputedFieldsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Execute() (*PaginatedComputedFieldList, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsListExecute(r)
}

/*
ExtrasComputedFieldsList Method for ExtrasComputedFieldsList

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsListRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsList(ctx context.Context) ApiExtrasComputedFieldsListRequest {
	return ApiExtrasComputedFieldsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedComputedFieldList
func (a *ExtrasAPIService) ExtrasComputedFieldsListExecute(r ApiExtrasComputedFieldsListRequest) (*PaginatedComputedFieldList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedComputedFieldList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type", r.contentType, "form", "")
	}
	if r.contentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type__n", r.contentTypeN, "form", "")
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.fallbackValue != nil {
		t := *r.fallbackValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value", t, "form", "multi")
		}
	}
	if r.fallbackValueIc != nil {
		t := *r.fallbackValueIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__ic", t, "form", "multi")
		}
	}
	if r.fallbackValueIe != nil {
		t := *r.fallbackValueIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__ie", t, "form", "multi")
		}
	}
	if r.fallbackValueIew != nil {
		t := *r.fallbackValueIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__iew", t, "form", "multi")
		}
	}
	if r.fallbackValueIre != nil {
		t := *r.fallbackValueIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__ire", t, "form", "multi")
		}
	}
	if r.fallbackValueIsw != nil {
		t := *r.fallbackValueIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__isw", t, "form", "multi")
		}
	}
	if r.fallbackValueN != nil {
		t := *r.fallbackValueN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__n", t, "form", "multi")
		}
	}
	if r.fallbackValueNic != nil {
		t := *r.fallbackValueNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nic", t, "form", "multi")
		}
	}
	if r.fallbackValueNie != nil {
		t := *r.fallbackValueNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nie", t, "form", "multi")
		}
	}
	if r.fallbackValueNiew != nil {
		t := *r.fallbackValueNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__niew", t, "form", "multi")
		}
	}
	if r.fallbackValueNire != nil {
		t := *r.fallbackValueNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nire", t, "form", "multi")
		}
	}
	if r.fallbackValueNisw != nil {
		t := *r.fallbackValueNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nisw", t, "form", "multi")
		}
	}
	if r.fallbackValueNre != nil {
		t := *r.fallbackValueNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__nre", t, "form", "multi")
		}
	}
	if r.fallbackValueRe != nil {
		t := *r.fallbackValueRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fallback_value__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.grouping != nil {
		t := *r.grouping
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", t, "form", "multi")
		}
	}
	if r.groupingIc != nil {
		t := *r.groupingIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ic", t, "form", "multi")
		}
	}
	if r.groupingIe != nil {
		t := *r.groupingIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ie", t, "form", "multi")
		}
	}
	if r.groupingIew != nil {
		t := *r.groupingIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__iew", t, "form", "multi")
		}
	}
	if r.groupingIre != nil {
		t := *r.groupingIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ire", t, "form", "multi")
		}
	}
	if r.groupingIsw != nil {
		t := *r.groupingIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__isw", t, "form", "multi")
		}
	}
	if r.groupingN != nil {
		t := *r.groupingN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__n", t, "form", "multi")
		}
	}
	if r.groupingNic != nil {
		t := *r.groupingNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nic", t, "form", "multi")
		}
	}
	if r.groupingNie != nil {
		t := *r.groupingNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nie", t, "form", "multi")
		}
	}
	if r.groupingNiew != nil {
		t := *r.groupingNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__niew", t, "form", "multi")
		}
	}
	if r.groupingNire != nil {
		t := *r.groupingNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nire", t, "form", "multi")
		}
	}
	if r.groupingNisw != nil {
		t := *r.groupingNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nisw", t, "form", "multi")
		}
	}
	if r.groupingNre != nil {
		t := *r.groupingNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nre", t, "form", "multi")
		}
	}
	if r.groupingRe != nil {
		t := *r.groupingRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__re", t, "form", "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.key != nil {
		t := *r.key
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key", t, "form", "multi")
		}
	}
	if r.keyIc != nil {
		t := *r.keyIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__ic", t, "form", "multi")
		}
	}
	if r.keyIe != nil {
		t := *r.keyIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__ie", t, "form", "multi")
		}
	}
	if r.keyIew != nil {
		t := *r.keyIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__iew", t, "form", "multi")
		}
	}
	if r.keyIre != nil {
		t := *r.keyIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__ire", t, "form", "multi")
		}
	}
	if r.keyIsw != nil {
		t := *r.keyIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__isw", t, "form", "multi")
		}
	}
	if r.keyN != nil {
		t := *r.keyN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__n", t, "form", "multi")
		}
	}
	if r.keyNic != nil {
		t := *r.keyNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nic", t, "form", "multi")
		}
	}
	if r.keyNie != nil {
		t := *r.keyNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nie", t, "form", "multi")
		}
	}
	if r.keyNiew != nil {
		t := *r.keyNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__niew", t, "form", "multi")
		}
	}
	if r.keyNire != nil {
		t := *r.keyNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nire", t, "form", "multi")
		}
	}
	if r.keyNisw != nil {
		t := *r.keyNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nisw", t, "form", "multi")
		}
	}
	if r.keyNre != nil {
		t := *r.keyNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nre", t, "form", "multi")
		}
	}
	if r.keyRe != nil {
		t := *r.keyRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.template != nil {
		t := *r.template
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template", t, "form", "multi")
		}
	}
	if r.templateIc != nil {
		t := *r.templateIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__ic", t, "form", "multi")
		}
	}
	if r.templateIe != nil {
		t := *r.templateIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__ie", t, "form", "multi")
		}
	}
	if r.templateIew != nil {
		t := *r.templateIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__iew", t, "form", "multi")
		}
	}
	if r.templateIre != nil {
		t := *r.templateIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__ire", t, "form", "multi")
		}
	}
	if r.templateIsw != nil {
		t := *r.templateIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__isw", t, "form", "multi")
		}
	}
	if r.templateN != nil {
		t := *r.templateN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__n", t, "form", "multi")
		}
	}
	if r.templateNic != nil {
		t := *r.templateNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__nic", t, "form", "multi")
		}
	}
	if r.templateNie != nil {
		t := *r.templateNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__nie", t, "form", "multi")
		}
	}
	if r.templateNiew != nil {
		t := *r.templateNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__niew", t, "form", "multi")
		}
	}
	if r.templateNire != nil {
		t := *r.templateNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__nire", t, "form", "multi")
		}
	}
	if r.templateNisw != nil {
		t := *r.templateNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__nisw", t, "form", "multi")
		}
	}
	if r.templateNre != nil {
		t := *r.templateNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__nre", t, "form", "multi")
		}
	}
	if r.templateRe != nil {
		t := *r.templateRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "template__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "template__re", t, "form", "multi")
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "form", "multi")
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "form", "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "form", "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "form", "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "form", "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasComputedFieldsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasComputedFieldsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasComputedFieldsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasComputedFieldsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsNotesCreateExecute(r)
}

/*
ExtrasComputedFieldsNotesCreate Method for ExtrasComputedFieldsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsNotesCreate(ctx context.Context, id string) ApiExtrasComputedFieldsNotesCreateRequest {
	return ApiExtrasComputedFieldsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasComputedFieldsNotesCreateExecute(r ApiExtrasComputedFieldsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasComputedFieldsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasComputedFieldsNotesListRequest) Limit(limit int32) ApiExtrasComputedFieldsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasComputedFieldsNotesListRequest) Offset(offset int32) ApiExtrasComputedFieldsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasComputedFieldsNotesListRequest) Depth(depth int32) ApiExtrasComputedFieldsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasComputedFieldsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsNotesListExecute(r)
}

/*
ExtrasComputedFieldsNotesList Method for ExtrasComputedFieldsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsNotesList(ctx context.Context, id string) ApiExtrasComputedFieldsNotesListRequest {
	return ApiExtrasComputedFieldsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasComputedFieldsNotesListExecute(r ApiExtrasComputedFieldsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedComputedFieldRequest *PatchedComputedFieldRequest
}

func (r ApiExtrasComputedFieldsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasComputedFieldsPartialUpdateRequest) PatchedComputedFieldRequest(patchedComputedFieldRequest PatchedComputedFieldRequest) ApiExtrasComputedFieldsPartialUpdateRequest {
	r.patchedComputedFieldRequest = &patchedComputedFieldRequest
	return r
}

func (r ApiExtrasComputedFieldsPartialUpdateRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsPartialUpdateExecute(r)
}

/*
ExtrasComputedFieldsPartialUpdate Method for ExtrasComputedFieldsPartialUpdate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsPartialUpdate(ctx context.Context, id string) ApiExtrasComputedFieldsPartialUpdateRequest {
	return ApiExtrasComputedFieldsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasAPIService) ExtrasComputedFieldsPartialUpdateExecute(r ApiExtrasComputedFieldsPartialUpdateRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedComputedFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasComputedFieldsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasComputedFieldsRetrieveRequest) Depth(depth int32) ApiExtrasComputedFieldsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasComputedFieldsRetrieveRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsRetrieveExecute(r)
}

/*
ExtrasComputedFieldsRetrieve Method for ExtrasComputedFieldsRetrieve

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsRetrieve(ctx context.Context, id string) ApiExtrasComputedFieldsRetrieveRequest {
	return ApiExtrasComputedFieldsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasAPIService) ExtrasComputedFieldsRetrieveExecute(r ApiExtrasComputedFieldsRetrieveRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	computedFieldRequest *ComputedFieldRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasComputedFieldsUpdateRequest) ComputedFieldRequest(computedFieldRequest ComputedFieldRequest) ApiExtrasComputedFieldsUpdateRequest {
	r.computedFieldRequest = &computedFieldRequest
	return r
}

func (r ApiExtrasComputedFieldsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasComputedFieldsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasComputedFieldsUpdateRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsUpdateExecute(r)
}

/*
ExtrasComputedFieldsUpdate Method for ExtrasComputedFieldsUpdate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasComputedFieldsUpdate(ctx context.Context, id string) ApiExtrasComputedFieldsUpdateRequest {
	return ApiExtrasComputedFieldsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasAPIService) ExtrasComputedFieldsUpdateExecute(r ApiExtrasComputedFieldsUpdateRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasComputedFieldsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.computedFieldRequest == nil {
		return localVarReturnValue, nil, reportError("computedFieldRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.computedFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextSchemasBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasConfigContextSchemasBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasConfigContextSchemasBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextSchemasBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasBulkDestroyExecute(r)
}

/*
ExtrasConfigContextSchemasBulkDestroy Method for ExtrasConfigContextSchemasBulkDestroy

Destroy a list of config context schema objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasBulkDestroy(ctx context.Context) ApiExtrasConfigContextSchemasBulkDestroyRequest {
	return ApiExtrasConfigContextSchemasBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasConfigContextSchemasBulkDestroyExecute(r ApiExtrasConfigContextSchemasBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableConfigContextSchemaRequest *[]PatchedBulkWritableConfigContextSchemaRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextSchemasBulkPartialUpdateRequest) PatchedBulkWritableConfigContextSchemaRequest(patchedBulkWritableConfigContextSchemaRequest []PatchedBulkWritableConfigContextSchemaRequest) ApiExtrasConfigContextSchemasBulkPartialUpdateRequest {
	r.patchedBulkWritableConfigContextSchemaRequest = &patchedBulkWritableConfigContextSchemaRequest
	return r
}

func (r ApiExtrasConfigContextSchemasBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextSchemasBulkPartialUpdateRequest) Execute() ([]ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasBulkPartialUpdateExecute(r)
}

/*
ExtrasConfigContextSchemasBulkPartialUpdate Method for ExtrasConfigContextSchemasBulkPartialUpdate

Partial update a list of config context schema objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasBulkPartialUpdate(ctx context.Context) ApiExtrasConfigContextSchemasBulkPartialUpdateRequest {
	return ApiExtrasConfigContextSchemasBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ConfigContextSchema
func (a *ExtrasAPIService) ExtrasConfigContextSchemasBulkPartialUpdateExecute(r ApiExtrasConfigContextSchemasBulkPartialUpdateRequest) ([]ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableConfigContextSchemaRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableConfigContextSchemaRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableConfigContextSchemaRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableConfigContextSchemaRequest *[]BulkWritableConfigContextSchemaRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextSchemasBulkUpdateRequest) BulkWritableConfigContextSchemaRequest(bulkWritableConfigContextSchemaRequest []BulkWritableConfigContextSchemaRequest) ApiExtrasConfigContextSchemasBulkUpdateRequest {
	r.bulkWritableConfigContextSchemaRequest = &bulkWritableConfigContextSchemaRequest
	return r
}

func (r ApiExtrasConfigContextSchemasBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextSchemasBulkUpdateRequest) Execute() ([]ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasBulkUpdateExecute(r)
}

/*
ExtrasConfigContextSchemasBulkUpdate Method for ExtrasConfigContextSchemasBulkUpdate

Update a list of config context schema objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasBulkUpdate(ctx context.Context) ApiExtrasConfigContextSchemasBulkUpdateRequest {
	return ApiExtrasConfigContextSchemasBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ConfigContextSchema
func (a *ExtrasAPIService) ExtrasConfigContextSchemasBulkUpdateExecute(r ApiExtrasConfigContextSchemasBulkUpdateRequest) ([]ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableConfigContextSchemaRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableConfigContextSchemaRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableConfigContextSchemaRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	configContextSchemaRequest *ConfigContextSchemaRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextSchemasCreateRequest) ConfigContextSchemaRequest(configContextSchemaRequest ConfigContextSchemaRequest) ApiExtrasConfigContextSchemasCreateRequest {
	r.configContextSchemaRequest = &configContextSchemaRequest
	return r
}

func (r ApiExtrasConfigContextSchemasCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextSchemasCreateRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasCreateExecute(r)
}

/*
ExtrasConfigContextSchemasCreate Method for ExtrasConfigContextSchemasCreate

Create one or more config context schema objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasCreateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasCreate(ctx context.Context) ApiExtrasConfigContextSchemasCreateRequest {
	return ApiExtrasConfigContextSchemasCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasAPIService) ExtrasConfigContextSchemasCreateExecute(r ApiExtrasConfigContextSchemasCreateRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextSchemaRequest == nil {
		return localVarReturnValue, nil, reportError("configContextSchemaRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextSchemaRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextSchemasDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextSchemasDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasDestroyExecute(r)
}

/*
ExtrasConfigContextSchemasDestroy Method for ExtrasConfigContextSchemasDestroy

Destroy a config context schema object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasDestroy(ctx context.Context, id string) ApiExtrasConfigContextSchemasDestroyRequest {
	return ApiExtrasConfigContextSchemasDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasConfigContextSchemasDestroyExecute(r ApiExtrasConfigContextSchemasDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	ownerContentType *string
	ownerContentTypeIsnull *bool
	ownerContentTypeN *string
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiExtrasConfigContextSchemasListRequest) Contacts(contacts []string) ApiExtrasConfigContextSchemasListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasConfigContextSchemasListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasConfigContextSchemasListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasConfigContextSchemasListRequest) ContactsN(contactsN string) ApiExtrasConfigContextSchemasListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) Description(description []string) ApiExtrasConfigContextSchemasListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIc(descriptionIc []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIe(descriptionIe []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIew(descriptionIew []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIre(descriptionIre []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionN(descriptionN []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNic(descriptionNic []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNie(descriptionNie []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNire(descriptionNire []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNre(descriptionNre []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionRe(descriptionRe []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasConfigContextSchemasListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasConfigContextSchemasListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasConfigContextSchemasListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasConfigContextSchemasListRequest) Id(id []string) ApiExtrasConfigContextSchemasListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIc(idIc []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIe(idIe []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIew(idIew []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIre(idIre []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIsw(idIsw []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdN(idN []string) ApiExtrasConfigContextSchemasListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNic(idNic []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNie(idNie []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNiew(idNiew []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNire(idNire []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNisw(idNisw []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNre(idNre []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdRe(idRe []string) ApiExtrasConfigContextSchemasListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasConfigContextSchemasListRequest) Limit(limit int32) ApiExtrasConfigContextSchemasListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) Name(name []string) ApiExtrasConfigContextSchemasListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIc(nameIc []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIe(nameIe []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIew(nameIew []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIre(nameIre []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIsw(nameIsw []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameN(nameN []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNic(nameNic []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNie(nameNie []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNiew(nameNiew []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNire(nameNire []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNisw(nameNisw []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNre(nameNre []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameRe(nameRe []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasConfigContextSchemasListRequest) Offset(offset int32) ApiExtrasConfigContextSchemasListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) OwnerContentType(ownerContentType string) ApiExtrasConfigContextSchemasListRequest {
	r.ownerContentType = &ownerContentType
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) OwnerContentTypeIsnull(ownerContentTypeIsnull bool) ApiExtrasConfigContextSchemasListRequest {
	r.ownerContentTypeIsnull = &ownerContentTypeIsnull
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) OwnerContentTypeN(ownerContentTypeN string) ApiExtrasConfigContextSchemasListRequest {
	r.ownerContentTypeN = &ownerContentTypeN
	return r
}

// Search
func (r ApiExtrasConfigContextSchemasListRequest) Q(q string) ApiExtrasConfigContextSchemasListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasConfigContextSchemasListRequest) Sort(sort string) ApiExtrasConfigContextSchemasListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) Teams(teams []string) ApiExtrasConfigContextSchemasListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasConfigContextSchemasListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasConfigContextSchemasListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasConfigContextSchemasListRequest) TeamsN(teamsN string) ApiExtrasConfigContextSchemasListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiExtrasConfigContextSchemasListRequest) Depth(depth int32) ApiExtrasConfigContextSchemasListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) Execute() (*PaginatedConfigContextSchemaList, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasListExecute(r)
}

/*
ExtrasConfigContextSchemasList Method for ExtrasConfigContextSchemasList

Retrieve a list of config context schema objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasListRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasList(ctx context.Context) ApiExtrasConfigContextSchemasListRequest {
	return ApiExtrasConfigContextSchemasListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedConfigContextSchemaList
func (a *ExtrasAPIService) ExtrasConfigContextSchemasListExecute(r ApiExtrasConfigContextSchemasListRequest) (*PaginatedConfigContextSchemaList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedConfigContextSchemaList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ownerContentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_content_type", r.ownerContentType, "form", "")
	}
	if r.ownerContentTypeIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_content_type__isnull", r.ownerContentTypeIsnull, "form", "")
	}
	if r.ownerContentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_content_type__n", r.ownerContentTypeN, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextSchemasNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasConfigContextSchemasNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasConfigContextSchemasNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextSchemasNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasNotesCreateExecute(r)
}

/*
ExtrasConfigContextSchemasNotesCreate Method for ExtrasConfigContextSchemasNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasNotesCreate(ctx context.Context, id string) ApiExtrasConfigContextSchemasNotesCreateRequest {
	return ApiExtrasConfigContextSchemasNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasConfigContextSchemasNotesCreateExecute(r ApiExtrasConfigContextSchemasNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasConfigContextSchemasNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasConfigContextSchemasNotesListRequest) Limit(limit int32) ApiExtrasConfigContextSchemasNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasConfigContextSchemasNotesListRequest) Offset(offset int32) ApiExtrasConfigContextSchemasNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasConfigContextSchemasNotesListRequest) Depth(depth int32) ApiExtrasConfigContextSchemasNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasConfigContextSchemasNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasNotesListExecute(r)
}

/*
ExtrasConfigContextSchemasNotesList Method for ExtrasConfigContextSchemasNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasNotesList(ctx context.Context, id string) ApiExtrasConfigContextSchemasNotesListRequest {
	return ApiExtrasConfigContextSchemasNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasConfigContextSchemasNotesListExecute(r ApiExtrasConfigContextSchemasNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedConfigContextSchemaRequest *PatchedConfigContextSchemaRequest
}

func (r ApiExtrasConfigContextSchemasPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextSchemasPartialUpdateRequest) PatchedConfigContextSchemaRequest(patchedConfigContextSchemaRequest PatchedConfigContextSchemaRequest) ApiExtrasConfigContextSchemasPartialUpdateRequest {
	r.patchedConfigContextSchemaRequest = &patchedConfigContextSchemaRequest
	return r
}

func (r ApiExtrasConfigContextSchemasPartialUpdateRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasPartialUpdateExecute(r)
}

/*
ExtrasConfigContextSchemasPartialUpdate Method for ExtrasConfigContextSchemasPartialUpdate

Partial update a config context schema object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasPartialUpdate(ctx context.Context, id string) ApiExtrasConfigContextSchemasPartialUpdateRequest {
	return ApiExtrasConfigContextSchemasPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasAPIService) ExtrasConfigContextSchemasPartialUpdateExecute(r ApiExtrasConfigContextSchemasPartialUpdateRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedConfigContextSchemaRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasConfigContextSchemasRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasConfigContextSchemasRetrieveRequest) Depth(depth int32) ApiExtrasConfigContextSchemasRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasConfigContextSchemasRetrieveRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasRetrieveExecute(r)
}

/*
ExtrasConfigContextSchemasRetrieve Method for ExtrasConfigContextSchemasRetrieve

Retrieve a config context schema object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasRetrieve(ctx context.Context, id string) ApiExtrasConfigContextSchemasRetrieveRequest {
	return ApiExtrasConfigContextSchemasRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasAPIService) ExtrasConfigContextSchemasRetrieveExecute(r ApiExtrasConfigContextSchemasRetrieveRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	configContextSchemaRequest *ConfigContextSchemaRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextSchemasUpdateRequest) ConfigContextSchemaRequest(configContextSchemaRequest ConfigContextSchemaRequest) ApiExtrasConfigContextSchemasUpdateRequest {
	r.configContextSchemaRequest = &configContextSchemaRequest
	return r
}

func (r ApiExtrasConfigContextSchemasUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextSchemasUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextSchemasUpdateRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasUpdateExecute(r)
}

/*
ExtrasConfigContextSchemasUpdate Method for ExtrasConfigContextSchemasUpdate

Update a config context schema object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextSchemasUpdate(ctx context.Context, id string) ApiExtrasConfigContextSchemasUpdateRequest {
	return ApiExtrasConfigContextSchemasUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasAPIService) ExtrasConfigContextSchemasUpdateExecute(r ApiExtrasConfigContextSchemasUpdateRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextSchemasUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextSchemaRequest == nil {
		return localVarReturnValue, nil, reportError("configContextSchemaRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextSchemaRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasConfigContextsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasConfigContextsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextsBulkDestroyExecute(r)
}

/*
ExtrasConfigContextsBulkDestroy Method for ExtrasConfigContextsBulkDestroy

Destroy a list of config context objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsBulkDestroy(ctx context.Context) ApiExtrasConfigContextsBulkDestroyRequest {
	return ApiExtrasConfigContextsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasConfigContextsBulkDestroyExecute(r ApiExtrasConfigContextsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableConfigContextRequest *[]PatchedBulkWritableConfigContextRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextsBulkPartialUpdateRequest) PatchedBulkWritableConfigContextRequest(patchedBulkWritableConfigContextRequest []PatchedBulkWritableConfigContextRequest) ApiExtrasConfigContextsBulkPartialUpdateRequest {
	r.patchedBulkWritableConfigContextRequest = &patchedBulkWritableConfigContextRequest
	return r
}

func (r ApiExtrasConfigContextsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextsBulkPartialUpdateRequest) Execute() ([]ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsBulkPartialUpdateExecute(r)
}

/*
ExtrasConfigContextsBulkPartialUpdate Method for ExtrasConfigContextsBulkPartialUpdate

Partial update a list of config context objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsBulkPartialUpdate(ctx context.Context) ApiExtrasConfigContextsBulkPartialUpdateRequest {
	return ApiExtrasConfigContextsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsBulkPartialUpdateExecute(r ApiExtrasConfigContextsBulkPartialUpdateRequest) ([]ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableConfigContextRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableConfigContextRequest *[]BulkWritableConfigContextRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextsBulkUpdateRequest) BulkWritableConfigContextRequest(bulkWritableConfigContextRequest []BulkWritableConfigContextRequest) ApiExtrasConfigContextsBulkUpdateRequest {
	r.bulkWritableConfigContextRequest = &bulkWritableConfigContextRequest
	return r
}

func (r ApiExtrasConfigContextsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextsBulkUpdateRequest) Execute() ([]ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsBulkUpdateExecute(r)
}

/*
ExtrasConfigContextsBulkUpdate Method for ExtrasConfigContextsBulkUpdate

Update a list of config context objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsBulkUpdate(ctx context.Context) ApiExtrasConfigContextsBulkUpdateRequest {
	return ApiExtrasConfigContextsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsBulkUpdateExecute(r ApiExtrasConfigContextsBulkUpdateRequest) ([]ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableConfigContextRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	configContextRequest *ConfigContextRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextsCreateRequest) ConfigContextRequest(configContextRequest ConfigContextRequest) ApiExtrasConfigContextsCreateRequest {
	r.configContextRequest = &configContextRequest
	return r
}

func (r ApiExtrasConfigContextsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextsCreateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsCreateExecute(r)
}

/*
ExtrasConfigContextsCreate Method for ExtrasConfigContextsCreate

Create one or more config context objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsCreate(ctx context.Context) ApiExtrasConfigContextsCreateRequest {
	return ApiExtrasConfigContextsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsCreateExecute(r ApiExtrasConfigContextsCreateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextRequest == nil {
		return localVarReturnValue, nil, reportError("configContextRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextsDestroyExecute(r)
}

/*
ExtrasConfigContextsDestroy Method for ExtrasConfigContextsDestroy

Destroy a config context object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsDestroy(ctx context.Context, id string) ApiExtrasConfigContextsDestroyRequest {
	return ApiExtrasConfigContextsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasConfigContextsDestroyExecute(r ApiExtrasConfigContextsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	clusterGroup *[]string
	clusterGroupN *[]string
	clusterGroupId *[]string
	clusterGroupIdN *[]string
	clusterId *[]string
	clusterIdN *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	deviceRedundancyGroup *[]string
	deviceRedundancyGroupN *[]string
	deviceType *[]string
	deviceTypeN *[]string
	deviceTypeId *[]string
	deviceTypeIdN *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	isActive *bool
	limit *int32
	location *[]string
	locationN *[]string
	locationId *[]string
	locationIdN *[]string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	ownerContentType *string
	ownerContentTypeIsnull *bool
	ownerContentTypeN *string
	ownerObjectId *[]string
	ownerObjectIdIc *[]string
	ownerObjectIdIe *[]string
	ownerObjectIdIew *[]string
	ownerObjectIdIre *[]string
	ownerObjectIdIsnull *bool
	ownerObjectIdIsw *[]string
	ownerObjectIdN *[]string
	ownerObjectIdNic *[]string
	ownerObjectIdNie *[]string
	ownerObjectIdNiew *[]string
	ownerObjectIdNire *[]string
	ownerObjectIdNisw *[]string
	ownerObjectIdNre *[]string
	ownerObjectIdRe *[]string
	platform *[]string
	platformN *[]string
	platformId *[]string
	platformIdN *[]string
	q *string
	role *[]string
	roleN *[]string
	schema *[]string
	schemaIsnull *bool
	schemaN *[]string
	sort *string
	tag *[]string
	tagN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]string
	tenantIdN *[]string
	depth *int32
}

func (r ApiExtrasConfigContextsListRequest) ClusterGroup(clusterGroup []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroup = &clusterGroup
	return r
}

func (r ApiExtrasConfigContextsListRequest) ClusterGroupN(clusterGroupN []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroupN = &clusterGroupN
	return r
}

// Cluster group (ID) - Deprecated (use cluster_group filter)
func (r ApiExtrasConfigContextsListRequest) ClusterGroupId(clusterGroupId []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroupId = &clusterGroupId
	return r
}

// Exclude Cluster group (ID) - Deprecated (use cluster_group filter)
func (r ApiExtrasConfigContextsListRequest) ClusterGroupIdN(clusterGroupIdN []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroupIdN = &clusterGroupIdN
	return r
}

// Cluster (ID)
func (r ApiExtrasConfigContextsListRequest) ClusterId(clusterId []string) ApiExtrasConfigContextsListRequest {
	r.clusterId = &clusterId
	return r
}

// Exclude Cluster (ID)
func (r ApiExtrasConfigContextsListRequest) ClusterIdN(clusterIdN []string) ApiExtrasConfigContextsListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Contacts(contacts []string) ApiExtrasConfigContextsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasConfigContextsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasConfigContextsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasConfigContextsListRequest) ContactsN(contactsN string) ApiExtrasConfigContextsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasConfigContextsListRequest) DeviceRedundancyGroup(deviceRedundancyGroup []string) ApiExtrasConfigContextsListRequest {
	r.deviceRedundancyGroup = &deviceRedundancyGroup
	return r
}

func (r ApiExtrasConfigContextsListRequest) DeviceRedundancyGroupN(deviceRedundancyGroupN []string) ApiExtrasConfigContextsListRequest {
	r.deviceRedundancyGroupN = &deviceRedundancyGroupN
	return r
}

func (r ApiExtrasConfigContextsListRequest) DeviceType(deviceType []string) ApiExtrasConfigContextsListRequest {
	r.deviceType = &deviceType
	return r
}

func (r ApiExtrasConfigContextsListRequest) DeviceTypeN(deviceTypeN []string) ApiExtrasConfigContextsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device Type (ID) - Deprecated (use device_type filter)
func (r ApiExtrasConfigContextsListRequest) DeviceTypeId(deviceTypeId []string) ApiExtrasConfigContextsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Exclude Device Type (ID) - Deprecated (use device_type filter)
func (r ApiExtrasConfigContextsListRequest) DeviceTypeIdN(deviceTypeIdN []string) ApiExtrasConfigContextsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasConfigContextsListRequest) Id(id []string) ApiExtrasConfigContextsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIc(idIc []string) ApiExtrasConfigContextsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIe(idIe []string) ApiExtrasConfigContextsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIew(idIew []string) ApiExtrasConfigContextsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIre(idIre []string) ApiExtrasConfigContextsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIsw(idIsw []string) ApiExtrasConfigContextsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdN(idN []string) ApiExtrasConfigContextsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNic(idNic []string) ApiExtrasConfigContextsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNie(idNie []string) ApiExtrasConfigContextsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNiew(idNiew []string) ApiExtrasConfigContextsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNire(idNire []string) ApiExtrasConfigContextsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNisw(idNisw []string) ApiExtrasConfigContextsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNre(idNre []string) ApiExtrasConfigContextsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdRe(idRe []string) ApiExtrasConfigContextsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasConfigContextsListRequest) IsActive(isActive bool) ApiExtrasConfigContextsListRequest {
	r.isActive = &isActive
	return r
}

// Number of results to return per page.
func (r ApiExtrasConfigContextsListRequest) Limit(limit int32) ApiExtrasConfigContextsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasConfigContextsListRequest) Location(location []string) ApiExtrasConfigContextsListRequest {
	r.location = &location
	return r
}

func (r ApiExtrasConfigContextsListRequest) LocationN(locationN []string) ApiExtrasConfigContextsListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID) - Deprecated (use location filter)
func (r ApiExtrasConfigContextsListRequest) LocationId(locationId []string) ApiExtrasConfigContextsListRequest {
	r.locationId = &locationId
	return r
}

// Exclude Location (ID) - Deprecated (use location filter)
func (r ApiExtrasConfigContextsListRequest) LocationIdN(locationIdN []string) ApiExtrasConfigContextsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Name(name []string) ApiExtrasConfigContextsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIc(nameIc []string) ApiExtrasConfigContextsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIe(nameIe []string) ApiExtrasConfigContextsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIew(nameIew []string) ApiExtrasConfigContextsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIre(nameIre []string) ApiExtrasConfigContextsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIsw(nameIsw []string) ApiExtrasConfigContextsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameN(nameN []string) ApiExtrasConfigContextsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNic(nameNic []string) ApiExtrasConfigContextsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNie(nameNie []string) ApiExtrasConfigContextsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNiew(nameNiew []string) ApiExtrasConfigContextsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNire(nameNire []string) ApiExtrasConfigContextsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNisw(nameNisw []string) ApiExtrasConfigContextsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNre(nameNre []string) ApiExtrasConfigContextsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameRe(nameRe []string) ApiExtrasConfigContextsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasConfigContextsListRequest) Offset(offset int32) ApiExtrasConfigContextsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerContentType(ownerContentType string) ApiExtrasConfigContextsListRequest {
	r.ownerContentType = &ownerContentType
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerContentTypeIsnull(ownerContentTypeIsnull bool) ApiExtrasConfigContextsListRequest {
	r.ownerContentTypeIsnull = &ownerContentTypeIsnull
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerContentTypeN(ownerContentTypeN string) ApiExtrasConfigContextsListRequest {
	r.ownerContentTypeN = &ownerContentTypeN
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectId(ownerObjectId []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectId = &ownerObjectId
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIc(ownerObjectIdIc []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIc = &ownerObjectIdIc
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIe(ownerObjectIdIe []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIe = &ownerObjectIdIe
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIew(ownerObjectIdIew []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIew = &ownerObjectIdIew
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIre(ownerObjectIdIre []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIre = &ownerObjectIdIre
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIsnull(ownerObjectIdIsnull bool) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIsnull = &ownerObjectIdIsnull
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIsw(ownerObjectIdIsw []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIsw = &ownerObjectIdIsw
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdN(ownerObjectIdN []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdN = &ownerObjectIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNic(ownerObjectIdNic []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNic = &ownerObjectIdNic
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNie(ownerObjectIdNie []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNie = &ownerObjectIdNie
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNiew(ownerObjectIdNiew []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNiew = &ownerObjectIdNiew
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNire(ownerObjectIdNire []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNire = &ownerObjectIdNire
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNisw(ownerObjectIdNisw []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNisw = &ownerObjectIdNisw
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNre(ownerObjectIdNre []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNre = &ownerObjectIdNre
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdRe(ownerObjectIdRe []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdRe = &ownerObjectIdRe
	return r
}

func (r ApiExtrasConfigContextsListRequest) Platform(platform []string) ApiExtrasConfigContextsListRequest {
	r.platform = &platform
	return r
}

func (r ApiExtrasConfigContextsListRequest) PlatformN(platformN []string) ApiExtrasConfigContextsListRequest {
	r.platformN = &platformN
	return r
}

// Platform (ID) - Deprecated (use platform filter)
func (r ApiExtrasConfigContextsListRequest) PlatformId(platformId []string) ApiExtrasConfigContextsListRequest {
	r.platformId = &platformId
	return r
}

// Exclude Platform (ID) - Deprecated (use platform filter)
func (r ApiExtrasConfigContextsListRequest) PlatformIdN(platformIdN []string) ApiExtrasConfigContextsListRequest {
	r.platformIdN = &platformIdN
	return r
}

// Search
func (r ApiExtrasConfigContextsListRequest) Q(q string) ApiExtrasConfigContextsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasConfigContextsListRequest) Role(role []string) ApiExtrasConfigContextsListRequest {
	r.role = &role
	return r
}

func (r ApiExtrasConfigContextsListRequest) RoleN(roleN []string) ApiExtrasConfigContextsListRequest {
	r.roleN = &roleN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Schema(schema []string) ApiExtrasConfigContextsListRequest {
	r.schema = &schema
	return r
}

// Schema (name or PK) is null
func (r ApiExtrasConfigContextsListRequest) SchemaIsnull(schemaIsnull bool) ApiExtrasConfigContextsListRequest {
	r.schemaIsnull = &schemaIsnull
	return r
}

func (r ApiExtrasConfigContextsListRequest) SchemaN(schemaN []string) ApiExtrasConfigContextsListRequest {
	r.schemaN = &schemaN
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasConfigContextsListRequest) Sort(sort string) ApiExtrasConfigContextsListRequest {
	r.sort = &sort
	return r
}

// Tag (name)
func (r ApiExtrasConfigContextsListRequest) Tag(tag []string) ApiExtrasConfigContextsListRequest {
	r.tag = &tag
	return r
}

// Exclude Tag (name)
func (r ApiExtrasConfigContextsListRequest) TagN(tagN []string) ApiExtrasConfigContextsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Teams(teams []string) ApiExtrasConfigContextsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasConfigContextsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasConfigContextsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasConfigContextsListRequest) TeamsN(teamsN string) ApiExtrasConfigContextsListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Tenant(tenant []string) ApiExtrasConfigContextsListRequest {
	r.tenant = &tenant
	return r
}

func (r ApiExtrasConfigContextsListRequest) TenantN(tenantN []string) ApiExtrasConfigContextsListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiExtrasConfigContextsListRequest) TenantGroup(tenantGroup []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiExtrasConfigContextsListRequest) TenantGroupN(tenantGroupN []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant group (ID) - Deprecated (use tenant_group filter)
func (r ApiExtrasConfigContextsListRequest) TenantGroupId(tenantGroupId []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Exclude Tenant group (ID) - Deprecated (use tenant_group filter)
func (r ApiExtrasConfigContextsListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID) - Deprecated (use tenant filter)
func (r ApiExtrasConfigContextsListRequest) TenantId(tenantId []string) ApiExtrasConfigContextsListRequest {
	r.tenantId = &tenantId
	return r
}

// Exclude Tenant (ID) - Deprecated (use tenant filter)
func (r ApiExtrasConfigContextsListRequest) TenantIdN(tenantIdN []string) ApiExtrasConfigContextsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

// Serializer Depth
func (r ApiExtrasConfigContextsListRequest) Depth(depth int32) ApiExtrasConfigContextsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasConfigContextsListRequest) Execute() (*PaginatedConfigContextList, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsListExecute(r)
}

/*
ExtrasConfigContextsList Method for ExtrasConfigContextsList

Retrieve a list of config context objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsListRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsList(ctx context.Context) ApiExtrasConfigContextsListRequest {
	return ApiExtrasConfigContextsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedConfigContextList
func (a *ExtrasAPIService) ExtrasConfigContextsListExecute(r ApiExtrasConfigContextsListRequest) (*PaginatedConfigContextList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedConfigContextList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterGroup != nil {
		t := *r.clusterGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", t, "form", "multi")
		}
	}
	if r.clusterGroupN != nil {
		t := *r.clusterGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", t, "form", "multi")
		}
	}
	if r.clusterGroupId != nil {
		t := *r.clusterGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", t, "form", "multi")
		}
	}
	if r.clusterGroupIdN != nil {
		t := *r.clusterGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", t, "form", "multi")
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", t, "form", "multi")
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.deviceRedundancyGroup != nil {
		t := *r.deviceRedundancyGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_redundancy_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_redundancy_group", t, "form", "multi")
		}
	}
	if r.deviceRedundancyGroupN != nil {
		t := *r.deviceRedundancyGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_redundancy_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_redundancy_group__n", t, "form", "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "form", "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "form", "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "form", "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.isActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_active", r.isActive, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "form", "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "form", "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "form", "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "form", "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ownerContentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_content_type", r.ownerContentType, "form", "")
	}
	if r.ownerContentTypeIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_content_type__isnull", r.ownerContentTypeIsnull, "form", "")
	}
	if r.ownerContentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_content_type__n", r.ownerContentTypeN, "form", "")
	}
	if r.ownerObjectId != nil {
		t := *r.ownerObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIc != nil {
		t := *r.ownerObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ic", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIe != nil {
		t := *r.ownerObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ie", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIew != nil {
		t := *r.ownerObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__iew", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIre != nil {
		t := *r.ownerObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ire", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__isnull", r.ownerObjectIdIsnull, "form", "")
	}
	if r.ownerObjectIdIsw != nil {
		t := *r.ownerObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__isw", t, "form", "multi")
		}
	}
	if r.ownerObjectIdN != nil {
		t := *r.ownerObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__n", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNic != nil {
		t := *r.ownerObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nic", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNie != nil {
		t := *r.ownerObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nie", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNiew != nil {
		t := *r.ownerObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__niew", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNire != nil {
		t := *r.ownerObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nire", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNisw != nil {
		t := *r.ownerObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nisw", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNre != nil {
		t := *r.ownerObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nre", t, "form", "multi")
		}
	}
	if r.ownerObjectIdRe != nil {
		t := *r.ownerObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__re", t, "form", "multi")
		}
	}
	if r.platform != nil {
		t := *r.platform
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform", t, "form", "multi")
		}
	}
	if r.platformN != nil {
		t := *r.platformN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", t, "form", "multi")
		}
	}
	if r.platformId != nil {
		t := *r.platformId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", t, "form", "multi")
		}
	}
	if r.platformIdN != nil {
		t := *r.platformIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "form", "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "form", "multi")
		}
	}
	if r.schema != nil {
		t := *r.schema
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "schema", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "schema", t, "form", "multi")
		}
	}
	if r.schemaIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "schema__isnull", r.schemaIsnull, "form", "")
	}
	if r.schemaN != nil {
		t := *r.schemaN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "schema__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "schema__n", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "form", "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "form", "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "form", "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "form", "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "form", "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "form", "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "form", "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "form", "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasConfigContextsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasConfigContextsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsNotesCreateExecute(r)
}

/*
ExtrasConfigContextsNotesCreate Method for ExtrasConfigContextsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsNotesCreate(ctx context.Context, id string) ApiExtrasConfigContextsNotesCreateRequest {
	return ApiExtrasConfigContextsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasConfigContextsNotesCreateExecute(r ApiExtrasConfigContextsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasConfigContextsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasConfigContextsNotesListRequest) Limit(limit int32) ApiExtrasConfigContextsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasConfigContextsNotesListRequest) Offset(offset int32) ApiExtrasConfigContextsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasConfigContextsNotesListRequest) Depth(depth int32) ApiExtrasConfigContextsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasConfigContextsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsNotesListExecute(r)
}

/*
ExtrasConfigContextsNotesList Method for ExtrasConfigContextsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsNotesList(ctx context.Context, id string) ApiExtrasConfigContextsNotesListRequest {
	return ApiExtrasConfigContextsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasConfigContextsNotesListExecute(r ApiExtrasConfigContextsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedConfigContextRequest *PatchedConfigContextRequest
}

func (r ApiExtrasConfigContextsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextsPartialUpdateRequest) PatchedConfigContextRequest(patchedConfigContextRequest PatchedConfigContextRequest) ApiExtrasConfigContextsPartialUpdateRequest {
	r.patchedConfigContextRequest = &patchedConfigContextRequest
	return r
}

func (r ApiExtrasConfigContextsPartialUpdateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsPartialUpdateExecute(r)
}

/*
ExtrasConfigContextsPartialUpdate Method for ExtrasConfigContextsPartialUpdate

Partial update a config context object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsPartialUpdate(ctx context.Context, id string) ApiExtrasConfigContextsPartialUpdateRequest {
	return ApiExtrasConfigContextsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsPartialUpdateExecute(r ApiExtrasConfigContextsPartialUpdateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasConfigContextsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasConfigContextsRetrieveRequest) Depth(depth int32) ApiExtrasConfigContextsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasConfigContextsRetrieveRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsRetrieveExecute(r)
}

/*
ExtrasConfigContextsRetrieve Method for ExtrasConfigContextsRetrieve

Retrieve a config context object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsRetrieve(ctx context.Context, id string) ApiExtrasConfigContextsRetrieveRequest {
	return ApiExtrasConfigContextsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsRetrieveExecute(r ApiExtrasConfigContextsRetrieveRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	configContextRequest *ConfigContextRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasConfigContextsUpdateRequest) ConfigContextRequest(configContextRequest ConfigContextRequest) ApiExtrasConfigContextsUpdateRequest {
	r.configContextRequest = &configContextRequest
	return r
}

func (r ApiExtrasConfigContextsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasConfigContextsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigContextsUpdateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsUpdateExecute(r)
}

/*
ExtrasConfigContextsUpdate Method for ExtrasConfigContextsUpdate

Update a config context object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsUpdate(ctx context.Context, id string) ApiExtrasConfigContextsUpdateRequest {
	return ApiExtrasConfigContextsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsUpdateExecute(r ApiExtrasConfigContextsUpdateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextRequest == nil {
		return localVarReturnValue, nil, reportError("configContextRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactAssociationsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasContactAssociationsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasContactAssociationsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactAssociationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsBulkDestroyExecute(r)
}

/*
ExtrasContactAssociationsBulkDestroy Method for ExtrasContactAssociationsBulkDestroy

Destroy a list of contact association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactAssociationsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsBulkDestroy(ctx context.Context) ApiExtrasContactAssociationsBulkDestroyRequest {
	return ApiExtrasContactAssociationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasContactAssociationsBulkDestroyExecute(r ApiExtrasContactAssociationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableContactAssociationRequest *[]PatchedBulkWritableContactAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactAssociationsBulkPartialUpdateRequest) PatchedBulkWritableContactAssociationRequest(patchedBulkWritableContactAssociationRequest []PatchedBulkWritableContactAssociationRequest) ApiExtrasContactAssociationsBulkPartialUpdateRequest {
	r.patchedBulkWritableContactAssociationRequest = &patchedBulkWritableContactAssociationRequest
	return r
}

func (r ApiExtrasContactAssociationsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactAssociationsBulkPartialUpdateRequest) Execute() ([]ContactAssociation, *http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsBulkPartialUpdateExecute(r)
}

/*
ExtrasContactAssociationsBulkPartialUpdate Method for ExtrasContactAssociationsBulkPartialUpdate

Partial update a list of contact association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactAssociationsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsBulkPartialUpdate(ctx context.Context) ApiExtrasContactAssociationsBulkPartialUpdateRequest {
	return ApiExtrasContactAssociationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ContactAssociation
func (a *ExtrasAPIService) ExtrasContactAssociationsBulkPartialUpdateExecute(r ApiExtrasContactAssociationsBulkPartialUpdateRequest) ([]ContactAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ContactAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableContactAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableContactAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableContactAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableContactAssociationRequest *[]BulkWritableContactAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactAssociationsBulkUpdateRequest) BulkWritableContactAssociationRequest(bulkWritableContactAssociationRequest []BulkWritableContactAssociationRequest) ApiExtrasContactAssociationsBulkUpdateRequest {
	r.bulkWritableContactAssociationRequest = &bulkWritableContactAssociationRequest
	return r
}

func (r ApiExtrasContactAssociationsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactAssociationsBulkUpdateRequest) Execute() ([]ContactAssociation, *http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsBulkUpdateExecute(r)
}

/*
ExtrasContactAssociationsBulkUpdate Method for ExtrasContactAssociationsBulkUpdate

Update a list of contact association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactAssociationsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsBulkUpdate(ctx context.Context) ApiExtrasContactAssociationsBulkUpdateRequest {
	return ApiExtrasContactAssociationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ContactAssociation
func (a *ExtrasAPIService) ExtrasContactAssociationsBulkUpdateExecute(r ApiExtrasContactAssociationsBulkUpdateRequest) ([]ContactAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ContactAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableContactAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableContactAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableContactAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contactAssociationRequest *ContactAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactAssociationsCreateRequest) ContactAssociationRequest(contactAssociationRequest ContactAssociationRequest) ApiExtrasContactAssociationsCreateRequest {
	r.contactAssociationRequest = &contactAssociationRequest
	return r
}

func (r ApiExtrasContactAssociationsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactAssociationsCreateRequest) Execute() (*ContactAssociation, *http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsCreateExecute(r)
}

/*
ExtrasContactAssociationsCreate Method for ExtrasContactAssociationsCreate

Create one or more contact association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactAssociationsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsCreate(ctx context.Context) ApiExtrasContactAssociationsCreateRequest {
	return ApiExtrasContactAssociationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ContactAssociation
func (a *ExtrasAPIService) ExtrasContactAssociationsCreateExecute(r ApiExtrasContactAssociationsCreateRequest) (*ContactAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("contactAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contactAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactAssociationsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactAssociationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsDestroyExecute(r)
}

/*
ExtrasContactAssociationsDestroy Method for ExtrasContactAssociationsDestroy

Destroy a contact association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact association.
 @return ApiExtrasContactAssociationsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsDestroy(ctx context.Context, id string) ApiExtrasContactAssociationsDestroyRequest {
	return ApiExtrasContactAssociationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasContactAssociationsDestroyExecute(r ApiExtrasContactAssociationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	associatedObjectId *[]string
	associatedObjectIdIc *[]string
	associatedObjectIdIe *[]string
	associatedObjectIdIew *[]string
	associatedObjectIdIre *[]string
	associatedObjectIdIsw *[]string
	associatedObjectIdN *[]string
	associatedObjectIdNic *[]string
	associatedObjectIdNie *[]string
	associatedObjectIdNiew *[]string
	associatedObjectIdNire *[]string
	associatedObjectIdNisw *[]string
	associatedObjectIdNre *[]string
	associatedObjectIdRe *[]string
	associatedObjectType *string
	associatedObjectTypeIsnull *bool
	associatedObjectTypeN *string
	contact *[]string
	contactIsnull *bool
	contactN *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	offset *int32
	q *string
	role *[]string
	roleN *string
	sort *string
	status *[]string
	statusN *string
	team *[]string
	teamIsnull *bool
	teamN *[]string
	depth *int32
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectId(associatedObjectId []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectId = &associatedObjectId
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdIc(associatedObjectIdIc []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdIc = &associatedObjectIdIc
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdIe(associatedObjectIdIe []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdIe = &associatedObjectIdIe
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdIew(associatedObjectIdIew []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdIew = &associatedObjectIdIew
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdIre(associatedObjectIdIre []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdIre = &associatedObjectIdIre
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdIsw(associatedObjectIdIsw []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdIsw = &associatedObjectIdIsw
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdN(associatedObjectIdN []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdN = &associatedObjectIdN
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdNic(associatedObjectIdNic []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdNic = &associatedObjectIdNic
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdNie(associatedObjectIdNie []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdNie = &associatedObjectIdNie
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdNiew(associatedObjectIdNiew []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdNiew = &associatedObjectIdNiew
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdNire(associatedObjectIdNire []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdNire = &associatedObjectIdNire
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdNisw(associatedObjectIdNisw []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdNisw = &associatedObjectIdNisw
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdNre(associatedObjectIdNre []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdNre = &associatedObjectIdNre
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectIdRe(associatedObjectIdRe []string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectIdRe = &associatedObjectIdRe
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectType(associatedObjectType string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectType = &associatedObjectType
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectTypeIsnull(associatedObjectTypeIsnull bool) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectTypeIsnull = &associatedObjectTypeIsnull
	return r
}

func (r ApiExtrasContactAssociationsListRequest) AssociatedObjectTypeN(associatedObjectTypeN string) ApiExtrasContactAssociationsListRequest {
	r.associatedObjectTypeN = &associatedObjectTypeN
	return r
}

func (r ApiExtrasContactAssociationsListRequest) Contact(contact []string) ApiExtrasContactAssociationsListRequest {
	r.contact = &contact
	return r
}

// Contact (name or ID) is null
func (r ApiExtrasContactAssociationsListRequest) ContactIsnull(contactIsnull bool) ApiExtrasContactAssociationsListRequest {
	r.contactIsnull = &contactIsnull
	return r
}

func (r ApiExtrasContactAssociationsListRequest) ContactN(contactN []string) ApiExtrasContactAssociationsListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiExtrasContactAssociationsListRequest) Created(created []time.Time) ApiExtrasContactAssociationsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasContactAssociationsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasContactAssociationsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasContactAssociationsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasContactAssociationsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasContactAssociationsListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasContactAssociationsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasContactAssociationsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasContactAssociationsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasContactAssociationsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasContactAssociationsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasContactAssociationsListRequest) CreatedN(createdN []time.Time) ApiExtrasContactAssociationsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasContactAssociationsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasContactAssociationsListRequest) Id(id []string) ApiExtrasContactAssociationsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdIc(idIc []string) ApiExtrasContactAssociationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdIe(idIe []string) ApiExtrasContactAssociationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdIew(idIew []string) ApiExtrasContactAssociationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdIre(idIre []string) ApiExtrasContactAssociationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdIsw(idIsw []string) ApiExtrasContactAssociationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdN(idN []string) ApiExtrasContactAssociationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdNic(idNic []string) ApiExtrasContactAssociationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdNie(idNie []string) ApiExtrasContactAssociationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdNiew(idNiew []string) ApiExtrasContactAssociationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdNire(idNire []string) ApiExtrasContactAssociationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdNisw(idNisw []string) ApiExtrasContactAssociationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdNre(idNre []string) ApiExtrasContactAssociationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasContactAssociationsListRequest) IdRe(idRe []string) ApiExtrasContactAssociationsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasContactAssociationsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasContactAssociationsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasContactAssociationsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasContactAssociationsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasContactAssociationsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasContactAssociationsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasContactAssociationsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasContactAssociationsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasContactAssociationsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasContactAssociationsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasContactAssociationsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasContactAssociationsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasContactAssociationsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasContactAssociationsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasContactAssociationsListRequest) Limit(limit int32) ApiExtrasContactAssociationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasContactAssociationsListRequest) Offset(offset int32) ApiExtrasContactAssociationsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasContactAssociationsListRequest) Q(q string) ApiExtrasContactAssociationsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasContactAssociationsListRequest) Role(role []string) ApiExtrasContactAssociationsListRequest {
	r.role = &role
	return r
}

// Exclude Role (name or ID)
func (r ApiExtrasContactAssociationsListRequest) RoleN(roleN string) ApiExtrasContactAssociationsListRequest {
	r.roleN = &roleN
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasContactAssociationsListRequest) Sort(sort string) ApiExtrasContactAssociationsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasContactAssociationsListRequest) Status(status []string) ApiExtrasContactAssociationsListRequest {
	r.status = &status
	return r
}

// Exclude Status (name or ID)
func (r ApiExtrasContactAssociationsListRequest) StatusN(statusN string) ApiExtrasContactAssociationsListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiExtrasContactAssociationsListRequest) Team(team []string) ApiExtrasContactAssociationsListRequest {
	r.team = &team
	return r
}

// Team (name or ID) is null
func (r ApiExtrasContactAssociationsListRequest) TeamIsnull(teamIsnull bool) ApiExtrasContactAssociationsListRequest {
	r.teamIsnull = &teamIsnull
	return r
}

func (r ApiExtrasContactAssociationsListRequest) TeamN(teamN []string) ApiExtrasContactAssociationsListRequest {
	r.teamN = &teamN
	return r
}

// Serializer Depth
func (r ApiExtrasContactAssociationsListRequest) Depth(depth int32) ApiExtrasContactAssociationsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasContactAssociationsListRequest) Execute() (*PaginatedContactAssociationList, *http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsListExecute(r)
}

/*
ExtrasContactAssociationsList Method for ExtrasContactAssociationsList

Retrieve a list of contact association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactAssociationsListRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsList(ctx context.Context) ApiExtrasContactAssociationsListRequest {
	return ApiExtrasContactAssociationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedContactAssociationList
func (a *ExtrasAPIService) ExtrasContactAssociationsListExecute(r ApiExtrasContactAssociationsListRequest) (*PaginatedContactAssociationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedContactAssociationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.associatedObjectId != nil {
		t := *r.associatedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIc != nil {
		t := *r.associatedObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ic", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIe != nil {
		t := *r.associatedObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ie", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIew != nil {
		t := *r.associatedObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__iew", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIre != nil {
		t := *r.associatedObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ire", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIsw != nil {
		t := *r.associatedObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__isw", t, "form", "multi")
		}
	}
	if r.associatedObjectIdN != nil {
		t := *r.associatedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__n", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNic != nil {
		t := *r.associatedObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nic", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNie != nil {
		t := *r.associatedObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nie", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNiew != nil {
		t := *r.associatedObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__niew", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNire != nil {
		t := *r.associatedObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nire", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNisw != nil {
		t := *r.associatedObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nisw", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNre != nil {
		t := *r.associatedObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nre", t, "form", "multi")
		}
	}
	if r.associatedObjectIdRe != nil {
		t := *r.associatedObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__re", t, "form", "multi")
		}
	}
	if r.associatedObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_type", r.associatedObjectType, "form", "")
	}
	if r.associatedObjectTypeIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_type__isnull", r.associatedObjectTypeIsnull, "form", "")
	}
	if r.associatedObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_type__n", r.associatedObjectTypeN, "form", "")
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "form", "multi")
		}
	}
	if r.contactIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contact__isnull", r.contactIsnull, "form", "")
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "form", "multi")
		}
	}
	if r.roleN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", r.roleN, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "form", "multi")
		}
	}
	if r.statusN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", r.statusN, "form", "")
	}
	if r.team != nil {
		t := *r.team
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "team", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "team", t, "form", "multi")
		}
	}
	if r.teamIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "team__isnull", r.teamIsnull, "form", "")
	}
	if r.teamN != nil {
		t := *r.teamN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "team__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "team__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactAssociationsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasContactAssociationsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasContactAssociationsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactAssociationsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsNotesCreateExecute(r)
}

/*
ExtrasContactAssociationsNotesCreate Method for ExtrasContactAssociationsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact association.
 @return ApiExtrasContactAssociationsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsNotesCreate(ctx context.Context, id string) ApiExtrasContactAssociationsNotesCreateRequest {
	return ApiExtrasContactAssociationsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasContactAssociationsNotesCreateExecute(r ApiExtrasContactAssociationsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasContactAssociationsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasContactAssociationsNotesListRequest) Limit(limit int32) ApiExtrasContactAssociationsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasContactAssociationsNotesListRequest) Offset(offset int32) ApiExtrasContactAssociationsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasContactAssociationsNotesListRequest) Depth(depth int32) ApiExtrasContactAssociationsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasContactAssociationsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsNotesListExecute(r)
}

/*
ExtrasContactAssociationsNotesList Method for ExtrasContactAssociationsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact association.
 @return ApiExtrasContactAssociationsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsNotesList(ctx context.Context, id string) ApiExtrasContactAssociationsNotesListRequest {
	return ApiExtrasContactAssociationsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasContactAssociationsNotesListExecute(r ApiExtrasContactAssociationsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedContactAssociationRequest *PatchedContactAssociationRequest
}

func (r ApiExtrasContactAssociationsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactAssociationsPartialUpdateRequest) PatchedContactAssociationRequest(patchedContactAssociationRequest PatchedContactAssociationRequest) ApiExtrasContactAssociationsPartialUpdateRequest {
	r.patchedContactAssociationRequest = &patchedContactAssociationRequest
	return r
}

func (r ApiExtrasContactAssociationsPartialUpdateRequest) Execute() (*ContactAssociation, *http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsPartialUpdateExecute(r)
}

/*
ExtrasContactAssociationsPartialUpdate Method for ExtrasContactAssociationsPartialUpdate

Partial update a contact association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact association.
 @return ApiExtrasContactAssociationsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsPartialUpdate(ctx context.Context, id string) ApiExtrasContactAssociationsPartialUpdateRequest {
	return ApiExtrasContactAssociationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactAssociation
func (a *ExtrasAPIService) ExtrasContactAssociationsPartialUpdateExecute(r ApiExtrasContactAssociationsPartialUpdateRequest) (*ContactAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedContactAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasContactAssociationsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasContactAssociationsRetrieveRequest) Depth(depth int32) ApiExtrasContactAssociationsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasContactAssociationsRetrieveRequest) Execute() (*ContactAssociation, *http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsRetrieveExecute(r)
}

/*
ExtrasContactAssociationsRetrieve Method for ExtrasContactAssociationsRetrieve

Retrieve a contact association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact association.
 @return ApiExtrasContactAssociationsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsRetrieve(ctx context.Context, id string) ApiExtrasContactAssociationsRetrieveRequest {
	return ApiExtrasContactAssociationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactAssociation
func (a *ExtrasAPIService) ExtrasContactAssociationsRetrieveExecute(r ApiExtrasContactAssociationsRetrieveRequest) (*ContactAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactAssociationsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	contactAssociationRequest *ContactAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactAssociationsUpdateRequest) ContactAssociationRequest(contactAssociationRequest ContactAssociationRequest) ApiExtrasContactAssociationsUpdateRequest {
	r.contactAssociationRequest = &contactAssociationRequest
	return r
}

func (r ApiExtrasContactAssociationsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactAssociationsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactAssociationsUpdateRequest) Execute() (*ContactAssociation, *http.Response, error) {
	return r.ApiService.ExtrasContactAssociationsUpdateExecute(r)
}

/*
ExtrasContactAssociationsUpdate Method for ExtrasContactAssociationsUpdate

Update a contact association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact association.
 @return ApiExtrasContactAssociationsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasContactAssociationsUpdate(ctx context.Context, id string) ApiExtrasContactAssociationsUpdateRequest {
	return ApiExtrasContactAssociationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactAssociation
func (a *ExtrasAPIService) ExtrasContactAssociationsUpdateExecute(r ApiExtrasContactAssociationsUpdateRequest) (*ContactAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactAssociationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contact-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("contactAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contactAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasContactsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasContactsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasContactsBulkDestroyExecute(r)
}

/*
ExtrasContactsBulkDestroy Method for ExtrasContactsBulkDestroy

Destroy a list of contact objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasContactsBulkDestroy(ctx context.Context) ApiExtrasContactsBulkDestroyRequest {
	return ApiExtrasContactsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasContactsBulkDestroyExecute(r ApiExtrasContactsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasContactsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableContactRequest *[]PatchedBulkWritableContactRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactsBulkPartialUpdateRequest) PatchedBulkWritableContactRequest(patchedBulkWritableContactRequest []PatchedBulkWritableContactRequest) ApiExtrasContactsBulkPartialUpdateRequest {
	r.patchedBulkWritableContactRequest = &patchedBulkWritableContactRequest
	return r
}

func (r ApiExtrasContactsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactsBulkPartialUpdateRequest) Execute() ([]Contact, *http.Response, error) {
	return r.ApiService.ExtrasContactsBulkPartialUpdateExecute(r)
}

/*
ExtrasContactsBulkPartialUpdate Method for ExtrasContactsBulkPartialUpdate

Partial update a list of contact objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasContactsBulkPartialUpdate(ctx context.Context) ApiExtrasContactsBulkPartialUpdateRequest {
	return ApiExtrasContactsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Contact
func (a *ExtrasAPIService) ExtrasContactsBulkPartialUpdateExecute(r ApiExtrasContactsBulkPartialUpdateRequest) ([]Contact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Contact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableContactRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableContactRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableContactRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableContactRequest *[]BulkWritableContactRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactsBulkUpdateRequest) BulkWritableContactRequest(bulkWritableContactRequest []BulkWritableContactRequest) ApiExtrasContactsBulkUpdateRequest {
	r.bulkWritableContactRequest = &bulkWritableContactRequest
	return r
}

func (r ApiExtrasContactsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactsBulkUpdateRequest) Execute() ([]Contact, *http.Response, error) {
	return r.ApiService.ExtrasContactsBulkUpdateExecute(r)
}

/*
ExtrasContactsBulkUpdate Method for ExtrasContactsBulkUpdate

Update a list of contact objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasContactsBulkUpdate(ctx context.Context) ApiExtrasContactsBulkUpdateRequest {
	return ApiExtrasContactsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Contact
func (a *ExtrasAPIService) ExtrasContactsBulkUpdateExecute(r ApiExtrasContactsBulkUpdateRequest) ([]Contact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Contact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableContactRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableContactRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableContactRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contactRequest *ContactRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactsCreateRequest) ContactRequest(contactRequest ContactRequest) ApiExtrasContactsCreateRequest {
	r.contactRequest = &contactRequest
	return r
}

func (r ApiExtrasContactsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactsCreateRequest) Execute() (*Contact, *http.Response, error) {
	return r.ApiService.ExtrasContactsCreateExecute(r)
}

/*
ExtrasContactsCreate Method for ExtrasContactsCreate

Create one or more contact objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasContactsCreate(ctx context.Context) ApiExtrasContactsCreateRequest {
	return ApiExtrasContactsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Contact
func (a *ExtrasAPIService) ExtrasContactsCreateExecute(r ApiExtrasContactsCreateRequest) (*Contact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Contact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactRequest == nil {
		return localVarReturnValue, nil, reportError("contactRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contactRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasContactsDestroyExecute(r)
}

/*
ExtrasContactsDestroy Method for ExtrasContactsDestroy

Destroy a contact object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact.
 @return ApiExtrasContactsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasContactsDestroy(ctx context.Context, id string) ApiExtrasContactsDestroyRequest {
	return ApiExtrasContactsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasContactsDestroyExecute(r ApiExtrasContactsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasContactsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	address *[]string
	addressIc *[]string
	addressIe *[]string
	addressIew *[]string
	addressIre *[]string
	addressIsw *[]string
	addressN *[]string
	addressNic *[]string
	addressNie *[]string
	addressNiew *[]string
	addressNire *[]string
	addressNisw *[]string
	addressNre *[]string
	addressRe *[]string
	comments *[]string
	commentsIc *[]string
	commentsIe *[]string
	commentsIew *[]string
	commentsIre *[]string
	commentsIsw *[]string
	commentsN *[]string
	commentsNic *[]string
	commentsNie *[]string
	commentsNiew *[]string
	commentsNire *[]string
	commentsNisw *[]string
	commentsNre *[]string
	commentsRe *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroups *[]string
	dynamicGroupsN *string
	email *[]string
	emailIc *[]string
	emailIe *[]string
	emailIew *[]string
	emailIre *[]string
	emailIsw *[]string
	emailN *[]string
	emailNic *[]string
	emailNie *[]string
	emailNiew *[]string
	emailNire *[]string
	emailNisw *[]string
	emailNre *[]string
	emailRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	phone *[]string
	phoneIc *[]string
	phoneIe *[]string
	phoneIew *[]string
	phoneIre *[]string
	phoneIsw *[]string
	phoneN *[]string
	phoneNic *[]string
	phoneNie *[]string
	phoneNiew *[]string
	phoneNire *[]string
	phoneNisw *[]string
	phoneNre *[]string
	phoneRe *[]string
	q *string
	similarToLocationData *[]string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	depth *int32
}

func (r ApiExtrasContactsListRequest) Address(address []string) ApiExtrasContactsListRequest {
	r.address = &address
	return r
}

func (r ApiExtrasContactsListRequest) AddressIc(addressIc []string) ApiExtrasContactsListRequest {
	r.addressIc = &addressIc
	return r
}

func (r ApiExtrasContactsListRequest) AddressIe(addressIe []string) ApiExtrasContactsListRequest {
	r.addressIe = &addressIe
	return r
}

func (r ApiExtrasContactsListRequest) AddressIew(addressIew []string) ApiExtrasContactsListRequest {
	r.addressIew = &addressIew
	return r
}

func (r ApiExtrasContactsListRequest) AddressIre(addressIre []string) ApiExtrasContactsListRequest {
	r.addressIre = &addressIre
	return r
}

func (r ApiExtrasContactsListRequest) AddressIsw(addressIsw []string) ApiExtrasContactsListRequest {
	r.addressIsw = &addressIsw
	return r
}

func (r ApiExtrasContactsListRequest) AddressN(addressN []string) ApiExtrasContactsListRequest {
	r.addressN = &addressN
	return r
}

func (r ApiExtrasContactsListRequest) AddressNic(addressNic []string) ApiExtrasContactsListRequest {
	r.addressNic = &addressNic
	return r
}

func (r ApiExtrasContactsListRequest) AddressNie(addressNie []string) ApiExtrasContactsListRequest {
	r.addressNie = &addressNie
	return r
}

func (r ApiExtrasContactsListRequest) AddressNiew(addressNiew []string) ApiExtrasContactsListRequest {
	r.addressNiew = &addressNiew
	return r
}

func (r ApiExtrasContactsListRequest) AddressNire(addressNire []string) ApiExtrasContactsListRequest {
	r.addressNire = &addressNire
	return r
}

func (r ApiExtrasContactsListRequest) AddressNisw(addressNisw []string) ApiExtrasContactsListRequest {
	r.addressNisw = &addressNisw
	return r
}

func (r ApiExtrasContactsListRequest) AddressNre(addressNre []string) ApiExtrasContactsListRequest {
	r.addressNre = &addressNre
	return r
}

func (r ApiExtrasContactsListRequest) AddressRe(addressRe []string) ApiExtrasContactsListRequest {
	r.addressRe = &addressRe
	return r
}

func (r ApiExtrasContactsListRequest) Comments(comments []string) ApiExtrasContactsListRequest {
	r.comments = &comments
	return r
}

func (r ApiExtrasContactsListRequest) CommentsIc(commentsIc []string) ApiExtrasContactsListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiExtrasContactsListRequest) CommentsIe(commentsIe []string) ApiExtrasContactsListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiExtrasContactsListRequest) CommentsIew(commentsIew []string) ApiExtrasContactsListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiExtrasContactsListRequest) CommentsIre(commentsIre []string) ApiExtrasContactsListRequest {
	r.commentsIre = &commentsIre
	return r
}

func (r ApiExtrasContactsListRequest) CommentsIsw(commentsIsw []string) ApiExtrasContactsListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiExtrasContactsListRequest) CommentsN(commentsN []string) ApiExtrasContactsListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiExtrasContactsListRequest) CommentsNic(commentsNic []string) ApiExtrasContactsListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiExtrasContactsListRequest) CommentsNie(commentsNie []string) ApiExtrasContactsListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiExtrasContactsListRequest) CommentsNiew(commentsNiew []string) ApiExtrasContactsListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiExtrasContactsListRequest) CommentsNire(commentsNire []string) ApiExtrasContactsListRequest {
	r.commentsNire = &commentsNire
	return r
}

func (r ApiExtrasContactsListRequest) CommentsNisw(commentsNisw []string) ApiExtrasContactsListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiExtrasContactsListRequest) CommentsNre(commentsNre []string) ApiExtrasContactsListRequest {
	r.commentsNre = &commentsNre
	return r
}

func (r ApiExtrasContactsListRequest) CommentsRe(commentsRe []string) ApiExtrasContactsListRequest {
	r.commentsRe = &commentsRe
	return r
}

func (r ApiExtrasContactsListRequest) Created(created []time.Time) ApiExtrasContactsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasContactsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasContactsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasContactsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasContactsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasContactsListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasContactsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasContactsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasContactsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasContactsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasContactsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasContactsListRequest) CreatedN(createdN []time.Time) ApiExtrasContactsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasContactsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasContactsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasContactsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasContactsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasContactsListRequest) Email(email []string) ApiExtrasContactsListRequest {
	r.email = &email
	return r
}

func (r ApiExtrasContactsListRequest) EmailIc(emailIc []string) ApiExtrasContactsListRequest {
	r.emailIc = &emailIc
	return r
}

func (r ApiExtrasContactsListRequest) EmailIe(emailIe []string) ApiExtrasContactsListRequest {
	r.emailIe = &emailIe
	return r
}

func (r ApiExtrasContactsListRequest) EmailIew(emailIew []string) ApiExtrasContactsListRequest {
	r.emailIew = &emailIew
	return r
}

func (r ApiExtrasContactsListRequest) EmailIre(emailIre []string) ApiExtrasContactsListRequest {
	r.emailIre = &emailIre
	return r
}

func (r ApiExtrasContactsListRequest) EmailIsw(emailIsw []string) ApiExtrasContactsListRequest {
	r.emailIsw = &emailIsw
	return r
}

func (r ApiExtrasContactsListRequest) EmailN(emailN []string) ApiExtrasContactsListRequest {
	r.emailN = &emailN
	return r
}

func (r ApiExtrasContactsListRequest) EmailNic(emailNic []string) ApiExtrasContactsListRequest {
	r.emailNic = &emailNic
	return r
}

func (r ApiExtrasContactsListRequest) EmailNie(emailNie []string) ApiExtrasContactsListRequest {
	r.emailNie = &emailNie
	return r
}

func (r ApiExtrasContactsListRequest) EmailNiew(emailNiew []string) ApiExtrasContactsListRequest {
	r.emailNiew = &emailNiew
	return r
}

func (r ApiExtrasContactsListRequest) EmailNire(emailNire []string) ApiExtrasContactsListRequest {
	r.emailNire = &emailNire
	return r
}

func (r ApiExtrasContactsListRequest) EmailNisw(emailNisw []string) ApiExtrasContactsListRequest {
	r.emailNisw = &emailNisw
	return r
}

func (r ApiExtrasContactsListRequest) EmailNre(emailNre []string) ApiExtrasContactsListRequest {
	r.emailNre = &emailNre
	return r
}

func (r ApiExtrasContactsListRequest) EmailRe(emailRe []string) ApiExtrasContactsListRequest {
	r.emailRe = &emailRe
	return r
}

func (r ApiExtrasContactsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasContactsListRequest) Id(id []string) ApiExtrasContactsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasContactsListRequest) IdIc(idIc []string) ApiExtrasContactsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasContactsListRequest) IdIe(idIe []string) ApiExtrasContactsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasContactsListRequest) IdIew(idIew []string) ApiExtrasContactsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasContactsListRequest) IdIre(idIre []string) ApiExtrasContactsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasContactsListRequest) IdIsw(idIsw []string) ApiExtrasContactsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasContactsListRequest) IdN(idN []string) ApiExtrasContactsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasContactsListRequest) IdNic(idNic []string) ApiExtrasContactsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasContactsListRequest) IdNie(idNie []string) ApiExtrasContactsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasContactsListRequest) IdNiew(idNiew []string) ApiExtrasContactsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasContactsListRequest) IdNire(idNire []string) ApiExtrasContactsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasContactsListRequest) IdNisw(idNisw []string) ApiExtrasContactsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasContactsListRequest) IdNre(idNre []string) ApiExtrasContactsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasContactsListRequest) IdRe(idRe []string) ApiExtrasContactsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasContactsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasContactsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasContactsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasContactsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasContactsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasContactsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasContactsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasContactsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasContactsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasContactsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasContactsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasContactsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasContactsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasContactsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasContactsListRequest) Limit(limit int32) ApiExtrasContactsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasContactsListRequest) Name(name []string) ApiExtrasContactsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasContactsListRequest) NameIc(nameIc []string) ApiExtrasContactsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasContactsListRequest) NameIe(nameIe []string) ApiExtrasContactsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasContactsListRequest) NameIew(nameIew []string) ApiExtrasContactsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasContactsListRequest) NameIre(nameIre []string) ApiExtrasContactsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasContactsListRequest) NameIsw(nameIsw []string) ApiExtrasContactsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasContactsListRequest) NameN(nameN []string) ApiExtrasContactsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasContactsListRequest) NameNic(nameNic []string) ApiExtrasContactsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasContactsListRequest) NameNie(nameNie []string) ApiExtrasContactsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasContactsListRequest) NameNiew(nameNiew []string) ApiExtrasContactsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasContactsListRequest) NameNire(nameNire []string) ApiExtrasContactsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasContactsListRequest) NameNisw(nameNisw []string) ApiExtrasContactsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasContactsListRequest) NameNre(nameNre []string) ApiExtrasContactsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasContactsListRequest) NameRe(nameRe []string) ApiExtrasContactsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasContactsListRequest) Offset(offset int32) ApiExtrasContactsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasContactsListRequest) Phone(phone []string) ApiExtrasContactsListRequest {
	r.phone = &phone
	return r
}

func (r ApiExtrasContactsListRequest) PhoneIc(phoneIc []string) ApiExtrasContactsListRequest {
	r.phoneIc = &phoneIc
	return r
}

func (r ApiExtrasContactsListRequest) PhoneIe(phoneIe []string) ApiExtrasContactsListRequest {
	r.phoneIe = &phoneIe
	return r
}

func (r ApiExtrasContactsListRequest) PhoneIew(phoneIew []string) ApiExtrasContactsListRequest {
	r.phoneIew = &phoneIew
	return r
}

func (r ApiExtrasContactsListRequest) PhoneIre(phoneIre []string) ApiExtrasContactsListRequest {
	r.phoneIre = &phoneIre
	return r
}

func (r ApiExtrasContactsListRequest) PhoneIsw(phoneIsw []string) ApiExtrasContactsListRequest {
	r.phoneIsw = &phoneIsw
	return r
}

func (r ApiExtrasContactsListRequest) PhoneN(phoneN []string) ApiExtrasContactsListRequest {
	r.phoneN = &phoneN
	return r
}

func (r ApiExtrasContactsListRequest) PhoneNic(phoneNic []string) ApiExtrasContactsListRequest {
	r.phoneNic = &phoneNic
	return r
}

func (r ApiExtrasContactsListRequest) PhoneNie(phoneNie []string) ApiExtrasContactsListRequest {
	r.phoneNie = &phoneNie
	return r
}

func (r ApiExtrasContactsListRequest) PhoneNiew(phoneNiew []string) ApiExtrasContactsListRequest {
	r.phoneNiew = &phoneNiew
	return r
}

func (r ApiExtrasContactsListRequest) PhoneNire(phoneNire []string) ApiExtrasContactsListRequest {
	r.phoneNire = &phoneNire
	return r
}

func (r ApiExtrasContactsListRequest) PhoneNisw(phoneNisw []string) ApiExtrasContactsListRequest {
	r.phoneNisw = &phoneNisw
	return r
}

func (r ApiExtrasContactsListRequest) PhoneNre(phoneNre []string) ApiExtrasContactsListRequest {
	r.phoneNre = &phoneNre
	return r
}

func (r ApiExtrasContactsListRequest) PhoneRe(phoneRe []string) ApiExtrasContactsListRequest {
	r.phoneRe = &phoneRe
	return r
}

// Search
func (r ApiExtrasContactsListRequest) Q(q string) ApiExtrasContactsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasContactsListRequest) SimilarToLocationData(similarToLocationData []string) ApiExtrasContactsListRequest {
	r.similarToLocationData = &similarToLocationData
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasContactsListRequest) Sort(sort string) ApiExtrasContactsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasContactsListRequest) Tags(tags []string) ApiExtrasContactsListRequest {
	r.tags = &tags
	return r
}

func (r ApiExtrasContactsListRequest) TagsIsnull(tagsIsnull bool) ApiExtrasContactsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiExtrasContactsListRequest) TagsN(tagsN []string) ApiExtrasContactsListRequest {
	r.tagsN = &tagsN
	return r
}

// Serializer Depth
func (r ApiExtrasContactsListRequest) Depth(depth int32) ApiExtrasContactsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasContactsListRequest) Execute() (*PaginatedContactList, *http.Response, error) {
	return r.ApiService.ExtrasContactsListExecute(r)
}

/*
ExtrasContactsList Method for ExtrasContactsList

Retrieve a list of contact objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContactsListRequest
*/
func (a *ExtrasAPIService) ExtrasContactsList(ctx context.Context) ApiExtrasContactsListRequest {
	return ApiExtrasContactsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedContactList
func (a *ExtrasAPIService) ExtrasContactsListExecute(r ApiExtrasContactsListRequest) (*PaginatedContactList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedContactList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.address != nil {
		t := *r.address
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address", t, "form", "multi")
		}
	}
	if r.addressIc != nil {
		t := *r.addressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__ic", t, "form", "multi")
		}
	}
	if r.addressIe != nil {
		t := *r.addressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__ie", t, "form", "multi")
		}
	}
	if r.addressIew != nil {
		t := *r.addressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__iew", t, "form", "multi")
		}
	}
	if r.addressIre != nil {
		t := *r.addressIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__ire", t, "form", "multi")
		}
	}
	if r.addressIsw != nil {
		t := *r.addressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__isw", t, "form", "multi")
		}
	}
	if r.addressN != nil {
		t := *r.addressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__n", t, "form", "multi")
		}
	}
	if r.addressNic != nil {
		t := *r.addressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nic", t, "form", "multi")
		}
	}
	if r.addressNie != nil {
		t := *r.addressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nie", t, "form", "multi")
		}
	}
	if r.addressNiew != nil {
		t := *r.addressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__niew", t, "form", "multi")
		}
	}
	if r.addressNire != nil {
		t := *r.addressNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nire", t, "form", "multi")
		}
	}
	if r.addressNisw != nil {
		t := *r.addressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nisw", t, "form", "multi")
		}
	}
	if r.addressNre != nil {
		t := *r.addressNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nre", t, "form", "multi")
		}
	}
	if r.addressRe != nil {
		t := *r.addressRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__re", t, "form", "multi")
		}
	}
	if r.comments != nil {
		t := *r.comments
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments", t, "form", "multi")
		}
	}
	if r.commentsIc != nil {
		t := *r.commentsIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", t, "form", "multi")
		}
	}
	if r.commentsIe != nil {
		t := *r.commentsIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", t, "form", "multi")
		}
	}
	if r.commentsIew != nil {
		t := *r.commentsIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", t, "form", "multi")
		}
	}
	if r.commentsIre != nil {
		t := *r.commentsIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", t, "form", "multi")
		}
	}
	if r.commentsIsw != nil {
		t := *r.commentsIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", t, "form", "multi")
		}
	}
	if r.commentsN != nil {
		t := *r.commentsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", t, "form", "multi")
		}
	}
	if r.commentsNic != nil {
		t := *r.commentsNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", t, "form", "multi")
		}
	}
	if r.commentsNie != nil {
		t := *r.commentsNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", t, "form", "multi")
		}
	}
	if r.commentsNiew != nil {
		t := *r.commentsNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", t, "form", "multi")
		}
	}
	if r.commentsNire != nil {
		t := *r.commentsNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", t, "form", "multi")
		}
	}
	if r.commentsNisw != nil {
		t := *r.commentsNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", t, "form", "multi")
		}
	}
	if r.commentsNre != nil {
		t := *r.commentsNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", t, "form", "multi")
		}
	}
	if r.commentsRe != nil {
		t := *r.commentsRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.email != nil {
		t := *r.email
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email", t, "form", "multi")
		}
	}
	if r.emailIc != nil {
		t := *r.emailIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__ic", t, "form", "multi")
		}
	}
	if r.emailIe != nil {
		t := *r.emailIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__ie", t, "form", "multi")
		}
	}
	if r.emailIew != nil {
		t := *r.emailIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__iew", t, "form", "multi")
		}
	}
	if r.emailIre != nil {
		t := *r.emailIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__ire", t, "form", "multi")
		}
	}
	if r.emailIsw != nil {
		t := *r.emailIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__isw", t, "form", "multi")
		}
	}
	if r.emailN != nil {
		t := *r.emailN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__n", t, "form", "multi")
		}
	}
	if r.emailNic != nil {
		t := *r.emailNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nic", t, "form", "multi")
		}
	}
	if r.emailNie != nil {
		t := *r.emailNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nie", t, "form", "multi")
		}
	}
	if r.emailNiew != nil {
		t := *r.emailNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__niew", t, "form", "multi")
		}
	}
	if r.emailNire != nil {
		t := *r.emailNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nire", t, "form", "multi")
		}
	}
	if r.emailNisw != nil {
		t := *r.emailNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nisw", t, "form", "multi")
		}
	}
	if r.emailNre != nil {
		t := *r.emailNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nre", t, "form", "multi")
		}
	}
	if r.emailRe != nil {
		t := *r.emailRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.phone != nil {
		t := *r.phone
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone", t, "form", "multi")
		}
	}
	if r.phoneIc != nil {
		t := *r.phoneIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ic", t, "form", "multi")
		}
	}
	if r.phoneIe != nil {
		t := *r.phoneIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ie", t, "form", "multi")
		}
	}
	if r.phoneIew != nil {
		t := *r.phoneIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__iew", t, "form", "multi")
		}
	}
	if r.phoneIre != nil {
		t := *r.phoneIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ire", t, "form", "multi")
		}
	}
	if r.phoneIsw != nil {
		t := *r.phoneIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__isw", t, "form", "multi")
		}
	}
	if r.phoneN != nil {
		t := *r.phoneN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__n", t, "form", "multi")
		}
	}
	if r.phoneNic != nil {
		t := *r.phoneNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nic", t, "form", "multi")
		}
	}
	if r.phoneNie != nil {
		t := *r.phoneNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nie", t, "form", "multi")
		}
	}
	if r.phoneNiew != nil {
		t := *r.phoneNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__niew", t, "form", "multi")
		}
	}
	if r.phoneNire != nil {
		t := *r.phoneNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nire", t, "form", "multi")
		}
	}
	if r.phoneNisw != nil {
		t := *r.phoneNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nisw", t, "form", "multi")
		}
	}
	if r.phoneNre != nil {
		t := *r.phoneNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nre", t, "form", "multi")
		}
	}
	if r.phoneRe != nil {
		t := *r.phoneRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__re", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.similarToLocationData != nil {
		t := *r.similarToLocationData
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "similar_to_location_data", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "similar_to_location_data", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasContactsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasContactsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasContactsNotesCreateExecute(r)
}

/*
ExtrasContactsNotesCreate Method for ExtrasContactsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact.
 @return ApiExtrasContactsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasContactsNotesCreate(ctx context.Context, id string) ApiExtrasContactsNotesCreateRequest {
	return ApiExtrasContactsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasContactsNotesCreateExecute(r ApiExtrasContactsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasContactsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasContactsNotesListRequest) Limit(limit int32) ApiExtrasContactsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasContactsNotesListRequest) Offset(offset int32) ApiExtrasContactsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasContactsNotesListRequest) Depth(depth int32) ApiExtrasContactsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasContactsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasContactsNotesListExecute(r)
}

/*
ExtrasContactsNotesList Method for ExtrasContactsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact.
 @return ApiExtrasContactsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasContactsNotesList(ctx context.Context, id string) ApiExtrasContactsNotesListRequest {
	return ApiExtrasContactsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasContactsNotesListExecute(r ApiExtrasContactsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedContactRequest *PatchedContactRequest
}

func (r ApiExtrasContactsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactsPartialUpdateRequest) PatchedContactRequest(patchedContactRequest PatchedContactRequest) ApiExtrasContactsPartialUpdateRequest {
	r.patchedContactRequest = &patchedContactRequest
	return r
}

func (r ApiExtrasContactsPartialUpdateRequest) Execute() (*Contact, *http.Response, error) {
	return r.ApiService.ExtrasContactsPartialUpdateExecute(r)
}

/*
ExtrasContactsPartialUpdate Method for ExtrasContactsPartialUpdate

Partial update a contact object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact.
 @return ApiExtrasContactsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasContactsPartialUpdate(ctx context.Context, id string) ApiExtrasContactsPartialUpdateRequest {
	return ApiExtrasContactsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Contact
func (a *ExtrasAPIService) ExtrasContactsPartialUpdateExecute(r ApiExtrasContactsPartialUpdateRequest) (*Contact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Contact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedContactRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasContactsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasContactsRetrieveRequest) Depth(depth int32) ApiExtrasContactsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasContactsRetrieveRequest) Execute() (*Contact, *http.Response, error) {
	return r.ApiService.ExtrasContactsRetrieveExecute(r)
}

/*
ExtrasContactsRetrieve Method for ExtrasContactsRetrieve

Retrieve a contact object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact.
 @return ApiExtrasContactsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasContactsRetrieve(ctx context.Context, id string) ApiExtrasContactsRetrieveRequest {
	return ApiExtrasContactsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Contact
func (a *ExtrasAPIService) ExtrasContactsRetrieveExecute(r ApiExtrasContactsRetrieveRequest) (*Contact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Contact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContactsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	contactRequest *ContactRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasContactsUpdateRequest) ContactRequest(contactRequest ContactRequest) ApiExtrasContactsUpdateRequest {
	r.contactRequest = &contactRequest
	return r
}

func (r ApiExtrasContactsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContactsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasContactsUpdateRequest) Execute() (*Contact, *http.Response, error) {
	return r.ApiService.ExtrasContactsUpdateExecute(r)
}

/*
ExtrasContactsUpdate Method for ExtrasContactsUpdate

Update a contact object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this contact.
 @return ApiExtrasContactsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasContactsUpdate(ctx context.Context, id string) ApiExtrasContactsUpdateRequest {
	return ApiExtrasContactsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Contact
func (a *ExtrasAPIService) ExtrasContactsUpdateExecute(r ApiExtrasContactsUpdateRequest) (*Contact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Contact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContactsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/contacts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactRequest == nil {
		return localVarReturnValue, nil, reportError("contactRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contactRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContentTypesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	appLabel *[]string
	appLabelIc *[]string
	appLabelIe *[]string
	appLabelIew *[]string
	appLabelIre *[]string
	appLabelIsw *[]string
	appLabelN *[]string
	appLabelNic *[]string
	appLabelNie *[]string
	appLabelNiew *[]string
	appLabelNire *[]string
	appLabelNisw *[]string
	appLabelNre *[]string
	appLabelRe *[]string
	canAdd *bool
	canChange *bool
	canDelete *bool
	canView *bool
	feature *string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasSerializer *bool
	id *[]int32
	idGt *[]int32
	idGte *[]int32
	idLt *[]int32
	idLte *[]int32
	idN *[]int32
	limit *int32
	model *[]string
	modelIc *[]string
	modelIe *[]string
	modelIew *[]string
	modelIre *[]string
	modelIsw *[]string
	modelN *[]string
	modelNic *[]string
	modelNie *[]string
	modelNiew *[]string
	modelNire *[]string
	modelNisw *[]string
	modelNre *[]string
	modelRe *[]string
	offset *int32
	q *string
	sort *string
	depth *int32
}

func (r ApiExtrasContentTypesListRequest) AppLabel(appLabel []string) ApiExtrasContentTypesListRequest {
	r.appLabel = &appLabel
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelIc(appLabelIc []string) ApiExtrasContentTypesListRequest {
	r.appLabelIc = &appLabelIc
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelIe(appLabelIe []string) ApiExtrasContentTypesListRequest {
	r.appLabelIe = &appLabelIe
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelIew(appLabelIew []string) ApiExtrasContentTypesListRequest {
	r.appLabelIew = &appLabelIew
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelIre(appLabelIre []string) ApiExtrasContentTypesListRequest {
	r.appLabelIre = &appLabelIre
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelIsw(appLabelIsw []string) ApiExtrasContentTypesListRequest {
	r.appLabelIsw = &appLabelIsw
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelN(appLabelN []string) ApiExtrasContentTypesListRequest {
	r.appLabelN = &appLabelN
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelNic(appLabelNic []string) ApiExtrasContentTypesListRequest {
	r.appLabelNic = &appLabelNic
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelNie(appLabelNie []string) ApiExtrasContentTypesListRequest {
	r.appLabelNie = &appLabelNie
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelNiew(appLabelNiew []string) ApiExtrasContentTypesListRequest {
	r.appLabelNiew = &appLabelNiew
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelNire(appLabelNire []string) ApiExtrasContentTypesListRequest {
	r.appLabelNire = &appLabelNire
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelNisw(appLabelNisw []string) ApiExtrasContentTypesListRequest {
	r.appLabelNisw = &appLabelNisw
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelNre(appLabelNre []string) ApiExtrasContentTypesListRequest {
	r.appLabelNre = &appLabelNre
	return r
}

func (r ApiExtrasContentTypesListRequest) AppLabelRe(appLabelRe []string) ApiExtrasContentTypesListRequest {
	r.appLabelRe = &appLabelRe
	return r
}

// User can add objects of this type
func (r ApiExtrasContentTypesListRequest) CanAdd(canAdd bool) ApiExtrasContentTypesListRequest {
	r.canAdd = &canAdd
	return r
}

// User can change objects of this type
func (r ApiExtrasContentTypesListRequest) CanChange(canChange bool) ApiExtrasContentTypesListRequest {
	r.canChange = &canChange
	return r
}

// User can delete objects of this type
func (r ApiExtrasContentTypesListRequest) CanDelete(canDelete bool) ApiExtrasContentTypesListRequest {
	r.canDelete = &canDelete
	return r
}

// User can view objects of this type
func (r ApiExtrasContentTypesListRequest) CanView(canView bool) ApiExtrasContentTypesListRequest {
	r.canView = &canView
	return r
}

// Objects of this type support the named feature
func (r ApiExtrasContentTypesListRequest) Feature(feature string) ApiExtrasContentTypesListRequest {
	r.feature = &feature
	return r
}

func (r ApiExtrasContentTypesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContentTypesListRequest {
	r.format = &format
	return r
}

// A REST API serializer exists for this type
func (r ApiExtrasContentTypesListRequest) HasSerializer(hasSerializer bool) ApiExtrasContentTypesListRequest {
	r.hasSerializer = &hasSerializer
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasContentTypesListRequest) Id(id []int32) ApiExtrasContentTypesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasContentTypesListRequest) IdGt(idGt []int32) ApiExtrasContentTypesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasContentTypesListRequest) IdGte(idGte []int32) ApiExtrasContentTypesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasContentTypesListRequest) IdLt(idLt []int32) ApiExtrasContentTypesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasContentTypesListRequest) IdLte(idLte []int32) ApiExtrasContentTypesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasContentTypesListRequest) IdN(idN []int32) ApiExtrasContentTypesListRequest {
	r.idN = &idN
	return r
}

// Number of results to return per page.
func (r ApiExtrasContentTypesListRequest) Limit(limit int32) ApiExtrasContentTypesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasContentTypesListRequest) Model(model []string) ApiExtrasContentTypesListRequest {
	r.model = &model
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelIc(modelIc []string) ApiExtrasContentTypesListRequest {
	r.modelIc = &modelIc
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelIe(modelIe []string) ApiExtrasContentTypesListRequest {
	r.modelIe = &modelIe
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelIew(modelIew []string) ApiExtrasContentTypesListRequest {
	r.modelIew = &modelIew
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelIre(modelIre []string) ApiExtrasContentTypesListRequest {
	r.modelIre = &modelIre
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelIsw(modelIsw []string) ApiExtrasContentTypesListRequest {
	r.modelIsw = &modelIsw
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelN(modelN []string) ApiExtrasContentTypesListRequest {
	r.modelN = &modelN
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelNic(modelNic []string) ApiExtrasContentTypesListRequest {
	r.modelNic = &modelNic
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelNie(modelNie []string) ApiExtrasContentTypesListRequest {
	r.modelNie = &modelNie
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelNiew(modelNiew []string) ApiExtrasContentTypesListRequest {
	r.modelNiew = &modelNiew
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelNire(modelNire []string) ApiExtrasContentTypesListRequest {
	r.modelNire = &modelNire
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelNisw(modelNisw []string) ApiExtrasContentTypesListRequest {
	r.modelNisw = &modelNisw
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelNre(modelNre []string) ApiExtrasContentTypesListRequest {
	r.modelNre = &modelNre
	return r
}

func (r ApiExtrasContentTypesListRequest) ModelRe(modelRe []string) ApiExtrasContentTypesListRequest {
	r.modelRe = &modelRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasContentTypesListRequest) Offset(offset int32) ApiExtrasContentTypesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasContentTypesListRequest) Q(q string) ApiExtrasContentTypesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasContentTypesListRequest) Sort(sort string) ApiExtrasContentTypesListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiExtrasContentTypesListRequest) Depth(depth int32) ApiExtrasContentTypesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasContentTypesListRequest) Execute() (*PaginatedContentTypeList, *http.Response, error) {
	return r.ApiService.ExtrasContentTypesListExecute(r)
}

/*
ExtrasContentTypesList Method for ExtrasContentTypesList

Read-only list of ContentTypes. Limit results to ContentTypes pertinent to Nautobot objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContentTypesListRequest
*/
func (a *ExtrasAPIService) ExtrasContentTypesList(ctx context.Context) ApiExtrasContentTypesListRequest {
	return ApiExtrasContentTypesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedContentTypeList
func (a *ExtrasAPIService) ExtrasContentTypesListExecute(r ApiExtrasContentTypesListRequest) (*PaginatedContentTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedContentTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContentTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/content-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.appLabel != nil {
		t := *r.appLabel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label", t, "form", "multi")
		}
	}
	if r.appLabelIc != nil {
		t := *r.appLabelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__ic", t, "form", "multi")
		}
	}
	if r.appLabelIe != nil {
		t := *r.appLabelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__ie", t, "form", "multi")
		}
	}
	if r.appLabelIew != nil {
		t := *r.appLabelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__iew", t, "form", "multi")
		}
	}
	if r.appLabelIre != nil {
		t := *r.appLabelIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__ire", t, "form", "multi")
		}
	}
	if r.appLabelIsw != nil {
		t := *r.appLabelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__isw", t, "form", "multi")
		}
	}
	if r.appLabelN != nil {
		t := *r.appLabelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__n", t, "form", "multi")
		}
	}
	if r.appLabelNic != nil {
		t := *r.appLabelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nic", t, "form", "multi")
		}
	}
	if r.appLabelNie != nil {
		t := *r.appLabelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nie", t, "form", "multi")
		}
	}
	if r.appLabelNiew != nil {
		t := *r.appLabelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__niew", t, "form", "multi")
		}
	}
	if r.appLabelNire != nil {
		t := *r.appLabelNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nire", t, "form", "multi")
		}
	}
	if r.appLabelNisw != nil {
		t := *r.appLabelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nisw", t, "form", "multi")
		}
	}
	if r.appLabelNre != nil {
		t := *r.appLabelNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__nre", t, "form", "multi")
		}
	}
	if r.appLabelRe != nil {
		t := *r.appLabelRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "app_label__re", t, "form", "multi")
		}
	}
	if r.canAdd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "can_add", r.canAdd, "form", "")
	}
	if r.canChange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "can_change", r.canChange, "form", "")
	}
	if r.canDelete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "can_delete", r.canDelete, "form", "")
	}
	if r.canView != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "can_view", r.canView, "form", "")
	}
	if r.feature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "feature", r.feature, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.hasSerializer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_serializer", r.hasSerializer, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "form", "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "form", "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "form", "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.model != nil {
		t := *r.model
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model", t, "form", "multi")
		}
	}
	if r.modelIc != nil {
		t := *r.modelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__ic", t, "form", "multi")
		}
	}
	if r.modelIe != nil {
		t := *r.modelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__ie", t, "form", "multi")
		}
	}
	if r.modelIew != nil {
		t := *r.modelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__iew", t, "form", "multi")
		}
	}
	if r.modelIre != nil {
		t := *r.modelIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__ire", t, "form", "multi")
		}
	}
	if r.modelIsw != nil {
		t := *r.modelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__isw", t, "form", "multi")
		}
	}
	if r.modelN != nil {
		t := *r.modelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", t, "form", "multi")
		}
	}
	if r.modelNic != nil {
		t := *r.modelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nic", t, "form", "multi")
		}
	}
	if r.modelNie != nil {
		t := *r.modelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nie", t, "form", "multi")
		}
	}
	if r.modelNiew != nil {
		t := *r.modelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__niew", t, "form", "multi")
		}
	}
	if r.modelNire != nil {
		t := *r.modelNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nire", t, "form", "multi")
		}
	}
	if r.modelNisw != nil {
		t := *r.modelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nisw", t, "form", "multi")
		}
	}
	if r.modelNre != nil {
		t := *r.modelNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nre", t, "form", "multi")
		}
	}
	if r.modelRe != nil {
		t := *r.modelRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContentTypesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id int32
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasContentTypesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasContentTypesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasContentTypesRetrieveRequest) Depth(depth int32) ApiExtrasContentTypesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasContentTypesRetrieveRequest) Execute() (*ContentType, *http.Response, error) {
	return r.ApiService.ExtrasContentTypesRetrieveExecute(r)
}

/*
ExtrasContentTypesRetrieve Method for ExtrasContentTypesRetrieve

Read-only list of ContentTypes. Limit results to ContentTypes pertinent to Nautobot objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this content type.
 @return ApiExtrasContentTypesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasContentTypesRetrieve(ctx context.Context, id int32) ApiExtrasContentTypesRetrieveRequest {
	return ApiExtrasContentTypesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContentType
func (a *ExtrasAPIService) ExtrasContentTypesRetrieveExecute(r ApiExtrasContentTypesRetrieveRequest) (*ContentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasContentTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/content-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldChoicesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasCustomFieldChoicesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasCustomFieldChoicesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldChoicesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldChoicesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesBulkDestroyExecute(r)
}

/*
ExtrasCustomFieldChoicesBulkDestroy Method for ExtrasCustomFieldChoicesBulkDestroy

Destroy a list of custom field choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesBulkDestroy(ctx context.Context) ApiExtrasCustomFieldChoicesBulkDestroyRequest {
	return ApiExtrasCustomFieldChoicesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesBulkDestroyExecute(r ApiExtrasCustomFieldChoicesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoicesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableCustomFieldChoiceRequest *[]PatchedBulkWritableCustomFieldChoiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest) PatchedBulkWritableCustomFieldChoiceRequest(patchedBulkWritableCustomFieldChoiceRequest []PatchedBulkWritableCustomFieldChoiceRequest) ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest {
	r.patchedBulkWritableCustomFieldChoiceRequest = &patchedBulkWritableCustomFieldChoiceRequest
	return r
}

func (r ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest) Execute() ([]CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesBulkPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldChoicesBulkPartialUpdate Method for ExtrasCustomFieldChoicesBulkPartialUpdate

Partial update a list of custom field choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesBulkPartialUpdate(ctx context.Context) ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest {
	return ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CustomFieldChoice
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesBulkPartialUpdateExecute(r ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest) ([]CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoicesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCustomFieldChoiceRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCustomFieldChoiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCustomFieldChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableCustomFieldChoiceRequest *[]BulkWritableCustomFieldChoiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldChoicesBulkUpdateRequest) BulkWritableCustomFieldChoiceRequest(bulkWritableCustomFieldChoiceRequest []BulkWritableCustomFieldChoiceRequest) ApiExtrasCustomFieldChoicesBulkUpdateRequest {
	r.bulkWritableCustomFieldChoiceRequest = &bulkWritableCustomFieldChoiceRequest
	return r
}

func (r ApiExtrasCustomFieldChoicesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldChoicesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldChoicesBulkUpdateRequest) Execute() ([]CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesBulkUpdateExecute(r)
}

/*
ExtrasCustomFieldChoicesBulkUpdate Method for ExtrasCustomFieldChoicesBulkUpdate

Update a list of custom field choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesBulkUpdate(ctx context.Context) ApiExtrasCustomFieldChoicesBulkUpdateRequest {
	return ApiExtrasCustomFieldChoicesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CustomFieldChoice
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesBulkUpdateExecute(r ApiExtrasCustomFieldChoicesBulkUpdateRequest) ([]CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoicesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCustomFieldChoiceRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCustomFieldChoiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCustomFieldChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	customFieldChoiceRequest *CustomFieldChoiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldChoicesCreateRequest) CustomFieldChoiceRequest(customFieldChoiceRequest CustomFieldChoiceRequest) ApiExtrasCustomFieldChoicesCreateRequest {
	r.customFieldChoiceRequest = &customFieldChoiceRequest
	return r
}

func (r ApiExtrasCustomFieldChoicesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldChoicesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldChoicesCreateRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesCreateExecute(r)
}

/*
ExtrasCustomFieldChoicesCreate Method for ExtrasCustomFieldChoicesCreate

Create one or more custom field choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesCreate(ctx context.Context) ApiExtrasCustomFieldChoicesCreateRequest {
	return ApiExtrasCustomFieldChoicesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesCreateExecute(r ApiExtrasCustomFieldChoicesCreateRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoicesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customFieldChoiceRequest == nil {
		return localVarReturnValue, nil, reportError("customFieldChoiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customFieldChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldChoicesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldChoicesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldChoicesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesDestroyExecute(r)
}

/*
ExtrasCustomFieldChoicesDestroy Method for ExtrasCustomFieldChoicesDestroy

Destroy a custom field choice object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field choice.
 @return ApiExtrasCustomFieldChoicesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesDestroy(ctx context.Context, id string) ApiExtrasCustomFieldChoicesDestroyRequest {
	return ApiExtrasCustomFieldChoicesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesDestroyExecute(r ApiExtrasCustomFieldChoicesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoicesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	customField *[]string
	customFieldN *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	offset *int32
	q *string
	sort *string
	value *[]string
	valueIc *[]string
	valueIe *[]string
	valueIew *[]string
	valueIre *[]string
	valueIsw *[]string
	valueN *[]string
	valueNic *[]string
	valueNie *[]string
	valueNiew *[]string
	valueNire *[]string
	valueNisw *[]string
	valueNre *[]string
	valueRe *[]string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
	depth *int32
}

func (r ApiExtrasCustomFieldChoicesListRequest) CustomField(customField []string) ApiExtrasCustomFieldChoicesListRequest {
	r.customField = &customField
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) CustomFieldN(customFieldN []string) ApiExtrasCustomFieldChoicesListRequest {
	r.customFieldN = &customFieldN
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldChoicesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasCustomFieldChoicesListRequest) Id(id []string) ApiExtrasCustomFieldChoicesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIc(idIc []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIe(idIe []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIew(idIew []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIre(idIre []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIsw(idIsw []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdN(idN []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNic(idNic []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNie(idNie []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNiew(idNiew []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNire(idNire []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNisw(idNisw []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNre(idNre []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdRe(idRe []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomFieldChoicesListRequest) Limit(limit int32) ApiExtrasCustomFieldChoicesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomFieldChoicesListRequest) Offset(offset int32) ApiExtrasCustomFieldChoicesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasCustomFieldChoicesListRequest) Q(q string) ApiExtrasCustomFieldChoicesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasCustomFieldChoicesListRequest) Sort(sort string) ApiExtrasCustomFieldChoicesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) Value(value []string) ApiExtrasCustomFieldChoicesListRequest {
	r.value = &value
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIc(valueIc []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIc = &valueIc
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIe(valueIe []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIe = &valueIe
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIew(valueIew []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIew = &valueIew
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIre(valueIre []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIre = &valueIre
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIsw(valueIsw []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIsw = &valueIsw
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueN(valueN []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueN = &valueN
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNic(valueNic []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNic = &valueNic
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNie(valueNie []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNie = &valueNie
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNiew(valueNiew []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNiew = &valueNiew
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNire(valueNire []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNire = &valueNire
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNisw(valueNisw []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNisw = &valueNisw
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNre(valueNre []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNre = &valueNre
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueRe(valueRe []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueRe = &valueRe
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) Weight(weight []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightGt(weightGt []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightGte(weightGte []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightLt(weightLt []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightLte(weightLte []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightN(weightN []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightN = &weightN
	return r
}

// Serializer Depth
func (r ApiExtrasCustomFieldChoicesListRequest) Depth(depth int32) ApiExtrasCustomFieldChoicesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) Execute() (*PaginatedCustomFieldChoiceList, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesListExecute(r)
}

/*
ExtrasCustomFieldChoicesList Method for ExtrasCustomFieldChoicesList

Retrieve a list of custom field choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesListRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesList(ctx context.Context) ApiExtrasCustomFieldChoicesListRequest {
	return ApiExtrasCustomFieldChoicesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCustomFieldChoiceList
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesListExecute(r ApiExtrasCustomFieldChoicesListRequest) (*PaginatedCustomFieldChoiceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCustomFieldChoiceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoicesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.customField != nil {
		t := *r.customField
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "custom_field", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "custom_field", t, "form", "multi")
		}
	}
	if r.customFieldN != nil {
		t := *r.customFieldN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "custom_field__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "custom_field__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.value != nil {
		t := *r.value
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value", t, "form", "multi")
		}
	}
	if r.valueIc != nil {
		t := *r.valueIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ic", t, "form", "multi")
		}
	}
	if r.valueIe != nil {
		t := *r.valueIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ie", t, "form", "multi")
		}
	}
	if r.valueIew != nil {
		t := *r.valueIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__iew", t, "form", "multi")
		}
	}
	if r.valueIre != nil {
		t := *r.valueIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ire", t, "form", "multi")
		}
	}
	if r.valueIsw != nil {
		t := *r.valueIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__isw", t, "form", "multi")
		}
	}
	if r.valueN != nil {
		t := *r.valueN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__n", t, "form", "multi")
		}
	}
	if r.valueNic != nil {
		t := *r.valueNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nic", t, "form", "multi")
		}
	}
	if r.valueNie != nil {
		t := *r.valueNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nie", t, "form", "multi")
		}
	}
	if r.valueNiew != nil {
		t := *r.valueNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__niew", t, "form", "multi")
		}
	}
	if r.valueNire != nil {
		t := *r.valueNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nire", t, "form", "multi")
		}
	}
	if r.valueNisw != nil {
		t := *r.valueNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nisw", t, "form", "multi")
		}
	}
	if r.valueNre != nil {
		t := *r.valueNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nre", t, "form", "multi")
		}
	}
	if r.valueRe != nil {
		t := *r.valueRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__re", t, "form", "multi")
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "form", "multi")
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "form", "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "form", "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "form", "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "form", "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCustomFieldChoiceRequest *PatchedCustomFieldChoiceRequest
}

func (r ApiExtrasCustomFieldChoicesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldChoicesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldChoicesPartialUpdateRequest) PatchedCustomFieldChoiceRequest(patchedCustomFieldChoiceRequest PatchedCustomFieldChoiceRequest) ApiExtrasCustomFieldChoicesPartialUpdateRequest {
	r.patchedCustomFieldChoiceRequest = &patchedCustomFieldChoiceRequest
	return r
}

func (r ApiExtrasCustomFieldChoicesPartialUpdateRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldChoicesPartialUpdate Method for ExtrasCustomFieldChoicesPartialUpdate

Partial update a custom field choice object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field choice.
 @return ApiExtrasCustomFieldChoicesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesPartialUpdate(ctx context.Context, id string) ApiExtrasCustomFieldChoicesPartialUpdateRequest {
	return ApiExtrasCustomFieldChoicesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesPartialUpdateExecute(r ApiExtrasCustomFieldChoicesPartialUpdateRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoicesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCustomFieldChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasCustomFieldChoicesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldChoicesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasCustomFieldChoicesRetrieveRequest) Depth(depth int32) ApiExtrasCustomFieldChoicesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasCustomFieldChoicesRetrieveRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesRetrieveExecute(r)
}

/*
ExtrasCustomFieldChoicesRetrieve Method for ExtrasCustomFieldChoicesRetrieve

Retrieve a custom field choice object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field choice.
 @return ApiExtrasCustomFieldChoicesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesRetrieve(ctx context.Context, id string) ApiExtrasCustomFieldChoicesRetrieveRequest {
	return ApiExtrasCustomFieldChoicesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesRetrieveExecute(r ApiExtrasCustomFieldChoicesRetrieveRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoicesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	customFieldChoiceRequest *CustomFieldChoiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldChoicesUpdateRequest) CustomFieldChoiceRequest(customFieldChoiceRequest CustomFieldChoiceRequest) ApiExtrasCustomFieldChoicesUpdateRequest {
	r.customFieldChoiceRequest = &customFieldChoiceRequest
	return r
}

func (r ApiExtrasCustomFieldChoicesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldChoicesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldChoicesUpdateRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesUpdateExecute(r)
}

/*
ExtrasCustomFieldChoicesUpdate Method for ExtrasCustomFieldChoicesUpdate

Update a custom field choice object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field choice.
 @return ApiExtrasCustomFieldChoicesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesUpdate(ctx context.Context, id string) ApiExtrasCustomFieldChoicesUpdateRequest {
	return ApiExtrasCustomFieldChoicesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasAPIService) ExtrasCustomFieldChoicesUpdateExecute(r ApiExtrasCustomFieldChoicesUpdateRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoicesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customFieldChoiceRequest == nil {
		return localVarReturnValue, nil, reportError("customFieldChoiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customFieldChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasCustomFieldsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasCustomFieldsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsBulkDestroyExecute(r)
}

/*
ExtrasCustomFieldsBulkDestroy Method for ExtrasCustomFieldsBulkDestroy

Destroy a list of custom field objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkDestroy(ctx context.Context) ApiExtrasCustomFieldsBulkDestroyRequest {
	return ApiExtrasCustomFieldsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkDestroyExecute(r ApiExtrasCustomFieldsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableCustomFieldRequest *[]PatchedBulkWritableCustomFieldRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldsBulkPartialUpdateRequest) PatchedBulkWritableCustomFieldRequest(patchedBulkWritableCustomFieldRequest []PatchedBulkWritableCustomFieldRequest) ApiExtrasCustomFieldsBulkPartialUpdateRequest {
	r.patchedBulkWritableCustomFieldRequest = &patchedBulkWritableCustomFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldsBulkPartialUpdateRequest) Execute() ([]CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsBulkPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldsBulkPartialUpdate Method for ExtrasCustomFieldsBulkPartialUpdate

Partial update a list of custom field objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkPartialUpdate(ctx context.Context) ApiExtrasCustomFieldsBulkPartialUpdateRequest {
	return ApiExtrasCustomFieldsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkPartialUpdateExecute(r ApiExtrasCustomFieldsBulkPartialUpdateRequest) ([]CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCustomFieldRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCustomFieldRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCustomFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableCustomFieldRequest *[]BulkWritableCustomFieldRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldsBulkUpdateRequest) BulkWritableCustomFieldRequest(bulkWritableCustomFieldRequest []BulkWritableCustomFieldRequest) ApiExtrasCustomFieldsBulkUpdateRequest {
	r.bulkWritableCustomFieldRequest = &bulkWritableCustomFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldsBulkUpdateRequest) Execute() ([]CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsBulkUpdateExecute(r)
}

/*
ExtrasCustomFieldsBulkUpdate Method for ExtrasCustomFieldsBulkUpdate

Update a list of custom field objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkUpdate(ctx context.Context) ApiExtrasCustomFieldsBulkUpdateRequest {
	return ApiExtrasCustomFieldsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkUpdateExecute(r ApiExtrasCustomFieldsBulkUpdateRequest) ([]CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCustomFieldRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCustomFieldRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCustomFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	writableCustomFieldRequest *WritableCustomFieldRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldsCreateRequest) WritableCustomFieldRequest(writableCustomFieldRequest WritableCustomFieldRequest) ApiExtrasCustomFieldsCreateRequest {
	r.writableCustomFieldRequest = &writableCustomFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldsCreateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsCreateExecute(r)
}

/*
ExtrasCustomFieldsCreate Method for ExtrasCustomFieldsCreate

Create one or more custom field objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsCreate(ctx context.Context) ApiExtrasCustomFieldsCreateRequest {
	return ApiExtrasCustomFieldsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsCreateExecute(r ApiExtrasCustomFieldsCreateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomFieldRequest == nil {
		return localVarReturnValue, nil, reportError("writableCustomFieldRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsDestroyExecute(r)
}

/*
ExtrasCustomFieldsDestroy Method for ExtrasCustomFieldsDestroy

Destroy a custom field object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsDestroy(ctx context.Context, id string) ApiExtrasCustomFieldsDestroyRequest {
	return ApiExtrasCustomFieldsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomFieldsDestroyExecute(r ApiExtrasCustomFieldsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentTypes *[]int32
	contentTypesIc *[]int32
	contentTypesIe *[]int32
	contentTypesIew *[]int32
	contentTypesIre *[]int32
	contentTypesIsw *[]int32
	contentTypesN *[]int32
	contentTypesNic *[]int32
	contentTypesNie *[]int32
	contentTypesNiew *[]int32
	contentTypesNire *[]int32
	contentTypesNisw *[]int32
	contentTypesNre *[]int32
	contentTypesRe *[]int32
	dynamicGroups *[]string
	dynamicGroupsN *string
	filterLogic *[]string
	filterLogicIc *[]string
	filterLogicIe *[]string
	filterLogicIew *[]string
	filterLogicIre *[]string
	filterLogicIsw *[]string
	filterLogicN *[]string
	filterLogicNic *[]string
	filterLogicNie *[]string
	filterLogicNiew *[]string
	filterLogicNire *[]string
	filterLogicNisw *[]string
	filterLogicNre *[]string
	filterLogicRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	grouping *[]string
	groupingIc *[]string
	groupingIe *[]string
	groupingIew *[]string
	groupingIre *[]string
	groupingIsw *[]string
	groupingN *[]string
	groupingNic *[]string
	groupingNie *[]string
	groupingNiew *[]string
	groupingNire *[]string
	groupingNisw *[]string
	groupingNre *[]string
	groupingRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	label *[]string
	labelIc *[]string
	labelIe *[]string
	labelIew *[]string
	labelIre *[]string
	labelIsw *[]string
	labelN *[]string
	labelNic *[]string
	labelNie *[]string
	labelNiew *[]string
	labelNire *[]string
	labelNisw *[]string
	labelNre *[]string
	labelRe *[]string
	limit *int32
	offset *int32
	q *string
	required *bool
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
	depth *int32
}

func (r ApiExtrasCustomFieldsListRequest) Contacts(contacts []string) ApiExtrasCustomFieldsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasCustomFieldsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasCustomFieldsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasCustomFieldsListRequest) ContactsN(contactsN string) ApiExtrasCustomFieldsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypes(contentTypes []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesIc(contentTypesIc []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesIc = &contentTypesIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesIe(contentTypesIe []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesIe = &contentTypesIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesIew(contentTypesIew []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesIew = &contentTypesIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesIre(contentTypesIre []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesIre = &contentTypesIre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesIsw(contentTypesIsw []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesIsw = &contentTypesIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesNic(contentTypesNic []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesNic = &contentTypesNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesNie(contentTypesNie []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesNie = &contentTypesNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesNiew(contentTypesNiew []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesNiew = &contentTypesNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesNire(contentTypesNire []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesNire = &contentTypesNire
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesNisw(contentTypesNisw []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesNisw = &contentTypesNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesNre(contentTypesNre []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesNre = &contentTypesNre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesRe(contentTypesRe []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesRe = &contentTypesRe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasCustomFieldsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasCustomFieldsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasCustomFieldsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

// Loose matches any instance of a given string; Exact matches the entire field.
func (r ApiExtrasCustomFieldsListRequest) FilterLogic(filterLogic []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogic = &filterLogic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicIc(filterLogicIc []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicIc = &filterLogicIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicIe(filterLogicIe []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicIe = &filterLogicIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicIew(filterLogicIew []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicIew = &filterLogicIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicIre(filterLogicIre []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicIre = &filterLogicIre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicIsw(filterLogicIsw []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicIsw = &filterLogicIsw
	return r
}

// Loose matches any instance of a given string; Exact matches the entire field.
func (r ApiExtrasCustomFieldsListRequest) FilterLogicN(filterLogicN []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicN = &filterLogicN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicNic(filterLogicNic []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicNic = &filterLogicNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicNie(filterLogicNie []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicNie = &filterLogicNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicNiew(filterLogicNiew []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicNiew = &filterLogicNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicNire(filterLogicNire []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicNire = &filterLogicNire
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicNisw(filterLogicNisw []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicNisw = &filterLogicNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicNre(filterLogicNre []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicNre = &filterLogicNre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) FilterLogicRe(filterLogicRe []string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicRe = &filterLogicRe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsListRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Grouping(grouping []string) ApiExtrasCustomFieldsListRequest {
	r.grouping = &grouping
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingIc(groupingIc []string) ApiExtrasCustomFieldsListRequest {
	r.groupingIc = &groupingIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingIe(groupingIe []string) ApiExtrasCustomFieldsListRequest {
	r.groupingIe = &groupingIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingIew(groupingIew []string) ApiExtrasCustomFieldsListRequest {
	r.groupingIew = &groupingIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingIre(groupingIre []string) ApiExtrasCustomFieldsListRequest {
	r.groupingIre = &groupingIre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingIsw(groupingIsw []string) ApiExtrasCustomFieldsListRequest {
	r.groupingIsw = &groupingIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingN(groupingN []string) ApiExtrasCustomFieldsListRequest {
	r.groupingN = &groupingN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingNic(groupingNic []string) ApiExtrasCustomFieldsListRequest {
	r.groupingNic = &groupingNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingNie(groupingNie []string) ApiExtrasCustomFieldsListRequest {
	r.groupingNie = &groupingNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingNiew(groupingNiew []string) ApiExtrasCustomFieldsListRequest {
	r.groupingNiew = &groupingNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingNire(groupingNire []string) ApiExtrasCustomFieldsListRequest {
	r.groupingNire = &groupingNire
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingNisw(groupingNisw []string) ApiExtrasCustomFieldsListRequest {
	r.groupingNisw = &groupingNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingNre(groupingNre []string) ApiExtrasCustomFieldsListRequest {
	r.groupingNre = &groupingNre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupingRe(groupingRe []string) ApiExtrasCustomFieldsListRequest {
	r.groupingRe = &groupingRe
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasCustomFieldsListRequest) Id(id []string) ApiExtrasCustomFieldsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIc(idIc []string) ApiExtrasCustomFieldsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIe(idIe []string) ApiExtrasCustomFieldsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIew(idIew []string) ApiExtrasCustomFieldsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIre(idIre []string) ApiExtrasCustomFieldsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIsw(idIsw []string) ApiExtrasCustomFieldsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdN(idN []string) ApiExtrasCustomFieldsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNic(idNic []string) ApiExtrasCustomFieldsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNie(idNie []string) ApiExtrasCustomFieldsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNiew(idNiew []string) ApiExtrasCustomFieldsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNire(idNire []string) ApiExtrasCustomFieldsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNisw(idNisw []string) ApiExtrasCustomFieldsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNre(idNre []string) ApiExtrasCustomFieldsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdRe(idRe []string) ApiExtrasCustomFieldsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Label(label []string) ApiExtrasCustomFieldsListRequest {
	r.label = &label
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelIc(labelIc []string) ApiExtrasCustomFieldsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelIe(labelIe []string) ApiExtrasCustomFieldsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelIew(labelIew []string) ApiExtrasCustomFieldsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelIre(labelIre []string) ApiExtrasCustomFieldsListRequest {
	r.labelIre = &labelIre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelIsw(labelIsw []string) ApiExtrasCustomFieldsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelN(labelN []string) ApiExtrasCustomFieldsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNic(labelNic []string) ApiExtrasCustomFieldsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNie(labelNie []string) ApiExtrasCustomFieldsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNiew(labelNiew []string) ApiExtrasCustomFieldsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNire(labelNire []string) ApiExtrasCustomFieldsListRequest {
	r.labelNire = &labelNire
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNisw(labelNisw []string) ApiExtrasCustomFieldsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNre(labelNre []string) ApiExtrasCustomFieldsListRequest {
	r.labelNre = &labelNre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelRe(labelRe []string) ApiExtrasCustomFieldsListRequest {
	r.labelRe = &labelRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomFieldsListRequest) Limit(limit int32) ApiExtrasCustomFieldsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomFieldsListRequest) Offset(offset int32) ApiExtrasCustomFieldsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasCustomFieldsListRequest) Q(q string) ApiExtrasCustomFieldsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Required(required bool) ApiExtrasCustomFieldsListRequest {
	r.required = &required
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasCustomFieldsListRequest) Sort(sort string) ApiExtrasCustomFieldsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Teams(teams []string) ApiExtrasCustomFieldsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasCustomFieldsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasCustomFieldsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasCustomFieldsListRequest) TeamsN(teamsN string) ApiExtrasCustomFieldsListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Weight(weight []int32) ApiExtrasCustomFieldsListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightGt(weightGt []int32) ApiExtrasCustomFieldsListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightGte(weightGte []int32) ApiExtrasCustomFieldsListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightLt(weightLt []int32) ApiExtrasCustomFieldsListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightLte(weightLte []int32) ApiExtrasCustomFieldsListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightN(weightN []int32) ApiExtrasCustomFieldsListRequest {
	r.weightN = &weightN
	return r
}

// Serializer Depth
func (r ApiExtrasCustomFieldsListRequest) Depth(depth int32) ApiExtrasCustomFieldsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Execute() (*PaginatedCustomFieldList, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsListExecute(r)
}

/*
ExtrasCustomFieldsList Method for ExtrasCustomFieldsList

Retrieve a list of custom field objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsListRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsList(ctx context.Context) ApiExtrasCustomFieldsListRequest {
	return ApiExtrasCustomFieldsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCustomFieldList
func (a *ExtrasAPIService) ExtrasCustomFieldsListExecute(r ApiExtrasCustomFieldsListRequest) (*PaginatedCustomFieldList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCustomFieldList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", t, "form", "multi")
		}
	}
	if r.contentTypesIc != nil {
		t := *r.contentTypesIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", t, "form", "multi")
		}
	}
	if r.contentTypesIe != nil {
		t := *r.contentTypesIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", t, "form", "multi")
		}
	}
	if r.contentTypesIew != nil {
		t := *r.contentTypesIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", t, "form", "multi")
		}
	}
	if r.contentTypesIre != nil {
		t := *r.contentTypesIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", t, "form", "multi")
		}
	}
	if r.contentTypesIsw != nil {
		t := *r.contentTypesIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", t, "form", "multi")
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", t, "form", "multi")
		}
	}
	if r.contentTypesNic != nil {
		t := *r.contentTypesNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", t, "form", "multi")
		}
	}
	if r.contentTypesNie != nil {
		t := *r.contentTypesNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", t, "form", "multi")
		}
	}
	if r.contentTypesNiew != nil {
		t := *r.contentTypesNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", t, "form", "multi")
		}
	}
	if r.contentTypesNire != nil {
		t := *r.contentTypesNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", t, "form", "multi")
		}
	}
	if r.contentTypesNisw != nil {
		t := *r.contentTypesNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", t, "form", "multi")
		}
	}
	if r.contentTypesNre != nil {
		t := *r.contentTypesNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", t, "form", "multi")
		}
	}
	if r.contentTypesRe != nil {
		t := *r.contentTypesRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.filterLogic != nil {
		t := *r.filterLogic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic", t, "form", "multi")
		}
	}
	if r.filterLogicIc != nil {
		t := *r.filterLogicIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__ic", t, "form", "multi")
		}
	}
	if r.filterLogicIe != nil {
		t := *r.filterLogicIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__ie", t, "form", "multi")
		}
	}
	if r.filterLogicIew != nil {
		t := *r.filterLogicIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__iew", t, "form", "multi")
		}
	}
	if r.filterLogicIre != nil {
		t := *r.filterLogicIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__ire", t, "form", "multi")
		}
	}
	if r.filterLogicIsw != nil {
		t := *r.filterLogicIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__isw", t, "form", "multi")
		}
	}
	if r.filterLogicN != nil {
		t := *r.filterLogicN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__n", t, "form", "multi")
		}
	}
	if r.filterLogicNic != nil {
		t := *r.filterLogicNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nic", t, "form", "multi")
		}
	}
	if r.filterLogicNie != nil {
		t := *r.filterLogicNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nie", t, "form", "multi")
		}
	}
	if r.filterLogicNiew != nil {
		t := *r.filterLogicNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__niew", t, "form", "multi")
		}
	}
	if r.filterLogicNire != nil {
		t := *r.filterLogicNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nire", t, "form", "multi")
		}
	}
	if r.filterLogicNisw != nil {
		t := *r.filterLogicNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nisw", t, "form", "multi")
		}
	}
	if r.filterLogicNre != nil {
		t := *r.filterLogicNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__nre", t, "form", "multi")
		}
	}
	if r.filterLogicRe != nil {
		t := *r.filterLogicRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.grouping != nil {
		t := *r.grouping
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", t, "form", "multi")
		}
	}
	if r.groupingIc != nil {
		t := *r.groupingIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ic", t, "form", "multi")
		}
	}
	if r.groupingIe != nil {
		t := *r.groupingIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ie", t, "form", "multi")
		}
	}
	if r.groupingIew != nil {
		t := *r.groupingIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__iew", t, "form", "multi")
		}
	}
	if r.groupingIre != nil {
		t := *r.groupingIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ire", t, "form", "multi")
		}
	}
	if r.groupingIsw != nil {
		t := *r.groupingIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__isw", t, "form", "multi")
		}
	}
	if r.groupingN != nil {
		t := *r.groupingN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__n", t, "form", "multi")
		}
	}
	if r.groupingNic != nil {
		t := *r.groupingNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nic", t, "form", "multi")
		}
	}
	if r.groupingNie != nil {
		t := *r.groupingNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nie", t, "form", "multi")
		}
	}
	if r.groupingNiew != nil {
		t := *r.groupingNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__niew", t, "form", "multi")
		}
	}
	if r.groupingNire != nil {
		t := *r.groupingNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nire", t, "form", "multi")
		}
	}
	if r.groupingNisw != nil {
		t := *r.groupingNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nisw", t, "form", "multi")
		}
	}
	if r.groupingNre != nil {
		t := *r.groupingNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nre", t, "form", "multi")
		}
	}
	if r.groupingRe != nil {
		t := *r.groupingRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__re", t, "form", "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "form", "multi")
		}
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "form", "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "form", "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "form", "multi")
		}
	}
	if r.labelIre != nil {
		t := *r.labelIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ire", t, "form", "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "form", "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "form", "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "form", "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "form", "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "form", "multi")
		}
	}
	if r.labelNire != nil {
		t := *r.labelNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nire", t, "form", "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "form", "multi")
		}
	}
	if r.labelNre != nil {
		t := *r.labelNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nre", t, "form", "multi")
		}
	}
	if r.labelRe != nil {
		t := *r.labelRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.required != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "required", r.required, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "form", "multi")
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "form", "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "form", "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "form", "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "form", "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasCustomFieldsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasCustomFieldsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsNotesCreateExecute(r)
}

/*
ExtrasCustomFieldsNotesCreate Method for ExtrasCustomFieldsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsNotesCreate(ctx context.Context, id string) ApiExtrasCustomFieldsNotesCreateRequest {
	return ApiExtrasCustomFieldsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasCustomFieldsNotesCreateExecute(r ApiExtrasCustomFieldsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasCustomFieldsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomFieldsNotesListRequest) Limit(limit int32) ApiExtrasCustomFieldsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomFieldsNotesListRequest) Offset(offset int32) ApiExtrasCustomFieldsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasCustomFieldsNotesListRequest) Depth(depth int32) ApiExtrasCustomFieldsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasCustomFieldsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsNotesListExecute(r)
}

/*
ExtrasCustomFieldsNotesList Method for ExtrasCustomFieldsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsNotesList(ctx context.Context, id string) ApiExtrasCustomFieldsNotesListRequest {
	return ApiExtrasCustomFieldsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasCustomFieldsNotesListExecute(r ApiExtrasCustomFieldsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedWritableCustomFieldRequest *PatchedWritableCustomFieldRequest
}

func (r ApiExtrasCustomFieldsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldsPartialUpdateRequest) PatchedWritableCustomFieldRequest(patchedWritableCustomFieldRequest PatchedWritableCustomFieldRequest) ApiExtrasCustomFieldsPartialUpdateRequest {
	r.patchedWritableCustomFieldRequest = &patchedWritableCustomFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsPartialUpdateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldsPartialUpdate Method for ExtrasCustomFieldsPartialUpdate

Partial update a custom field object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsPartialUpdate(ctx context.Context, id string) ApiExtrasCustomFieldsPartialUpdateRequest {
	return ApiExtrasCustomFieldsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsPartialUpdateExecute(r ApiExtrasCustomFieldsPartialUpdateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCustomFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasCustomFieldsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasCustomFieldsRetrieveRequest) Depth(depth int32) ApiExtrasCustomFieldsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasCustomFieldsRetrieveRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsRetrieveExecute(r)
}

/*
ExtrasCustomFieldsRetrieve Method for ExtrasCustomFieldsRetrieve

Retrieve a custom field object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsRetrieve(ctx context.Context, id string) ApiExtrasCustomFieldsRetrieveRequest {
	return ApiExtrasCustomFieldsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsRetrieveExecute(r ApiExtrasCustomFieldsRetrieveRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	writableCustomFieldRequest *WritableCustomFieldRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomFieldsUpdateRequest) WritableCustomFieldRequest(writableCustomFieldRequest WritableCustomFieldRequest) ApiExtrasCustomFieldsUpdateRequest {
	r.writableCustomFieldRequest = &writableCustomFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomFieldsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomFieldsUpdateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsUpdateExecute(r)
}

/*
ExtrasCustomFieldsUpdate Method for ExtrasCustomFieldsUpdate

Update a custom field object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsUpdate(ctx context.Context, id string) ApiExtrasCustomFieldsUpdateRequest {
	return ApiExtrasCustomFieldsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsUpdateExecute(r ApiExtrasCustomFieldsUpdateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomFieldRequest == nil {
		return localVarReturnValue, nil, reportError("writableCustomFieldRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomLinksBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasCustomLinksBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasCustomLinksBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomLinksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomLinksBulkDestroyExecute(r)
}

/*
ExtrasCustomLinksBulkDestroy Method for ExtrasCustomLinksBulkDestroy

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksBulkDestroy(ctx context.Context) ApiExtrasCustomLinksBulkDestroyRequest {
	return ApiExtrasCustomLinksBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomLinksBulkDestroyExecute(r ApiExtrasCustomLinksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableCustomLinkRequest *[]PatchedBulkWritableCustomLinkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomLinksBulkPartialUpdateRequest) PatchedBulkWritableCustomLinkRequest(patchedBulkWritableCustomLinkRequest []PatchedBulkWritableCustomLinkRequest) ApiExtrasCustomLinksBulkPartialUpdateRequest {
	r.patchedBulkWritableCustomLinkRequest = &patchedBulkWritableCustomLinkRequest
	return r
}

func (r ApiExtrasCustomLinksBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomLinksBulkPartialUpdateRequest) Execute() ([]CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksBulkPartialUpdateExecute(r)
}

/*
ExtrasCustomLinksBulkPartialUpdate Method for ExtrasCustomLinksBulkPartialUpdate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksBulkPartialUpdate(ctx context.Context) ApiExtrasCustomLinksBulkPartialUpdateRequest {
	return ApiExtrasCustomLinksBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksBulkPartialUpdateExecute(r ApiExtrasCustomLinksBulkPartialUpdateRequest) ([]CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCustomLinkRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCustomLinkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCustomLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableCustomLinkRequest *[]BulkWritableCustomLinkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomLinksBulkUpdateRequest) BulkWritableCustomLinkRequest(bulkWritableCustomLinkRequest []BulkWritableCustomLinkRequest) ApiExtrasCustomLinksBulkUpdateRequest {
	r.bulkWritableCustomLinkRequest = &bulkWritableCustomLinkRequest
	return r
}

func (r ApiExtrasCustomLinksBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomLinksBulkUpdateRequest) Execute() ([]CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksBulkUpdateExecute(r)
}

/*
ExtrasCustomLinksBulkUpdate Method for ExtrasCustomLinksBulkUpdate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksBulkUpdate(ctx context.Context) ApiExtrasCustomLinksBulkUpdateRequest {
	return ApiExtrasCustomLinksBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksBulkUpdateExecute(r ApiExtrasCustomLinksBulkUpdateRequest) ([]CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCustomLinkRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCustomLinkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCustomLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	customLinkRequest *CustomLinkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomLinksCreateRequest) CustomLinkRequest(customLinkRequest CustomLinkRequest) ApiExtrasCustomLinksCreateRequest {
	r.customLinkRequest = &customLinkRequest
	return r
}

func (r ApiExtrasCustomLinksCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomLinksCreateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksCreateExecute(r)
}

/*
ExtrasCustomLinksCreate Method for ExtrasCustomLinksCreate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksCreateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksCreate(ctx context.Context) ApiExtrasCustomLinksCreateRequest {
	return ApiExtrasCustomLinksCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksCreateExecute(r ApiExtrasCustomLinksCreateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLinkRequest == nil {
		return localVarReturnValue, nil, reportError("customLinkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomLinksDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomLinksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomLinksDestroyExecute(r)
}

/*
ExtrasCustomLinksDestroy Method for ExtrasCustomLinksDestroy

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksDestroy(ctx context.Context, id string) ApiExtrasCustomLinksDestroyRequest {
	return ApiExtrasCustomLinksDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomLinksDestroyExecute(r ApiExtrasCustomLinksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	buttonClass *[]string
	buttonClassIc *[]string
	buttonClassIe *[]string
	buttonClassIew *[]string
	buttonClassIre *[]string
	buttonClassIsw *[]string
	buttonClassN *[]string
	buttonClassNic *[]string
	buttonClassNie *[]string
	buttonClassNiew *[]string
	buttonClassNire *[]string
	buttonClassNisw *[]string
	buttonClassNre *[]string
	buttonClassRe *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentType *string
	contentTypeN *string
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	groupName *[]string
	groupNameIc *[]string
	groupNameIe *[]string
	groupNameIew *[]string
	groupNameIre *[]string
	groupNameIsw *[]string
	groupNameN *[]string
	groupNameNic *[]string
	groupNameNie *[]string
	groupNameNiew *[]string
	groupNameNire *[]string
	groupNameNisw *[]string
	groupNameNre *[]string
	groupNameRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	newWindow *bool
	offset *int32
	q *string
	sort *string
	targetUrl *[]string
	targetUrlIc *[]string
	targetUrlIe *[]string
	targetUrlIew *[]string
	targetUrlIre *[]string
	targetUrlIsw *[]string
	targetUrlN *[]string
	targetUrlNic *[]string
	targetUrlNie *[]string
	targetUrlNiew *[]string
	targetUrlNire *[]string
	targetUrlNisw *[]string
	targetUrlNre *[]string
	targetUrlRe *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	text *[]string
	textIc *[]string
	textIe *[]string
	textIew *[]string
	textIre *[]string
	textIsw *[]string
	textN *[]string
	textNic *[]string
	textNie *[]string
	textNiew *[]string
	textNire *[]string
	textNisw *[]string
	textNre *[]string
	textRe *[]string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
	depth *int32
}

// The class of the first link in a group will be used for the dropdown button
func (r ApiExtrasCustomLinksListRequest) ButtonClass(buttonClass []string) ApiExtrasCustomLinksListRequest {
	r.buttonClass = &buttonClass
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassIc(buttonClassIc []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassIc = &buttonClassIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassIe(buttonClassIe []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassIe = &buttonClassIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassIew(buttonClassIew []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassIew = &buttonClassIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassIre(buttonClassIre []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassIre = &buttonClassIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassIsw(buttonClassIsw []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassIsw = &buttonClassIsw
	return r
}

// The class of the first link in a group will be used for the dropdown button
func (r ApiExtrasCustomLinksListRequest) ButtonClassN(buttonClassN []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassN = &buttonClassN
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassNic(buttonClassNic []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassNic = &buttonClassNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassNie(buttonClassNie []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassNie = &buttonClassNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassNiew(buttonClassNiew []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassNiew = &buttonClassNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassNire(buttonClassNire []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassNire = &buttonClassNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassNisw(buttonClassNisw []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassNisw = &buttonClassNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassNre(buttonClassNre []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassNre = &buttonClassNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) ButtonClassRe(buttonClassRe []string) ApiExtrasCustomLinksListRequest {
	r.buttonClassRe = &buttonClassRe
	return r
}

func (r ApiExtrasCustomLinksListRequest) Contacts(contacts []string) ApiExtrasCustomLinksListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasCustomLinksListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasCustomLinksListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasCustomLinksListRequest) ContactsN(contactsN string) ApiExtrasCustomLinksListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasCustomLinksListRequest) ContentType(contentType string) ApiExtrasCustomLinksListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasCustomLinksListRequest) ContentTypeN(contentTypeN string) ApiExtrasCustomLinksListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasCustomLinksListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasCustomLinksListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasCustomLinksListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasCustomLinksListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasCustomLinksListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksListRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupName(groupName []string) ApiExtrasCustomLinksListRequest {
	r.groupName = &groupName
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIc(groupNameIc []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIc = &groupNameIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIe(groupNameIe []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIe = &groupNameIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIew(groupNameIew []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIew = &groupNameIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIre(groupNameIre []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIre = &groupNameIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIsw(groupNameIsw []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIsw = &groupNameIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameN(groupNameN []string) ApiExtrasCustomLinksListRequest {
	r.groupNameN = &groupNameN
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNic(groupNameNic []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNic = &groupNameNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNie(groupNameNie []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNie = &groupNameNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNiew(groupNameNiew []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNiew = &groupNameNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNire(groupNameNire []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNire = &groupNameNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNisw(groupNameNisw []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNisw = &groupNameNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNre(groupNameNre []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNre = &groupNameNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameRe(groupNameRe []string) ApiExtrasCustomLinksListRequest {
	r.groupNameRe = &groupNameRe
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasCustomLinksListRequest) Id(id []string) ApiExtrasCustomLinksListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdIc(idIc []string) ApiExtrasCustomLinksListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdIe(idIe []string) ApiExtrasCustomLinksListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdIew(idIew []string) ApiExtrasCustomLinksListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdIre(idIre []string) ApiExtrasCustomLinksListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdIsw(idIsw []string) ApiExtrasCustomLinksListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdN(idN []string) ApiExtrasCustomLinksListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdNic(idNic []string) ApiExtrasCustomLinksListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdNie(idNie []string) ApiExtrasCustomLinksListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdNiew(idNiew []string) ApiExtrasCustomLinksListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdNire(idNire []string) ApiExtrasCustomLinksListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdNisw(idNisw []string) ApiExtrasCustomLinksListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdNre(idNre []string) ApiExtrasCustomLinksListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdRe(idRe []string) ApiExtrasCustomLinksListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomLinksListRequest) Limit(limit int32) ApiExtrasCustomLinksListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasCustomLinksListRequest) Name(name []string) ApiExtrasCustomLinksListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIc(nameIc []string) ApiExtrasCustomLinksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIe(nameIe []string) ApiExtrasCustomLinksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIew(nameIew []string) ApiExtrasCustomLinksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIre(nameIre []string) ApiExtrasCustomLinksListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIsw(nameIsw []string) ApiExtrasCustomLinksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameN(nameN []string) ApiExtrasCustomLinksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNic(nameNic []string) ApiExtrasCustomLinksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNie(nameNie []string) ApiExtrasCustomLinksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNiew(nameNiew []string) ApiExtrasCustomLinksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNire(nameNire []string) ApiExtrasCustomLinksListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNisw(nameNisw []string) ApiExtrasCustomLinksListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNre(nameNre []string) ApiExtrasCustomLinksListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameRe(nameRe []string) ApiExtrasCustomLinksListRequest {
	r.nameRe = &nameRe
	return r
}

func (r ApiExtrasCustomLinksListRequest) NewWindow(newWindow bool) ApiExtrasCustomLinksListRequest {
	r.newWindow = &newWindow
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomLinksListRequest) Offset(offset int32) ApiExtrasCustomLinksListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasCustomLinksListRequest) Q(q string) ApiExtrasCustomLinksListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasCustomLinksListRequest) Sort(sort string) ApiExtrasCustomLinksListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrl(targetUrl []string) ApiExtrasCustomLinksListRequest {
	r.targetUrl = &targetUrl
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIc(targetUrlIc []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIc = &targetUrlIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIe(targetUrlIe []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIe = &targetUrlIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIew(targetUrlIew []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIew = &targetUrlIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIre(targetUrlIre []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIre = &targetUrlIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIsw(targetUrlIsw []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIsw = &targetUrlIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlN(targetUrlN []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlN = &targetUrlN
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNic(targetUrlNic []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNic = &targetUrlNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNie(targetUrlNie []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNie = &targetUrlNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNiew(targetUrlNiew []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNiew = &targetUrlNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNire(targetUrlNire []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNire = &targetUrlNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNisw(targetUrlNisw []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNisw = &targetUrlNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNre(targetUrlNre []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNre = &targetUrlNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlRe(targetUrlRe []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlRe = &targetUrlRe
	return r
}

func (r ApiExtrasCustomLinksListRequest) Teams(teams []string) ApiExtrasCustomLinksListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasCustomLinksListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasCustomLinksListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasCustomLinksListRequest) TeamsN(teamsN string) ApiExtrasCustomLinksListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasCustomLinksListRequest) Text(text []string) ApiExtrasCustomLinksListRequest {
	r.text = &text
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIc(textIc []string) ApiExtrasCustomLinksListRequest {
	r.textIc = &textIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIe(textIe []string) ApiExtrasCustomLinksListRequest {
	r.textIe = &textIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIew(textIew []string) ApiExtrasCustomLinksListRequest {
	r.textIew = &textIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIre(textIre []string) ApiExtrasCustomLinksListRequest {
	r.textIre = &textIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIsw(textIsw []string) ApiExtrasCustomLinksListRequest {
	r.textIsw = &textIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextN(textN []string) ApiExtrasCustomLinksListRequest {
	r.textN = &textN
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNic(textNic []string) ApiExtrasCustomLinksListRequest {
	r.textNic = &textNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNie(textNie []string) ApiExtrasCustomLinksListRequest {
	r.textNie = &textNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNiew(textNiew []string) ApiExtrasCustomLinksListRequest {
	r.textNiew = &textNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNire(textNire []string) ApiExtrasCustomLinksListRequest {
	r.textNire = &textNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNisw(textNisw []string) ApiExtrasCustomLinksListRequest {
	r.textNisw = &textNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNre(textNre []string) ApiExtrasCustomLinksListRequest {
	r.textNre = &textNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextRe(textRe []string) ApiExtrasCustomLinksListRequest {
	r.textRe = &textRe
	return r
}

func (r ApiExtrasCustomLinksListRequest) Weight(weight []int32) ApiExtrasCustomLinksListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightGt(weightGt []int32) ApiExtrasCustomLinksListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightGte(weightGte []int32) ApiExtrasCustomLinksListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightLt(weightLt []int32) ApiExtrasCustomLinksListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightLte(weightLte []int32) ApiExtrasCustomLinksListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightN(weightN []int32) ApiExtrasCustomLinksListRequest {
	r.weightN = &weightN
	return r
}

// Serializer Depth
func (r ApiExtrasCustomLinksListRequest) Depth(depth int32) ApiExtrasCustomLinksListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasCustomLinksListRequest) Execute() (*PaginatedCustomLinkList, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksListExecute(r)
}

/*
ExtrasCustomLinksList Method for ExtrasCustomLinksList

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksListRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksList(ctx context.Context) ApiExtrasCustomLinksListRequest {
	return ApiExtrasCustomLinksListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCustomLinkList
func (a *ExtrasAPIService) ExtrasCustomLinksListExecute(r ApiExtrasCustomLinksListRequest) (*PaginatedCustomLinkList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCustomLinkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.buttonClass != nil {
		t := *r.buttonClass
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class", t, "form", "multi")
		}
	}
	if r.buttonClassIc != nil {
		t := *r.buttonClassIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ic", t, "form", "multi")
		}
	}
	if r.buttonClassIe != nil {
		t := *r.buttonClassIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ie", t, "form", "multi")
		}
	}
	if r.buttonClassIew != nil {
		t := *r.buttonClassIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__iew", t, "form", "multi")
		}
	}
	if r.buttonClassIre != nil {
		t := *r.buttonClassIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ire", t, "form", "multi")
		}
	}
	if r.buttonClassIsw != nil {
		t := *r.buttonClassIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__isw", t, "form", "multi")
		}
	}
	if r.buttonClassN != nil {
		t := *r.buttonClassN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__n", t, "form", "multi")
		}
	}
	if r.buttonClassNic != nil {
		t := *r.buttonClassNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nic", t, "form", "multi")
		}
	}
	if r.buttonClassNie != nil {
		t := *r.buttonClassNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nie", t, "form", "multi")
		}
	}
	if r.buttonClassNiew != nil {
		t := *r.buttonClassNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__niew", t, "form", "multi")
		}
	}
	if r.buttonClassNire != nil {
		t := *r.buttonClassNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nire", t, "form", "multi")
		}
	}
	if r.buttonClassNisw != nil {
		t := *r.buttonClassNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nisw", t, "form", "multi")
		}
	}
	if r.buttonClassNre != nil {
		t := *r.buttonClassNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nre", t, "form", "multi")
		}
	}
	if r.buttonClassRe != nil {
		t := *r.buttonClassRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__re", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type", r.contentType, "form", "")
	}
	if r.contentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type__n", r.contentTypeN, "form", "")
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.groupName != nil {
		t := *r.groupName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", t, "form", "multi")
		}
	}
	if r.groupNameIc != nil {
		t := *r.groupNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ic", t, "form", "multi")
		}
	}
	if r.groupNameIe != nil {
		t := *r.groupNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ie", t, "form", "multi")
		}
	}
	if r.groupNameIew != nil {
		t := *r.groupNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__iew", t, "form", "multi")
		}
	}
	if r.groupNameIre != nil {
		t := *r.groupNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ire", t, "form", "multi")
		}
	}
	if r.groupNameIsw != nil {
		t := *r.groupNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__isw", t, "form", "multi")
		}
	}
	if r.groupNameN != nil {
		t := *r.groupNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__n", t, "form", "multi")
		}
	}
	if r.groupNameNic != nil {
		t := *r.groupNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nic", t, "form", "multi")
		}
	}
	if r.groupNameNie != nil {
		t := *r.groupNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nie", t, "form", "multi")
		}
	}
	if r.groupNameNiew != nil {
		t := *r.groupNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__niew", t, "form", "multi")
		}
	}
	if r.groupNameNire != nil {
		t := *r.groupNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nire", t, "form", "multi")
		}
	}
	if r.groupNameNisw != nil {
		t := *r.groupNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nisw", t, "form", "multi")
		}
	}
	if r.groupNameNre != nil {
		t := *r.groupNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nre", t, "form", "multi")
		}
	}
	if r.groupNameRe != nil {
		t := *r.groupNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__re", t, "form", "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.newWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "new_window", r.newWindow, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.targetUrl != nil {
		t := *r.targetUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url", t, "form", "multi")
		}
	}
	if r.targetUrlIc != nil {
		t := *r.targetUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__ic", t, "form", "multi")
		}
	}
	if r.targetUrlIe != nil {
		t := *r.targetUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__ie", t, "form", "multi")
		}
	}
	if r.targetUrlIew != nil {
		t := *r.targetUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__iew", t, "form", "multi")
		}
	}
	if r.targetUrlIre != nil {
		t := *r.targetUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__ire", t, "form", "multi")
		}
	}
	if r.targetUrlIsw != nil {
		t := *r.targetUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__isw", t, "form", "multi")
		}
	}
	if r.targetUrlN != nil {
		t := *r.targetUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__n", t, "form", "multi")
		}
	}
	if r.targetUrlNic != nil {
		t := *r.targetUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nic", t, "form", "multi")
		}
	}
	if r.targetUrlNie != nil {
		t := *r.targetUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nie", t, "form", "multi")
		}
	}
	if r.targetUrlNiew != nil {
		t := *r.targetUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__niew", t, "form", "multi")
		}
	}
	if r.targetUrlNire != nil {
		t := *r.targetUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nire", t, "form", "multi")
		}
	}
	if r.targetUrlNisw != nil {
		t := *r.targetUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nisw", t, "form", "multi")
		}
	}
	if r.targetUrlNre != nil {
		t := *r.targetUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__nre", t, "form", "multi")
		}
	}
	if r.targetUrlRe != nil {
		t := *r.targetUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "target_url__re", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.text != nil {
		t := *r.text
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text", t, "form", "multi")
		}
	}
	if r.textIc != nil {
		t := *r.textIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__ic", t, "form", "multi")
		}
	}
	if r.textIe != nil {
		t := *r.textIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__ie", t, "form", "multi")
		}
	}
	if r.textIew != nil {
		t := *r.textIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__iew", t, "form", "multi")
		}
	}
	if r.textIre != nil {
		t := *r.textIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__ire", t, "form", "multi")
		}
	}
	if r.textIsw != nil {
		t := *r.textIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__isw", t, "form", "multi")
		}
	}
	if r.textN != nil {
		t := *r.textN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__n", t, "form", "multi")
		}
	}
	if r.textNic != nil {
		t := *r.textNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nic", t, "form", "multi")
		}
	}
	if r.textNie != nil {
		t := *r.textNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nie", t, "form", "multi")
		}
	}
	if r.textNiew != nil {
		t := *r.textNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__niew", t, "form", "multi")
		}
	}
	if r.textNire != nil {
		t := *r.textNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nire", t, "form", "multi")
		}
	}
	if r.textNisw != nil {
		t := *r.textNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nisw", t, "form", "multi")
		}
	}
	if r.textNre != nil {
		t := *r.textNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nre", t, "form", "multi")
		}
	}
	if r.textRe != nil {
		t := *r.textRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__re", t, "form", "multi")
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "form", "multi")
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "form", "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "form", "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "form", "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "form", "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomLinksNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasCustomLinksNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasCustomLinksNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomLinksNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksNotesCreateExecute(r)
}

/*
ExtrasCustomLinksNotesCreate Method for ExtrasCustomLinksNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksNotesCreate(ctx context.Context, id string) ApiExtrasCustomLinksNotesCreateRequest {
	return ApiExtrasCustomLinksNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasCustomLinksNotesCreateExecute(r ApiExtrasCustomLinksNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasCustomLinksNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomLinksNotesListRequest) Limit(limit int32) ApiExtrasCustomLinksNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomLinksNotesListRequest) Offset(offset int32) ApiExtrasCustomLinksNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasCustomLinksNotesListRequest) Depth(depth int32) ApiExtrasCustomLinksNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasCustomLinksNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksNotesListExecute(r)
}

/*
ExtrasCustomLinksNotesList Method for ExtrasCustomLinksNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksNotesList(ctx context.Context, id string) ApiExtrasCustomLinksNotesListRequest {
	return ApiExtrasCustomLinksNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasCustomLinksNotesListExecute(r ApiExtrasCustomLinksNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCustomLinkRequest *PatchedCustomLinkRequest
}

func (r ApiExtrasCustomLinksPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomLinksPartialUpdateRequest) PatchedCustomLinkRequest(patchedCustomLinkRequest PatchedCustomLinkRequest) ApiExtrasCustomLinksPartialUpdateRequest {
	r.patchedCustomLinkRequest = &patchedCustomLinkRequest
	return r
}

func (r ApiExtrasCustomLinksPartialUpdateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksPartialUpdateExecute(r)
}

/*
ExtrasCustomLinksPartialUpdate Method for ExtrasCustomLinksPartialUpdate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksPartialUpdate(ctx context.Context, id string) ApiExtrasCustomLinksPartialUpdateRequest {
	return ApiExtrasCustomLinksPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksPartialUpdateExecute(r ApiExtrasCustomLinksPartialUpdateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCustomLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasCustomLinksRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasCustomLinksRetrieveRequest) Depth(depth int32) ApiExtrasCustomLinksRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasCustomLinksRetrieveRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksRetrieveExecute(r)
}

/*
ExtrasCustomLinksRetrieve Method for ExtrasCustomLinksRetrieve

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksRetrieve(ctx context.Context, id string) ApiExtrasCustomLinksRetrieveRequest {
	return ApiExtrasCustomLinksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksRetrieveExecute(r ApiExtrasCustomLinksRetrieveRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	customLinkRequest *CustomLinkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasCustomLinksUpdateRequest) CustomLinkRequest(customLinkRequest CustomLinkRequest) ApiExtrasCustomLinksUpdateRequest {
	r.customLinkRequest = &customLinkRequest
	return r
}

func (r ApiExtrasCustomLinksUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasCustomLinksUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasCustomLinksUpdateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksUpdateExecute(r)
}

/*
ExtrasCustomLinksUpdate Method for ExtrasCustomLinksUpdate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksUpdate(ctx context.Context, id string) ApiExtrasCustomLinksUpdateRequest {
	return ApiExtrasCustomLinksUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksUpdateExecute(r ApiExtrasCustomLinksUpdateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLinkRequest == nil {
		return localVarReturnValue, nil, reportError("customLinkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupMembershipsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupMembershipsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasDynamicGroupMembershipsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasDynamicGroupMembershipsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupMembershipsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupMembershipsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupMembershipsBulkDestroyExecute(r)
}

/*
ExtrasDynamicGroupMembershipsBulkDestroy Method for ExtrasDynamicGroupMembershipsBulkDestroy

Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupMembershipsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsBulkDestroy(ctx context.Context) ApiExtrasDynamicGroupMembershipsBulkDestroyRequest {
	return ApiExtrasDynamicGroupMembershipsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsBulkDestroyExecute(r ApiExtrasDynamicGroupMembershipsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupMembershipsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-group-memberships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableDynamicGroupMembershipRequest *[]PatchedBulkWritableDynamicGroupMembershipRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest) PatchedBulkWritableDynamicGroupMembershipRequest(patchedBulkWritableDynamicGroupMembershipRequest []PatchedBulkWritableDynamicGroupMembershipRequest) ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest {
	r.patchedBulkWritableDynamicGroupMembershipRequest = &patchedBulkWritableDynamicGroupMembershipRequest
	return r
}

func (r ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest) Execute() ([]DynamicGroupMembership, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupMembershipsBulkPartialUpdateExecute(r)
}

/*
ExtrasDynamicGroupMembershipsBulkPartialUpdate Method for ExtrasDynamicGroupMembershipsBulkPartialUpdate

Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsBulkPartialUpdate(ctx context.Context) ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest {
	return ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []DynamicGroupMembership
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsBulkPartialUpdateExecute(r ApiExtrasDynamicGroupMembershipsBulkPartialUpdateRequest) ([]DynamicGroupMembership, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DynamicGroupMembership
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupMembershipsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-group-memberships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableDynamicGroupMembershipRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableDynamicGroupMembershipRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableDynamicGroupMembershipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupMembershipsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableDynamicGroupMembershipRequest *[]BulkWritableDynamicGroupMembershipRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupMembershipsBulkUpdateRequest) BulkWritableDynamicGroupMembershipRequest(bulkWritableDynamicGroupMembershipRequest []BulkWritableDynamicGroupMembershipRequest) ApiExtrasDynamicGroupMembershipsBulkUpdateRequest {
	r.bulkWritableDynamicGroupMembershipRequest = &bulkWritableDynamicGroupMembershipRequest
	return r
}

func (r ApiExtrasDynamicGroupMembershipsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupMembershipsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupMembershipsBulkUpdateRequest) Execute() ([]DynamicGroupMembership, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupMembershipsBulkUpdateExecute(r)
}

/*
ExtrasDynamicGroupMembershipsBulkUpdate Method for ExtrasDynamicGroupMembershipsBulkUpdate

Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupMembershipsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsBulkUpdate(ctx context.Context) ApiExtrasDynamicGroupMembershipsBulkUpdateRequest {
	return ApiExtrasDynamicGroupMembershipsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []DynamicGroupMembership
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsBulkUpdateExecute(r ApiExtrasDynamicGroupMembershipsBulkUpdateRequest) ([]DynamicGroupMembership, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DynamicGroupMembership
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupMembershipsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-group-memberships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableDynamicGroupMembershipRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableDynamicGroupMembershipRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableDynamicGroupMembershipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupMembershipsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	dynamicGroupMembershipRequest *DynamicGroupMembershipRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupMembershipsCreateRequest) DynamicGroupMembershipRequest(dynamicGroupMembershipRequest DynamicGroupMembershipRequest) ApiExtrasDynamicGroupMembershipsCreateRequest {
	r.dynamicGroupMembershipRequest = &dynamicGroupMembershipRequest
	return r
}

func (r ApiExtrasDynamicGroupMembershipsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupMembershipsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupMembershipsCreateRequest) Execute() (*DynamicGroupMembership, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupMembershipsCreateExecute(r)
}

/*
ExtrasDynamicGroupMembershipsCreate Method for ExtrasDynamicGroupMembershipsCreate

Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupMembershipsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsCreate(ctx context.Context) ApiExtrasDynamicGroupMembershipsCreateRequest {
	return ApiExtrasDynamicGroupMembershipsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DynamicGroupMembership
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsCreateExecute(r ApiExtrasDynamicGroupMembershipsCreateRequest) (*DynamicGroupMembership, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroupMembership
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupMembershipsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-group-memberships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dynamicGroupMembershipRequest == nil {
		return localVarReturnValue, nil, reportError("dynamicGroupMembershipRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dynamicGroupMembershipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupMembershipsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupMembershipsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupMembershipsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupMembershipsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupMembershipsDestroyExecute(r)
}

/*
ExtrasDynamicGroupMembershipsDestroy Method for ExtrasDynamicGroupMembershipsDestroy

Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group membership.
 @return ApiExtrasDynamicGroupMembershipsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsDestroy(ctx context.Context, id string) ApiExtrasDynamicGroupMembershipsDestroyRequest {
	return ApiExtrasDynamicGroupMembershipsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsDestroyExecute(r ApiExtrasDynamicGroupMembershipsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupMembershipsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-group-memberships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupMembershipsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	created *[]time.Time
	format *CircuitsCircuitTerminationsListFormatParameter
	group *[]string
	groupN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	limit *int32
	offset *int32
	operator *[]ExtrasDynamicGroupMembershipsListOperatorParameterInner
	operatorIc *[]string
	operatorIe *[]string
	operatorIew *[]string
	operatorIre *[]string
	operatorIsw *[]string
	operatorN *[]ExtrasDynamicGroupMembershipsListOperatorParameterInner
	operatorNic *[]string
	operatorNie *[]string
	operatorNiew *[]string
	operatorNire *[]string
	operatorNisw *[]string
	operatorNre *[]string
	operatorRe *[]string
	parentGroup *[]string
	parentGroupN *[]string
	q *string
	sort *string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
	depth *int32
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) Created(created []time.Time) ApiExtrasDynamicGroupMembershipsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupMembershipsListRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) Group(group []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.group = &group
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) GroupN(groupN []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.groupN = &groupN
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasDynamicGroupMembershipsListRequest) Id(id []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdIc(idIc []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdIe(idIe []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdIew(idIew []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdIre(idIre []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdIsw(idIsw []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdN(idN []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdNic(idNic []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdNie(idNie []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdNiew(idNiew []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdNire(idNire []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdNisw(idNisw []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdNre(idNre []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) IdRe(idRe []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasDynamicGroupMembershipsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// Number of results to return per page.
func (r ApiExtrasDynamicGroupMembershipsListRequest) Limit(limit int32) ApiExtrasDynamicGroupMembershipsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasDynamicGroupMembershipsListRequest) Offset(offset int32) ApiExtrasDynamicGroupMembershipsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) Operator(operator []ExtrasDynamicGroupMembershipsListOperatorParameterInner) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operator = &operator
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorIc(operatorIc []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorIc = &operatorIc
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorIe(operatorIe []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorIe = &operatorIe
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorIew(operatorIew []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorIew = &operatorIew
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorIre(operatorIre []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorIre = &operatorIre
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorIsw(operatorIsw []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorIsw = &operatorIsw
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorN(operatorN []ExtrasDynamicGroupMembershipsListOperatorParameterInner) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorN = &operatorN
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorNic(operatorNic []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorNic = &operatorNic
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorNie(operatorNie []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorNie = &operatorNie
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorNiew(operatorNiew []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorNiew = &operatorNiew
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorNire(operatorNire []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorNire = &operatorNire
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorNisw(operatorNisw []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorNisw = &operatorNisw
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorNre(operatorNre []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorNre = &operatorNre
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) OperatorRe(operatorRe []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.operatorRe = &operatorRe
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) ParentGroup(parentGroup []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.parentGroup = &parentGroup
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) ParentGroupN(parentGroupN []string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.parentGroupN = &parentGroupN
	return r
}

// Search
func (r ApiExtrasDynamicGroupMembershipsListRequest) Q(q string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasDynamicGroupMembershipsListRequest) Sort(sort string) ApiExtrasDynamicGroupMembershipsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) Weight(weight []int32) ApiExtrasDynamicGroupMembershipsListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) WeightGt(weightGt []int32) ApiExtrasDynamicGroupMembershipsListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) WeightGte(weightGte []int32) ApiExtrasDynamicGroupMembershipsListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) WeightLt(weightLt []int32) ApiExtrasDynamicGroupMembershipsListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) WeightLte(weightLte []int32) ApiExtrasDynamicGroupMembershipsListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) WeightN(weightN []int32) ApiExtrasDynamicGroupMembershipsListRequest {
	r.weightN = &weightN
	return r
}

// Serializer Depth
func (r ApiExtrasDynamicGroupMembershipsListRequest) Depth(depth int32) ApiExtrasDynamicGroupMembershipsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasDynamicGroupMembershipsListRequest) Execute() (*PaginatedDynamicGroupMembershipList, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupMembershipsListExecute(r)
}

/*
ExtrasDynamicGroupMembershipsList Method for ExtrasDynamicGroupMembershipsList

Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupMembershipsListRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsList(ctx context.Context) ApiExtrasDynamicGroupMembershipsListRequest {
	return ApiExtrasDynamicGroupMembershipsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDynamicGroupMembershipList
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsListExecute(r ApiExtrasDynamicGroupMembershipsListRequest) (*PaginatedDynamicGroupMembershipList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDynamicGroupMembershipList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupMembershipsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-group-memberships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.group != nil {
		t := *r.group
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group", t, "form", "multi")
		}
	}
	if r.groupN != nil {
		t := *r.groupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group__n", t, "form", "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.operator != nil {
		t := *r.operator
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator", t, "form", "multi")
		}
	}
	if r.operatorIc != nil {
		t := *r.operatorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__ic", t, "form", "multi")
		}
	}
	if r.operatorIe != nil {
		t := *r.operatorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__ie", t, "form", "multi")
		}
	}
	if r.operatorIew != nil {
		t := *r.operatorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__iew", t, "form", "multi")
		}
	}
	if r.operatorIre != nil {
		t := *r.operatorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__ire", t, "form", "multi")
		}
	}
	if r.operatorIsw != nil {
		t := *r.operatorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__isw", t, "form", "multi")
		}
	}
	if r.operatorN != nil {
		t := *r.operatorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__n", t, "form", "multi")
		}
	}
	if r.operatorNic != nil {
		t := *r.operatorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nic", t, "form", "multi")
		}
	}
	if r.operatorNie != nil {
		t := *r.operatorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nie", t, "form", "multi")
		}
	}
	if r.operatorNiew != nil {
		t := *r.operatorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__niew", t, "form", "multi")
		}
	}
	if r.operatorNire != nil {
		t := *r.operatorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nire", t, "form", "multi")
		}
	}
	if r.operatorNisw != nil {
		t := *r.operatorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nisw", t, "form", "multi")
		}
	}
	if r.operatorNre != nil {
		t := *r.operatorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__nre", t, "form", "multi")
		}
	}
	if r.operatorRe != nil {
		t := *r.operatorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "operator__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "operator__re", t, "form", "multi")
		}
	}
	if r.parentGroup != nil {
		t := *r.parentGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_group", t, "form", "multi")
		}
	}
	if r.parentGroupN != nil {
		t := *r.parentGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_group__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "form", "multi")
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "form", "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "form", "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "form", "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "form", "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupMembershipsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedDynamicGroupMembershipRequest *PatchedDynamicGroupMembershipRequest
}

func (r ApiExtrasDynamicGroupMembershipsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupMembershipsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupMembershipsPartialUpdateRequest) PatchedDynamicGroupMembershipRequest(patchedDynamicGroupMembershipRequest PatchedDynamicGroupMembershipRequest) ApiExtrasDynamicGroupMembershipsPartialUpdateRequest {
	r.patchedDynamicGroupMembershipRequest = &patchedDynamicGroupMembershipRequest
	return r
}

func (r ApiExtrasDynamicGroupMembershipsPartialUpdateRequest) Execute() (*DynamicGroupMembership, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupMembershipsPartialUpdateExecute(r)
}

/*
ExtrasDynamicGroupMembershipsPartialUpdate Method for ExtrasDynamicGroupMembershipsPartialUpdate

Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group membership.
 @return ApiExtrasDynamicGroupMembershipsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsPartialUpdate(ctx context.Context, id string) ApiExtrasDynamicGroupMembershipsPartialUpdateRequest {
	return ApiExtrasDynamicGroupMembershipsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroupMembership
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsPartialUpdateExecute(r ApiExtrasDynamicGroupMembershipsPartialUpdateRequest) (*DynamicGroupMembership, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroupMembership
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupMembershipsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-group-memberships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDynamicGroupMembershipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupMembershipsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasDynamicGroupMembershipsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupMembershipsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasDynamicGroupMembershipsRetrieveRequest) Depth(depth int32) ApiExtrasDynamicGroupMembershipsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasDynamicGroupMembershipsRetrieveRequest) Execute() (*DynamicGroupMembership, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupMembershipsRetrieveExecute(r)
}

/*
ExtrasDynamicGroupMembershipsRetrieve Method for ExtrasDynamicGroupMembershipsRetrieve

Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group membership.
 @return ApiExtrasDynamicGroupMembershipsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsRetrieve(ctx context.Context, id string) ApiExtrasDynamicGroupMembershipsRetrieveRequest {
	return ApiExtrasDynamicGroupMembershipsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroupMembership
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsRetrieveExecute(r ApiExtrasDynamicGroupMembershipsRetrieveRequest) (*DynamicGroupMembership, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroupMembership
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupMembershipsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-group-memberships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupMembershipsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	dynamicGroupMembershipRequest *DynamicGroupMembershipRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupMembershipsUpdateRequest) DynamicGroupMembershipRequest(dynamicGroupMembershipRequest DynamicGroupMembershipRequest) ApiExtrasDynamicGroupMembershipsUpdateRequest {
	r.dynamicGroupMembershipRequest = &dynamicGroupMembershipRequest
	return r
}

func (r ApiExtrasDynamicGroupMembershipsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupMembershipsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupMembershipsUpdateRequest) Execute() (*DynamicGroupMembership, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupMembershipsUpdateExecute(r)
}

/*
ExtrasDynamicGroupMembershipsUpdate Method for ExtrasDynamicGroupMembershipsUpdate

Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group membership.
 @return ApiExtrasDynamicGroupMembershipsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsUpdate(ctx context.Context, id string) ApiExtrasDynamicGroupMembershipsUpdateRequest {
	return ApiExtrasDynamicGroupMembershipsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroupMembership
func (a *ExtrasAPIService) ExtrasDynamicGroupMembershipsUpdateExecute(r ApiExtrasDynamicGroupMembershipsUpdateRequest) (*DynamicGroupMembership, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroupMembership
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupMembershipsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-group-memberships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dynamicGroupMembershipRequest == nil {
		return localVarReturnValue, nil, reportError("dynamicGroupMembershipRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dynamicGroupMembershipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasDynamicGroupsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasDynamicGroupsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsBulkDestroyExecute(r)
}

/*
ExtrasDynamicGroupsBulkDestroy Method for ExtrasDynamicGroupsBulkDestroy

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsBulkDestroy(ctx context.Context) ApiExtrasDynamicGroupsBulkDestroyRequest {
	return ApiExtrasDynamicGroupsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasDynamicGroupsBulkDestroyExecute(r ApiExtrasDynamicGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableDynamicGroupRequest *[]PatchedBulkWritableDynamicGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupsBulkPartialUpdateRequest) PatchedBulkWritableDynamicGroupRequest(patchedBulkWritableDynamicGroupRequest []PatchedBulkWritableDynamicGroupRequest) ApiExtrasDynamicGroupsBulkPartialUpdateRequest {
	r.patchedBulkWritableDynamicGroupRequest = &patchedBulkWritableDynamicGroupRequest
	return r
}

func (r ApiExtrasDynamicGroupsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupsBulkPartialUpdateRequest) Execute() ([]DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsBulkPartialUpdateExecute(r)
}

/*
ExtrasDynamicGroupsBulkPartialUpdate Method for ExtrasDynamicGroupsBulkPartialUpdate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsBulkPartialUpdate(ctx context.Context) ApiExtrasDynamicGroupsBulkPartialUpdateRequest {
	return ApiExtrasDynamicGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []DynamicGroup
func (a *ExtrasAPIService) ExtrasDynamicGroupsBulkPartialUpdateExecute(r ApiExtrasDynamicGroupsBulkPartialUpdateRequest) ([]DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableDynamicGroupRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableDynamicGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableDynamicGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableDynamicGroupRequest *[]BulkWritableDynamicGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupsBulkUpdateRequest) BulkWritableDynamicGroupRequest(bulkWritableDynamicGroupRequest []BulkWritableDynamicGroupRequest) ApiExtrasDynamicGroupsBulkUpdateRequest {
	r.bulkWritableDynamicGroupRequest = &bulkWritableDynamicGroupRequest
	return r
}

func (r ApiExtrasDynamicGroupsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupsBulkUpdateRequest) Execute() ([]DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsBulkUpdateExecute(r)
}

/*
ExtrasDynamicGroupsBulkUpdate Method for ExtrasDynamicGroupsBulkUpdate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsBulkUpdate(ctx context.Context) ApiExtrasDynamicGroupsBulkUpdateRequest {
	return ApiExtrasDynamicGroupsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []DynamicGroup
func (a *ExtrasAPIService) ExtrasDynamicGroupsBulkUpdateExecute(r ApiExtrasDynamicGroupsBulkUpdateRequest) ([]DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableDynamicGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableDynamicGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableDynamicGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	dynamicGroupRequest *DynamicGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupsCreateRequest) DynamicGroupRequest(dynamicGroupRequest DynamicGroupRequest) ApiExtrasDynamicGroupsCreateRequest {
	r.dynamicGroupRequest = &dynamicGroupRequest
	return r
}

func (r ApiExtrasDynamicGroupsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupsCreateRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsCreateExecute(r)
}

/*
ExtrasDynamicGroupsCreate Method for ExtrasDynamicGroupsCreate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsCreate(ctx context.Context) ApiExtrasDynamicGroupsCreateRequest {
	return ApiExtrasDynamicGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasAPIService) ExtrasDynamicGroupsCreateExecute(r ApiExtrasDynamicGroupsCreateRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dynamicGroupRequest == nil {
		return localVarReturnValue, nil, reportError("dynamicGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dynamicGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsDestroyExecute(r)
}

/*
ExtrasDynamicGroupsDestroy Method for ExtrasDynamicGroupsDestroy

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsDestroy(ctx context.Context, id string) ApiExtrasDynamicGroupsDestroyRequest {
	return ApiExtrasDynamicGroupsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasDynamicGroupsDestroyExecute(r ApiExtrasDynamicGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentType *[]int32
	contentTypeN *[]int32
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	groupType *[]ExtrasDynamicGroupsListGroupTypeParameterInner
	groupTypeIc *[]string
	groupTypeIe *[]string
	groupTypeIew *[]string
	groupTypeIre *[]string
	groupTypeIsw *[]string
	groupTypeN *[]ExtrasDynamicGroupsListGroupTypeParameterInner
	groupTypeNic *[]string
	groupTypeNie *[]string
	groupTypeNiew *[]string
	groupTypeNire *[]string
	groupTypeNisw *[]string
	groupTypeNre *[]string
	groupTypeRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	memberId *[]string
	memberIdIc *[]string
	memberIdIe *[]string
	memberIdIew *[]string
	memberIdIre *[]string
	memberIdIsw *[]string
	memberIdN *[]string
	memberIdNic *[]string
	memberIdNie *[]string
	memberIdNiew *[]string
	memberIdNire *[]string
	memberIdNisw *[]string
	memberIdNre *[]string
	memberIdRe *[]string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	tenant *[]string
	tenantIsnull *bool
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupIsnull *bool
	tenantGroupN *[]string
	tenantId *[]*string
	tenantIdIsnull *bool
	tenantIdN *[]*string
	depth *int32
}

func (r ApiExtrasDynamicGroupsListRequest) Contacts(contacts []string) ApiExtrasDynamicGroupsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasDynamicGroupsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasDynamicGroupsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasDynamicGroupsListRequest) ContactsN(contactsN string) ApiExtrasDynamicGroupsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) ContentType(contentType []int32) ApiExtrasDynamicGroupsListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) ContentTypeN(contentTypeN []int32) ApiExtrasDynamicGroupsListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Created(created []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasDynamicGroupsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) CreatedN(createdN []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Description(description []string) ApiExtrasDynamicGroupsListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIc(descriptionIc []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIe(descriptionIe []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIew(descriptionIew []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIre(descriptionIre []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionN(descriptionN []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNic(descriptionNic []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNie(descriptionNie []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNire(descriptionNire []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNre(descriptionNre []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionRe(descriptionRe []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsListRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupType(groupType []ExtrasDynamicGroupsListGroupTypeParameterInner) ApiExtrasDynamicGroupsListRequest {
	r.groupType = &groupType
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeIc(groupTypeIc []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeIc = &groupTypeIc
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeIe(groupTypeIe []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeIe = &groupTypeIe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeIew(groupTypeIew []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeIew = &groupTypeIew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeIre(groupTypeIre []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeIre = &groupTypeIre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeIsw(groupTypeIsw []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeIsw = &groupTypeIsw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeN(groupTypeN []ExtrasDynamicGroupsListGroupTypeParameterInner) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeN = &groupTypeN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeNic(groupTypeNic []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeNic = &groupTypeNic
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeNie(groupTypeNie []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeNie = &groupTypeNie
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeNiew(groupTypeNiew []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeNiew = &groupTypeNiew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeNire(groupTypeNire []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeNire = &groupTypeNire
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeNisw(groupTypeNisw []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeNisw = &groupTypeNisw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeNre(groupTypeNre []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeNre = &groupTypeNre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) GroupTypeRe(groupTypeRe []string) ApiExtrasDynamicGroupsListRequest {
	r.groupTypeRe = &groupTypeRe
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasDynamicGroupsListRequest) Id(id []string) ApiExtrasDynamicGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIc(idIc []string) ApiExtrasDynamicGroupsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIe(idIe []string) ApiExtrasDynamicGroupsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIew(idIew []string) ApiExtrasDynamicGroupsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIre(idIre []string) ApiExtrasDynamicGroupsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIsw(idIsw []string) ApiExtrasDynamicGroupsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdN(idN []string) ApiExtrasDynamicGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNic(idNic []string) ApiExtrasDynamicGroupsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNie(idNie []string) ApiExtrasDynamicGroupsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNiew(idNiew []string) ApiExtrasDynamicGroupsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNire(idNire []string) ApiExtrasDynamicGroupsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNisw(idNisw []string) ApiExtrasDynamicGroupsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNre(idNre []string) ApiExtrasDynamicGroupsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdRe(idRe []string) ApiExtrasDynamicGroupsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasDynamicGroupsListRequest) Limit(limit int32) ApiExtrasDynamicGroupsListRequest {
	r.limit = &limit
	return r
}

// Group member ID
func (r ApiExtrasDynamicGroupsListRequest) MemberId(memberId []string) ApiExtrasDynamicGroupsListRequest {
	r.memberId = &memberId
	return r
}

// Group member ID contains
func (r ApiExtrasDynamicGroupsListRequest) MemberIdIc(memberIdIc []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdIc = &memberIdIc
	return r
}

// Group member ID
func (r ApiExtrasDynamicGroupsListRequest) MemberIdIe(memberIdIe []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdIe = &memberIdIe
	return r
}

// Group member ID ends with
func (r ApiExtrasDynamicGroupsListRequest) MemberIdIew(memberIdIew []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdIew = &memberIdIew
	return r
}

// Group member ID matches regex
func (r ApiExtrasDynamicGroupsListRequest) MemberIdIre(memberIdIre []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdIre = &memberIdIre
	return r
}

// Group member ID starts with
func (r ApiExtrasDynamicGroupsListRequest) MemberIdIsw(memberIdIsw []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdIsw = &memberIdIsw
	return r
}

// Exclude Group member ID
func (r ApiExtrasDynamicGroupsListRequest) MemberIdN(memberIdN []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdN = &memberIdN
	return r
}

// Exclude Group member ID contains
func (r ApiExtrasDynamicGroupsListRequest) MemberIdNic(memberIdNic []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdNic = &memberIdNic
	return r
}

// Exclude Group member ID
func (r ApiExtrasDynamicGroupsListRequest) MemberIdNie(memberIdNie []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdNie = &memberIdNie
	return r
}

// Exclude Group member ID ends with
func (r ApiExtrasDynamicGroupsListRequest) MemberIdNiew(memberIdNiew []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdNiew = &memberIdNiew
	return r
}

// Exclude Group member ID matches regex
func (r ApiExtrasDynamicGroupsListRequest) MemberIdNire(memberIdNire []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdNire = &memberIdNire
	return r
}

// Exclude Group member ID starts with
func (r ApiExtrasDynamicGroupsListRequest) MemberIdNisw(memberIdNisw []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdNisw = &memberIdNisw
	return r
}

// Exclude Group member ID matches regex
func (r ApiExtrasDynamicGroupsListRequest) MemberIdNre(memberIdNre []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdNre = &memberIdNre
	return r
}

// Group member ID matches regex
func (r ApiExtrasDynamicGroupsListRequest) MemberIdRe(memberIdRe []string) ApiExtrasDynamicGroupsListRequest {
	r.memberIdRe = &memberIdRe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Name(name []string) ApiExtrasDynamicGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIc(nameIc []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIe(nameIe []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIew(nameIew []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIre(nameIre []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIsw(nameIsw []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameN(nameN []string) ApiExtrasDynamicGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNic(nameNic []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNie(nameNie []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNiew(nameNiew []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNire(nameNire []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNisw(nameNisw []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNre(nameNre []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameRe(nameRe []string) ApiExtrasDynamicGroupsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasDynamicGroupsListRequest) Offset(offset int32) ApiExtrasDynamicGroupsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasDynamicGroupsListRequest) Q(q string) ApiExtrasDynamicGroupsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasDynamicGroupsListRequest) Sort(sort string) ApiExtrasDynamicGroupsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Tags(tags []string) ApiExtrasDynamicGroupsListRequest {
	r.tags = &tags
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) TagsIsnull(tagsIsnull bool) ApiExtrasDynamicGroupsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) TagsN(tagsN []string) ApiExtrasDynamicGroupsListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Teams(teams []string) ApiExtrasDynamicGroupsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasDynamicGroupsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasDynamicGroupsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasDynamicGroupsListRequest) TeamsN(teamsN string) ApiExtrasDynamicGroupsListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Tenant(tenant []string) ApiExtrasDynamicGroupsListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (name or ID) is null
func (r ApiExtrasDynamicGroupsListRequest) TenantIsnull(tenantIsnull bool) ApiExtrasDynamicGroupsListRequest {
	r.tenantIsnull = &tenantIsnull
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) TenantN(tenantN []string) ApiExtrasDynamicGroupsListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) TenantGroup(tenantGroup []string) ApiExtrasDynamicGroupsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant Group (name or ID) is null
func (r ApiExtrasDynamicGroupsListRequest) TenantGroupIsnull(tenantGroupIsnull bool) ApiExtrasDynamicGroupsListRequest {
	r.tenantGroupIsnull = &tenantGroupIsnull
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) TenantGroupN(tenantGroupN []string) ApiExtrasDynamicGroupsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant (ID) (deprecated, use \&quot;tenant\&quot; filter instead)
func (r ApiExtrasDynamicGroupsListRequest) TenantId(tenantId []*string) ApiExtrasDynamicGroupsListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID) (deprecated, use \&quot;tenant\&quot; filter instead) is null
func (r ApiExtrasDynamicGroupsListRequest) TenantIdIsnull(tenantIdIsnull bool) ApiExtrasDynamicGroupsListRequest {
	r.tenantIdIsnull = &tenantIdIsnull
	return r
}

// Exclude Tenant (ID) (deprecated, use \&quot;tenant\&quot; filter instead)
func (r ApiExtrasDynamicGroupsListRequest) TenantIdN(tenantIdN []*string) ApiExtrasDynamicGroupsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

// Serializer Depth
func (r ApiExtrasDynamicGroupsListRequest) Depth(depth int32) ApiExtrasDynamicGroupsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Execute() (*PaginatedDynamicGroupList, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsListExecute(r)
}

/*
ExtrasDynamicGroupsList Method for ExtrasDynamicGroupsList

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsListRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsList(ctx context.Context) ApiExtrasDynamicGroupsListRequest {
	return ApiExtrasDynamicGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDynamicGroupList
func (a *ExtrasAPIService) ExtrasDynamicGroupsListExecute(r ApiExtrasDynamicGroupsListRequest) (*PaginatedDynamicGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDynamicGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentType != nil {
		t := *r.contentType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_type", t, "form", "multi")
		}
	}
	if r.contentTypeN != nil {
		t := *r.contentTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_type__n", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.groupType != nil {
		t := *r.groupType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type", t, "form", "multi")
		}
	}
	if r.groupTypeIc != nil {
		t := *r.groupTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__ic", t, "form", "multi")
		}
	}
	if r.groupTypeIe != nil {
		t := *r.groupTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__ie", t, "form", "multi")
		}
	}
	if r.groupTypeIew != nil {
		t := *r.groupTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__iew", t, "form", "multi")
		}
	}
	if r.groupTypeIre != nil {
		t := *r.groupTypeIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__ire", t, "form", "multi")
		}
	}
	if r.groupTypeIsw != nil {
		t := *r.groupTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__isw", t, "form", "multi")
		}
	}
	if r.groupTypeN != nil {
		t := *r.groupTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__n", t, "form", "multi")
		}
	}
	if r.groupTypeNic != nil {
		t := *r.groupTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nic", t, "form", "multi")
		}
	}
	if r.groupTypeNie != nil {
		t := *r.groupTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nie", t, "form", "multi")
		}
	}
	if r.groupTypeNiew != nil {
		t := *r.groupTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__niew", t, "form", "multi")
		}
	}
	if r.groupTypeNire != nil {
		t := *r.groupTypeNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nire", t, "form", "multi")
		}
	}
	if r.groupTypeNisw != nil {
		t := *r.groupTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nisw", t, "form", "multi")
		}
	}
	if r.groupTypeNre != nil {
		t := *r.groupTypeNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__nre", t, "form", "multi")
		}
	}
	if r.groupTypeRe != nil {
		t := *r.groupTypeRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_type__re", t, "form", "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.memberId != nil {
		t := *r.memberId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id", t, "form", "multi")
		}
	}
	if r.memberIdIc != nil {
		t := *r.memberIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__ic", t, "form", "multi")
		}
	}
	if r.memberIdIe != nil {
		t := *r.memberIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__ie", t, "form", "multi")
		}
	}
	if r.memberIdIew != nil {
		t := *r.memberIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__iew", t, "form", "multi")
		}
	}
	if r.memberIdIre != nil {
		t := *r.memberIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__ire", t, "form", "multi")
		}
	}
	if r.memberIdIsw != nil {
		t := *r.memberIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__isw", t, "form", "multi")
		}
	}
	if r.memberIdN != nil {
		t := *r.memberIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__n", t, "form", "multi")
		}
	}
	if r.memberIdNic != nil {
		t := *r.memberIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nic", t, "form", "multi")
		}
	}
	if r.memberIdNie != nil {
		t := *r.memberIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nie", t, "form", "multi")
		}
	}
	if r.memberIdNiew != nil {
		t := *r.memberIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__niew", t, "form", "multi")
		}
	}
	if r.memberIdNire != nil {
		t := *r.memberIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nire", t, "form", "multi")
		}
	}
	if r.memberIdNisw != nil {
		t := *r.memberIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nisw", t, "form", "multi")
		}
	}
	if r.memberIdNre != nil {
		t := *r.memberIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__nre", t, "form", "multi")
		}
	}
	if r.memberIdRe != nil {
		t := *r.memberIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_id__re", t, "form", "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "form", "multi")
		}
	}
	if r.tenantIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__isnull", r.tenantIsnull, "form", "")
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "form", "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "form", "multi")
		}
	}
	if r.tenantGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__isnull", r.tenantGroupIsnull, "form", "")
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "form", "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "form", "multi")
		}
	}
	if r.tenantIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__isnull", r.tenantIdIsnull, "form", "")
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsMembersRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasDynamicGroupsMembersRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsMembersRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasDynamicGroupsMembersRetrieveRequest) Depth(depth int32) ApiExtrasDynamicGroupsMembersRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasDynamicGroupsMembersRetrieveRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsMembersRetrieveExecute(r)
}

/*
ExtrasDynamicGroupsMembersRetrieve Method for ExtrasDynamicGroupsMembersRetrieve

List the member objects of this dynamic group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsMembersRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsMembersRetrieve(ctx context.Context, id string) ApiExtrasDynamicGroupsMembersRetrieveRequest {
	return ApiExtrasDynamicGroupsMembersRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasAPIService) ExtrasDynamicGroupsMembersRetrieveExecute(r ApiExtrasDynamicGroupsMembersRetrieveRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsMembersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/members/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasDynamicGroupsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasDynamicGroupsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsNotesCreateExecute(r)
}

/*
ExtrasDynamicGroupsNotesCreate Method for ExtrasDynamicGroupsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsNotesCreate(ctx context.Context, id string) ApiExtrasDynamicGroupsNotesCreateRequest {
	return ApiExtrasDynamicGroupsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasDynamicGroupsNotesCreateExecute(r ApiExtrasDynamicGroupsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasDynamicGroupsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasDynamicGroupsNotesListRequest) Limit(limit int32) ApiExtrasDynamicGroupsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasDynamicGroupsNotesListRequest) Offset(offset int32) ApiExtrasDynamicGroupsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasDynamicGroupsNotesListRequest) Depth(depth int32) ApiExtrasDynamicGroupsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasDynamicGroupsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsNotesListExecute(r)
}

/*
ExtrasDynamicGroupsNotesList Method for ExtrasDynamicGroupsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsNotesList(ctx context.Context, id string) ApiExtrasDynamicGroupsNotesListRequest {
	return ApiExtrasDynamicGroupsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasDynamicGroupsNotesListExecute(r ApiExtrasDynamicGroupsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedDynamicGroupRequest *PatchedDynamicGroupRequest
}

func (r ApiExtrasDynamicGroupsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupsPartialUpdateRequest) PatchedDynamicGroupRequest(patchedDynamicGroupRequest PatchedDynamicGroupRequest) ApiExtrasDynamicGroupsPartialUpdateRequest {
	r.patchedDynamicGroupRequest = &patchedDynamicGroupRequest
	return r
}

func (r ApiExtrasDynamicGroupsPartialUpdateRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsPartialUpdateExecute(r)
}

/*
ExtrasDynamicGroupsPartialUpdate Method for ExtrasDynamicGroupsPartialUpdate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsPartialUpdate(ctx context.Context, id string) ApiExtrasDynamicGroupsPartialUpdateRequest {
	return ApiExtrasDynamicGroupsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasAPIService) ExtrasDynamicGroupsPartialUpdateExecute(r ApiExtrasDynamicGroupsPartialUpdateRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDynamicGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasDynamicGroupsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasDynamicGroupsRetrieveRequest) Depth(depth int32) ApiExtrasDynamicGroupsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasDynamicGroupsRetrieveRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsRetrieveExecute(r)
}

/*
ExtrasDynamicGroupsRetrieve Method for ExtrasDynamicGroupsRetrieve

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsRetrieve(ctx context.Context, id string) ApiExtrasDynamicGroupsRetrieveRequest {
	return ApiExtrasDynamicGroupsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasAPIService) ExtrasDynamicGroupsRetrieveExecute(r ApiExtrasDynamicGroupsRetrieveRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	dynamicGroupRequest *DynamicGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasDynamicGroupsUpdateRequest) DynamicGroupRequest(dynamicGroupRequest DynamicGroupRequest) ApiExtrasDynamicGroupsUpdateRequest {
	r.dynamicGroupRequest = &dynamicGroupRequest
	return r
}

func (r ApiExtrasDynamicGroupsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasDynamicGroupsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasDynamicGroupsUpdateRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsUpdateExecute(r)
}

/*
ExtrasDynamicGroupsUpdate Method for ExtrasDynamicGroupsUpdate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDynamicGroupsUpdate(ctx context.Context, id string) ApiExtrasDynamicGroupsUpdateRequest {
	return ApiExtrasDynamicGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasAPIService) ExtrasDynamicGroupsUpdateExecute(r ApiExtrasDynamicGroupsUpdateRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDynamicGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dynamicGroupRequest == nil {
		return localVarReturnValue, nil, reportError("dynamicGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dynamicGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExportTemplatesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasExportTemplatesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasExportTemplatesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExportTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesBulkDestroyExecute(r)
}

/*
ExtrasExportTemplatesBulkDestroy Method for ExtrasExportTemplatesBulkDestroy

Destroy a list of export template objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkDestroy(ctx context.Context) ApiExtrasExportTemplatesBulkDestroyRequest {
	return ApiExtrasExportTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkDestroyExecute(r ApiExtrasExportTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableExportTemplateRequest *[]PatchedBulkWritableExportTemplateRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExportTemplatesBulkPartialUpdateRequest) PatchedBulkWritableExportTemplateRequest(patchedBulkWritableExportTemplateRequest []PatchedBulkWritableExportTemplateRequest) ApiExtrasExportTemplatesBulkPartialUpdateRequest {
	r.patchedBulkWritableExportTemplateRequest = &patchedBulkWritableExportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExportTemplatesBulkPartialUpdateRequest) Execute() ([]ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesBulkPartialUpdateExecute(r)
}

/*
ExtrasExportTemplatesBulkPartialUpdate Method for ExtrasExportTemplatesBulkPartialUpdate

Partial update a list of export template objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkPartialUpdate(ctx context.Context) ApiExtrasExportTemplatesBulkPartialUpdateRequest {
	return ApiExtrasExportTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkPartialUpdateExecute(r ApiExtrasExportTemplatesBulkPartialUpdateRequest) ([]ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableExportTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableExportTemplateRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableExportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableExportTemplateRequest *[]BulkWritableExportTemplateRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExportTemplatesBulkUpdateRequest) BulkWritableExportTemplateRequest(bulkWritableExportTemplateRequest []BulkWritableExportTemplateRequest) ApiExtrasExportTemplatesBulkUpdateRequest {
	r.bulkWritableExportTemplateRequest = &bulkWritableExportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExportTemplatesBulkUpdateRequest) Execute() ([]ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesBulkUpdateExecute(r)
}

/*
ExtrasExportTemplatesBulkUpdate Method for ExtrasExportTemplatesBulkUpdate

Update a list of export template objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkUpdate(ctx context.Context) ApiExtrasExportTemplatesBulkUpdateRequest {
	return ApiExtrasExportTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkUpdateExecute(r ApiExtrasExportTemplatesBulkUpdateRequest) ([]ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableExportTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableExportTemplateRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableExportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	exportTemplateRequest *ExportTemplateRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExportTemplatesCreateRequest) ExportTemplateRequest(exportTemplateRequest ExportTemplateRequest) ApiExtrasExportTemplatesCreateRequest {
	r.exportTemplateRequest = &exportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExportTemplatesCreateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesCreateExecute(r)
}

/*
ExtrasExportTemplatesCreate Method for ExtrasExportTemplatesCreate

Create one or more export template objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesCreate(ctx context.Context) ApiExtrasExportTemplatesCreateRequest {
	return ApiExtrasExportTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesCreateExecute(r ApiExtrasExportTemplatesCreateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("exportTemplateRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExportTemplatesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExportTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesDestroyExecute(r)
}

/*
ExtrasExportTemplatesDestroy Method for ExtrasExportTemplatesDestroy

Destroy a export template object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesDestroy(ctx context.Context, id string) ApiExtrasExportTemplatesDestroyRequest {
	return ApiExtrasExportTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasExportTemplatesDestroyExecute(r ApiExtrasExportTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentType *string
	contentTypeN *string
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	ownerContentType *string
	ownerContentTypeIsnull *bool
	ownerContentTypeN *string
	ownerObjectId *[]string
	ownerObjectIdIc *[]string
	ownerObjectIdIe *[]string
	ownerObjectIdIew *[]string
	ownerObjectIdIre *[]string
	ownerObjectIdIsnull *bool
	ownerObjectIdIsw *[]string
	ownerObjectIdN *[]string
	ownerObjectIdNic *[]string
	ownerObjectIdNie *[]string
	ownerObjectIdNiew *[]string
	ownerObjectIdNire *[]string
	ownerObjectIdNisw *[]string
	ownerObjectIdNre *[]string
	ownerObjectIdRe *[]string
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiExtrasExportTemplatesListRequest) Contacts(contacts []string) ApiExtrasExportTemplatesListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasExportTemplatesListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasExportTemplatesListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasExportTemplatesListRequest) ContactsN(contactsN string) ApiExtrasExportTemplatesListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ContentType(contentType string) ApiExtrasExportTemplatesListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ContentTypeN(contentTypeN string) ApiExtrasExportTemplatesListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasExportTemplatesListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasExportTemplatesListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasExportTemplatesListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasExportTemplatesListRequest) Id(id []string) ApiExtrasExportTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIc(idIc []string) ApiExtrasExportTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIe(idIe []string) ApiExtrasExportTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIew(idIew []string) ApiExtrasExportTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIre(idIre []string) ApiExtrasExportTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIsw(idIsw []string) ApiExtrasExportTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdN(idN []string) ApiExtrasExportTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNic(idNic []string) ApiExtrasExportTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNie(idNie []string) ApiExtrasExportTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNiew(idNiew []string) ApiExtrasExportTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNire(idNire []string) ApiExtrasExportTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNisw(idNisw []string) ApiExtrasExportTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNre(idNre []string) ApiExtrasExportTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdRe(idRe []string) ApiExtrasExportTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasExportTemplatesListRequest) Limit(limit int32) ApiExtrasExportTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Name(name []string) ApiExtrasExportTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIc(nameIc []string) ApiExtrasExportTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIe(nameIe []string) ApiExtrasExportTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIew(nameIew []string) ApiExtrasExportTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIre(nameIre []string) ApiExtrasExportTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIsw(nameIsw []string) ApiExtrasExportTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameN(nameN []string) ApiExtrasExportTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNic(nameNic []string) ApiExtrasExportTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNie(nameNie []string) ApiExtrasExportTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNiew(nameNiew []string) ApiExtrasExportTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNire(nameNire []string) ApiExtrasExportTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNisw(nameNisw []string) ApiExtrasExportTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNre(nameNre []string) ApiExtrasExportTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameRe(nameRe []string) ApiExtrasExportTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasExportTemplatesListRequest) Offset(offset int32) ApiExtrasExportTemplatesListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerContentType(ownerContentType string) ApiExtrasExportTemplatesListRequest {
	r.ownerContentType = &ownerContentType
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerContentTypeIsnull(ownerContentTypeIsnull bool) ApiExtrasExportTemplatesListRequest {
	r.ownerContentTypeIsnull = &ownerContentTypeIsnull
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerContentTypeN(ownerContentTypeN string) ApiExtrasExportTemplatesListRequest {
	r.ownerContentTypeN = &ownerContentTypeN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectId(ownerObjectId []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectId = &ownerObjectId
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIc(ownerObjectIdIc []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIc = &ownerObjectIdIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIe(ownerObjectIdIe []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIe = &ownerObjectIdIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIew(ownerObjectIdIew []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIew = &ownerObjectIdIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIre(ownerObjectIdIre []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIre = &ownerObjectIdIre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIsnull(ownerObjectIdIsnull bool) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIsnull = &ownerObjectIdIsnull
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIsw(ownerObjectIdIsw []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIsw = &ownerObjectIdIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdN(ownerObjectIdN []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdN = &ownerObjectIdN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNic(ownerObjectIdNic []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNic = &ownerObjectIdNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNie(ownerObjectIdNie []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNie = &ownerObjectIdNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNiew(ownerObjectIdNiew []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNiew = &ownerObjectIdNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNire(ownerObjectIdNire []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNire = &ownerObjectIdNire
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNisw(ownerObjectIdNisw []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNisw = &ownerObjectIdNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNre(ownerObjectIdNre []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNre = &ownerObjectIdNre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdRe(ownerObjectIdRe []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdRe = &ownerObjectIdRe
	return r
}

// Search
func (r ApiExtrasExportTemplatesListRequest) Q(q string) ApiExtrasExportTemplatesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasExportTemplatesListRequest) Sort(sort string) ApiExtrasExportTemplatesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Teams(teams []string) ApiExtrasExportTemplatesListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasExportTemplatesListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasExportTemplatesListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasExportTemplatesListRequest) TeamsN(teamsN string) ApiExtrasExportTemplatesListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiExtrasExportTemplatesListRequest) Depth(depth int32) ApiExtrasExportTemplatesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Execute() (*PaginatedExportTemplateList, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesListExecute(r)
}

/*
ExtrasExportTemplatesList Method for ExtrasExportTemplatesList

Retrieve a list of export template objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesListRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesList(ctx context.Context) ApiExtrasExportTemplatesListRequest {
	return ApiExtrasExportTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedExportTemplateList
func (a *ExtrasAPIService) ExtrasExportTemplatesListExecute(r ApiExtrasExportTemplatesListRequest) (*PaginatedExportTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedExportTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type", r.contentType, "form", "")
	}
	if r.contentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type__n", r.contentTypeN, "form", "")
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.ownerContentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_content_type", r.ownerContentType, "form", "")
	}
	if r.ownerContentTypeIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_content_type__isnull", r.ownerContentTypeIsnull, "form", "")
	}
	if r.ownerContentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_content_type__n", r.ownerContentTypeN, "form", "")
	}
	if r.ownerObjectId != nil {
		t := *r.ownerObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIc != nil {
		t := *r.ownerObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ic", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIe != nil {
		t := *r.ownerObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ie", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIew != nil {
		t := *r.ownerObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__iew", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIre != nil {
		t := *r.ownerObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__ire", t, "form", "multi")
		}
	}
	if r.ownerObjectIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__isnull", r.ownerObjectIdIsnull, "form", "")
	}
	if r.ownerObjectIdIsw != nil {
		t := *r.ownerObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__isw", t, "form", "multi")
		}
	}
	if r.ownerObjectIdN != nil {
		t := *r.ownerObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__n", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNic != nil {
		t := *r.ownerObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nic", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNie != nil {
		t := *r.ownerObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nie", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNiew != nil {
		t := *r.ownerObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__niew", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNire != nil {
		t := *r.ownerObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nire", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNisw != nil {
		t := *r.ownerObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nisw", t, "form", "multi")
		}
	}
	if r.ownerObjectIdNre != nil {
		t := *r.ownerObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__nre", t, "form", "multi")
		}
	}
	if r.ownerObjectIdRe != nil {
		t := *r.ownerObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner_object_id__re", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExportTemplatesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasExportTemplatesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasExportTemplatesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExportTemplatesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesNotesCreateExecute(r)
}

/*
ExtrasExportTemplatesNotesCreate Method for ExtrasExportTemplatesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesNotesCreate(ctx context.Context, id string) ApiExtrasExportTemplatesNotesCreateRequest {
	return ApiExtrasExportTemplatesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasExportTemplatesNotesCreateExecute(r ApiExtrasExportTemplatesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasExportTemplatesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasExportTemplatesNotesListRequest) Limit(limit int32) ApiExtrasExportTemplatesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasExportTemplatesNotesListRequest) Offset(offset int32) ApiExtrasExportTemplatesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasExportTemplatesNotesListRequest) Depth(depth int32) ApiExtrasExportTemplatesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasExportTemplatesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesNotesListExecute(r)
}

/*
ExtrasExportTemplatesNotesList Method for ExtrasExportTemplatesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesNotesList(ctx context.Context, id string) ApiExtrasExportTemplatesNotesListRequest {
	return ApiExtrasExportTemplatesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasExportTemplatesNotesListExecute(r ApiExtrasExportTemplatesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedExportTemplateRequest *PatchedExportTemplateRequest
}

func (r ApiExtrasExportTemplatesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExportTemplatesPartialUpdateRequest) PatchedExportTemplateRequest(patchedExportTemplateRequest PatchedExportTemplateRequest) ApiExtrasExportTemplatesPartialUpdateRequest {
	r.patchedExportTemplateRequest = &patchedExportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesPartialUpdateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesPartialUpdateExecute(r)
}

/*
ExtrasExportTemplatesPartialUpdate Method for ExtrasExportTemplatesPartialUpdate

Partial update a export template object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesPartialUpdate(ctx context.Context, id string) ApiExtrasExportTemplatesPartialUpdateRequest {
	return ApiExtrasExportTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesPartialUpdateExecute(r ApiExtrasExportTemplatesPartialUpdateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedExportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasExportTemplatesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasExportTemplatesRetrieveRequest) Depth(depth int32) ApiExtrasExportTemplatesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasExportTemplatesRetrieveRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesRetrieveExecute(r)
}

/*
ExtrasExportTemplatesRetrieve Method for ExtrasExportTemplatesRetrieve

Retrieve a export template object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesRetrieve(ctx context.Context, id string) ApiExtrasExportTemplatesRetrieveRequest {
	return ApiExtrasExportTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesRetrieveExecute(r ApiExtrasExportTemplatesRetrieveRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	exportTemplateRequest *ExportTemplateRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExportTemplatesUpdateRequest) ExportTemplateRequest(exportTemplateRequest ExportTemplateRequest) ApiExtrasExportTemplatesUpdateRequest {
	r.exportTemplateRequest = &exportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExportTemplatesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExportTemplatesUpdateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesUpdateExecute(r)
}

/*
ExtrasExportTemplatesUpdate Method for ExtrasExportTemplatesUpdate

Update a export template object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesUpdate(ctx context.Context, id string) ApiExtrasExportTemplatesUpdateRequest {
	return ApiExtrasExportTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesUpdateExecute(r ApiExtrasExportTemplatesUpdateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("exportTemplateRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExternalIntegrationsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasExternalIntegrationsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasExternalIntegrationsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExternalIntegrationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsBulkDestroyExecute(r)
}

/*
ExtrasExternalIntegrationsBulkDestroy Method for ExtrasExternalIntegrationsBulkDestroy

Destroy a list of external integration objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExternalIntegrationsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsBulkDestroy(ctx context.Context) ApiExtrasExternalIntegrationsBulkDestroyRequest {
	return ApiExtrasExternalIntegrationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasExternalIntegrationsBulkDestroyExecute(r ApiExtrasExternalIntegrationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableExternalIntegrationRequest *[]PatchedBulkWritableExternalIntegrationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExternalIntegrationsBulkPartialUpdateRequest) PatchedBulkWritableExternalIntegrationRequest(patchedBulkWritableExternalIntegrationRequest []PatchedBulkWritableExternalIntegrationRequest) ApiExtrasExternalIntegrationsBulkPartialUpdateRequest {
	r.patchedBulkWritableExternalIntegrationRequest = &patchedBulkWritableExternalIntegrationRequest
	return r
}

func (r ApiExtrasExternalIntegrationsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExternalIntegrationsBulkPartialUpdateRequest) Execute() ([]ExternalIntegration, *http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsBulkPartialUpdateExecute(r)
}

/*
ExtrasExternalIntegrationsBulkPartialUpdate Method for ExtrasExternalIntegrationsBulkPartialUpdate

Partial update a list of external integration objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExternalIntegrationsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsBulkPartialUpdate(ctx context.Context) ApiExtrasExternalIntegrationsBulkPartialUpdateRequest {
	return ApiExtrasExternalIntegrationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ExternalIntegration
func (a *ExtrasAPIService) ExtrasExternalIntegrationsBulkPartialUpdateExecute(r ApiExtrasExternalIntegrationsBulkPartialUpdateRequest) ([]ExternalIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ExternalIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableExternalIntegrationRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableExternalIntegrationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableExternalIntegrationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableExternalIntegrationRequest *[]BulkWritableExternalIntegrationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExternalIntegrationsBulkUpdateRequest) BulkWritableExternalIntegrationRequest(bulkWritableExternalIntegrationRequest []BulkWritableExternalIntegrationRequest) ApiExtrasExternalIntegrationsBulkUpdateRequest {
	r.bulkWritableExternalIntegrationRequest = &bulkWritableExternalIntegrationRequest
	return r
}

func (r ApiExtrasExternalIntegrationsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExternalIntegrationsBulkUpdateRequest) Execute() ([]ExternalIntegration, *http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsBulkUpdateExecute(r)
}

/*
ExtrasExternalIntegrationsBulkUpdate Method for ExtrasExternalIntegrationsBulkUpdate

Update a list of external integration objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExternalIntegrationsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsBulkUpdate(ctx context.Context) ApiExtrasExternalIntegrationsBulkUpdateRequest {
	return ApiExtrasExternalIntegrationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ExternalIntegration
func (a *ExtrasAPIService) ExtrasExternalIntegrationsBulkUpdateExecute(r ApiExtrasExternalIntegrationsBulkUpdateRequest) ([]ExternalIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ExternalIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableExternalIntegrationRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableExternalIntegrationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableExternalIntegrationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	externalIntegrationRequest *ExternalIntegrationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExternalIntegrationsCreateRequest) ExternalIntegrationRequest(externalIntegrationRequest ExternalIntegrationRequest) ApiExtrasExternalIntegrationsCreateRequest {
	r.externalIntegrationRequest = &externalIntegrationRequest
	return r
}

func (r ApiExtrasExternalIntegrationsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExternalIntegrationsCreateRequest) Execute() (*ExternalIntegration, *http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsCreateExecute(r)
}

/*
ExtrasExternalIntegrationsCreate Method for ExtrasExternalIntegrationsCreate

Create one or more external integration objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExternalIntegrationsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsCreate(ctx context.Context) ApiExtrasExternalIntegrationsCreateRequest {
	return ApiExtrasExternalIntegrationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExternalIntegration
func (a *ExtrasAPIService) ExtrasExternalIntegrationsCreateExecute(r ApiExtrasExternalIntegrationsCreateRequest) (*ExternalIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalIntegrationRequest == nil {
		return localVarReturnValue, nil, reportError("externalIntegrationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.externalIntegrationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExternalIntegrationsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExternalIntegrationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsDestroyExecute(r)
}

/*
ExtrasExternalIntegrationsDestroy Method for ExtrasExternalIntegrationsDestroy

Destroy a external integration object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this external integration.
 @return ApiExtrasExternalIntegrationsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsDestroy(ctx context.Context, id string) ApiExtrasExternalIntegrationsDestroyRequest {
	return ApiExtrasExternalIntegrationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasExternalIntegrationsDestroyExecute(r ApiExtrasExternalIntegrationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	caFilePath *[]string
	caFilePathIc *[]string
	caFilePathIe *[]string
	caFilePathIew *[]string
	caFilePathIre *[]string
	caFilePathIsw *[]string
	caFilePathN *[]string
	caFilePathNic *[]string
	caFilePathNie *[]string
	caFilePathNiew *[]string
	caFilePathNire *[]string
	caFilePathNisw *[]string
	caFilePathNre *[]string
	caFilePathRe *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroups *[]string
	dynamicGroupsN *string
	extraConfig *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasSecretsGroup *bool
	headers *[]string
	httpMethod *[]string
	httpMethodIc *[]string
	httpMethodIe *[]string
	httpMethodIew *[]string
	httpMethodIre *[]string
	httpMethodIsw *[]string
	httpMethodN *[]string
	httpMethodNic *[]string
	httpMethodNie *[]string
	httpMethodNiew *[]string
	httpMethodNire *[]string
	httpMethodNisw *[]string
	httpMethodNre *[]string
	httpMethodRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	remoteUrl *[]string
	remoteUrlIc *[]string
	remoteUrlIe *[]string
	remoteUrlIew *[]string
	remoteUrlIre *[]string
	remoteUrlIsw *[]string
	remoteUrlN *[]string
	remoteUrlNic *[]string
	remoteUrlNie *[]string
	remoteUrlNiew *[]string
	remoteUrlNire *[]string
	remoteUrlNisw *[]string
	remoteUrlNre *[]string
	remoteUrlRe *[]string
	secretsGroup *[]string
	secretsGroupIsnull *bool
	secretsGroupN *[]string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	timeout *[]int32
	timeoutGt *[]int32
	timeoutGte *[]int32
	timeoutLt *[]int32
	timeoutLte *[]int32
	timeoutN *[]int32
	verifySsl *bool
	depth *int32
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePath(caFilePath []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePath = &caFilePath
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathIc(caFilePathIc []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathIc = &caFilePathIc
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathIe(caFilePathIe []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathIe = &caFilePathIe
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathIew(caFilePathIew []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathIew = &caFilePathIew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathIre(caFilePathIre []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathIre = &caFilePathIre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathIsw(caFilePathIsw []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathIsw = &caFilePathIsw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathN(caFilePathN []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathN = &caFilePathN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathNic(caFilePathNic []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathNic = &caFilePathNic
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathNie(caFilePathNie []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathNie = &caFilePathNie
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathNiew(caFilePathNiew []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathNiew = &caFilePathNiew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathNire(caFilePathNire []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathNire = &caFilePathNire
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathNisw(caFilePathNisw []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathNisw = &caFilePathNisw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathNre(caFilePathNre []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathNre = &caFilePathNre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CaFilePathRe(caFilePathRe []string) ApiExtrasExternalIntegrationsListRequest {
	r.caFilePathRe = &caFilePathRe
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) Contacts(contacts []string) ApiExtrasExternalIntegrationsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasExternalIntegrationsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasExternalIntegrationsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasExternalIntegrationsListRequest) ContactsN(contactsN string) ApiExtrasExternalIntegrationsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) Created(created []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasExternalIntegrationsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) CreatedN(createdN []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasExternalIntegrationsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasExternalIntegrationsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasExternalIntegrationsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) ExtraConfig(extraConfig []string) ApiExtrasExternalIntegrationsListRequest {
	r.extraConfig = &extraConfig
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsListRequest {
	r.format = &format
	return r
}

// Has secrets group
func (r ApiExtrasExternalIntegrationsListRequest) HasSecretsGroup(hasSecretsGroup bool) ApiExtrasExternalIntegrationsListRequest {
	r.hasSecretsGroup = &hasSecretsGroup
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) Headers(headers []string) ApiExtrasExternalIntegrationsListRequest {
	r.headers = &headers
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethod(httpMethod []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethod = &httpMethod
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodIc(httpMethodIc []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodIc = &httpMethodIc
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodIe(httpMethodIe []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodIe = &httpMethodIe
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodIew(httpMethodIew []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodIew = &httpMethodIew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodIre(httpMethodIre []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodIre = &httpMethodIre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodIsw(httpMethodIsw []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodIsw = &httpMethodIsw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodN(httpMethodN []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodN = &httpMethodN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodNic(httpMethodNic []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodNic = &httpMethodNic
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodNie(httpMethodNie []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodNie = &httpMethodNie
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodNiew(httpMethodNiew []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodNiew = &httpMethodNiew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodNire(httpMethodNire []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodNire = &httpMethodNire
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodNisw(httpMethodNisw []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodNisw = &httpMethodNisw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodNre(httpMethodNre []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodNre = &httpMethodNre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) HttpMethodRe(httpMethodRe []string) ApiExtrasExternalIntegrationsListRequest {
	r.httpMethodRe = &httpMethodRe
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasExternalIntegrationsListRequest) Id(id []string) ApiExtrasExternalIntegrationsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdIc(idIc []string) ApiExtrasExternalIntegrationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdIe(idIe []string) ApiExtrasExternalIntegrationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdIew(idIew []string) ApiExtrasExternalIntegrationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdIre(idIre []string) ApiExtrasExternalIntegrationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdIsw(idIsw []string) ApiExtrasExternalIntegrationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdN(idN []string) ApiExtrasExternalIntegrationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdNic(idNic []string) ApiExtrasExternalIntegrationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdNie(idNie []string) ApiExtrasExternalIntegrationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdNiew(idNiew []string) ApiExtrasExternalIntegrationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdNire(idNire []string) ApiExtrasExternalIntegrationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdNisw(idNisw []string) ApiExtrasExternalIntegrationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdNre(idNre []string) ApiExtrasExternalIntegrationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) IdRe(idRe []string) ApiExtrasExternalIntegrationsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasExternalIntegrationsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasExternalIntegrationsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasExternalIntegrationsListRequest) Limit(limit int32) ApiExtrasExternalIntegrationsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) Name(name []string) ApiExtrasExternalIntegrationsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameIc(nameIc []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameIe(nameIe []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameIew(nameIew []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameIre(nameIre []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameIsw(nameIsw []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameN(nameN []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameNic(nameNic []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameNie(nameNie []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameNiew(nameNiew []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameNire(nameNire []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameNisw(nameNisw []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameNre(nameNre []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) NameRe(nameRe []string) ApiExtrasExternalIntegrationsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasExternalIntegrationsListRequest) Offset(offset int32) ApiExtrasExternalIntegrationsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasExternalIntegrationsListRequest) Q(q string) ApiExtrasExternalIntegrationsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrl(remoteUrl []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrl = &remoteUrl
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlIc(remoteUrlIc []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlIc = &remoteUrlIc
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlIe(remoteUrlIe []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlIe = &remoteUrlIe
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlIew(remoteUrlIew []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlIew = &remoteUrlIew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlIre(remoteUrlIre []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlIre = &remoteUrlIre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlIsw(remoteUrlIsw []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlIsw = &remoteUrlIsw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlN(remoteUrlN []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlN = &remoteUrlN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlNic(remoteUrlNic []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlNic = &remoteUrlNic
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlNie(remoteUrlNie []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlNie = &remoteUrlNie
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlNiew(remoteUrlNiew []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlNiew = &remoteUrlNiew
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlNire(remoteUrlNire []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlNire = &remoteUrlNire
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlNisw(remoteUrlNisw []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlNisw = &remoteUrlNisw
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlNre(remoteUrlNre []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlNre = &remoteUrlNre
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) RemoteUrlRe(remoteUrlRe []string) ApiExtrasExternalIntegrationsListRequest {
	r.remoteUrlRe = &remoteUrlRe
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) SecretsGroup(secretsGroup []string) ApiExtrasExternalIntegrationsListRequest {
	r.secretsGroup = &secretsGroup
	return r
}

// Secrets group (ID or name) is null
func (r ApiExtrasExternalIntegrationsListRequest) SecretsGroupIsnull(secretsGroupIsnull bool) ApiExtrasExternalIntegrationsListRequest {
	r.secretsGroupIsnull = &secretsGroupIsnull
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) SecretsGroupN(secretsGroupN []string) ApiExtrasExternalIntegrationsListRequest {
	r.secretsGroupN = &secretsGroupN
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasExternalIntegrationsListRequest) Sort(sort string) ApiExtrasExternalIntegrationsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) Tags(tags []string) ApiExtrasExternalIntegrationsListRequest {
	r.tags = &tags
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) TagsIsnull(tagsIsnull bool) ApiExtrasExternalIntegrationsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) TagsN(tagsN []string) ApiExtrasExternalIntegrationsListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) Teams(teams []string) ApiExtrasExternalIntegrationsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasExternalIntegrationsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasExternalIntegrationsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasExternalIntegrationsListRequest) TeamsN(teamsN string) ApiExtrasExternalIntegrationsListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) Timeout(timeout []int32) ApiExtrasExternalIntegrationsListRequest {
	r.timeout = &timeout
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) TimeoutGt(timeoutGt []int32) ApiExtrasExternalIntegrationsListRequest {
	r.timeoutGt = &timeoutGt
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) TimeoutGte(timeoutGte []int32) ApiExtrasExternalIntegrationsListRequest {
	r.timeoutGte = &timeoutGte
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) TimeoutLt(timeoutLt []int32) ApiExtrasExternalIntegrationsListRequest {
	r.timeoutLt = &timeoutLt
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) TimeoutLte(timeoutLte []int32) ApiExtrasExternalIntegrationsListRequest {
	r.timeoutLte = &timeoutLte
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) TimeoutN(timeoutN []int32) ApiExtrasExternalIntegrationsListRequest {
	r.timeoutN = &timeoutN
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) VerifySsl(verifySsl bool) ApiExtrasExternalIntegrationsListRequest {
	r.verifySsl = &verifySsl
	return r
}

// Serializer Depth
func (r ApiExtrasExternalIntegrationsListRequest) Depth(depth int32) ApiExtrasExternalIntegrationsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasExternalIntegrationsListRequest) Execute() (*PaginatedExternalIntegrationList, *http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsListExecute(r)
}

/*
ExtrasExternalIntegrationsList Method for ExtrasExternalIntegrationsList

Retrieve a list of external integration objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExternalIntegrationsListRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsList(ctx context.Context) ApiExtrasExternalIntegrationsListRequest {
	return ApiExtrasExternalIntegrationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedExternalIntegrationList
func (a *ExtrasAPIService) ExtrasExternalIntegrationsListExecute(r ApiExtrasExternalIntegrationsListRequest) (*PaginatedExternalIntegrationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedExternalIntegrationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.caFilePath != nil {
		t := *r.caFilePath
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path", t, "form", "multi")
		}
	}
	if r.caFilePathIc != nil {
		t := *r.caFilePathIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ic", t, "form", "multi")
		}
	}
	if r.caFilePathIe != nil {
		t := *r.caFilePathIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ie", t, "form", "multi")
		}
	}
	if r.caFilePathIew != nil {
		t := *r.caFilePathIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__iew", t, "form", "multi")
		}
	}
	if r.caFilePathIre != nil {
		t := *r.caFilePathIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ire", t, "form", "multi")
		}
	}
	if r.caFilePathIsw != nil {
		t := *r.caFilePathIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__isw", t, "form", "multi")
		}
	}
	if r.caFilePathN != nil {
		t := *r.caFilePathN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__n", t, "form", "multi")
		}
	}
	if r.caFilePathNic != nil {
		t := *r.caFilePathNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nic", t, "form", "multi")
		}
	}
	if r.caFilePathNie != nil {
		t := *r.caFilePathNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nie", t, "form", "multi")
		}
	}
	if r.caFilePathNiew != nil {
		t := *r.caFilePathNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__niew", t, "form", "multi")
		}
	}
	if r.caFilePathNire != nil {
		t := *r.caFilePathNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nire", t, "form", "multi")
		}
	}
	if r.caFilePathNisw != nil {
		t := *r.caFilePathNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nisw", t, "form", "multi")
		}
	}
	if r.caFilePathNre != nil {
		t := *r.caFilePathNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nre", t, "form", "multi")
		}
	}
	if r.caFilePathRe != nil {
		t := *r.caFilePathRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__re", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.extraConfig != nil {
		t := *r.extraConfig
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "extra_config", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "extra_config", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.hasSecretsGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_secrets_group", r.hasSecretsGroup, "form", "")
	}
	if r.headers != nil {
		t := *r.headers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "headers", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "headers", t, "form", "multi")
		}
	}
	if r.httpMethod != nil {
		t := *r.httpMethod
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method", t, "form", "multi")
		}
	}
	if r.httpMethodIc != nil {
		t := *r.httpMethodIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__ic", t, "form", "multi")
		}
	}
	if r.httpMethodIe != nil {
		t := *r.httpMethodIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__ie", t, "form", "multi")
		}
	}
	if r.httpMethodIew != nil {
		t := *r.httpMethodIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__iew", t, "form", "multi")
		}
	}
	if r.httpMethodIre != nil {
		t := *r.httpMethodIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__ire", t, "form", "multi")
		}
	}
	if r.httpMethodIsw != nil {
		t := *r.httpMethodIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__isw", t, "form", "multi")
		}
	}
	if r.httpMethodN != nil {
		t := *r.httpMethodN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__n", t, "form", "multi")
		}
	}
	if r.httpMethodNic != nil {
		t := *r.httpMethodNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nic", t, "form", "multi")
		}
	}
	if r.httpMethodNie != nil {
		t := *r.httpMethodNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nie", t, "form", "multi")
		}
	}
	if r.httpMethodNiew != nil {
		t := *r.httpMethodNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__niew", t, "form", "multi")
		}
	}
	if r.httpMethodNire != nil {
		t := *r.httpMethodNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nire", t, "form", "multi")
		}
	}
	if r.httpMethodNisw != nil {
		t := *r.httpMethodNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nisw", t, "form", "multi")
		}
	}
	if r.httpMethodNre != nil {
		t := *r.httpMethodNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__nre", t, "form", "multi")
		}
	}
	if r.httpMethodRe != nil {
		t := *r.httpMethodRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__re", t, "form", "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.remoteUrl != nil {
		t := *r.remoteUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url", t, "form", "multi")
		}
	}
	if r.remoteUrlIc != nil {
		t := *r.remoteUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ic", t, "form", "multi")
		}
	}
	if r.remoteUrlIe != nil {
		t := *r.remoteUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ie", t, "form", "multi")
		}
	}
	if r.remoteUrlIew != nil {
		t := *r.remoteUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__iew", t, "form", "multi")
		}
	}
	if r.remoteUrlIre != nil {
		t := *r.remoteUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ire", t, "form", "multi")
		}
	}
	if r.remoteUrlIsw != nil {
		t := *r.remoteUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__isw", t, "form", "multi")
		}
	}
	if r.remoteUrlN != nil {
		t := *r.remoteUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__n", t, "form", "multi")
		}
	}
	if r.remoteUrlNic != nil {
		t := *r.remoteUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nic", t, "form", "multi")
		}
	}
	if r.remoteUrlNie != nil {
		t := *r.remoteUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nie", t, "form", "multi")
		}
	}
	if r.remoteUrlNiew != nil {
		t := *r.remoteUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__niew", t, "form", "multi")
		}
	}
	if r.remoteUrlNire != nil {
		t := *r.remoteUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nire", t, "form", "multi")
		}
	}
	if r.remoteUrlNisw != nil {
		t := *r.remoteUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nisw", t, "form", "multi")
		}
	}
	if r.remoteUrlNre != nil {
		t := *r.remoteUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nre", t, "form", "multi")
		}
	}
	if r.remoteUrlRe != nil {
		t := *r.remoteUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__re", t, "form", "multi")
		}
	}
	if r.secretsGroup != nil {
		t := *r.secretsGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group", t, "form", "multi")
		}
	}
	if r.secretsGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__isnull", r.secretsGroupIsnull, "form", "")
	}
	if r.secretsGroupN != nil {
		t := *r.secretsGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__n", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.timeout != nil {
		t := *r.timeout
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "timeout", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "timeout", t, "form", "multi")
		}
	}
	if r.timeoutGt != nil {
		t := *r.timeoutGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__gt", t, "form", "multi")
		}
	}
	if r.timeoutGte != nil {
		t := *r.timeoutGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__gte", t, "form", "multi")
		}
	}
	if r.timeoutLt != nil {
		t := *r.timeoutLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__lt", t, "form", "multi")
		}
	}
	if r.timeoutLte != nil {
		t := *r.timeoutLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__lte", t, "form", "multi")
		}
	}
	if r.timeoutN != nil {
		t := *r.timeoutN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "timeout__n", t, "form", "multi")
		}
	}
	if r.verifySsl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "verify_ssl", r.verifySsl, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExternalIntegrationsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasExternalIntegrationsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasExternalIntegrationsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExternalIntegrationsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsNotesCreateExecute(r)
}

/*
ExtrasExternalIntegrationsNotesCreate Method for ExtrasExternalIntegrationsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this external integration.
 @return ApiExtrasExternalIntegrationsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsNotesCreate(ctx context.Context, id string) ApiExtrasExternalIntegrationsNotesCreateRequest {
	return ApiExtrasExternalIntegrationsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasExternalIntegrationsNotesCreateExecute(r ApiExtrasExternalIntegrationsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasExternalIntegrationsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasExternalIntegrationsNotesListRequest) Limit(limit int32) ApiExtrasExternalIntegrationsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasExternalIntegrationsNotesListRequest) Offset(offset int32) ApiExtrasExternalIntegrationsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasExternalIntegrationsNotesListRequest) Depth(depth int32) ApiExtrasExternalIntegrationsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasExternalIntegrationsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsNotesListExecute(r)
}

/*
ExtrasExternalIntegrationsNotesList Method for ExtrasExternalIntegrationsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this external integration.
 @return ApiExtrasExternalIntegrationsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsNotesList(ctx context.Context, id string) ApiExtrasExternalIntegrationsNotesListRequest {
	return ApiExtrasExternalIntegrationsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasExternalIntegrationsNotesListExecute(r ApiExtrasExternalIntegrationsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedExternalIntegrationRequest *PatchedExternalIntegrationRequest
}

func (r ApiExtrasExternalIntegrationsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExternalIntegrationsPartialUpdateRequest) PatchedExternalIntegrationRequest(patchedExternalIntegrationRequest PatchedExternalIntegrationRequest) ApiExtrasExternalIntegrationsPartialUpdateRequest {
	r.patchedExternalIntegrationRequest = &patchedExternalIntegrationRequest
	return r
}

func (r ApiExtrasExternalIntegrationsPartialUpdateRequest) Execute() (*ExternalIntegration, *http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsPartialUpdateExecute(r)
}

/*
ExtrasExternalIntegrationsPartialUpdate Method for ExtrasExternalIntegrationsPartialUpdate

Partial update a external integration object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this external integration.
 @return ApiExtrasExternalIntegrationsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsPartialUpdate(ctx context.Context, id string) ApiExtrasExternalIntegrationsPartialUpdateRequest {
	return ApiExtrasExternalIntegrationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalIntegration
func (a *ExtrasAPIService) ExtrasExternalIntegrationsPartialUpdateExecute(r ApiExtrasExternalIntegrationsPartialUpdateRequest) (*ExternalIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedExternalIntegrationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasExternalIntegrationsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasExternalIntegrationsRetrieveRequest) Depth(depth int32) ApiExtrasExternalIntegrationsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasExternalIntegrationsRetrieveRequest) Execute() (*ExternalIntegration, *http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsRetrieveExecute(r)
}

/*
ExtrasExternalIntegrationsRetrieve Method for ExtrasExternalIntegrationsRetrieve

Retrieve a external integration object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this external integration.
 @return ApiExtrasExternalIntegrationsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsRetrieve(ctx context.Context, id string) ApiExtrasExternalIntegrationsRetrieveRequest {
	return ApiExtrasExternalIntegrationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalIntegration
func (a *ExtrasAPIService) ExtrasExternalIntegrationsRetrieveExecute(r ApiExtrasExternalIntegrationsRetrieveRequest) (*ExternalIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExternalIntegrationsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	externalIntegrationRequest *ExternalIntegrationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasExternalIntegrationsUpdateRequest) ExternalIntegrationRequest(externalIntegrationRequest ExternalIntegrationRequest) ApiExtrasExternalIntegrationsUpdateRequest {
	r.externalIntegrationRequest = &externalIntegrationRequest
	return r
}

func (r ApiExtrasExternalIntegrationsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasExternalIntegrationsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasExternalIntegrationsUpdateRequest) Execute() (*ExternalIntegration, *http.Response, error) {
	return r.ApiService.ExtrasExternalIntegrationsUpdateExecute(r)
}

/*
ExtrasExternalIntegrationsUpdate Method for ExtrasExternalIntegrationsUpdate

Update a external integration object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this external integration.
 @return ApiExtrasExternalIntegrationsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExternalIntegrationsUpdate(ctx context.Context, id string) ApiExtrasExternalIntegrationsUpdateRequest {
	return ApiExtrasExternalIntegrationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalIntegration
func (a *ExtrasAPIService) ExtrasExternalIntegrationsUpdateExecute(r ApiExtrasExternalIntegrationsUpdateRequest) (*ExternalIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExternalIntegrationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/external-integrations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.externalIntegrationRequest == nil {
		return localVarReturnValue, nil, reportError("externalIntegrationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.externalIntegrationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasFileProxiesDownloadRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasFileProxiesDownloadRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasFileProxiesDownloadRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasFileProxiesDownloadRetrieveRequest) Depth(depth int32) ApiExtrasFileProxiesDownloadRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasFileProxiesDownloadRetrieveRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.ExtrasFileProxiesDownloadRetrieveExecute(r)
}

/*
ExtrasFileProxiesDownloadRetrieve Method for ExtrasFileProxiesDownloadRetrieve

Download the specified FileProxy.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this file proxy.
 @return ApiExtrasFileProxiesDownloadRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasFileProxiesDownloadRetrieve(ctx context.Context, id string) ApiExtrasFileProxiesDownloadRetrieveRequest {
	return ApiExtrasFileProxiesDownloadRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ExtrasAPIService) ExtrasFileProxiesDownloadRetrieveExecute(r ApiExtrasFileProxiesDownloadRetrieveRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasFileProxiesDownloadRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/file-proxies/{id}/download/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasFileProxiesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	job *[]string
	jobIsnull *bool
	jobN *[]string
	jobResultId *[]*string
	jobResultIdIsnull *bool
	jobResultIdN *[]*string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	uploadedAt *[]time.Time
	uploadedAtGt *[]time.Time
	uploadedAtGte *[]time.Time
	uploadedAtLt *[]time.Time
	uploadedAtLte *[]time.Time
	uploadedAtN *[]time.Time
	depth *int32
}

func (r ApiExtrasFileProxiesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasFileProxiesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasFileProxiesListRequest) Id(id []string) ApiExtrasFileProxiesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdIc(idIc []string) ApiExtrasFileProxiesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdIe(idIe []string) ApiExtrasFileProxiesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdIew(idIew []string) ApiExtrasFileProxiesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdIre(idIre []string) ApiExtrasFileProxiesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdIsw(idIsw []string) ApiExtrasFileProxiesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdN(idN []string) ApiExtrasFileProxiesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdNic(idNic []string) ApiExtrasFileProxiesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdNie(idNie []string) ApiExtrasFileProxiesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdNiew(idNiew []string) ApiExtrasFileProxiesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdNire(idNire []string) ApiExtrasFileProxiesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdNisw(idNisw []string) ApiExtrasFileProxiesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdNre(idNre []string) ApiExtrasFileProxiesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasFileProxiesListRequest) IdRe(idRe []string) ApiExtrasFileProxiesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasFileProxiesListRequest) Job(job []string) ApiExtrasFileProxiesListRequest {
	r.job = &job
	return r
}

// Job (name or ID) is null
func (r ApiExtrasFileProxiesListRequest) JobIsnull(jobIsnull bool) ApiExtrasFileProxiesListRequest {
	r.jobIsnull = &jobIsnull
	return r
}

func (r ApiExtrasFileProxiesListRequest) JobN(jobN []string) ApiExtrasFileProxiesListRequest {
	r.jobN = &jobN
	return r
}

// Job Result (ID)
func (r ApiExtrasFileProxiesListRequest) JobResultId(jobResultId []*string) ApiExtrasFileProxiesListRequest {
	r.jobResultId = &jobResultId
	return r
}

// Job Result (ID) is null
func (r ApiExtrasFileProxiesListRequest) JobResultIdIsnull(jobResultIdIsnull bool) ApiExtrasFileProxiesListRequest {
	r.jobResultIdIsnull = &jobResultIdIsnull
	return r
}

// Exclude Job Result (ID)
func (r ApiExtrasFileProxiesListRequest) JobResultIdN(jobResultIdN []*string) ApiExtrasFileProxiesListRequest {
	r.jobResultIdN = &jobResultIdN
	return r
}

// Number of results to return per page.
func (r ApiExtrasFileProxiesListRequest) Limit(limit int32) ApiExtrasFileProxiesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasFileProxiesListRequest) Name(name []string) ApiExtrasFileProxiesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameIc(nameIc []string) ApiExtrasFileProxiesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameIe(nameIe []string) ApiExtrasFileProxiesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameIew(nameIew []string) ApiExtrasFileProxiesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameIre(nameIre []string) ApiExtrasFileProxiesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameIsw(nameIsw []string) ApiExtrasFileProxiesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameN(nameN []string) ApiExtrasFileProxiesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameNic(nameNic []string) ApiExtrasFileProxiesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameNie(nameNie []string) ApiExtrasFileProxiesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameNiew(nameNiew []string) ApiExtrasFileProxiesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameNire(nameNire []string) ApiExtrasFileProxiesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameNisw(nameNisw []string) ApiExtrasFileProxiesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameNre(nameNre []string) ApiExtrasFileProxiesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasFileProxiesListRequest) NameRe(nameRe []string) ApiExtrasFileProxiesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasFileProxiesListRequest) Offset(offset int32) ApiExtrasFileProxiesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasFileProxiesListRequest) Q(q string) ApiExtrasFileProxiesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasFileProxiesListRequest) Sort(sort string) ApiExtrasFileProxiesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasFileProxiesListRequest) UploadedAt(uploadedAt []time.Time) ApiExtrasFileProxiesListRequest {
	r.uploadedAt = &uploadedAt
	return r
}

func (r ApiExtrasFileProxiesListRequest) UploadedAtGt(uploadedAtGt []time.Time) ApiExtrasFileProxiesListRequest {
	r.uploadedAtGt = &uploadedAtGt
	return r
}

func (r ApiExtrasFileProxiesListRequest) UploadedAtGte(uploadedAtGte []time.Time) ApiExtrasFileProxiesListRequest {
	r.uploadedAtGte = &uploadedAtGte
	return r
}

func (r ApiExtrasFileProxiesListRequest) UploadedAtLt(uploadedAtLt []time.Time) ApiExtrasFileProxiesListRequest {
	r.uploadedAtLt = &uploadedAtLt
	return r
}

func (r ApiExtrasFileProxiesListRequest) UploadedAtLte(uploadedAtLte []time.Time) ApiExtrasFileProxiesListRequest {
	r.uploadedAtLte = &uploadedAtLte
	return r
}

func (r ApiExtrasFileProxiesListRequest) UploadedAtN(uploadedAtN []time.Time) ApiExtrasFileProxiesListRequest {
	r.uploadedAtN = &uploadedAtN
	return r
}

// Serializer Depth
func (r ApiExtrasFileProxiesListRequest) Depth(depth int32) ApiExtrasFileProxiesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasFileProxiesListRequest) Execute() (*PaginatedFileProxyList, *http.Response, error) {
	return r.ApiService.ExtrasFileProxiesListExecute(r)
}

/*
ExtrasFileProxiesList Method for ExtrasFileProxiesList

Retrieve a list of file proxy objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasFileProxiesListRequest
*/
func (a *ExtrasAPIService) ExtrasFileProxiesList(ctx context.Context) ApiExtrasFileProxiesListRequest {
	return ApiExtrasFileProxiesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedFileProxyList
func (a *ExtrasAPIService) ExtrasFileProxiesListExecute(r ApiExtrasFileProxiesListRequest) (*PaginatedFileProxyList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedFileProxyList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasFileProxiesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/file-proxies/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.job != nil {
		t := *r.job
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job", t, "form", "multi")
		}
	}
	if r.jobIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job__isnull", r.jobIsnull, "form", "")
	}
	if r.jobN != nil {
		t := *r.jobN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job__n", t, "form", "multi")
		}
	}
	if r.jobResultId != nil {
		t := *r.jobResultId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_result_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_result_id", t, "form", "multi")
		}
	}
	if r.jobResultIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_result_id__isnull", r.jobResultIdIsnull, "form", "")
	}
	if r.jobResultIdN != nil {
		t := *r.jobResultIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_result_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_result_id__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.uploadedAt != nil {
		t := *r.uploadedAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at", t, "form", "multi")
		}
	}
	if r.uploadedAtGt != nil {
		t := *r.uploadedAtGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__gt", t, "form", "multi")
		}
	}
	if r.uploadedAtGte != nil {
		t := *r.uploadedAtGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__gte", t, "form", "multi")
		}
	}
	if r.uploadedAtLt != nil {
		t := *r.uploadedAtLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__lt", t, "form", "multi")
		}
	}
	if r.uploadedAtLte != nil {
		t := *r.uploadedAtLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__lte", t, "form", "multi")
		}
	}
	if r.uploadedAtN != nil {
		t := *r.uploadedAtN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "uploaded_at__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasFileProxiesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasFileProxiesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasFileProxiesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasFileProxiesRetrieveRequest) Depth(depth int32) ApiExtrasFileProxiesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasFileProxiesRetrieveRequest) Execute() (*FileProxy, *http.Response, error) {
	return r.ApiService.ExtrasFileProxiesRetrieveExecute(r)
}

/*
ExtrasFileProxiesRetrieve Method for ExtrasFileProxiesRetrieve

Retrieve a file proxy object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this file proxy.
 @return ApiExtrasFileProxiesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasFileProxiesRetrieve(ctx context.Context, id string) ApiExtrasFileProxiesRetrieveRequest {
	return ApiExtrasFileProxiesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FileProxy
func (a *ExtrasAPIService) ExtrasFileProxiesRetrieveExecute(r ApiExtrasFileProxiesRetrieveRequest) (*FileProxy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FileProxy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasFileProxiesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/file-proxies/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGitRepositoriesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasGitRepositoriesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasGitRepositoriesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGitRepositoriesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesBulkDestroyExecute(r)
}

/*
ExtrasGitRepositoriesBulkDestroy Method for ExtrasGitRepositoriesBulkDestroy

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesBulkDestroy(ctx context.Context) ApiExtrasGitRepositoriesBulkDestroyRequest {
	return ApiExtrasGitRepositoriesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasGitRepositoriesBulkDestroyExecute(r ApiExtrasGitRepositoriesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableGitRepositoryRequest *[]PatchedBulkWritableGitRepositoryRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGitRepositoriesBulkPartialUpdateRequest) PatchedBulkWritableGitRepositoryRequest(patchedBulkWritableGitRepositoryRequest []PatchedBulkWritableGitRepositoryRequest) ApiExtrasGitRepositoriesBulkPartialUpdateRequest {
	r.patchedBulkWritableGitRepositoryRequest = &patchedBulkWritableGitRepositoryRequest
	return r
}

func (r ApiExtrasGitRepositoriesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGitRepositoriesBulkPartialUpdateRequest) Execute() ([]GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesBulkPartialUpdateExecute(r)
}

/*
ExtrasGitRepositoriesBulkPartialUpdate Method for ExtrasGitRepositoriesBulkPartialUpdate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesBulkPartialUpdate(ctx context.Context) ApiExtrasGitRepositoriesBulkPartialUpdateRequest {
	return ApiExtrasGitRepositoriesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GitRepository
func (a *ExtrasAPIService) ExtrasGitRepositoriesBulkPartialUpdateExecute(r ApiExtrasGitRepositoriesBulkPartialUpdateRequest) ([]GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableGitRepositoryRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableGitRepositoryRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableGitRepositoryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableGitRepositoryRequest *[]BulkWritableGitRepositoryRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGitRepositoriesBulkUpdateRequest) BulkWritableGitRepositoryRequest(bulkWritableGitRepositoryRequest []BulkWritableGitRepositoryRequest) ApiExtrasGitRepositoriesBulkUpdateRequest {
	r.bulkWritableGitRepositoryRequest = &bulkWritableGitRepositoryRequest
	return r
}

func (r ApiExtrasGitRepositoriesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGitRepositoriesBulkUpdateRequest) Execute() ([]GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesBulkUpdateExecute(r)
}

/*
ExtrasGitRepositoriesBulkUpdate Method for ExtrasGitRepositoriesBulkUpdate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesBulkUpdate(ctx context.Context) ApiExtrasGitRepositoriesBulkUpdateRequest {
	return ApiExtrasGitRepositoriesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GitRepository
func (a *ExtrasAPIService) ExtrasGitRepositoriesBulkUpdateExecute(r ApiExtrasGitRepositoriesBulkUpdateRequest) ([]GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableGitRepositoryRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableGitRepositoryRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableGitRepositoryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	gitRepositoryRequest *GitRepositoryRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGitRepositoriesCreateRequest) GitRepositoryRequest(gitRepositoryRequest GitRepositoryRequest) ApiExtrasGitRepositoriesCreateRequest {
	r.gitRepositoryRequest = &gitRepositoryRequest
	return r
}

func (r ApiExtrasGitRepositoriesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGitRepositoriesCreateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesCreateExecute(r)
}

/*
ExtrasGitRepositoriesCreate Method for ExtrasGitRepositoriesCreate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesCreate(ctx context.Context) ApiExtrasGitRepositoriesCreateRequest {
	return ApiExtrasGitRepositoriesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasAPIService) ExtrasGitRepositoriesCreateExecute(r ApiExtrasGitRepositoriesCreateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gitRepositoryRequest == nil {
		return localVarReturnValue, nil, reportError("gitRepositoryRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gitRepositoryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGitRepositoriesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGitRepositoriesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesDestroyExecute(r)
}

/*
ExtrasGitRepositoriesDestroy Method for ExtrasGitRepositoriesDestroy

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesDestroy(ctx context.Context, id string) ApiExtrasGitRepositoriesDestroyRequest {
	return ApiExtrasGitRepositoriesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasGitRepositoriesDestroyExecute(r ApiExtrasGitRepositoriesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	branch *[]string
	branchIc *[]string
	branchIe *[]string
	branchIew *[]string
	branchIre *[]string
	branchIsw *[]string
	branchN *[]string
	branchNic *[]string
	branchNie *[]string
	branchNiew *[]string
	branchNire *[]string
	branchNisw *[]string
	branchNre *[]string
	branchRe *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	providedContents *[]string
	q *string
	remoteUrl *[]string
	remoteUrlIc *[]string
	remoteUrlIe *[]string
	remoteUrlIew *[]string
	remoteUrlIre *[]string
	remoteUrlIsw *[]string
	remoteUrlN *[]string
	remoteUrlNic *[]string
	remoteUrlNie *[]string
	remoteUrlNiew *[]string
	remoteUrlNire *[]string
	remoteUrlNisw *[]string
	remoteUrlNre *[]string
	remoteUrlRe *[]string
	secretsGroup *[]string
	secretsGroupIsnull *bool
	secretsGroupN *[]string
	secretsGroupId *[]string
	secretsGroupIdIsnull *bool
	secretsGroupIdN *[]string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiExtrasGitRepositoriesListRequest) Branch(branch []string) ApiExtrasGitRepositoriesListRequest {
	r.branch = &branch
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIc(branchIc []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIc = &branchIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIe(branchIe []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIe = &branchIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIew(branchIew []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIew = &branchIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIre(branchIre []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIre = &branchIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIsw(branchIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIsw = &branchIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchN(branchN []string) ApiExtrasGitRepositoriesListRequest {
	r.branchN = &branchN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNic(branchNic []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNic = &branchNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNie(branchNie []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNie = &branchNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNiew(branchNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNiew = &branchNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNire(branchNire []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNire = &branchNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNisw(branchNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNisw = &branchNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNre(branchNre []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNre = &branchNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchRe(branchRe []string) ApiExtrasGitRepositoriesListRequest {
	r.branchRe = &branchRe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Contacts(contacts []string) ApiExtrasGitRepositoriesListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasGitRepositoriesListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasGitRepositoriesListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasGitRepositoriesListRequest) ContactsN(contactsN string) ApiExtrasGitRepositoriesListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Created(created []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) CreatedGt(createdGt []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) CreatedGte(createdGte []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasGitRepositoriesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) CreatedLt(createdLt []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) CreatedLte(createdLte []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) CreatedN(createdN []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasGitRepositoriesListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasGitRepositoriesListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasGitRepositoriesListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasGitRepositoriesListRequest) Id(id []string) ApiExtrasGitRepositoriesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIc(idIc []string) ApiExtrasGitRepositoriesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIe(idIe []string) ApiExtrasGitRepositoriesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIew(idIew []string) ApiExtrasGitRepositoriesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIre(idIre []string) ApiExtrasGitRepositoriesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIsw(idIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdN(idN []string) ApiExtrasGitRepositoriesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNic(idNic []string) ApiExtrasGitRepositoriesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNie(idNie []string) ApiExtrasGitRepositoriesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNiew(idNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNire(idNire []string) ApiExtrasGitRepositoriesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNisw(idNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNre(idNre []string) ApiExtrasGitRepositoriesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdRe(idRe []string) ApiExtrasGitRepositoriesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasGitRepositoriesListRequest) Limit(limit int32) ApiExtrasGitRepositoriesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Name(name []string) ApiExtrasGitRepositoriesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIc(nameIc []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIe(nameIe []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIew(nameIew []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIre(nameIre []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIsw(nameIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameN(nameN []string) ApiExtrasGitRepositoriesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNic(nameNic []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNie(nameNie []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNiew(nameNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNire(nameNire []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNisw(nameNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNre(nameNre []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameRe(nameRe []string) ApiExtrasGitRepositoriesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasGitRepositoriesListRequest) Offset(offset int32) ApiExtrasGitRepositoriesListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) ProvidedContents(providedContents []string) ApiExtrasGitRepositoriesListRequest {
	r.providedContents = &providedContents
	return r
}

// Search
func (r ApiExtrasGitRepositoriesListRequest) Q(q string) ApiExtrasGitRepositoriesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrl(remoteUrl []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrl = &remoteUrl
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIc(remoteUrlIc []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIc = &remoteUrlIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIe(remoteUrlIe []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIe = &remoteUrlIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIew(remoteUrlIew []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIew = &remoteUrlIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIre(remoteUrlIre []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIre = &remoteUrlIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIsw(remoteUrlIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIsw = &remoteUrlIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlN(remoteUrlN []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlN = &remoteUrlN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNic(remoteUrlNic []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNic = &remoteUrlNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNie(remoteUrlNie []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNie = &remoteUrlNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNiew(remoteUrlNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNiew = &remoteUrlNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNire(remoteUrlNire []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNire = &remoteUrlNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNisw(remoteUrlNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNisw = &remoteUrlNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNre(remoteUrlNre []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNre = &remoteUrlNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlRe(remoteUrlRe []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlRe = &remoteUrlRe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SecretsGroup(secretsGroup []string) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroup = &secretsGroup
	return r
}

// Secrets group (ID or name) is null
func (r ApiExtrasGitRepositoriesListRequest) SecretsGroupIsnull(secretsGroupIsnull bool) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroupIsnull = &secretsGroupIsnull
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SecretsGroupN(secretsGroupN []string) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroupN = &secretsGroupN
	return r
}

// Secrets group (ID) - Deprecated (use secrets_group filter)
func (r ApiExtrasGitRepositoriesListRequest) SecretsGroupId(secretsGroupId []string) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroupId = &secretsGroupId
	return r
}

// Secrets group (ID) - Deprecated (use secrets_group filter) is null
func (r ApiExtrasGitRepositoriesListRequest) SecretsGroupIdIsnull(secretsGroupIdIsnull bool) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroupIdIsnull = &secretsGroupIdIsnull
	return r
}

// Exclude Secrets group (ID) - Deprecated (use secrets_group filter)
func (r ApiExtrasGitRepositoriesListRequest) SecretsGroupIdN(secretsGroupIdN []string) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroupIdN = &secretsGroupIdN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Slug(slug []string) ApiExtrasGitRepositoriesListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIc(slugIc []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIe(slugIe []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIew(slugIew []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIre(slugIre []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIsw(slugIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugN(slugN []string) ApiExtrasGitRepositoriesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNic(slugNic []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNie(slugNie []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNiew(slugNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNire(slugNire []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNisw(slugNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNre(slugNre []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugRe(slugRe []string) ApiExtrasGitRepositoriesListRequest {
	r.slugRe = &slugRe
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasGitRepositoriesListRequest) Sort(sort string) ApiExtrasGitRepositoriesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Tags(tags []string) ApiExtrasGitRepositoriesListRequest {
	r.tags = &tags
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) TagsIsnull(tagsIsnull bool) ApiExtrasGitRepositoriesListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) TagsN(tagsN []string) ApiExtrasGitRepositoriesListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Teams(teams []string) ApiExtrasGitRepositoriesListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasGitRepositoriesListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasGitRepositoriesListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasGitRepositoriesListRequest) TeamsN(teamsN string) ApiExtrasGitRepositoriesListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiExtrasGitRepositoriesListRequest) Depth(depth int32) ApiExtrasGitRepositoriesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Execute() (*PaginatedGitRepositoryList, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesListExecute(r)
}

/*
ExtrasGitRepositoriesList Method for ExtrasGitRepositoriesList

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesListRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesList(ctx context.Context) ApiExtrasGitRepositoriesListRequest {
	return ApiExtrasGitRepositoriesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedGitRepositoryList
func (a *ExtrasAPIService) ExtrasGitRepositoriesListExecute(r ApiExtrasGitRepositoriesListRequest) (*PaginatedGitRepositoryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedGitRepositoryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.branch != nil {
		t := *r.branch
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch", t, "form", "multi")
		}
	}
	if r.branchIc != nil {
		t := *r.branchIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__ic", t, "form", "multi")
		}
	}
	if r.branchIe != nil {
		t := *r.branchIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__ie", t, "form", "multi")
		}
	}
	if r.branchIew != nil {
		t := *r.branchIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__iew", t, "form", "multi")
		}
	}
	if r.branchIre != nil {
		t := *r.branchIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__ire", t, "form", "multi")
		}
	}
	if r.branchIsw != nil {
		t := *r.branchIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__isw", t, "form", "multi")
		}
	}
	if r.branchN != nil {
		t := *r.branchN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__n", t, "form", "multi")
		}
	}
	if r.branchNic != nil {
		t := *r.branchNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nic", t, "form", "multi")
		}
	}
	if r.branchNie != nil {
		t := *r.branchNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nie", t, "form", "multi")
		}
	}
	if r.branchNiew != nil {
		t := *r.branchNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__niew", t, "form", "multi")
		}
	}
	if r.branchNire != nil {
		t := *r.branchNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nire", t, "form", "multi")
		}
	}
	if r.branchNisw != nil {
		t := *r.branchNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nisw", t, "form", "multi")
		}
	}
	if r.branchNre != nil {
		t := *r.branchNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__nre", t, "form", "multi")
		}
	}
	if r.branchRe != nil {
		t := *r.branchRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "branch__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "branch__re", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.providedContents != nil {
		t := *r.providedContents
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provided_contents", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provided_contents", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.remoteUrl != nil {
		t := *r.remoteUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url", t, "form", "multi")
		}
	}
	if r.remoteUrlIc != nil {
		t := *r.remoteUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ic", t, "form", "multi")
		}
	}
	if r.remoteUrlIe != nil {
		t := *r.remoteUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ie", t, "form", "multi")
		}
	}
	if r.remoteUrlIew != nil {
		t := *r.remoteUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__iew", t, "form", "multi")
		}
	}
	if r.remoteUrlIre != nil {
		t := *r.remoteUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__ire", t, "form", "multi")
		}
	}
	if r.remoteUrlIsw != nil {
		t := *r.remoteUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__isw", t, "form", "multi")
		}
	}
	if r.remoteUrlN != nil {
		t := *r.remoteUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__n", t, "form", "multi")
		}
	}
	if r.remoteUrlNic != nil {
		t := *r.remoteUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nic", t, "form", "multi")
		}
	}
	if r.remoteUrlNie != nil {
		t := *r.remoteUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nie", t, "form", "multi")
		}
	}
	if r.remoteUrlNiew != nil {
		t := *r.remoteUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__niew", t, "form", "multi")
		}
	}
	if r.remoteUrlNire != nil {
		t := *r.remoteUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nire", t, "form", "multi")
		}
	}
	if r.remoteUrlNisw != nil {
		t := *r.remoteUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nisw", t, "form", "multi")
		}
	}
	if r.remoteUrlNre != nil {
		t := *r.remoteUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__nre", t, "form", "multi")
		}
	}
	if r.remoteUrlRe != nil {
		t := *r.remoteUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "remote_url__re", t, "form", "multi")
		}
	}
	if r.secretsGroup != nil {
		t := *r.secretsGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group", t, "form", "multi")
		}
	}
	if r.secretsGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__isnull", r.secretsGroupIsnull, "form", "")
	}
	if r.secretsGroupN != nil {
		t := *r.secretsGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__n", t, "form", "multi")
		}
	}
	if r.secretsGroupId != nil {
		t := *r.secretsGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group_id", t, "form", "multi")
		}
	}
	if r.secretsGroupIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group_id__isnull", r.secretsGroupIdIsnull, "form", "")
	}
	if r.secretsGroupIdN != nil {
		t := *r.secretsGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group_id__n", t, "form", "multi")
		}
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "form", "multi")
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "form", "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "form", "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "form", "multi")
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ire", t, "form", "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "form", "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "form", "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "form", "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "form", "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "form", "multi")
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nire", t, "form", "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "form", "multi")
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nre", t, "form", "multi")
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__re", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGitRepositoriesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasGitRepositoriesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasGitRepositoriesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGitRepositoriesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesNotesCreateExecute(r)
}

/*
ExtrasGitRepositoriesNotesCreate Method for ExtrasGitRepositoriesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesNotesCreate(ctx context.Context, id string) ApiExtrasGitRepositoriesNotesCreateRequest {
	return ApiExtrasGitRepositoriesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasGitRepositoriesNotesCreateExecute(r ApiExtrasGitRepositoriesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasGitRepositoriesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasGitRepositoriesNotesListRequest) Limit(limit int32) ApiExtrasGitRepositoriesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasGitRepositoriesNotesListRequest) Offset(offset int32) ApiExtrasGitRepositoriesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasGitRepositoriesNotesListRequest) Depth(depth int32) ApiExtrasGitRepositoriesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasGitRepositoriesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesNotesListExecute(r)
}

/*
ExtrasGitRepositoriesNotesList Method for ExtrasGitRepositoriesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesNotesList(ctx context.Context, id string) ApiExtrasGitRepositoriesNotesListRequest {
	return ApiExtrasGitRepositoriesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasGitRepositoriesNotesListExecute(r ApiExtrasGitRepositoriesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedGitRepositoryRequest *PatchedGitRepositoryRequest
}

func (r ApiExtrasGitRepositoriesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGitRepositoriesPartialUpdateRequest) PatchedGitRepositoryRequest(patchedGitRepositoryRequest PatchedGitRepositoryRequest) ApiExtrasGitRepositoriesPartialUpdateRequest {
	r.patchedGitRepositoryRequest = &patchedGitRepositoryRequest
	return r
}

func (r ApiExtrasGitRepositoriesPartialUpdateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesPartialUpdateExecute(r)
}

/*
ExtrasGitRepositoriesPartialUpdate Method for ExtrasGitRepositoriesPartialUpdate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesPartialUpdate(ctx context.Context, id string) ApiExtrasGitRepositoriesPartialUpdateRequest {
	return ApiExtrasGitRepositoriesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasAPIService) ExtrasGitRepositoriesPartialUpdateExecute(r ApiExtrasGitRepositoriesPartialUpdateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedGitRepositoryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasGitRepositoriesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasGitRepositoriesRetrieveRequest) Depth(depth int32) ApiExtrasGitRepositoriesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasGitRepositoriesRetrieveRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesRetrieveExecute(r)
}

/*
ExtrasGitRepositoriesRetrieve Method for ExtrasGitRepositoriesRetrieve

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesRetrieve(ctx context.Context, id string) ApiExtrasGitRepositoriesRetrieveRequest {
	return ApiExtrasGitRepositoriesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasAPIService) ExtrasGitRepositoriesRetrieveExecute(r ApiExtrasGitRepositoriesRetrieveRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesSyncCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	gitRepositoryRequest *GitRepositoryRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGitRepositoriesSyncCreateRequest) GitRepositoryRequest(gitRepositoryRequest GitRepositoryRequest) ApiExtrasGitRepositoriesSyncCreateRequest {
	r.gitRepositoryRequest = &gitRepositoryRequest
	return r
}

func (r ApiExtrasGitRepositoriesSyncCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesSyncCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGitRepositoriesSyncCreateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesSyncCreateExecute(r)
}

/*
ExtrasGitRepositoriesSyncCreate Method for ExtrasGitRepositoriesSyncCreate

Enqueue pull git repository and refresh data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesSyncCreateRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesSyncCreate(ctx context.Context, id string) ApiExtrasGitRepositoriesSyncCreateRequest {
	return ApiExtrasGitRepositoriesSyncCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasAPIService) ExtrasGitRepositoriesSyncCreateExecute(r ApiExtrasGitRepositoriesSyncCreateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesSyncCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/sync/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gitRepositoryRequest == nil {
		return localVarReturnValue, nil, reportError("gitRepositoryRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gitRepositoryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	gitRepositoryRequest *GitRepositoryRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGitRepositoriesUpdateRequest) GitRepositoryRequest(gitRepositoryRequest GitRepositoryRequest) ApiExtrasGitRepositoriesUpdateRequest {
	r.gitRepositoryRequest = &gitRepositoryRequest
	return r
}

func (r ApiExtrasGitRepositoriesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGitRepositoriesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGitRepositoriesUpdateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesUpdateExecute(r)
}

/*
ExtrasGitRepositoriesUpdate Method for ExtrasGitRepositoriesUpdate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasGitRepositoriesUpdate(ctx context.Context, id string) ApiExtrasGitRepositoriesUpdateRequest {
	return ApiExtrasGitRepositoriesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasAPIService) ExtrasGitRepositoriesUpdateExecute(r ApiExtrasGitRepositoriesUpdateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGitRepositoriesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gitRepositoryRequest == nil {
		return localVarReturnValue, nil, reportError("gitRepositoryRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gitRepositoryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGraphqlQueriesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasGraphqlQueriesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasGraphqlQueriesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGraphqlQueriesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesBulkDestroyExecute(r)
}

/*
ExtrasGraphqlQueriesBulkDestroy Method for ExtrasGraphqlQueriesBulkDestroy

Destroy a list of GraphQL query objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesBulkDestroy(ctx context.Context) ApiExtrasGraphqlQueriesBulkDestroyRequest {
	return ApiExtrasGraphqlQueriesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasGraphqlQueriesBulkDestroyExecute(r ApiExtrasGraphqlQueriesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableGraphQLQueryRequest *[]PatchedBulkWritableGraphQLQueryRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGraphqlQueriesBulkPartialUpdateRequest) PatchedBulkWritableGraphQLQueryRequest(patchedBulkWritableGraphQLQueryRequest []PatchedBulkWritableGraphQLQueryRequest) ApiExtrasGraphqlQueriesBulkPartialUpdateRequest {
	r.patchedBulkWritableGraphQLQueryRequest = &patchedBulkWritableGraphQLQueryRequest
	return r
}

func (r ApiExtrasGraphqlQueriesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGraphqlQueriesBulkPartialUpdateRequest) Execute() ([]GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesBulkPartialUpdateExecute(r)
}

/*
ExtrasGraphqlQueriesBulkPartialUpdate Method for ExtrasGraphqlQueriesBulkPartialUpdate

Partial update a list of GraphQL query objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesBulkPartialUpdate(ctx context.Context) ApiExtrasGraphqlQueriesBulkPartialUpdateRequest {
	return ApiExtrasGraphqlQueriesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GraphQLQuery
func (a *ExtrasAPIService) ExtrasGraphqlQueriesBulkPartialUpdateExecute(r ApiExtrasGraphqlQueriesBulkPartialUpdateRequest) ([]GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableGraphQLQueryRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableGraphQLQueryRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableGraphQLQueryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableGraphQLQueryRequest *[]BulkWritableGraphQLQueryRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGraphqlQueriesBulkUpdateRequest) BulkWritableGraphQLQueryRequest(bulkWritableGraphQLQueryRequest []BulkWritableGraphQLQueryRequest) ApiExtrasGraphqlQueriesBulkUpdateRequest {
	r.bulkWritableGraphQLQueryRequest = &bulkWritableGraphQLQueryRequest
	return r
}

func (r ApiExtrasGraphqlQueriesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGraphqlQueriesBulkUpdateRequest) Execute() ([]GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesBulkUpdateExecute(r)
}

/*
ExtrasGraphqlQueriesBulkUpdate Method for ExtrasGraphqlQueriesBulkUpdate

Update a list of GraphQL query objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesBulkUpdate(ctx context.Context) ApiExtrasGraphqlQueriesBulkUpdateRequest {
	return ApiExtrasGraphqlQueriesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GraphQLQuery
func (a *ExtrasAPIService) ExtrasGraphqlQueriesBulkUpdateExecute(r ApiExtrasGraphqlQueriesBulkUpdateRequest) ([]GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableGraphQLQueryRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableGraphQLQueryRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableGraphQLQueryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	graphQLQueryRequest *GraphQLQueryRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGraphqlQueriesCreateRequest) GraphQLQueryRequest(graphQLQueryRequest GraphQLQueryRequest) ApiExtrasGraphqlQueriesCreateRequest {
	r.graphQLQueryRequest = &graphQLQueryRequest
	return r
}

func (r ApiExtrasGraphqlQueriesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGraphqlQueriesCreateRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesCreateExecute(r)
}

/*
ExtrasGraphqlQueriesCreate Method for ExtrasGraphqlQueriesCreate

Create one or more GraphQL query objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesCreate(ctx context.Context) ApiExtrasGraphqlQueriesCreateRequest {
	return ApiExtrasGraphqlQueriesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasAPIService) ExtrasGraphqlQueriesCreateExecute(r ApiExtrasGraphqlQueriesCreateRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.graphQLQueryRequest == nil {
		return localVarReturnValue, nil, reportError("graphQLQueryRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.graphQLQueryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGraphqlQueriesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGraphqlQueriesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesDestroyExecute(r)
}

/*
ExtrasGraphqlQueriesDestroy Method for ExtrasGraphqlQueriesDestroy

Destroy a GraphQL query object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesDestroy(ctx context.Context, id string) ApiExtrasGraphqlQueriesDestroyRequest {
	return ApiExtrasGraphqlQueriesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasGraphqlQueriesDestroyExecute(r ApiExtrasGraphqlQueriesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiExtrasGraphqlQueriesListRequest) Contacts(contacts []string) ApiExtrasGraphqlQueriesListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasGraphqlQueriesListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasGraphqlQueriesListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasGraphqlQueriesListRequest) ContactsN(contactsN string) ApiExtrasGraphqlQueriesListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasGraphqlQueriesListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasGraphqlQueriesListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasGraphqlQueriesListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasGraphqlQueriesListRequest) Id(id []string) ApiExtrasGraphqlQueriesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdIc(idIc []string) ApiExtrasGraphqlQueriesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdIe(idIe []string) ApiExtrasGraphqlQueriesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdIew(idIew []string) ApiExtrasGraphqlQueriesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdIre(idIre []string) ApiExtrasGraphqlQueriesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdIsw(idIsw []string) ApiExtrasGraphqlQueriesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdN(idN []string) ApiExtrasGraphqlQueriesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdNic(idNic []string) ApiExtrasGraphqlQueriesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdNie(idNie []string) ApiExtrasGraphqlQueriesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdNiew(idNiew []string) ApiExtrasGraphqlQueriesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdNire(idNire []string) ApiExtrasGraphqlQueriesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdNisw(idNisw []string) ApiExtrasGraphqlQueriesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdNre(idNre []string) ApiExtrasGraphqlQueriesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) IdRe(idRe []string) ApiExtrasGraphqlQueriesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasGraphqlQueriesListRequest) Limit(limit int32) ApiExtrasGraphqlQueriesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) Name(name []string) ApiExtrasGraphqlQueriesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIc(nameIc []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIe(nameIe []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIew(nameIew []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIre(nameIre []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIsw(nameIsw []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameN(nameN []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNic(nameNic []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNie(nameNie []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNiew(nameNiew []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNire(nameNire []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNisw(nameNisw []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNre(nameNre []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameRe(nameRe []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasGraphqlQueriesListRequest) Offset(offset int32) ApiExtrasGraphqlQueriesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasGraphqlQueriesListRequest) Q(q string) ApiExtrasGraphqlQueriesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasGraphqlQueriesListRequest) Sort(sort string) ApiExtrasGraphqlQueriesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) Teams(teams []string) ApiExtrasGraphqlQueriesListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasGraphqlQueriesListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasGraphqlQueriesListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasGraphqlQueriesListRequest) TeamsN(teamsN string) ApiExtrasGraphqlQueriesListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiExtrasGraphqlQueriesListRequest) Depth(depth int32) ApiExtrasGraphqlQueriesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) Execute() (*PaginatedGraphQLQueryList, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesListExecute(r)
}

/*
ExtrasGraphqlQueriesList Method for ExtrasGraphqlQueriesList

Retrieve a list of GraphQL query objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesListRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesList(ctx context.Context) ApiExtrasGraphqlQueriesListRequest {
	return ApiExtrasGraphqlQueriesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedGraphQLQueryList
func (a *ExtrasAPIService) ExtrasGraphqlQueriesListExecute(r ApiExtrasGraphqlQueriesListRequest) (*PaginatedGraphQLQueryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedGraphQLQueryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGraphqlQueriesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasGraphqlQueriesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasGraphqlQueriesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGraphqlQueriesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesNotesCreateExecute(r)
}

/*
ExtrasGraphqlQueriesNotesCreate Method for ExtrasGraphqlQueriesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesNotesCreate(ctx context.Context, id string) ApiExtrasGraphqlQueriesNotesCreateRequest {
	return ApiExtrasGraphqlQueriesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasGraphqlQueriesNotesCreateExecute(r ApiExtrasGraphqlQueriesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasGraphqlQueriesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasGraphqlQueriesNotesListRequest) Limit(limit int32) ApiExtrasGraphqlQueriesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasGraphqlQueriesNotesListRequest) Offset(offset int32) ApiExtrasGraphqlQueriesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasGraphqlQueriesNotesListRequest) Depth(depth int32) ApiExtrasGraphqlQueriesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasGraphqlQueriesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesNotesListExecute(r)
}

/*
ExtrasGraphqlQueriesNotesList Method for ExtrasGraphqlQueriesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesNotesList(ctx context.Context, id string) ApiExtrasGraphqlQueriesNotesListRequest {
	return ApiExtrasGraphqlQueriesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasGraphqlQueriesNotesListExecute(r ApiExtrasGraphqlQueriesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedGraphQLQueryRequest *PatchedGraphQLQueryRequest
}

func (r ApiExtrasGraphqlQueriesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGraphqlQueriesPartialUpdateRequest) PatchedGraphQLQueryRequest(patchedGraphQLQueryRequest PatchedGraphQLQueryRequest) ApiExtrasGraphqlQueriesPartialUpdateRequest {
	r.patchedGraphQLQueryRequest = &patchedGraphQLQueryRequest
	return r
}

func (r ApiExtrasGraphqlQueriesPartialUpdateRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesPartialUpdateExecute(r)
}

/*
ExtrasGraphqlQueriesPartialUpdate Method for ExtrasGraphqlQueriesPartialUpdate

Partial update a GraphQL query object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesPartialUpdate(ctx context.Context, id string) ApiExtrasGraphqlQueriesPartialUpdateRequest {
	return ApiExtrasGraphqlQueriesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasAPIService) ExtrasGraphqlQueriesPartialUpdateExecute(r ApiExtrasGraphqlQueriesPartialUpdateRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedGraphQLQueryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasGraphqlQueriesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasGraphqlQueriesRetrieveRequest) Depth(depth int32) ApiExtrasGraphqlQueriesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasGraphqlQueriesRetrieveRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesRetrieveExecute(r)
}

/*
ExtrasGraphqlQueriesRetrieve Method for ExtrasGraphqlQueriesRetrieve

Retrieve a GraphQL query object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesRetrieve(ctx context.Context, id string) ApiExtrasGraphqlQueriesRetrieveRequest {
	return ApiExtrasGraphqlQueriesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasAPIService) ExtrasGraphqlQueriesRetrieveExecute(r ApiExtrasGraphqlQueriesRetrieveRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesRunCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	graphQLQueryInputRequest *GraphQLQueryInputRequest
}

func (r ApiExtrasGraphqlQueriesRunCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesRunCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGraphqlQueriesRunCreateRequest) GraphQLQueryInputRequest(graphQLQueryInputRequest GraphQLQueryInputRequest) ApiExtrasGraphqlQueriesRunCreateRequest {
	r.graphQLQueryInputRequest = &graphQLQueryInputRequest
	return r
}

func (r ApiExtrasGraphqlQueriesRunCreateRequest) Execute() (*GraphQLQueryOutput, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesRunCreateExecute(r)
}

/*
ExtrasGraphqlQueriesRunCreate Method for ExtrasGraphqlQueriesRunCreate

Create one or more GraphQL query objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesRunCreateRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesRunCreate(ctx context.Context, id string) ApiExtrasGraphqlQueriesRunCreateRequest {
	return ApiExtrasGraphqlQueriesRunCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GraphQLQueryOutput
func (a *ExtrasAPIService) ExtrasGraphqlQueriesRunCreateExecute(r ApiExtrasGraphqlQueriesRunCreateRequest) (*GraphQLQueryOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQueryOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesRunCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/run/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.graphQLQueryInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	graphQLQueryRequest *GraphQLQueryRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasGraphqlQueriesUpdateRequest) GraphQLQueryRequest(graphQLQueryRequest GraphQLQueryRequest) ApiExtrasGraphqlQueriesUpdateRequest {
	r.graphQLQueryRequest = &graphQLQueryRequest
	return r
}

func (r ApiExtrasGraphqlQueriesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasGraphqlQueriesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasGraphqlQueriesUpdateRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesUpdateExecute(r)
}

/*
ExtrasGraphqlQueriesUpdate Method for ExtrasGraphqlQueriesUpdate

Update a GraphQL query object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasGraphqlQueriesUpdate(ctx context.Context, id string) ApiExtrasGraphqlQueriesUpdateRequest {
	return ApiExtrasGraphqlQueriesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasAPIService) ExtrasGraphqlQueriesUpdateExecute(r ApiExtrasGraphqlQueriesUpdateRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasGraphqlQueriesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.graphQLQueryRequest == nil {
		return localVarReturnValue, nil, reportError("graphQLQueryRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.graphQLQueryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasImageAttachmentsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasImageAttachmentsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasImageAttachmentsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasImageAttachmentsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasImageAttachmentsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsBulkDestroyExecute(r)
}

/*
ExtrasImageAttachmentsBulkDestroy Method for ExtrasImageAttachmentsBulkDestroy

Destroy a list of image attachment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkDestroy(ctx context.Context) ApiExtrasImageAttachmentsBulkDestroyRequest {
	return ApiExtrasImageAttachmentsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkDestroyExecute(r ApiExtrasImageAttachmentsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableImageAttachmentRequest *[]PatchedBulkWritableImageAttachmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) PatchedBulkWritableImageAttachmentRequest(patchedBulkWritableImageAttachmentRequest []PatchedBulkWritableImageAttachmentRequest) ApiExtrasImageAttachmentsBulkPartialUpdateRequest {
	r.patchedBulkWritableImageAttachmentRequest = &patchedBulkWritableImageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasImageAttachmentsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) Execute() ([]ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsBulkPartialUpdateExecute(r)
}

/*
ExtrasImageAttachmentsBulkPartialUpdate Method for ExtrasImageAttachmentsBulkPartialUpdate

Partial update a list of image attachment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkPartialUpdate(ctx context.Context) ApiExtrasImageAttachmentsBulkPartialUpdateRequest {
	return ApiExtrasImageAttachmentsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkPartialUpdateExecute(r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) ([]ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableImageAttachmentRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableImageAttachmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableImageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableImageAttachmentRequest *[]BulkWritableImageAttachmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasImageAttachmentsBulkUpdateRequest) BulkWritableImageAttachmentRequest(bulkWritableImageAttachmentRequest []BulkWritableImageAttachmentRequest) ApiExtrasImageAttachmentsBulkUpdateRequest {
	r.bulkWritableImageAttachmentRequest = &bulkWritableImageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasImageAttachmentsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasImageAttachmentsBulkUpdateRequest) Execute() ([]ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsBulkUpdateExecute(r)
}

/*
ExtrasImageAttachmentsBulkUpdate Method for ExtrasImageAttachmentsBulkUpdate

Update a list of image attachment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkUpdate(ctx context.Context) ApiExtrasImageAttachmentsBulkUpdateRequest {
	return ApiExtrasImageAttachmentsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkUpdateExecute(r ApiExtrasImageAttachmentsBulkUpdateRequest) ([]ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableImageAttachmentRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableImageAttachmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableImageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	imageAttachmentRequest *ImageAttachmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasImageAttachmentsCreateRequest) ImageAttachmentRequest(imageAttachmentRequest ImageAttachmentRequest) ApiExtrasImageAttachmentsCreateRequest {
	r.imageAttachmentRequest = &imageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasImageAttachmentsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasImageAttachmentsCreateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsCreateExecute(r)
}

/*
ExtrasImageAttachmentsCreate Method for ExtrasImageAttachmentsCreate

Create one or more image attachment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsCreate(ctx context.Context) ApiExtrasImageAttachmentsCreateRequest {
	return ApiExtrasImageAttachmentsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsCreateExecute(r ApiExtrasImageAttachmentsCreateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachmentRequest == nil {
		return localVarReturnValue, nil, reportError("imageAttachmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasImageAttachmentsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasImageAttachmentsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasImageAttachmentsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsDestroyExecute(r)
}

/*
ExtrasImageAttachmentsDestroy Method for ExtrasImageAttachmentsDestroy

Destroy a image attachment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this image attachment.
 @return ApiExtrasImageAttachmentsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsDestroy(ctx context.Context, id string) ApiExtrasImageAttachmentsDestroyRequest {
	return ApiExtrasImageAttachmentsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasImageAttachmentsDestroyExecute(r ApiExtrasImageAttachmentsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contentType *string
	contentTypeN *string
	contentTypeId *int32
	contentTypeIdN *int32
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	objectId *[]string
	objectIdIc *[]string
	objectIdIe *[]string
	objectIdIew *[]string
	objectIdIre *[]string
	objectIdIsw *[]string
	objectIdN *[]string
	objectIdNic *[]string
	objectIdNie *[]string
	objectIdNiew *[]string
	objectIdNire *[]string
	objectIdNisw *[]string
	objectIdNre *[]string
	objectIdRe *[]string
	offset *int32
	q *string
	sort *string
	depth *int32
}

func (r ApiExtrasImageAttachmentsListRequest) ContentType(contentType string) ApiExtrasImageAttachmentsListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ContentTypeN(contentTypeN string) ApiExtrasImageAttachmentsListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ContentTypeId(contentTypeId int32) ApiExtrasImageAttachmentsListRequest {
	r.contentTypeId = &contentTypeId
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ContentTypeIdN(contentTypeIdN int32) ApiExtrasImageAttachmentsListRequest {
	r.contentTypeIdN = &contentTypeIdN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasImageAttachmentsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasImageAttachmentsListRequest) Id(id []string) ApiExtrasImageAttachmentsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIc(idIc []string) ApiExtrasImageAttachmentsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIe(idIe []string) ApiExtrasImageAttachmentsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIew(idIew []string) ApiExtrasImageAttachmentsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIre(idIre []string) ApiExtrasImageAttachmentsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIsw(idIsw []string) ApiExtrasImageAttachmentsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdN(idN []string) ApiExtrasImageAttachmentsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNic(idNic []string) ApiExtrasImageAttachmentsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNie(idNie []string) ApiExtrasImageAttachmentsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNiew(idNiew []string) ApiExtrasImageAttachmentsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNire(idNire []string) ApiExtrasImageAttachmentsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNisw(idNisw []string) ApiExtrasImageAttachmentsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNre(idNre []string) ApiExtrasImageAttachmentsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdRe(idRe []string) ApiExtrasImageAttachmentsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasImageAttachmentsListRequest) Limit(limit int32) ApiExtrasImageAttachmentsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) Name(name []string) ApiExtrasImageAttachmentsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIc(nameIc []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIe(nameIe []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIew(nameIew []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIre(nameIre []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIsw(nameIsw []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameN(nameN []string) ApiExtrasImageAttachmentsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNic(nameNic []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNie(nameNie []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNiew(nameNiew []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNire(nameNire []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNisw(nameNisw []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNre(nameNre []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameRe(nameRe []string) ApiExtrasImageAttachmentsListRequest {
	r.nameRe = &nameRe
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectId(objectId []string) ApiExtrasImageAttachmentsListRequest {
	r.objectId = &objectId
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIc(objectIdIc []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIc = &objectIdIc
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIe(objectIdIe []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIe = &objectIdIe
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIew(objectIdIew []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIew = &objectIdIew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIre(objectIdIre []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIre = &objectIdIre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIsw(objectIdIsw []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIsw = &objectIdIsw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdN(objectIdN []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdN = &objectIdN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNic(objectIdNic []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNic = &objectIdNic
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNie(objectIdNie []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNie = &objectIdNie
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNiew(objectIdNiew []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNiew = &objectIdNiew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNire(objectIdNire []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNire = &objectIdNire
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNisw(objectIdNisw []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNisw = &objectIdNisw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNre(objectIdNre []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNre = &objectIdNre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdRe(objectIdRe []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdRe = &objectIdRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasImageAttachmentsListRequest) Offset(offset int32) ApiExtrasImageAttachmentsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasImageAttachmentsListRequest) Q(q string) ApiExtrasImageAttachmentsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasImageAttachmentsListRequest) Sort(sort string) ApiExtrasImageAttachmentsListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiExtrasImageAttachmentsListRequest) Depth(depth int32) ApiExtrasImageAttachmentsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) Execute() (*PaginatedImageAttachmentList, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsListExecute(r)
}

/*
ExtrasImageAttachmentsList Method for ExtrasImageAttachmentsList

Retrieve a list of image attachment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsListRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsList(ctx context.Context) ApiExtrasImageAttachmentsListRequest {
	return ApiExtrasImageAttachmentsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedImageAttachmentList
func (a *ExtrasAPIService) ExtrasImageAttachmentsListExecute(r ApiExtrasImageAttachmentsListRequest) (*PaginatedImageAttachmentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedImageAttachmentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type", r.contentType, "form", "")
	}
	if r.contentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type__n", r.contentTypeN, "form", "")
	}
	if r.contentTypeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type_id", r.contentTypeId, "form", "")
	}
	if r.contentTypeIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_type_id__n", r.contentTypeIdN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.objectId != nil {
		t := *r.objectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", t, "form", "multi")
		}
	}
	if r.objectIdIc != nil {
		t := *r.objectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__ic", t, "form", "multi")
		}
	}
	if r.objectIdIe != nil {
		t := *r.objectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__ie", t, "form", "multi")
		}
	}
	if r.objectIdIew != nil {
		t := *r.objectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__iew", t, "form", "multi")
		}
	}
	if r.objectIdIre != nil {
		t := *r.objectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__ire", t, "form", "multi")
		}
	}
	if r.objectIdIsw != nil {
		t := *r.objectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__isw", t, "form", "multi")
		}
	}
	if r.objectIdN != nil {
		t := *r.objectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__n", t, "form", "multi")
		}
	}
	if r.objectIdNic != nil {
		t := *r.objectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nic", t, "form", "multi")
		}
	}
	if r.objectIdNie != nil {
		t := *r.objectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nie", t, "form", "multi")
		}
	}
	if r.objectIdNiew != nil {
		t := *r.objectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__niew", t, "form", "multi")
		}
	}
	if r.objectIdNire != nil {
		t := *r.objectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nire", t, "form", "multi")
		}
	}
	if r.objectIdNisw != nil {
		t := *r.objectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nisw", t, "form", "multi")
		}
	}
	if r.objectIdNre != nil {
		t := *r.objectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__nre", t, "form", "multi")
		}
	}
	if r.objectIdRe != nil {
		t := *r.objectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedImageAttachmentRequest *PatchedImageAttachmentRequest
}

func (r ApiExtrasImageAttachmentsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasImageAttachmentsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasImageAttachmentsPartialUpdateRequest) PatchedImageAttachmentRequest(patchedImageAttachmentRequest PatchedImageAttachmentRequest) ApiExtrasImageAttachmentsPartialUpdateRequest {
	r.patchedImageAttachmentRequest = &patchedImageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsPartialUpdateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsPartialUpdateExecute(r)
}

/*
ExtrasImageAttachmentsPartialUpdate Method for ExtrasImageAttachmentsPartialUpdate

Partial update a image attachment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this image attachment.
 @return ApiExtrasImageAttachmentsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsPartialUpdate(ctx context.Context, id string) ApiExtrasImageAttachmentsPartialUpdateRequest {
	return ApiExtrasImageAttachmentsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsPartialUpdateExecute(r ApiExtrasImageAttachmentsPartialUpdateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedImageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasImageAttachmentsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasImageAttachmentsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasImageAttachmentsRetrieveRequest) Depth(depth int32) ApiExtrasImageAttachmentsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasImageAttachmentsRetrieveRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsRetrieveExecute(r)
}

/*
ExtrasImageAttachmentsRetrieve Method for ExtrasImageAttachmentsRetrieve

Retrieve a image attachment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this image attachment.
 @return ApiExtrasImageAttachmentsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsRetrieve(ctx context.Context, id string) ApiExtrasImageAttachmentsRetrieveRequest {
	return ApiExtrasImageAttachmentsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsRetrieveExecute(r ApiExtrasImageAttachmentsRetrieveRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	imageAttachmentRequest *ImageAttachmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasImageAttachmentsUpdateRequest) ImageAttachmentRequest(imageAttachmentRequest ImageAttachmentRequest) ApiExtrasImageAttachmentsUpdateRequest {
	r.imageAttachmentRequest = &imageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasImageAttachmentsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasImageAttachmentsUpdateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsUpdateExecute(r)
}

/*
ExtrasImageAttachmentsUpdate Method for ExtrasImageAttachmentsUpdate

Update a image attachment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this image attachment.
 @return ApiExtrasImageAttachmentsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsUpdate(ctx context.Context, id string) ApiExtrasImageAttachmentsUpdateRequest {
	return ApiExtrasImageAttachmentsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsUpdateExecute(r ApiExtrasImageAttachmentsUpdateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachmentRequest == nil {
		return localVarReturnValue, nil, reportError("imageAttachmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobButtonsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasJobButtonsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasJobButtonsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobButtonsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobButtonsBulkDestroyExecute(r)
}

/*
ExtrasJobButtonsBulkDestroy Method for ExtrasJobButtonsBulkDestroy

Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobButtonsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsBulkDestroy(ctx context.Context) ApiExtrasJobButtonsBulkDestroyRequest {
	return ApiExtrasJobButtonsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJobButtonsBulkDestroyExecute(r ApiExtrasJobButtonsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableJobButtonRequest *[]PatchedBulkWritableJobButtonRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobButtonsBulkPartialUpdateRequest) PatchedBulkWritableJobButtonRequest(patchedBulkWritableJobButtonRequest []PatchedBulkWritableJobButtonRequest) ApiExtrasJobButtonsBulkPartialUpdateRequest {
	r.patchedBulkWritableJobButtonRequest = &patchedBulkWritableJobButtonRequest
	return r
}

func (r ApiExtrasJobButtonsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobButtonsBulkPartialUpdateRequest) Execute() ([]JobButton, *http.Response, error) {
	return r.ApiService.ExtrasJobButtonsBulkPartialUpdateExecute(r)
}

/*
ExtrasJobButtonsBulkPartialUpdate Method for ExtrasJobButtonsBulkPartialUpdate

Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobButtonsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsBulkPartialUpdate(ctx context.Context) ApiExtrasJobButtonsBulkPartialUpdateRequest {
	return ApiExtrasJobButtonsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JobButton
func (a *ExtrasAPIService) ExtrasJobButtonsBulkPartialUpdateExecute(r ApiExtrasJobButtonsBulkPartialUpdateRequest) ([]JobButton, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JobButton
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableJobButtonRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableJobButtonRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableJobButtonRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableJobButtonRequest *[]BulkWritableJobButtonRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobButtonsBulkUpdateRequest) BulkWritableJobButtonRequest(bulkWritableJobButtonRequest []BulkWritableJobButtonRequest) ApiExtrasJobButtonsBulkUpdateRequest {
	r.bulkWritableJobButtonRequest = &bulkWritableJobButtonRequest
	return r
}

func (r ApiExtrasJobButtonsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobButtonsBulkUpdateRequest) Execute() ([]JobButton, *http.Response, error) {
	return r.ApiService.ExtrasJobButtonsBulkUpdateExecute(r)
}

/*
ExtrasJobButtonsBulkUpdate Method for ExtrasJobButtonsBulkUpdate

Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobButtonsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsBulkUpdate(ctx context.Context) ApiExtrasJobButtonsBulkUpdateRequest {
	return ApiExtrasJobButtonsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JobButton
func (a *ExtrasAPIService) ExtrasJobButtonsBulkUpdateExecute(r ApiExtrasJobButtonsBulkUpdateRequest) ([]JobButton, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JobButton
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableJobButtonRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableJobButtonRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableJobButtonRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	jobButtonRequest *JobButtonRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobButtonsCreateRequest) JobButtonRequest(jobButtonRequest JobButtonRequest) ApiExtrasJobButtonsCreateRequest {
	r.jobButtonRequest = &jobButtonRequest
	return r
}

func (r ApiExtrasJobButtonsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobButtonsCreateRequest) Execute() (*JobButton, *http.Response, error) {
	return r.ApiService.ExtrasJobButtonsCreateExecute(r)
}

/*
ExtrasJobButtonsCreate Method for ExtrasJobButtonsCreate

Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobButtonsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsCreate(ctx context.Context) ApiExtrasJobButtonsCreateRequest {
	return ApiExtrasJobButtonsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JobButton
func (a *ExtrasAPIService) ExtrasJobButtonsCreateExecute(r ApiExtrasJobButtonsCreateRequest) (*JobButton, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobButton
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobButtonRequest == nil {
		return localVarReturnValue, nil, reportError("jobButtonRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobButtonRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobButtonsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobButtonsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobButtonsDestroyExecute(r)
}

/*
ExtrasJobButtonsDestroy Method for ExtrasJobButtonsDestroy

Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job button.
 @return ApiExtrasJobButtonsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsDestroy(ctx context.Context, id string) ApiExtrasJobButtonsDestroyRequest {
	return ApiExtrasJobButtonsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJobButtonsDestroyExecute(r ApiExtrasJobButtonsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	buttonClass *[]string
	buttonClassIc *[]string
	buttonClassIe *[]string
	buttonClassIew *[]string
	buttonClassIre *[]string
	buttonClassIsw *[]string
	buttonClassN *[]string
	buttonClassNic *[]string
	buttonClassNie *[]string
	buttonClassNiew *[]string
	buttonClassNire *[]string
	buttonClassNisw *[]string
	buttonClassNre *[]string
	buttonClassRe *[]string
	confirmation *bool
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentTypes *string
	contentTypesIc *string
	contentTypesIe *string
	contentTypesIew *string
	contentTypesIre *string
	contentTypesIsw *string
	contentTypesN *string
	contentTypesNic *string
	contentTypesNie *string
	contentTypesNiew *string
	contentTypesNire *string
	contentTypesNisw *string
	contentTypesNre *string
	contentTypesRe *string
	dynamicGroups *[]string
	dynamicGroupsN *string
	enabled *bool
	format *CircuitsCircuitTerminationsListFormatParameter
	groupName *[]string
	groupNameIc *[]string
	groupNameIe *[]string
	groupNameIew *[]string
	groupNameIre *[]string
	groupNameIsw *[]string
	groupNameN *[]string
	groupNameNic *[]string
	groupNameNie *[]string
	groupNameNiew *[]string
	groupNameNire *[]string
	groupNameNisw *[]string
	groupNameNre *[]string
	groupNameRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	job *[]string
	jobN *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	text *[]string
	textIc *[]string
	textIe *[]string
	textIew *[]string
	textIre *[]string
	textIsw *[]string
	textN *[]string
	textNic *[]string
	textNie *[]string
	textNiew *[]string
	textNire *[]string
	textNisw *[]string
	textNre *[]string
	textRe *[]string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
	depth *int32
}

func (r ApiExtrasJobButtonsListRequest) ButtonClass(buttonClass []string) ApiExtrasJobButtonsListRequest {
	r.buttonClass = &buttonClass
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassIc(buttonClassIc []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassIc = &buttonClassIc
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassIe(buttonClassIe []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassIe = &buttonClassIe
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassIew(buttonClassIew []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassIew = &buttonClassIew
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassIre(buttonClassIre []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassIre = &buttonClassIre
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassIsw(buttonClassIsw []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassIsw = &buttonClassIsw
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassN(buttonClassN []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassN = &buttonClassN
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassNic(buttonClassNic []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassNic = &buttonClassNic
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassNie(buttonClassNie []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassNie = &buttonClassNie
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassNiew(buttonClassNiew []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassNiew = &buttonClassNiew
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassNire(buttonClassNire []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassNire = &buttonClassNire
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassNisw(buttonClassNisw []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassNisw = &buttonClassNisw
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassNre(buttonClassNre []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassNre = &buttonClassNre
	return r
}

func (r ApiExtrasJobButtonsListRequest) ButtonClassRe(buttonClassRe []string) ApiExtrasJobButtonsListRequest {
	r.buttonClassRe = &buttonClassRe
	return r
}

func (r ApiExtrasJobButtonsListRequest) Confirmation(confirmation bool) ApiExtrasJobButtonsListRequest {
	r.confirmation = &confirmation
	return r
}

func (r ApiExtrasJobButtonsListRequest) Contacts(contacts []string) ApiExtrasJobButtonsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasJobButtonsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasJobButtonsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasJobButtonsListRequest) ContactsN(contactsN string) ApiExtrasJobButtonsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypes(contentTypes string) ApiExtrasJobButtonsListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesIc(contentTypesIc string) ApiExtrasJobButtonsListRequest {
	r.contentTypesIc = &contentTypesIc
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesIe(contentTypesIe string) ApiExtrasJobButtonsListRequest {
	r.contentTypesIe = &contentTypesIe
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesIew(contentTypesIew string) ApiExtrasJobButtonsListRequest {
	r.contentTypesIew = &contentTypesIew
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesIre(contentTypesIre string) ApiExtrasJobButtonsListRequest {
	r.contentTypesIre = &contentTypesIre
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesIsw(contentTypesIsw string) ApiExtrasJobButtonsListRequest {
	r.contentTypesIsw = &contentTypesIsw
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesN(contentTypesN string) ApiExtrasJobButtonsListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesNic(contentTypesNic string) ApiExtrasJobButtonsListRequest {
	r.contentTypesNic = &contentTypesNic
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesNie(contentTypesNie string) ApiExtrasJobButtonsListRequest {
	r.contentTypesNie = &contentTypesNie
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesNiew(contentTypesNiew string) ApiExtrasJobButtonsListRequest {
	r.contentTypesNiew = &contentTypesNiew
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesNire(contentTypesNire string) ApiExtrasJobButtonsListRequest {
	r.contentTypesNire = &contentTypesNire
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesNisw(contentTypesNisw string) ApiExtrasJobButtonsListRequest {
	r.contentTypesNisw = &contentTypesNisw
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesNre(contentTypesNre string) ApiExtrasJobButtonsListRequest {
	r.contentTypesNre = &contentTypesNre
	return r
}

func (r ApiExtrasJobButtonsListRequest) ContentTypesRe(contentTypesRe string) ApiExtrasJobButtonsListRequest {
	r.contentTypesRe = &contentTypesRe
	return r
}

func (r ApiExtrasJobButtonsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasJobButtonsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasJobButtonsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasJobButtonsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasJobButtonsListRequest) Enabled(enabled bool) ApiExtrasJobButtonsListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiExtrasJobButtonsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsListRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupName(groupName []string) ApiExtrasJobButtonsListRequest {
	r.groupName = &groupName
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameIc(groupNameIc []string) ApiExtrasJobButtonsListRequest {
	r.groupNameIc = &groupNameIc
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameIe(groupNameIe []string) ApiExtrasJobButtonsListRequest {
	r.groupNameIe = &groupNameIe
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameIew(groupNameIew []string) ApiExtrasJobButtonsListRequest {
	r.groupNameIew = &groupNameIew
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameIre(groupNameIre []string) ApiExtrasJobButtonsListRequest {
	r.groupNameIre = &groupNameIre
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameIsw(groupNameIsw []string) ApiExtrasJobButtonsListRequest {
	r.groupNameIsw = &groupNameIsw
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameN(groupNameN []string) ApiExtrasJobButtonsListRequest {
	r.groupNameN = &groupNameN
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameNic(groupNameNic []string) ApiExtrasJobButtonsListRequest {
	r.groupNameNic = &groupNameNic
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameNie(groupNameNie []string) ApiExtrasJobButtonsListRequest {
	r.groupNameNie = &groupNameNie
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameNiew(groupNameNiew []string) ApiExtrasJobButtonsListRequest {
	r.groupNameNiew = &groupNameNiew
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameNire(groupNameNire []string) ApiExtrasJobButtonsListRequest {
	r.groupNameNire = &groupNameNire
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameNisw(groupNameNisw []string) ApiExtrasJobButtonsListRequest {
	r.groupNameNisw = &groupNameNisw
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameNre(groupNameNre []string) ApiExtrasJobButtonsListRequest {
	r.groupNameNre = &groupNameNre
	return r
}

func (r ApiExtrasJobButtonsListRequest) GroupNameRe(groupNameRe []string) ApiExtrasJobButtonsListRequest {
	r.groupNameRe = &groupNameRe
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasJobButtonsListRequest) Id(id []string) ApiExtrasJobButtonsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdIc(idIc []string) ApiExtrasJobButtonsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdIe(idIe []string) ApiExtrasJobButtonsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdIew(idIew []string) ApiExtrasJobButtonsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdIre(idIre []string) ApiExtrasJobButtonsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdIsw(idIsw []string) ApiExtrasJobButtonsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdN(idN []string) ApiExtrasJobButtonsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdNic(idNic []string) ApiExtrasJobButtonsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdNie(idNie []string) ApiExtrasJobButtonsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdNiew(idNiew []string) ApiExtrasJobButtonsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdNire(idNire []string) ApiExtrasJobButtonsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdNisw(idNisw []string) ApiExtrasJobButtonsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdNre(idNre []string) ApiExtrasJobButtonsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasJobButtonsListRequest) IdRe(idRe []string) ApiExtrasJobButtonsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasJobButtonsListRequest) Job(job []string) ApiExtrasJobButtonsListRequest {
	r.job = &job
	return r
}

func (r ApiExtrasJobButtonsListRequest) JobN(jobN []string) ApiExtrasJobButtonsListRequest {
	r.jobN = &jobN
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobButtonsListRequest) Limit(limit int32) ApiExtrasJobButtonsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasJobButtonsListRequest) Name(name []string) ApiExtrasJobButtonsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameIc(nameIc []string) ApiExtrasJobButtonsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameIe(nameIe []string) ApiExtrasJobButtonsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameIew(nameIew []string) ApiExtrasJobButtonsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameIre(nameIre []string) ApiExtrasJobButtonsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameIsw(nameIsw []string) ApiExtrasJobButtonsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameN(nameN []string) ApiExtrasJobButtonsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameNic(nameNic []string) ApiExtrasJobButtonsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameNie(nameNie []string) ApiExtrasJobButtonsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameNiew(nameNiew []string) ApiExtrasJobButtonsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameNire(nameNire []string) ApiExtrasJobButtonsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameNisw(nameNisw []string) ApiExtrasJobButtonsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameNre(nameNre []string) ApiExtrasJobButtonsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasJobButtonsListRequest) NameRe(nameRe []string) ApiExtrasJobButtonsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobButtonsListRequest) Offset(offset int32) ApiExtrasJobButtonsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasJobButtonsListRequest) Q(q string) ApiExtrasJobButtonsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasJobButtonsListRequest) Sort(sort string) ApiExtrasJobButtonsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasJobButtonsListRequest) Teams(teams []string) ApiExtrasJobButtonsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasJobButtonsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasJobButtonsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasJobButtonsListRequest) TeamsN(teamsN string) ApiExtrasJobButtonsListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasJobButtonsListRequest) Text(text []string) ApiExtrasJobButtonsListRequest {
	r.text = &text
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextIc(textIc []string) ApiExtrasJobButtonsListRequest {
	r.textIc = &textIc
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextIe(textIe []string) ApiExtrasJobButtonsListRequest {
	r.textIe = &textIe
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextIew(textIew []string) ApiExtrasJobButtonsListRequest {
	r.textIew = &textIew
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextIre(textIre []string) ApiExtrasJobButtonsListRequest {
	r.textIre = &textIre
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextIsw(textIsw []string) ApiExtrasJobButtonsListRequest {
	r.textIsw = &textIsw
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextN(textN []string) ApiExtrasJobButtonsListRequest {
	r.textN = &textN
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextNic(textNic []string) ApiExtrasJobButtonsListRequest {
	r.textNic = &textNic
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextNie(textNie []string) ApiExtrasJobButtonsListRequest {
	r.textNie = &textNie
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextNiew(textNiew []string) ApiExtrasJobButtonsListRequest {
	r.textNiew = &textNiew
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextNire(textNire []string) ApiExtrasJobButtonsListRequest {
	r.textNire = &textNire
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextNisw(textNisw []string) ApiExtrasJobButtonsListRequest {
	r.textNisw = &textNisw
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextNre(textNre []string) ApiExtrasJobButtonsListRequest {
	r.textNre = &textNre
	return r
}

func (r ApiExtrasJobButtonsListRequest) TextRe(textRe []string) ApiExtrasJobButtonsListRequest {
	r.textRe = &textRe
	return r
}

func (r ApiExtrasJobButtonsListRequest) Weight(weight []int32) ApiExtrasJobButtonsListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasJobButtonsListRequest) WeightGt(weightGt []int32) ApiExtrasJobButtonsListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasJobButtonsListRequest) WeightGte(weightGte []int32) ApiExtrasJobButtonsListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasJobButtonsListRequest) WeightLt(weightLt []int32) ApiExtrasJobButtonsListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasJobButtonsListRequest) WeightLte(weightLte []int32) ApiExtrasJobButtonsListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasJobButtonsListRequest) WeightN(weightN []int32) ApiExtrasJobButtonsListRequest {
	r.weightN = &weightN
	return r
}

// Serializer Depth
func (r ApiExtrasJobButtonsListRequest) Depth(depth int32) ApiExtrasJobButtonsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobButtonsListRequest) Execute() (*PaginatedJobButtonList, *http.Response, error) {
	return r.ApiService.ExtrasJobButtonsListExecute(r)
}

/*
ExtrasJobButtonsList Method for ExtrasJobButtonsList

Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobButtonsListRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsList(ctx context.Context) ApiExtrasJobButtonsListRequest {
	return ApiExtrasJobButtonsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJobButtonList
func (a *ExtrasAPIService) ExtrasJobButtonsListExecute(r ApiExtrasJobButtonsListRequest) (*PaginatedJobButtonList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobButtonList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.buttonClass != nil {
		t := *r.buttonClass
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class", t, "form", "multi")
		}
	}
	if r.buttonClassIc != nil {
		t := *r.buttonClassIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ic", t, "form", "multi")
		}
	}
	if r.buttonClassIe != nil {
		t := *r.buttonClassIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ie", t, "form", "multi")
		}
	}
	if r.buttonClassIew != nil {
		t := *r.buttonClassIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__iew", t, "form", "multi")
		}
	}
	if r.buttonClassIre != nil {
		t := *r.buttonClassIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__ire", t, "form", "multi")
		}
	}
	if r.buttonClassIsw != nil {
		t := *r.buttonClassIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__isw", t, "form", "multi")
		}
	}
	if r.buttonClassN != nil {
		t := *r.buttonClassN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__n", t, "form", "multi")
		}
	}
	if r.buttonClassNic != nil {
		t := *r.buttonClassNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nic", t, "form", "multi")
		}
	}
	if r.buttonClassNie != nil {
		t := *r.buttonClassNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nie", t, "form", "multi")
		}
	}
	if r.buttonClassNiew != nil {
		t := *r.buttonClassNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__niew", t, "form", "multi")
		}
	}
	if r.buttonClassNire != nil {
		t := *r.buttonClassNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nire", t, "form", "multi")
		}
	}
	if r.buttonClassNisw != nil {
		t := *r.buttonClassNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nisw", t, "form", "multi")
		}
	}
	if r.buttonClassNre != nil {
		t := *r.buttonClassNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__nre", t, "form", "multi")
		}
	}
	if r.buttonClassRe != nil {
		t := *r.buttonClassRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__re", t, "form", "multi")
		}
	}
	if r.confirmation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "confirmation", r.confirmation, "form", "")
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", r.contentTypes, "form", "")
	}
	if r.contentTypesIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", r.contentTypesIc, "form", "")
	}
	if r.contentTypesIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", r.contentTypesIe, "form", "")
	}
	if r.contentTypesIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", r.contentTypesIew, "form", "")
	}
	if r.contentTypesIre != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", r.contentTypesIre, "form", "")
	}
	if r.contentTypesIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", r.contentTypesIsw, "form", "")
	}
	if r.contentTypesN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", r.contentTypesN, "form", "")
	}
	if r.contentTypesNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", r.contentTypesNic, "form", "")
	}
	if r.contentTypesNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", r.contentTypesNie, "form", "")
	}
	if r.contentTypesNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", r.contentTypesNiew, "form", "")
	}
	if r.contentTypesNire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", r.contentTypesNire, "form", "")
	}
	if r.contentTypesNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", r.contentTypesNisw, "form", "")
	}
	if r.contentTypesNre != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", r.contentTypesNre, "form", "")
	}
	if r.contentTypesRe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", r.contentTypesRe, "form", "")
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.groupName != nil {
		t := *r.groupName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", t, "form", "multi")
		}
	}
	if r.groupNameIc != nil {
		t := *r.groupNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ic", t, "form", "multi")
		}
	}
	if r.groupNameIe != nil {
		t := *r.groupNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ie", t, "form", "multi")
		}
	}
	if r.groupNameIew != nil {
		t := *r.groupNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__iew", t, "form", "multi")
		}
	}
	if r.groupNameIre != nil {
		t := *r.groupNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ire", t, "form", "multi")
		}
	}
	if r.groupNameIsw != nil {
		t := *r.groupNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__isw", t, "form", "multi")
		}
	}
	if r.groupNameN != nil {
		t := *r.groupNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__n", t, "form", "multi")
		}
	}
	if r.groupNameNic != nil {
		t := *r.groupNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nic", t, "form", "multi")
		}
	}
	if r.groupNameNie != nil {
		t := *r.groupNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nie", t, "form", "multi")
		}
	}
	if r.groupNameNiew != nil {
		t := *r.groupNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__niew", t, "form", "multi")
		}
	}
	if r.groupNameNire != nil {
		t := *r.groupNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nire", t, "form", "multi")
		}
	}
	if r.groupNameNisw != nil {
		t := *r.groupNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nisw", t, "form", "multi")
		}
	}
	if r.groupNameNre != nil {
		t := *r.groupNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nre", t, "form", "multi")
		}
	}
	if r.groupNameRe != nil {
		t := *r.groupNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__re", t, "form", "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.job != nil {
		t := *r.job
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job", t, "form", "multi")
		}
	}
	if r.jobN != nil {
		t := *r.jobN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.text != nil {
		t := *r.text
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text", t, "form", "multi")
		}
	}
	if r.textIc != nil {
		t := *r.textIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__ic", t, "form", "multi")
		}
	}
	if r.textIe != nil {
		t := *r.textIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__ie", t, "form", "multi")
		}
	}
	if r.textIew != nil {
		t := *r.textIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__iew", t, "form", "multi")
		}
	}
	if r.textIre != nil {
		t := *r.textIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__ire", t, "form", "multi")
		}
	}
	if r.textIsw != nil {
		t := *r.textIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__isw", t, "form", "multi")
		}
	}
	if r.textN != nil {
		t := *r.textN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__n", t, "form", "multi")
		}
	}
	if r.textNic != nil {
		t := *r.textNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nic", t, "form", "multi")
		}
	}
	if r.textNie != nil {
		t := *r.textNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nie", t, "form", "multi")
		}
	}
	if r.textNiew != nil {
		t := *r.textNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__niew", t, "form", "multi")
		}
	}
	if r.textNire != nil {
		t := *r.textNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nire", t, "form", "multi")
		}
	}
	if r.textNisw != nil {
		t := *r.textNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nisw", t, "form", "multi")
		}
	}
	if r.textNre != nil {
		t := *r.textNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__nre", t, "form", "multi")
		}
	}
	if r.textRe != nil {
		t := *r.textRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "text__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "text__re", t, "form", "multi")
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "form", "multi")
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "form", "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "form", "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "form", "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "form", "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobButtonsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasJobButtonsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasJobButtonsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobButtonsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasJobButtonsNotesCreateExecute(r)
}

/*
ExtrasJobButtonsNotesCreate Method for ExtrasJobButtonsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job button.
 @return ApiExtrasJobButtonsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsNotesCreate(ctx context.Context, id string) ApiExtrasJobButtonsNotesCreateRequest {
	return ApiExtrasJobButtonsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasJobButtonsNotesCreateExecute(r ApiExtrasJobButtonsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasJobButtonsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobButtonsNotesListRequest) Limit(limit int32) ApiExtrasJobButtonsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobButtonsNotesListRequest) Offset(offset int32) ApiExtrasJobButtonsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasJobButtonsNotesListRequest) Depth(depth int32) ApiExtrasJobButtonsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobButtonsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasJobButtonsNotesListExecute(r)
}

/*
ExtrasJobButtonsNotesList Method for ExtrasJobButtonsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job button.
 @return ApiExtrasJobButtonsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsNotesList(ctx context.Context, id string) ApiExtrasJobButtonsNotesListRequest {
	return ApiExtrasJobButtonsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasJobButtonsNotesListExecute(r ApiExtrasJobButtonsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedJobButtonRequest *PatchedJobButtonRequest
}

func (r ApiExtrasJobButtonsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobButtonsPartialUpdateRequest) PatchedJobButtonRequest(patchedJobButtonRequest PatchedJobButtonRequest) ApiExtrasJobButtonsPartialUpdateRequest {
	r.patchedJobButtonRequest = &patchedJobButtonRequest
	return r
}

func (r ApiExtrasJobButtonsPartialUpdateRequest) Execute() (*JobButton, *http.Response, error) {
	return r.ApiService.ExtrasJobButtonsPartialUpdateExecute(r)
}

/*
ExtrasJobButtonsPartialUpdate Method for ExtrasJobButtonsPartialUpdate

Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job button.
 @return ApiExtrasJobButtonsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsPartialUpdate(ctx context.Context, id string) ApiExtrasJobButtonsPartialUpdateRequest {
	return ApiExtrasJobButtonsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobButton
func (a *ExtrasAPIService) ExtrasJobButtonsPartialUpdateExecute(r ApiExtrasJobButtonsPartialUpdateRequest) (*JobButton, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobButton
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJobButtonRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasJobButtonsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasJobButtonsRetrieveRequest) Depth(depth int32) ApiExtrasJobButtonsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobButtonsRetrieveRequest) Execute() (*JobButton, *http.Response, error) {
	return r.ApiService.ExtrasJobButtonsRetrieveExecute(r)
}

/*
ExtrasJobButtonsRetrieve Method for ExtrasJobButtonsRetrieve

Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job button.
 @return ApiExtrasJobButtonsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsRetrieve(ctx context.Context, id string) ApiExtrasJobButtonsRetrieveRequest {
	return ApiExtrasJobButtonsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobButton
func (a *ExtrasAPIService) ExtrasJobButtonsRetrieveExecute(r ApiExtrasJobButtonsRetrieveRequest) (*JobButton, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobButton
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobButtonsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	jobButtonRequest *JobButtonRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobButtonsUpdateRequest) JobButtonRequest(jobButtonRequest JobButtonRequest) ApiExtrasJobButtonsUpdateRequest {
	r.jobButtonRequest = &jobButtonRequest
	return r
}

func (r ApiExtrasJobButtonsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobButtonsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobButtonsUpdateRequest) Execute() (*JobButton, *http.Response, error) {
	return r.ApiService.ExtrasJobButtonsUpdateExecute(r)
}

/*
ExtrasJobButtonsUpdate Method for ExtrasJobButtonsUpdate

Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job button.
 @return ApiExtrasJobButtonsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobButtonsUpdate(ctx context.Context, id string) ApiExtrasJobButtonsUpdateRequest {
	return ApiExtrasJobButtonsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobButton
func (a *ExtrasAPIService) ExtrasJobButtonsUpdateExecute(r ApiExtrasJobButtonsUpdateRequest) (*JobButton, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobButton
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobButtonsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-buttons/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobButtonRequest == nil {
		return localVarReturnValue, nil, reportError("jobButtonRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobButtonRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobHooksBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobHooksBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasJobHooksBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasJobHooksBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobHooksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobHooksBulkDestroyExecute(r)
}

/*
ExtrasJobHooksBulkDestroy Method for ExtrasJobHooksBulkDestroy

Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobHooksBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksBulkDestroy(ctx context.Context) ApiExtrasJobHooksBulkDestroyRequest {
	return ApiExtrasJobHooksBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJobHooksBulkDestroyExecute(r ApiExtrasJobHooksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobHooksBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableJobHookRequest *[]PatchedBulkWritableJobHookRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobHooksBulkPartialUpdateRequest) PatchedBulkWritableJobHookRequest(patchedBulkWritableJobHookRequest []PatchedBulkWritableJobHookRequest) ApiExtrasJobHooksBulkPartialUpdateRequest {
	r.patchedBulkWritableJobHookRequest = &patchedBulkWritableJobHookRequest
	return r
}

func (r ApiExtrasJobHooksBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobHooksBulkPartialUpdateRequest) Execute() ([]JobHook, *http.Response, error) {
	return r.ApiService.ExtrasJobHooksBulkPartialUpdateExecute(r)
}

/*
ExtrasJobHooksBulkPartialUpdate Method for ExtrasJobHooksBulkPartialUpdate

Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobHooksBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksBulkPartialUpdate(ctx context.Context) ApiExtrasJobHooksBulkPartialUpdateRequest {
	return ApiExtrasJobHooksBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JobHook
func (a *ExtrasAPIService) ExtrasJobHooksBulkPartialUpdateExecute(r ApiExtrasJobHooksBulkPartialUpdateRequest) ([]JobHook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JobHook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableJobHookRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableJobHookRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableJobHookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobHooksBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableJobHookRequest *[]BulkWritableJobHookRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobHooksBulkUpdateRequest) BulkWritableJobHookRequest(bulkWritableJobHookRequest []BulkWritableJobHookRequest) ApiExtrasJobHooksBulkUpdateRequest {
	r.bulkWritableJobHookRequest = &bulkWritableJobHookRequest
	return r
}

func (r ApiExtrasJobHooksBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobHooksBulkUpdateRequest) Execute() ([]JobHook, *http.Response, error) {
	return r.ApiService.ExtrasJobHooksBulkUpdateExecute(r)
}

/*
ExtrasJobHooksBulkUpdate Method for ExtrasJobHooksBulkUpdate

Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobHooksBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksBulkUpdate(ctx context.Context) ApiExtrasJobHooksBulkUpdateRequest {
	return ApiExtrasJobHooksBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JobHook
func (a *ExtrasAPIService) ExtrasJobHooksBulkUpdateExecute(r ApiExtrasJobHooksBulkUpdateRequest) ([]JobHook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JobHook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableJobHookRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableJobHookRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableJobHookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobHooksCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	jobHookRequest *JobHookRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobHooksCreateRequest) JobHookRequest(jobHookRequest JobHookRequest) ApiExtrasJobHooksCreateRequest {
	r.jobHookRequest = &jobHookRequest
	return r
}

func (r ApiExtrasJobHooksCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobHooksCreateRequest) Execute() (*JobHook, *http.Response, error) {
	return r.ApiService.ExtrasJobHooksCreateExecute(r)
}

/*
ExtrasJobHooksCreate Method for ExtrasJobHooksCreate

Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobHooksCreateRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksCreate(ctx context.Context) ApiExtrasJobHooksCreateRequest {
	return ApiExtrasJobHooksCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JobHook
func (a *ExtrasAPIService) ExtrasJobHooksCreateExecute(r ApiExtrasJobHooksCreateRequest) (*JobHook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobHook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobHookRequest == nil {
		return localVarReturnValue, nil, reportError("jobHookRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobHookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobHooksDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobHooksDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobHooksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobHooksDestroyExecute(r)
}

/*
ExtrasJobHooksDestroy Method for ExtrasJobHooksDestroy

Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job hook.
 @return ApiExtrasJobHooksDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksDestroy(ctx context.Context, id string) ApiExtrasJobHooksDestroyRequest {
	return ApiExtrasJobHooksDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJobHooksDestroyExecute(r ApiExtrasJobHooksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobHooksListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentTypes *[]int32
	contentTypesIc *[]int32
	contentTypesIe *[]int32
	contentTypesIew *[]int32
	contentTypesIre *[]int32
	contentTypesIsw *[]int32
	contentTypesN *[]int32
	contentTypesNic *[]int32
	contentTypesNie *[]int32
	contentTypesNiew *[]int32
	contentTypesNire *[]int32
	contentTypesNisw *[]int32
	contentTypesNre *[]int32
	contentTypesRe *[]int32
	dynamicGroups *[]string
	dynamicGroupsN *string
	enabled *bool
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	job *[]string
	jobN *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	typeCreate *bool
	typeDelete *bool
	typeUpdate *bool
	depth *int32
}

func (r ApiExtrasJobHooksListRequest) Contacts(contacts []string) ApiExtrasJobHooksListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasJobHooksListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasJobHooksListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasJobHooksListRequest) ContactsN(contactsN string) ApiExtrasJobHooksListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypes(contentTypes []int32) ApiExtrasJobHooksListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesIc(contentTypesIc []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesIc = &contentTypesIc
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesIe(contentTypesIe []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesIe = &contentTypesIe
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesIew(contentTypesIew []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesIew = &contentTypesIew
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesIre(contentTypesIre []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesIre = &contentTypesIre
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesIsw(contentTypesIsw []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesIsw = &contentTypesIsw
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesNic(contentTypesNic []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesNic = &contentTypesNic
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesNie(contentTypesNie []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesNie = &contentTypesNie
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesNiew(contentTypesNiew []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesNiew = &contentTypesNiew
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesNire(contentTypesNire []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesNire = &contentTypesNire
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesNisw(contentTypesNisw []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesNisw = &contentTypesNisw
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesNre(contentTypesNre []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesNre = &contentTypesNre
	return r
}

func (r ApiExtrasJobHooksListRequest) ContentTypesRe(contentTypesRe []int32) ApiExtrasJobHooksListRequest {
	r.contentTypesRe = &contentTypesRe
	return r
}

func (r ApiExtrasJobHooksListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasJobHooksListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasJobHooksListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasJobHooksListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasJobHooksListRequest) Enabled(enabled bool) ApiExtrasJobHooksListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiExtrasJobHooksListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasJobHooksListRequest) Id(id []string) ApiExtrasJobHooksListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasJobHooksListRequest) IdIc(idIc []string) ApiExtrasJobHooksListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasJobHooksListRequest) IdIe(idIe []string) ApiExtrasJobHooksListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasJobHooksListRequest) IdIew(idIew []string) ApiExtrasJobHooksListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasJobHooksListRequest) IdIre(idIre []string) ApiExtrasJobHooksListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasJobHooksListRequest) IdIsw(idIsw []string) ApiExtrasJobHooksListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasJobHooksListRequest) IdN(idN []string) ApiExtrasJobHooksListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasJobHooksListRequest) IdNic(idNic []string) ApiExtrasJobHooksListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasJobHooksListRequest) IdNie(idNie []string) ApiExtrasJobHooksListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasJobHooksListRequest) IdNiew(idNiew []string) ApiExtrasJobHooksListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasJobHooksListRequest) IdNire(idNire []string) ApiExtrasJobHooksListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasJobHooksListRequest) IdNisw(idNisw []string) ApiExtrasJobHooksListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasJobHooksListRequest) IdNre(idNre []string) ApiExtrasJobHooksListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasJobHooksListRequest) IdRe(idRe []string) ApiExtrasJobHooksListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasJobHooksListRequest) Job(job []string) ApiExtrasJobHooksListRequest {
	r.job = &job
	return r
}

func (r ApiExtrasJobHooksListRequest) JobN(jobN []string) ApiExtrasJobHooksListRequest {
	r.jobN = &jobN
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobHooksListRequest) Limit(limit int32) ApiExtrasJobHooksListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasJobHooksListRequest) Name(name []string) ApiExtrasJobHooksListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasJobHooksListRequest) NameIc(nameIc []string) ApiExtrasJobHooksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasJobHooksListRequest) NameIe(nameIe []string) ApiExtrasJobHooksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasJobHooksListRequest) NameIew(nameIew []string) ApiExtrasJobHooksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasJobHooksListRequest) NameIre(nameIre []string) ApiExtrasJobHooksListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasJobHooksListRequest) NameIsw(nameIsw []string) ApiExtrasJobHooksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasJobHooksListRequest) NameN(nameN []string) ApiExtrasJobHooksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasJobHooksListRequest) NameNic(nameNic []string) ApiExtrasJobHooksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasJobHooksListRequest) NameNie(nameNie []string) ApiExtrasJobHooksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasJobHooksListRequest) NameNiew(nameNiew []string) ApiExtrasJobHooksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasJobHooksListRequest) NameNire(nameNire []string) ApiExtrasJobHooksListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasJobHooksListRequest) NameNisw(nameNisw []string) ApiExtrasJobHooksListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasJobHooksListRequest) NameNre(nameNre []string) ApiExtrasJobHooksListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasJobHooksListRequest) NameRe(nameRe []string) ApiExtrasJobHooksListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobHooksListRequest) Offset(offset int32) ApiExtrasJobHooksListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasJobHooksListRequest) Q(q string) ApiExtrasJobHooksListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasJobHooksListRequest) Sort(sort string) ApiExtrasJobHooksListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasJobHooksListRequest) Teams(teams []string) ApiExtrasJobHooksListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasJobHooksListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasJobHooksListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasJobHooksListRequest) TeamsN(teamsN string) ApiExtrasJobHooksListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasJobHooksListRequest) TypeCreate(typeCreate bool) ApiExtrasJobHooksListRequest {
	r.typeCreate = &typeCreate
	return r
}

func (r ApiExtrasJobHooksListRequest) TypeDelete(typeDelete bool) ApiExtrasJobHooksListRequest {
	r.typeDelete = &typeDelete
	return r
}

func (r ApiExtrasJobHooksListRequest) TypeUpdate(typeUpdate bool) ApiExtrasJobHooksListRequest {
	r.typeUpdate = &typeUpdate
	return r
}

// Serializer Depth
func (r ApiExtrasJobHooksListRequest) Depth(depth int32) ApiExtrasJobHooksListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobHooksListRequest) Execute() (*PaginatedJobHookList, *http.Response, error) {
	return r.ApiService.ExtrasJobHooksListExecute(r)
}

/*
ExtrasJobHooksList Method for ExtrasJobHooksList

Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobHooksListRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksList(ctx context.Context) ApiExtrasJobHooksListRequest {
	return ApiExtrasJobHooksListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJobHookList
func (a *ExtrasAPIService) ExtrasJobHooksListExecute(r ApiExtrasJobHooksListRequest) (*PaginatedJobHookList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobHookList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", t, "form", "multi")
		}
	}
	if r.contentTypesIc != nil {
		t := *r.contentTypesIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", t, "form", "multi")
		}
	}
	if r.contentTypesIe != nil {
		t := *r.contentTypesIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", t, "form", "multi")
		}
	}
	if r.contentTypesIew != nil {
		t := *r.contentTypesIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", t, "form", "multi")
		}
	}
	if r.contentTypesIre != nil {
		t := *r.contentTypesIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", t, "form", "multi")
		}
	}
	if r.contentTypesIsw != nil {
		t := *r.contentTypesIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", t, "form", "multi")
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", t, "form", "multi")
		}
	}
	if r.contentTypesNic != nil {
		t := *r.contentTypesNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", t, "form", "multi")
		}
	}
	if r.contentTypesNie != nil {
		t := *r.contentTypesNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", t, "form", "multi")
		}
	}
	if r.contentTypesNiew != nil {
		t := *r.contentTypesNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", t, "form", "multi")
		}
	}
	if r.contentTypesNire != nil {
		t := *r.contentTypesNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", t, "form", "multi")
		}
	}
	if r.contentTypesNisw != nil {
		t := *r.contentTypesNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", t, "form", "multi")
		}
	}
	if r.contentTypesNre != nil {
		t := *r.contentTypesNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", t, "form", "multi")
		}
	}
	if r.contentTypesRe != nil {
		t := *r.contentTypesRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.job != nil {
		t := *r.job
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job", t, "form", "multi")
		}
	}
	if r.jobN != nil {
		t := *r.jobN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.typeCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_create", r.typeCreate, "form", "")
	}
	if r.typeDelete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_delete", r.typeDelete, "form", "")
	}
	if r.typeUpdate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_update", r.typeUpdate, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobHooksNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobHooksNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasJobHooksNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasJobHooksNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobHooksNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasJobHooksNotesCreateExecute(r)
}

/*
ExtrasJobHooksNotesCreate Method for ExtrasJobHooksNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job hook.
 @return ApiExtrasJobHooksNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksNotesCreate(ctx context.Context, id string) ApiExtrasJobHooksNotesCreateRequest {
	return ApiExtrasJobHooksNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasJobHooksNotesCreateExecute(r ApiExtrasJobHooksNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobHooksNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasJobHooksNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobHooksNotesListRequest) Limit(limit int32) ApiExtrasJobHooksNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobHooksNotesListRequest) Offset(offset int32) ApiExtrasJobHooksNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasJobHooksNotesListRequest) Depth(depth int32) ApiExtrasJobHooksNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobHooksNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasJobHooksNotesListExecute(r)
}

/*
ExtrasJobHooksNotesList Method for ExtrasJobHooksNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job hook.
 @return ApiExtrasJobHooksNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksNotesList(ctx context.Context, id string) ApiExtrasJobHooksNotesListRequest {
	return ApiExtrasJobHooksNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasJobHooksNotesListExecute(r ApiExtrasJobHooksNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobHooksPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedJobHookRequest *PatchedJobHookRequest
}

func (r ApiExtrasJobHooksPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobHooksPartialUpdateRequest) PatchedJobHookRequest(patchedJobHookRequest PatchedJobHookRequest) ApiExtrasJobHooksPartialUpdateRequest {
	r.patchedJobHookRequest = &patchedJobHookRequest
	return r
}

func (r ApiExtrasJobHooksPartialUpdateRequest) Execute() (*JobHook, *http.Response, error) {
	return r.ApiService.ExtrasJobHooksPartialUpdateExecute(r)
}

/*
ExtrasJobHooksPartialUpdate Method for ExtrasJobHooksPartialUpdate

Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job hook.
 @return ApiExtrasJobHooksPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksPartialUpdate(ctx context.Context, id string) ApiExtrasJobHooksPartialUpdateRequest {
	return ApiExtrasJobHooksPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobHook
func (a *ExtrasAPIService) ExtrasJobHooksPartialUpdateExecute(r ApiExtrasJobHooksPartialUpdateRequest) (*JobHook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobHook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJobHookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobHooksRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasJobHooksRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasJobHooksRetrieveRequest) Depth(depth int32) ApiExtrasJobHooksRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobHooksRetrieveRequest) Execute() (*JobHook, *http.Response, error) {
	return r.ApiService.ExtrasJobHooksRetrieveExecute(r)
}

/*
ExtrasJobHooksRetrieve Method for ExtrasJobHooksRetrieve

Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job hook.
 @return ApiExtrasJobHooksRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksRetrieve(ctx context.Context, id string) ApiExtrasJobHooksRetrieveRequest {
	return ApiExtrasJobHooksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobHook
func (a *ExtrasAPIService) ExtrasJobHooksRetrieveExecute(r ApiExtrasJobHooksRetrieveRequest) (*JobHook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobHook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobHooksUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	jobHookRequest *JobHookRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobHooksUpdateRequest) JobHookRequest(jobHookRequest JobHookRequest) ApiExtrasJobHooksUpdateRequest {
	r.jobHookRequest = &jobHookRequest
	return r
}

func (r ApiExtrasJobHooksUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobHooksUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobHooksUpdateRequest) Execute() (*JobHook, *http.Response, error) {
	return r.ApiService.ExtrasJobHooksUpdateExecute(r)
}

/*
ExtrasJobHooksUpdate Method for ExtrasJobHooksUpdate

Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job hook.
 @return ApiExtrasJobHooksUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobHooksUpdate(ctx context.Context, id string) ApiExtrasJobHooksUpdateRequest {
	return ApiExtrasJobHooksUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobHook
func (a *ExtrasAPIService) ExtrasJobHooksUpdateExecute(r ApiExtrasJobHooksUpdateRequest) (*JobHook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobHook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobHooksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-hooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobHookRequest == nil {
		return localVarReturnValue, nil, reportError("jobHookRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobHookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobLogsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	absoluteUrl *[]string
	absoluteUrlIc *[]string
	absoluteUrlIe *[]string
	absoluteUrlIew *[]string
	absoluteUrlIre *[]string
	absoluteUrlIsw *[]string
	absoluteUrlN *[]string
	absoluteUrlNic *[]string
	absoluteUrlNie *[]string
	absoluteUrlNiew *[]string
	absoluteUrlNire *[]string
	absoluteUrlNisw *[]string
	absoluteUrlNre *[]string
	absoluteUrlRe *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	format *CircuitsCircuitTerminationsListFormatParameter
	grouping *[]string
	groupingIc *[]string
	groupingIe *[]string
	groupingIew *[]string
	groupingIre *[]string
	groupingIsw *[]string
	groupingN *[]string
	groupingNic *[]string
	groupingNie *[]string
	groupingNiew *[]string
	groupingNire *[]string
	groupingNisw *[]string
	groupingNre *[]string
	groupingRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	jobResult *string
	jobResultN *string
	limit *int32
	logLevel *[]string
	logLevelIc *[]string
	logLevelIe *[]string
	logLevelIew *[]string
	logLevelIre *[]string
	logLevelIsw *[]string
	logLevelN *[]string
	logLevelNic *[]string
	logLevelNie *[]string
	logLevelNiew *[]string
	logLevelNire *[]string
	logLevelNisw *[]string
	logLevelNre *[]string
	logLevelRe *[]string
	logObject *[]string
	logObjectIc *[]string
	logObjectIe *[]string
	logObjectIew *[]string
	logObjectIre *[]string
	logObjectIsw *[]string
	logObjectN *[]string
	logObjectNic *[]string
	logObjectNie *[]string
	logObjectNiew *[]string
	logObjectNire *[]string
	logObjectNisw *[]string
	logObjectNre *[]string
	logObjectRe *[]string
	message *[]string
	messageIc *[]string
	messageIe *[]string
	messageIew *[]string
	messageIre *[]string
	messageIsw *[]string
	messageN *[]string
	messageNic *[]string
	messageNie *[]string
	messageNiew *[]string
	messageNire *[]string
	messageNisw *[]string
	messageNre *[]string
	messageRe *[]string
	offset *int32
	q *string
	sort *string
	depth *int32
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrl(absoluteUrl []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrl = &absoluteUrl
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIc(absoluteUrlIc []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIc = &absoluteUrlIc
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIe(absoluteUrlIe []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIe = &absoluteUrlIe
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIew(absoluteUrlIew []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIew = &absoluteUrlIew
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIre(absoluteUrlIre []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIre = &absoluteUrlIre
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIsw(absoluteUrlIsw []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIsw = &absoluteUrlIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlN(absoluteUrlN []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlN = &absoluteUrlN
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNic(absoluteUrlNic []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNic = &absoluteUrlNic
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNie(absoluteUrlNie []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNie = &absoluteUrlNie
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNiew(absoluteUrlNiew []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNiew = &absoluteUrlNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNire(absoluteUrlNire []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNire = &absoluteUrlNire
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNisw(absoluteUrlNisw []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNisw = &absoluteUrlNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNre(absoluteUrlNre []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNre = &absoluteUrlNre
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlRe(absoluteUrlRe []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlRe = &absoluteUrlRe
	return r
}

func (r ApiExtrasJobLogsListRequest) Created(created []time.Time) ApiExtrasJobLogsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasJobLogsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasJobLogsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasJobLogsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasJobLogsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedN(createdN []time.Time) ApiExtrasJobLogsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasJobLogsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobLogsListRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobLogsListRequest) Grouping(grouping []string) ApiExtrasJobLogsListRequest {
	r.grouping = &grouping
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIc(groupingIc []string) ApiExtrasJobLogsListRequest {
	r.groupingIc = &groupingIc
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIe(groupingIe []string) ApiExtrasJobLogsListRequest {
	r.groupingIe = &groupingIe
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIew(groupingIew []string) ApiExtrasJobLogsListRequest {
	r.groupingIew = &groupingIew
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIre(groupingIre []string) ApiExtrasJobLogsListRequest {
	r.groupingIre = &groupingIre
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIsw(groupingIsw []string) ApiExtrasJobLogsListRequest {
	r.groupingIsw = &groupingIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingN(groupingN []string) ApiExtrasJobLogsListRequest {
	r.groupingN = &groupingN
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNic(groupingNic []string) ApiExtrasJobLogsListRequest {
	r.groupingNic = &groupingNic
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNie(groupingNie []string) ApiExtrasJobLogsListRequest {
	r.groupingNie = &groupingNie
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNiew(groupingNiew []string) ApiExtrasJobLogsListRequest {
	r.groupingNiew = &groupingNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNire(groupingNire []string) ApiExtrasJobLogsListRequest {
	r.groupingNire = &groupingNire
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNisw(groupingNisw []string) ApiExtrasJobLogsListRequest {
	r.groupingNisw = &groupingNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNre(groupingNre []string) ApiExtrasJobLogsListRequest {
	r.groupingNre = &groupingNre
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingRe(groupingRe []string) ApiExtrasJobLogsListRequest {
	r.groupingRe = &groupingRe
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasJobLogsListRequest) Id(id []string) ApiExtrasJobLogsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIc(idIc []string) ApiExtrasJobLogsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIe(idIe []string) ApiExtrasJobLogsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIew(idIew []string) ApiExtrasJobLogsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIre(idIre []string) ApiExtrasJobLogsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIsw(idIsw []string) ApiExtrasJobLogsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) IdN(idN []string) ApiExtrasJobLogsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNic(idNic []string) ApiExtrasJobLogsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNie(idNie []string) ApiExtrasJobLogsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNiew(idNiew []string) ApiExtrasJobLogsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNire(idNire []string) ApiExtrasJobLogsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNisw(idNisw []string) ApiExtrasJobLogsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNre(idNre []string) ApiExtrasJobLogsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasJobLogsListRequest) IdRe(idRe []string) ApiExtrasJobLogsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasJobLogsListRequest) JobResult(jobResult string) ApiExtrasJobLogsListRequest {
	r.jobResult = &jobResult
	return r
}

func (r ApiExtrasJobLogsListRequest) JobResultN(jobResultN string) ApiExtrasJobLogsListRequest {
	r.jobResultN = &jobResultN
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobLogsListRequest) Limit(limit int32) ApiExtrasJobLogsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevel(logLevel []string) ApiExtrasJobLogsListRequest {
	r.logLevel = &logLevel
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelIc(logLevelIc []string) ApiExtrasJobLogsListRequest {
	r.logLevelIc = &logLevelIc
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelIe(logLevelIe []string) ApiExtrasJobLogsListRequest {
	r.logLevelIe = &logLevelIe
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelIew(logLevelIew []string) ApiExtrasJobLogsListRequest {
	r.logLevelIew = &logLevelIew
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelIre(logLevelIre []string) ApiExtrasJobLogsListRequest {
	r.logLevelIre = &logLevelIre
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelIsw(logLevelIsw []string) ApiExtrasJobLogsListRequest {
	r.logLevelIsw = &logLevelIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelN(logLevelN []string) ApiExtrasJobLogsListRequest {
	r.logLevelN = &logLevelN
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelNic(logLevelNic []string) ApiExtrasJobLogsListRequest {
	r.logLevelNic = &logLevelNic
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelNie(logLevelNie []string) ApiExtrasJobLogsListRequest {
	r.logLevelNie = &logLevelNie
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelNiew(logLevelNiew []string) ApiExtrasJobLogsListRequest {
	r.logLevelNiew = &logLevelNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelNire(logLevelNire []string) ApiExtrasJobLogsListRequest {
	r.logLevelNire = &logLevelNire
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelNisw(logLevelNisw []string) ApiExtrasJobLogsListRequest {
	r.logLevelNisw = &logLevelNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelNre(logLevelNre []string) ApiExtrasJobLogsListRequest {
	r.logLevelNre = &logLevelNre
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelRe(logLevelRe []string) ApiExtrasJobLogsListRequest {
	r.logLevelRe = &logLevelRe
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObject(logObject []string) ApiExtrasJobLogsListRequest {
	r.logObject = &logObject
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIc(logObjectIc []string) ApiExtrasJobLogsListRequest {
	r.logObjectIc = &logObjectIc
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIe(logObjectIe []string) ApiExtrasJobLogsListRequest {
	r.logObjectIe = &logObjectIe
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIew(logObjectIew []string) ApiExtrasJobLogsListRequest {
	r.logObjectIew = &logObjectIew
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIre(logObjectIre []string) ApiExtrasJobLogsListRequest {
	r.logObjectIre = &logObjectIre
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIsw(logObjectIsw []string) ApiExtrasJobLogsListRequest {
	r.logObjectIsw = &logObjectIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectN(logObjectN []string) ApiExtrasJobLogsListRequest {
	r.logObjectN = &logObjectN
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNic(logObjectNic []string) ApiExtrasJobLogsListRequest {
	r.logObjectNic = &logObjectNic
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNie(logObjectNie []string) ApiExtrasJobLogsListRequest {
	r.logObjectNie = &logObjectNie
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNiew(logObjectNiew []string) ApiExtrasJobLogsListRequest {
	r.logObjectNiew = &logObjectNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNire(logObjectNire []string) ApiExtrasJobLogsListRequest {
	r.logObjectNire = &logObjectNire
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNisw(logObjectNisw []string) ApiExtrasJobLogsListRequest {
	r.logObjectNisw = &logObjectNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNre(logObjectNre []string) ApiExtrasJobLogsListRequest {
	r.logObjectNre = &logObjectNre
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectRe(logObjectRe []string) ApiExtrasJobLogsListRequest {
	r.logObjectRe = &logObjectRe
	return r
}

func (r ApiExtrasJobLogsListRequest) Message(message []string) ApiExtrasJobLogsListRequest {
	r.message = &message
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIc(messageIc []string) ApiExtrasJobLogsListRequest {
	r.messageIc = &messageIc
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIe(messageIe []string) ApiExtrasJobLogsListRequest {
	r.messageIe = &messageIe
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIew(messageIew []string) ApiExtrasJobLogsListRequest {
	r.messageIew = &messageIew
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIre(messageIre []string) ApiExtrasJobLogsListRequest {
	r.messageIre = &messageIre
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIsw(messageIsw []string) ApiExtrasJobLogsListRequest {
	r.messageIsw = &messageIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageN(messageN []string) ApiExtrasJobLogsListRequest {
	r.messageN = &messageN
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNic(messageNic []string) ApiExtrasJobLogsListRequest {
	r.messageNic = &messageNic
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNie(messageNie []string) ApiExtrasJobLogsListRequest {
	r.messageNie = &messageNie
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNiew(messageNiew []string) ApiExtrasJobLogsListRequest {
	r.messageNiew = &messageNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNire(messageNire []string) ApiExtrasJobLogsListRequest {
	r.messageNire = &messageNire
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNisw(messageNisw []string) ApiExtrasJobLogsListRequest {
	r.messageNisw = &messageNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNre(messageNre []string) ApiExtrasJobLogsListRequest {
	r.messageNre = &messageNre
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageRe(messageRe []string) ApiExtrasJobLogsListRequest {
	r.messageRe = &messageRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobLogsListRequest) Offset(offset int32) ApiExtrasJobLogsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasJobLogsListRequest) Q(q string) ApiExtrasJobLogsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasJobLogsListRequest) Sort(sort string) ApiExtrasJobLogsListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiExtrasJobLogsListRequest) Depth(depth int32) ApiExtrasJobLogsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobLogsListRequest) Execute() (*PaginatedJobLogEntryList, *http.Response, error) {
	return r.ApiService.ExtrasJobLogsListExecute(r)
}

/*
ExtrasJobLogsList Method for ExtrasJobLogsList

Retrieve a list of job log entries.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobLogsListRequest
*/
func (a *ExtrasAPIService) ExtrasJobLogsList(ctx context.Context) ApiExtrasJobLogsListRequest {
	return ApiExtrasJobLogsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJobLogEntryList
func (a *ExtrasAPIService) ExtrasJobLogsListExecute(r ApiExtrasJobLogsListRequest) (*PaginatedJobLogEntryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobLogEntryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobLogsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-logs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.absoluteUrl != nil {
		t := *r.absoluteUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url", t, "form", "multi")
		}
	}
	if r.absoluteUrlIc != nil {
		t := *r.absoluteUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__ic", t, "form", "multi")
		}
	}
	if r.absoluteUrlIe != nil {
		t := *r.absoluteUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__ie", t, "form", "multi")
		}
	}
	if r.absoluteUrlIew != nil {
		t := *r.absoluteUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__iew", t, "form", "multi")
		}
	}
	if r.absoluteUrlIre != nil {
		t := *r.absoluteUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__ire", t, "form", "multi")
		}
	}
	if r.absoluteUrlIsw != nil {
		t := *r.absoluteUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__isw", t, "form", "multi")
		}
	}
	if r.absoluteUrlN != nil {
		t := *r.absoluteUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__n", t, "form", "multi")
		}
	}
	if r.absoluteUrlNic != nil {
		t := *r.absoluteUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nic", t, "form", "multi")
		}
	}
	if r.absoluteUrlNie != nil {
		t := *r.absoluteUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nie", t, "form", "multi")
		}
	}
	if r.absoluteUrlNiew != nil {
		t := *r.absoluteUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__niew", t, "form", "multi")
		}
	}
	if r.absoluteUrlNire != nil {
		t := *r.absoluteUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nire", t, "form", "multi")
		}
	}
	if r.absoluteUrlNisw != nil {
		t := *r.absoluteUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nisw", t, "form", "multi")
		}
	}
	if r.absoluteUrlNre != nil {
		t := *r.absoluteUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__nre", t, "form", "multi")
		}
	}
	if r.absoluteUrlRe != nil {
		t := *r.absoluteUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "absolute_url__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.grouping != nil {
		t := *r.grouping
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", t, "form", "multi")
		}
	}
	if r.groupingIc != nil {
		t := *r.groupingIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ic", t, "form", "multi")
		}
	}
	if r.groupingIe != nil {
		t := *r.groupingIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ie", t, "form", "multi")
		}
	}
	if r.groupingIew != nil {
		t := *r.groupingIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__iew", t, "form", "multi")
		}
	}
	if r.groupingIre != nil {
		t := *r.groupingIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ire", t, "form", "multi")
		}
	}
	if r.groupingIsw != nil {
		t := *r.groupingIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__isw", t, "form", "multi")
		}
	}
	if r.groupingN != nil {
		t := *r.groupingN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__n", t, "form", "multi")
		}
	}
	if r.groupingNic != nil {
		t := *r.groupingNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nic", t, "form", "multi")
		}
	}
	if r.groupingNie != nil {
		t := *r.groupingNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nie", t, "form", "multi")
		}
	}
	if r.groupingNiew != nil {
		t := *r.groupingNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__niew", t, "form", "multi")
		}
	}
	if r.groupingNire != nil {
		t := *r.groupingNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nire", t, "form", "multi")
		}
	}
	if r.groupingNisw != nil {
		t := *r.groupingNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nisw", t, "form", "multi")
		}
	}
	if r.groupingNre != nil {
		t := *r.groupingNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nre", t, "form", "multi")
		}
	}
	if r.groupingRe != nil {
		t := *r.groupingRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__re", t, "form", "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.jobResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_result", r.jobResult, "form", "")
	}
	if r.jobResultN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_result__n", r.jobResultN, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.logLevel != nil {
		t := *r.logLevel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level", t, "form", "multi")
		}
	}
	if r.logLevelIc != nil {
		t := *r.logLevelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__ic", t, "form", "multi")
		}
	}
	if r.logLevelIe != nil {
		t := *r.logLevelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__ie", t, "form", "multi")
		}
	}
	if r.logLevelIew != nil {
		t := *r.logLevelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__iew", t, "form", "multi")
		}
	}
	if r.logLevelIre != nil {
		t := *r.logLevelIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__ire", t, "form", "multi")
		}
	}
	if r.logLevelIsw != nil {
		t := *r.logLevelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__isw", t, "form", "multi")
		}
	}
	if r.logLevelN != nil {
		t := *r.logLevelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__n", t, "form", "multi")
		}
	}
	if r.logLevelNic != nil {
		t := *r.logLevelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nic", t, "form", "multi")
		}
	}
	if r.logLevelNie != nil {
		t := *r.logLevelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nie", t, "form", "multi")
		}
	}
	if r.logLevelNiew != nil {
		t := *r.logLevelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__niew", t, "form", "multi")
		}
	}
	if r.logLevelNire != nil {
		t := *r.logLevelNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nire", t, "form", "multi")
		}
	}
	if r.logLevelNisw != nil {
		t := *r.logLevelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nisw", t, "form", "multi")
		}
	}
	if r.logLevelNre != nil {
		t := *r.logLevelNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__nre", t, "form", "multi")
		}
	}
	if r.logLevelRe != nil {
		t := *r.logLevelRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_level__re", t, "form", "multi")
		}
	}
	if r.logObject != nil {
		t := *r.logObject
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object", t, "form", "multi")
		}
	}
	if r.logObjectIc != nil {
		t := *r.logObjectIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__ic", t, "form", "multi")
		}
	}
	if r.logObjectIe != nil {
		t := *r.logObjectIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__ie", t, "form", "multi")
		}
	}
	if r.logObjectIew != nil {
		t := *r.logObjectIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__iew", t, "form", "multi")
		}
	}
	if r.logObjectIre != nil {
		t := *r.logObjectIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__ire", t, "form", "multi")
		}
	}
	if r.logObjectIsw != nil {
		t := *r.logObjectIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__isw", t, "form", "multi")
		}
	}
	if r.logObjectN != nil {
		t := *r.logObjectN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__n", t, "form", "multi")
		}
	}
	if r.logObjectNic != nil {
		t := *r.logObjectNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nic", t, "form", "multi")
		}
	}
	if r.logObjectNie != nil {
		t := *r.logObjectNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nie", t, "form", "multi")
		}
	}
	if r.logObjectNiew != nil {
		t := *r.logObjectNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__niew", t, "form", "multi")
		}
	}
	if r.logObjectNire != nil {
		t := *r.logObjectNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nire", t, "form", "multi")
		}
	}
	if r.logObjectNisw != nil {
		t := *r.logObjectNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nisw", t, "form", "multi")
		}
	}
	if r.logObjectNre != nil {
		t := *r.logObjectNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__nre", t, "form", "multi")
		}
	}
	if r.logObjectRe != nil {
		t := *r.logObjectRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "log_object__re", t, "form", "multi")
		}
	}
	if r.message != nil {
		t := *r.message
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message", t, "form", "multi")
		}
	}
	if r.messageIc != nil {
		t := *r.messageIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__ic", t, "form", "multi")
		}
	}
	if r.messageIe != nil {
		t := *r.messageIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__ie", t, "form", "multi")
		}
	}
	if r.messageIew != nil {
		t := *r.messageIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__iew", t, "form", "multi")
		}
	}
	if r.messageIre != nil {
		t := *r.messageIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__ire", t, "form", "multi")
		}
	}
	if r.messageIsw != nil {
		t := *r.messageIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__isw", t, "form", "multi")
		}
	}
	if r.messageN != nil {
		t := *r.messageN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__n", t, "form", "multi")
		}
	}
	if r.messageNic != nil {
		t := *r.messageNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__nic", t, "form", "multi")
		}
	}
	if r.messageNie != nil {
		t := *r.messageNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__nie", t, "form", "multi")
		}
	}
	if r.messageNiew != nil {
		t := *r.messageNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__niew", t, "form", "multi")
		}
	}
	if r.messageNire != nil {
		t := *r.messageNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__nire", t, "form", "multi")
		}
	}
	if r.messageNisw != nil {
		t := *r.messageNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__nisw", t, "form", "multi")
		}
	}
	if r.messageNre != nil {
		t := *r.messageNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__nre", t, "form", "multi")
		}
	}
	if r.messageRe != nil {
		t := *r.messageRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "message__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "message__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobLogsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasJobLogsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobLogsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasJobLogsRetrieveRequest) Depth(depth int32) ApiExtrasJobLogsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobLogsRetrieveRequest) Execute() (*JobLogEntry, *http.Response, error) {
	return r.ApiService.ExtrasJobLogsRetrieveExecute(r)
}

/*
ExtrasJobLogsRetrieve Method for ExtrasJobLogsRetrieve

Retrieve a list of job log entries.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job log entry.
 @return ApiExtrasJobLogsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasJobLogsRetrieve(ctx context.Context, id string) ApiExtrasJobLogsRetrieveRequest {
	return ApiExtrasJobLogsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobLogEntry
func (a *ExtrasAPIService) ExtrasJobLogsRetrieveExecute(r ApiExtrasJobLogsRetrieveRequest) (*JobLogEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobLogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobLogsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-logs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobResultsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasJobResultsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasJobResultsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobResultsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobResultsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobResultsBulkDestroyExecute(r)
}

/*
ExtrasJobResultsBulkDestroy Method for ExtrasJobResultsBulkDestroy

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobResultsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJobResultsBulkDestroy(ctx context.Context) ApiExtrasJobResultsBulkDestroyRequest {
	return ApiExtrasJobResultsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJobResultsBulkDestroyExecute(r ApiExtrasJobResultsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobResultsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobResultsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobResultsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobResultsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobResultsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobResultsDestroyExecute(r)
}

/*
ExtrasJobResultsDestroy Method for ExtrasJobResultsDestroy

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job result.
 @return ApiExtrasJobResultsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJobResultsDestroy(ctx context.Context, id string) ApiExtrasJobResultsDestroyRequest {
	return ApiExtrasJobResultsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJobResultsDestroyExecute(r ApiExtrasJobResultsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobResultsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobResultsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	dateCreated *[]time.Time
	dateCreatedGt *[]time.Time
	dateCreatedGte *[]time.Time
	dateCreatedLt *[]time.Time
	dateCreatedLte *[]time.Time
	dateCreatedN *[]time.Time
	dateDone *[]time.Time
	dateDoneGt *[]time.Time
	dateDoneGte *[]time.Time
	dateDoneIsnull *bool
	dateDoneLt *[]time.Time
	dateDoneLte *[]time.Time
	dateDoneN *[]time.Time
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	jobModel *[]string
	jobModelIsnull *bool
	jobModelN *[]string
	jobModelId *[]*string
	jobModelIdIsnull *bool
	jobModelIdN *[]*string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	scheduledJob *[]string
	scheduledJobIsnull *bool
	scheduledJobN *[]string
	sort *string
	status *[]string
	statusIc *[]string
	statusIe *[]string
	statusIew *[]string
	statusIre *[]string
	statusIsw *[]string
	statusN *[]string
	statusNic *[]string
	statusNie *[]string
	statusNiew *[]string
	statusNire *[]string
	statusNisw *[]string
	statusNre *[]string
	statusRe *[]string
	user *string
	userIsnull *bool
	userN *string
	depth *int32
}

func (r ApiExtrasJobResultsListRequest) DateCreated(dateCreated []time.Time) ApiExtrasJobResultsListRequest {
	r.dateCreated = &dateCreated
	return r
}

func (r ApiExtrasJobResultsListRequest) DateCreatedGt(dateCreatedGt []time.Time) ApiExtrasJobResultsListRequest {
	r.dateCreatedGt = &dateCreatedGt
	return r
}

func (r ApiExtrasJobResultsListRequest) DateCreatedGte(dateCreatedGte []time.Time) ApiExtrasJobResultsListRequest {
	r.dateCreatedGte = &dateCreatedGte
	return r
}

func (r ApiExtrasJobResultsListRequest) DateCreatedLt(dateCreatedLt []time.Time) ApiExtrasJobResultsListRequest {
	r.dateCreatedLt = &dateCreatedLt
	return r
}

func (r ApiExtrasJobResultsListRequest) DateCreatedLte(dateCreatedLte []time.Time) ApiExtrasJobResultsListRequest {
	r.dateCreatedLte = &dateCreatedLte
	return r
}

func (r ApiExtrasJobResultsListRequest) DateCreatedN(dateCreatedN []time.Time) ApiExtrasJobResultsListRequest {
	r.dateCreatedN = &dateCreatedN
	return r
}

func (r ApiExtrasJobResultsListRequest) DateDone(dateDone []time.Time) ApiExtrasJobResultsListRequest {
	r.dateDone = &dateDone
	return r
}

func (r ApiExtrasJobResultsListRequest) DateDoneGt(dateDoneGt []time.Time) ApiExtrasJobResultsListRequest {
	r.dateDoneGt = &dateDoneGt
	return r
}

func (r ApiExtrasJobResultsListRequest) DateDoneGte(dateDoneGte []time.Time) ApiExtrasJobResultsListRequest {
	r.dateDoneGte = &dateDoneGte
	return r
}

func (r ApiExtrasJobResultsListRequest) DateDoneIsnull(dateDoneIsnull bool) ApiExtrasJobResultsListRequest {
	r.dateDoneIsnull = &dateDoneIsnull
	return r
}

func (r ApiExtrasJobResultsListRequest) DateDoneLt(dateDoneLt []time.Time) ApiExtrasJobResultsListRequest {
	r.dateDoneLt = &dateDoneLt
	return r
}

func (r ApiExtrasJobResultsListRequest) DateDoneLte(dateDoneLte []time.Time) ApiExtrasJobResultsListRequest {
	r.dateDoneLte = &dateDoneLte
	return r
}

func (r ApiExtrasJobResultsListRequest) DateDoneN(dateDoneN []time.Time) ApiExtrasJobResultsListRequest {
	r.dateDoneN = &dateDoneN
	return r
}

func (r ApiExtrasJobResultsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobResultsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasJobResultsListRequest) Id(id []string) ApiExtrasJobResultsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIc(idIc []string) ApiExtrasJobResultsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIe(idIe []string) ApiExtrasJobResultsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIew(idIew []string) ApiExtrasJobResultsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIre(idIre []string) ApiExtrasJobResultsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIsw(idIsw []string) ApiExtrasJobResultsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasJobResultsListRequest) IdN(idN []string) ApiExtrasJobResultsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNic(idNic []string) ApiExtrasJobResultsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNie(idNie []string) ApiExtrasJobResultsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNiew(idNiew []string) ApiExtrasJobResultsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNire(idNire []string) ApiExtrasJobResultsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNisw(idNisw []string) ApiExtrasJobResultsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNre(idNre []string) ApiExtrasJobResultsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasJobResultsListRequest) IdRe(idRe []string) ApiExtrasJobResultsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasJobResultsListRequest) JobModel(jobModel []string) ApiExtrasJobResultsListRequest {
	r.jobModel = &jobModel
	return r
}

// Job (name or ID) is null
func (r ApiExtrasJobResultsListRequest) JobModelIsnull(jobModelIsnull bool) ApiExtrasJobResultsListRequest {
	r.jobModelIsnull = &jobModelIsnull
	return r
}

func (r ApiExtrasJobResultsListRequest) JobModelN(jobModelN []string) ApiExtrasJobResultsListRequest {
	r.jobModelN = &jobModelN
	return r
}

// Job (ID) - Deprecated (use job_model filter)
func (r ApiExtrasJobResultsListRequest) JobModelId(jobModelId []*string) ApiExtrasJobResultsListRequest {
	r.jobModelId = &jobModelId
	return r
}

// Job (ID) - Deprecated (use job_model filter) is null
func (r ApiExtrasJobResultsListRequest) JobModelIdIsnull(jobModelIdIsnull bool) ApiExtrasJobResultsListRequest {
	r.jobModelIdIsnull = &jobModelIdIsnull
	return r
}

// Exclude Job (ID) - Deprecated (use job_model filter)
func (r ApiExtrasJobResultsListRequest) JobModelIdN(jobModelIdN []*string) ApiExtrasJobResultsListRequest {
	r.jobModelIdN = &jobModelIdN
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobResultsListRequest) Limit(limit int32) ApiExtrasJobResultsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasJobResultsListRequest) Name(name []string) ApiExtrasJobResultsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIc(nameIc []string) ApiExtrasJobResultsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIe(nameIe []string) ApiExtrasJobResultsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIew(nameIew []string) ApiExtrasJobResultsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIre(nameIre []string) ApiExtrasJobResultsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIsw(nameIsw []string) ApiExtrasJobResultsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasJobResultsListRequest) NameN(nameN []string) ApiExtrasJobResultsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNic(nameNic []string) ApiExtrasJobResultsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNie(nameNie []string) ApiExtrasJobResultsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNiew(nameNiew []string) ApiExtrasJobResultsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNire(nameNire []string) ApiExtrasJobResultsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNisw(nameNisw []string) ApiExtrasJobResultsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNre(nameNre []string) ApiExtrasJobResultsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasJobResultsListRequest) NameRe(nameRe []string) ApiExtrasJobResultsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobResultsListRequest) Offset(offset int32) ApiExtrasJobResultsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasJobResultsListRequest) Q(q string) ApiExtrasJobResultsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasJobResultsListRequest) ScheduledJob(scheduledJob []string) ApiExtrasJobResultsListRequest {
	r.scheduledJob = &scheduledJob
	return r
}

// Scheduled Job (name or ID) is null
func (r ApiExtrasJobResultsListRequest) ScheduledJobIsnull(scheduledJobIsnull bool) ApiExtrasJobResultsListRequest {
	r.scheduledJobIsnull = &scheduledJobIsnull
	return r
}

func (r ApiExtrasJobResultsListRequest) ScheduledJobN(scheduledJobN []string) ApiExtrasJobResultsListRequest {
	r.scheduledJobN = &scheduledJobN
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasJobResultsListRequest) Sort(sort string) ApiExtrasJobResultsListRequest {
	r.sort = &sort
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) Status(status []string) ApiExtrasJobResultsListRequest {
	r.status = &status
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusIc(statusIc []string) ApiExtrasJobResultsListRequest {
	r.statusIc = &statusIc
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusIe(statusIe []string) ApiExtrasJobResultsListRequest {
	r.statusIe = &statusIe
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusIew(statusIew []string) ApiExtrasJobResultsListRequest {
	r.statusIew = &statusIew
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusIre(statusIre []string) ApiExtrasJobResultsListRequest {
	r.statusIre = &statusIre
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusIsw(statusIsw []string) ApiExtrasJobResultsListRequest {
	r.statusIsw = &statusIsw
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusN(statusN []string) ApiExtrasJobResultsListRequest {
	r.statusN = &statusN
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusNic(statusNic []string) ApiExtrasJobResultsListRequest {
	r.statusNic = &statusNic
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusNie(statusNie []string) ApiExtrasJobResultsListRequest {
	r.statusNie = &statusNie
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusNiew(statusNiew []string) ApiExtrasJobResultsListRequest {
	r.statusNiew = &statusNiew
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusNire(statusNire []string) ApiExtrasJobResultsListRequest {
	r.statusNire = &statusNire
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusNisw(statusNisw []string) ApiExtrasJobResultsListRequest {
	r.statusNisw = &statusNisw
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusNre(statusNre []string) ApiExtrasJobResultsListRequest {
	r.statusNre = &statusNre
	return r
}

// Current state of the Job being run
func (r ApiExtrasJobResultsListRequest) StatusRe(statusRe []string) ApiExtrasJobResultsListRequest {
	r.statusRe = &statusRe
	return r
}

func (r ApiExtrasJobResultsListRequest) User(user string) ApiExtrasJobResultsListRequest {
	r.user = &user
	return r
}

func (r ApiExtrasJobResultsListRequest) UserIsnull(userIsnull bool) ApiExtrasJobResultsListRequest {
	r.userIsnull = &userIsnull
	return r
}

func (r ApiExtrasJobResultsListRequest) UserN(userN string) ApiExtrasJobResultsListRequest {
	r.userN = &userN
	return r
}

// Serializer Depth
func (r ApiExtrasJobResultsListRequest) Depth(depth int32) ApiExtrasJobResultsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobResultsListRequest) Execute() (*PaginatedJobResultList, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsListExecute(r)
}

/*
ExtrasJobResultsList Method for ExtrasJobResultsList

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobResultsListRequest
*/
func (a *ExtrasAPIService) ExtrasJobResultsList(ctx context.Context) ApiExtrasJobResultsListRequest {
	return ApiExtrasJobResultsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJobResultList
func (a *ExtrasAPIService) ExtrasJobResultsListExecute(r ApiExtrasJobResultsListRequest) (*PaginatedJobResultList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobResultList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobResultsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dateCreated != nil {
		t := *r.dateCreated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_created", t, "form", "multi")
		}
	}
	if r.dateCreatedGt != nil {
		t := *r.dateCreatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__gt", t, "form", "multi")
		}
	}
	if r.dateCreatedGte != nil {
		t := *r.dateCreatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__gte", t, "form", "multi")
		}
	}
	if r.dateCreatedLt != nil {
		t := *r.dateCreatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__lt", t, "form", "multi")
		}
	}
	if r.dateCreatedLte != nil {
		t := *r.dateCreatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__lte", t, "form", "multi")
		}
	}
	if r.dateCreatedN != nil {
		t := *r.dateCreatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_created__n", t, "form", "multi")
		}
	}
	if r.dateDone != nil {
		t := *r.dateDone
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_done", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_done", t, "form", "multi")
		}
	}
	if r.dateDoneGt != nil {
		t := *r.dateDoneGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__gt", t, "form", "multi")
		}
	}
	if r.dateDoneGte != nil {
		t := *r.dateDoneGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__gte", t, "form", "multi")
		}
	}
	if r.dateDoneIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__isnull", r.dateDoneIsnull, "form", "")
	}
	if r.dateDoneLt != nil {
		t := *r.dateDoneLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__lt", t, "form", "multi")
		}
	}
	if r.dateDoneLte != nil {
		t := *r.dateDoneLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__lte", t, "form", "multi")
		}
	}
	if r.dateDoneN != nil {
		t := *r.dateDoneN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "date_done__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.jobModel != nil {
		t := *r.jobModel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_model", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_model", t, "form", "multi")
		}
	}
	if r.jobModelIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_model__isnull", r.jobModelIsnull, "form", "")
	}
	if r.jobModelN != nil {
		t := *r.jobModelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_model__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_model__n", t, "form", "multi")
		}
	}
	if r.jobModelId != nil {
		t := *r.jobModelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id", t, "form", "multi")
		}
	}
	if r.jobModelIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id__isnull", r.jobModelIdIsnull, "form", "")
	}
	if r.jobModelIdN != nil {
		t := *r.jobModelIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.scheduledJob != nil {
		t := *r.scheduledJob
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "scheduled_job", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "scheduled_job", t, "form", "multi")
		}
	}
	if r.scheduledJobIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduled_job__isnull", r.scheduledJobIsnull, "form", "")
	}
	if r.scheduledJobN != nil {
		t := *r.scheduledJobN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "scheduled_job__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "scheduled_job__n", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "form", "multi")
		}
	}
	if r.statusIc != nil {
		t := *r.statusIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__ic", t, "form", "multi")
		}
	}
	if r.statusIe != nil {
		t := *r.statusIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__ie", t, "form", "multi")
		}
	}
	if r.statusIew != nil {
		t := *r.statusIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__iew", t, "form", "multi")
		}
	}
	if r.statusIre != nil {
		t := *r.statusIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__ire", t, "form", "multi")
		}
	}
	if r.statusIsw != nil {
		t := *r.statusIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__isw", t, "form", "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "form", "multi")
		}
	}
	if r.statusNic != nil {
		t := *r.statusNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nic", t, "form", "multi")
		}
	}
	if r.statusNie != nil {
		t := *r.statusNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nie", t, "form", "multi")
		}
	}
	if r.statusNiew != nil {
		t := *r.statusNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__niew", t, "form", "multi")
		}
	}
	if r.statusNire != nil {
		t := *r.statusNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nire", t, "form", "multi")
		}
	}
	if r.statusNisw != nil {
		t := *r.statusNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nisw", t, "form", "multi")
		}
	}
	if r.statusNre != nil {
		t := *r.statusNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nre", t, "form", "multi")
		}
	}
	if r.statusRe != nil {
		t := *r.statusRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__re", t, "form", "multi")
		}
	}
	if r.user != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user", r.user, "form", "")
	}
	if r.userIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user__isnull", r.userIsnull, "form", "")
	}
	if r.userN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", r.userN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsLogsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasJobResultsLogsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobResultsLogsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasJobResultsLogsRetrieveRequest) Depth(depth int32) ApiExtrasJobResultsLogsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobResultsLogsRetrieveRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsLogsRetrieveExecute(r)
}

/*
ExtrasJobResultsLogsRetrieve Method for ExtrasJobResultsLogsRetrieve

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job result.
 @return ApiExtrasJobResultsLogsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasJobResultsLogsRetrieve(ctx context.Context, id string) ApiExtrasJobResultsLogsRetrieveRequest {
	return ApiExtrasJobResultsLogsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasAPIService) ExtrasJobResultsLogsRetrieveExecute(r ApiExtrasJobResultsLogsRetrieveRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobResultsLogsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/{id}/logs/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasJobResultsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobResultsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasJobResultsRetrieveRequest) Depth(depth int32) ApiExtrasJobResultsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobResultsRetrieveRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsRetrieveExecute(r)
}

/*
ExtrasJobResultsRetrieve Method for ExtrasJobResultsRetrieve

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job result.
 @return ApiExtrasJobResultsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasJobResultsRetrieve(ctx context.Context, id string) ApiExtrasJobResultsRetrieveRequest {
	return ApiExtrasJobResultsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasAPIService) ExtrasJobResultsRetrieveExecute(r ApiExtrasJobResultsRetrieveRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobResultsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasJobsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasJobsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobsBulkDestroyExecute(r)
}

/*
ExtrasJobsBulkDestroy Method for ExtrasJobsBulkDestroy

Destroy a list of job objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJobsBulkDestroy(ctx context.Context) ApiExtrasJobsBulkDestroyRequest {
	return ApiExtrasJobsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJobsBulkDestroyExecute(r ApiExtrasJobsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableJobRequest *[]PatchedBulkWritableJobRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobsBulkPartialUpdateRequest) PatchedBulkWritableJobRequest(patchedBulkWritableJobRequest []PatchedBulkWritableJobRequest) ApiExtrasJobsBulkPartialUpdateRequest {
	r.patchedBulkWritableJobRequest = &patchedBulkWritableJobRequest
	return r
}

func (r ApiExtrasJobsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsBulkPartialUpdateRequest) Execute() ([]Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsBulkPartialUpdateExecute(r)
}

/*
ExtrasJobsBulkPartialUpdate Method for ExtrasJobsBulkPartialUpdate

Partial update a list of job objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobsBulkPartialUpdate(ctx context.Context) ApiExtrasJobsBulkPartialUpdateRequest {
	return ApiExtrasJobsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Job
func (a *ExtrasAPIService) ExtrasJobsBulkPartialUpdateExecute(r ApiExtrasJobsBulkPartialUpdateRequest) ([]Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableJobRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableJobRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableJobRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableJobRequest *[]BulkWritableJobRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobsBulkUpdateRequest) BulkWritableJobRequest(bulkWritableJobRequest []BulkWritableJobRequest) ApiExtrasJobsBulkUpdateRequest {
	r.bulkWritableJobRequest = &bulkWritableJobRequest
	return r
}

func (r ApiExtrasJobsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsBulkUpdateRequest) Execute() ([]Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsBulkUpdateExecute(r)
}

/*
ExtrasJobsBulkUpdate Method for ExtrasJobsBulkUpdate

Update a list of job objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobsBulkUpdate(ctx context.Context) ApiExtrasJobsBulkUpdateRequest {
	return ApiExtrasJobsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Job
func (a *ExtrasAPIService) ExtrasJobsBulkUpdateExecute(r ApiExtrasJobsBulkUpdateRequest) ([]Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableJobRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableJobRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableJobRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobsDestroyExecute(r)
}

/*
ExtrasJobsDestroy Method for ExtrasJobsDestroy

Destroy a job object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique object identifier, either a UUID primary key or a composite key.
 @return ApiExtrasJobsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJobsDestroy(ctx context.Context, id string) ApiExtrasJobsDestroyRequest {
	return ApiExtrasJobsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJobsDestroyExecute(r ApiExtrasJobsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobsDestroyByNameRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	name string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobsDestroyByNameRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsDestroyByNameRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsDestroyByNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobsDestroyByNameExecute(r)
}

/*
ExtrasJobsDestroyByName Method for ExtrasJobsDestroyByName

Destroy a list of job objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiExtrasJobsDestroyByNameRequest
*/
func (a *ExtrasAPIService) ExtrasJobsDestroyByName(ctx context.Context, name string) ApiExtrasJobsDestroyByNameRequest {
	return ApiExtrasJobsDestroyByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJobsDestroyByNameExecute(r ApiExtrasJobsDestroyByNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsDestroyByName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{name}/"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	approvalRequired *bool
	approvalRequiredOverride *bool
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	descriptionOverride *bool
	dryrunDefault *bool
	dryrunDefaultOverride *bool
	dynamicGroups *[]string
	dynamicGroupsN *string
	enabled *bool
	format *CircuitsCircuitTerminationsListFormatParameter
	grouping *[]string
	groupingIc *[]string
	groupingIe *[]string
	groupingIew *[]string
	groupingIre *[]string
	groupingIsw *[]string
	groupingN *[]string
	groupingNic *[]string
	groupingNie *[]string
	groupingNiew *[]string
	groupingNire *[]string
	groupingNisw *[]string
	groupingNre *[]string
	groupingRe *[]string
	groupingOverride *bool
	hasSensitiveVariables *bool
	hasSensitiveVariablesOverride *bool
	hidden *bool
	hiddenOverride *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	installed *bool
	isJobButtonReceiver *bool
	isJobHookReceiver *bool
	jobClassName *[]string
	jobClassNameIc *[]string
	jobClassNameIe *[]string
	jobClassNameIew *[]string
	jobClassNameIre *[]string
	jobClassNameIsw *[]string
	jobClassNameN *[]string
	jobClassNameNic *[]string
	jobClassNameNie *[]string
	jobClassNameNiew *[]string
	jobClassNameNire *[]string
	jobClassNameNisw *[]string
	jobClassNameNre *[]string
	jobClassNameRe *[]string
	limit *int32
	moduleName *[]string
	moduleNameIc *[]string
	moduleNameIe *[]string
	moduleNameIew *[]string
	moduleNameIre *[]string
	moduleNameIsw *[]string
	moduleNameN *[]string
	moduleNameNic *[]string
	moduleNameNie *[]string
	moduleNameNiew *[]string
	moduleNameNire *[]string
	moduleNameNisw *[]string
	moduleNameNre *[]string
	moduleNameRe *[]string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	nameOverride *bool
	offset *int32
	q *string
	readOnly *bool
	softTimeLimit *[]float32
	softTimeLimitGt *[]float32
	softTimeLimitGte *[]float32
	softTimeLimitLt *[]float32
	softTimeLimitLte *[]float32
	softTimeLimitN *[]float32
	softTimeLimitOverride *bool
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	timeLimit *[]float32
	timeLimitGt *[]float32
	timeLimitGte *[]float32
	timeLimitLt *[]float32
	timeLimitLte *[]float32
	timeLimitN *[]float32
	timeLimitOverride *bool
	depth *int32
}

func (r ApiExtrasJobsListRequest) ApprovalRequired(approvalRequired bool) ApiExtrasJobsListRequest {
	r.approvalRequired = &approvalRequired
	return r
}

func (r ApiExtrasJobsListRequest) ApprovalRequiredOverride(approvalRequiredOverride bool) ApiExtrasJobsListRequest {
	r.approvalRequiredOverride = &approvalRequiredOverride
	return r
}

func (r ApiExtrasJobsListRequest) Contacts(contacts []string) ApiExtrasJobsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasJobsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasJobsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasJobsListRequest) ContactsN(contactsN string) ApiExtrasJobsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasJobsListRequest) DescriptionOverride(descriptionOverride bool) ApiExtrasJobsListRequest {
	r.descriptionOverride = &descriptionOverride
	return r
}

func (r ApiExtrasJobsListRequest) DryrunDefault(dryrunDefault bool) ApiExtrasJobsListRequest {
	r.dryrunDefault = &dryrunDefault
	return r
}

func (r ApiExtrasJobsListRequest) DryrunDefaultOverride(dryrunDefaultOverride bool) ApiExtrasJobsListRequest {
	r.dryrunDefaultOverride = &dryrunDefaultOverride
	return r
}

func (r ApiExtrasJobsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasJobsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasJobsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasJobsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasJobsListRequest) Enabled(enabled bool) ApiExtrasJobsListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiExtrasJobsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsListRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsListRequest) Grouping(grouping []string) ApiExtrasJobsListRequest {
	r.grouping = &grouping
	return r
}

func (r ApiExtrasJobsListRequest) GroupingIc(groupingIc []string) ApiExtrasJobsListRequest {
	r.groupingIc = &groupingIc
	return r
}

func (r ApiExtrasJobsListRequest) GroupingIe(groupingIe []string) ApiExtrasJobsListRequest {
	r.groupingIe = &groupingIe
	return r
}

func (r ApiExtrasJobsListRequest) GroupingIew(groupingIew []string) ApiExtrasJobsListRequest {
	r.groupingIew = &groupingIew
	return r
}

func (r ApiExtrasJobsListRequest) GroupingIre(groupingIre []string) ApiExtrasJobsListRequest {
	r.groupingIre = &groupingIre
	return r
}

func (r ApiExtrasJobsListRequest) GroupingIsw(groupingIsw []string) ApiExtrasJobsListRequest {
	r.groupingIsw = &groupingIsw
	return r
}

func (r ApiExtrasJobsListRequest) GroupingN(groupingN []string) ApiExtrasJobsListRequest {
	r.groupingN = &groupingN
	return r
}

func (r ApiExtrasJobsListRequest) GroupingNic(groupingNic []string) ApiExtrasJobsListRequest {
	r.groupingNic = &groupingNic
	return r
}

func (r ApiExtrasJobsListRequest) GroupingNie(groupingNie []string) ApiExtrasJobsListRequest {
	r.groupingNie = &groupingNie
	return r
}

func (r ApiExtrasJobsListRequest) GroupingNiew(groupingNiew []string) ApiExtrasJobsListRequest {
	r.groupingNiew = &groupingNiew
	return r
}

func (r ApiExtrasJobsListRequest) GroupingNire(groupingNire []string) ApiExtrasJobsListRequest {
	r.groupingNire = &groupingNire
	return r
}

func (r ApiExtrasJobsListRequest) GroupingNisw(groupingNisw []string) ApiExtrasJobsListRequest {
	r.groupingNisw = &groupingNisw
	return r
}

func (r ApiExtrasJobsListRequest) GroupingNre(groupingNre []string) ApiExtrasJobsListRequest {
	r.groupingNre = &groupingNre
	return r
}

func (r ApiExtrasJobsListRequest) GroupingRe(groupingRe []string) ApiExtrasJobsListRequest {
	r.groupingRe = &groupingRe
	return r
}

func (r ApiExtrasJobsListRequest) GroupingOverride(groupingOverride bool) ApiExtrasJobsListRequest {
	r.groupingOverride = &groupingOverride
	return r
}

func (r ApiExtrasJobsListRequest) HasSensitiveVariables(hasSensitiveVariables bool) ApiExtrasJobsListRequest {
	r.hasSensitiveVariables = &hasSensitiveVariables
	return r
}

func (r ApiExtrasJobsListRequest) HasSensitiveVariablesOverride(hasSensitiveVariablesOverride bool) ApiExtrasJobsListRequest {
	r.hasSensitiveVariablesOverride = &hasSensitiveVariablesOverride
	return r
}

func (r ApiExtrasJobsListRequest) Hidden(hidden bool) ApiExtrasJobsListRequest {
	r.hidden = &hidden
	return r
}

func (r ApiExtrasJobsListRequest) HiddenOverride(hiddenOverride bool) ApiExtrasJobsListRequest {
	r.hiddenOverride = &hiddenOverride
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasJobsListRequest) Id(id []string) ApiExtrasJobsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasJobsListRequest) IdIc(idIc []string) ApiExtrasJobsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasJobsListRequest) IdIe(idIe []string) ApiExtrasJobsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasJobsListRequest) IdIew(idIew []string) ApiExtrasJobsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasJobsListRequest) IdIre(idIre []string) ApiExtrasJobsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasJobsListRequest) IdIsw(idIsw []string) ApiExtrasJobsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasJobsListRequest) IdN(idN []string) ApiExtrasJobsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasJobsListRequest) IdNic(idNic []string) ApiExtrasJobsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasJobsListRequest) IdNie(idNie []string) ApiExtrasJobsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasJobsListRequest) IdNiew(idNiew []string) ApiExtrasJobsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasJobsListRequest) IdNire(idNire []string) ApiExtrasJobsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasJobsListRequest) IdNisw(idNisw []string) ApiExtrasJobsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasJobsListRequest) IdNre(idNre []string) ApiExtrasJobsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasJobsListRequest) IdRe(idRe []string) ApiExtrasJobsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasJobsListRequest) Installed(installed bool) ApiExtrasJobsListRequest {
	r.installed = &installed
	return r
}

func (r ApiExtrasJobsListRequest) IsJobButtonReceiver(isJobButtonReceiver bool) ApiExtrasJobsListRequest {
	r.isJobButtonReceiver = &isJobButtonReceiver
	return r
}

func (r ApiExtrasJobsListRequest) IsJobHookReceiver(isJobHookReceiver bool) ApiExtrasJobsListRequest {
	r.isJobHookReceiver = &isJobHookReceiver
	return r
}

func (r ApiExtrasJobsListRequest) JobClassName(jobClassName []string) ApiExtrasJobsListRequest {
	r.jobClassName = &jobClassName
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameIc(jobClassNameIc []string) ApiExtrasJobsListRequest {
	r.jobClassNameIc = &jobClassNameIc
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameIe(jobClassNameIe []string) ApiExtrasJobsListRequest {
	r.jobClassNameIe = &jobClassNameIe
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameIew(jobClassNameIew []string) ApiExtrasJobsListRequest {
	r.jobClassNameIew = &jobClassNameIew
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameIre(jobClassNameIre []string) ApiExtrasJobsListRequest {
	r.jobClassNameIre = &jobClassNameIre
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameIsw(jobClassNameIsw []string) ApiExtrasJobsListRequest {
	r.jobClassNameIsw = &jobClassNameIsw
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameN(jobClassNameN []string) ApiExtrasJobsListRequest {
	r.jobClassNameN = &jobClassNameN
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameNic(jobClassNameNic []string) ApiExtrasJobsListRequest {
	r.jobClassNameNic = &jobClassNameNic
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameNie(jobClassNameNie []string) ApiExtrasJobsListRequest {
	r.jobClassNameNie = &jobClassNameNie
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameNiew(jobClassNameNiew []string) ApiExtrasJobsListRequest {
	r.jobClassNameNiew = &jobClassNameNiew
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameNire(jobClassNameNire []string) ApiExtrasJobsListRequest {
	r.jobClassNameNire = &jobClassNameNire
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameNisw(jobClassNameNisw []string) ApiExtrasJobsListRequest {
	r.jobClassNameNisw = &jobClassNameNisw
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameNre(jobClassNameNre []string) ApiExtrasJobsListRequest {
	r.jobClassNameNre = &jobClassNameNre
	return r
}

func (r ApiExtrasJobsListRequest) JobClassNameRe(jobClassNameRe []string) ApiExtrasJobsListRequest {
	r.jobClassNameRe = &jobClassNameRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobsListRequest) Limit(limit int32) ApiExtrasJobsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasJobsListRequest) ModuleName(moduleName []string) ApiExtrasJobsListRequest {
	r.moduleName = &moduleName
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameIc(moduleNameIc []string) ApiExtrasJobsListRequest {
	r.moduleNameIc = &moduleNameIc
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameIe(moduleNameIe []string) ApiExtrasJobsListRequest {
	r.moduleNameIe = &moduleNameIe
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameIew(moduleNameIew []string) ApiExtrasJobsListRequest {
	r.moduleNameIew = &moduleNameIew
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameIre(moduleNameIre []string) ApiExtrasJobsListRequest {
	r.moduleNameIre = &moduleNameIre
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameIsw(moduleNameIsw []string) ApiExtrasJobsListRequest {
	r.moduleNameIsw = &moduleNameIsw
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameN(moduleNameN []string) ApiExtrasJobsListRequest {
	r.moduleNameN = &moduleNameN
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameNic(moduleNameNic []string) ApiExtrasJobsListRequest {
	r.moduleNameNic = &moduleNameNic
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameNie(moduleNameNie []string) ApiExtrasJobsListRequest {
	r.moduleNameNie = &moduleNameNie
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameNiew(moduleNameNiew []string) ApiExtrasJobsListRequest {
	r.moduleNameNiew = &moduleNameNiew
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameNire(moduleNameNire []string) ApiExtrasJobsListRequest {
	r.moduleNameNire = &moduleNameNire
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameNisw(moduleNameNisw []string) ApiExtrasJobsListRequest {
	r.moduleNameNisw = &moduleNameNisw
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameNre(moduleNameNre []string) ApiExtrasJobsListRequest {
	r.moduleNameNre = &moduleNameNre
	return r
}

func (r ApiExtrasJobsListRequest) ModuleNameRe(moduleNameRe []string) ApiExtrasJobsListRequest {
	r.moduleNameRe = &moduleNameRe
	return r
}

func (r ApiExtrasJobsListRequest) Name(name []string) ApiExtrasJobsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasJobsListRequest) NameIc(nameIc []string) ApiExtrasJobsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasJobsListRequest) NameIe(nameIe []string) ApiExtrasJobsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasJobsListRequest) NameIew(nameIew []string) ApiExtrasJobsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasJobsListRequest) NameIre(nameIre []string) ApiExtrasJobsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasJobsListRequest) NameIsw(nameIsw []string) ApiExtrasJobsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasJobsListRequest) NameN(nameN []string) ApiExtrasJobsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasJobsListRequest) NameNic(nameNic []string) ApiExtrasJobsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasJobsListRequest) NameNie(nameNie []string) ApiExtrasJobsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasJobsListRequest) NameNiew(nameNiew []string) ApiExtrasJobsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasJobsListRequest) NameNire(nameNire []string) ApiExtrasJobsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasJobsListRequest) NameNisw(nameNisw []string) ApiExtrasJobsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasJobsListRequest) NameNre(nameNre []string) ApiExtrasJobsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasJobsListRequest) NameRe(nameRe []string) ApiExtrasJobsListRequest {
	r.nameRe = &nameRe
	return r
}

func (r ApiExtrasJobsListRequest) NameOverride(nameOverride bool) ApiExtrasJobsListRequest {
	r.nameOverride = &nameOverride
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobsListRequest) Offset(offset int32) ApiExtrasJobsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasJobsListRequest) Q(q string) ApiExtrasJobsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasJobsListRequest) ReadOnly(readOnly bool) ApiExtrasJobsListRequest {
	r.readOnly = &readOnly
	return r
}

func (r ApiExtrasJobsListRequest) SoftTimeLimit(softTimeLimit []float32) ApiExtrasJobsListRequest {
	r.softTimeLimit = &softTimeLimit
	return r
}

func (r ApiExtrasJobsListRequest) SoftTimeLimitGt(softTimeLimitGt []float32) ApiExtrasJobsListRequest {
	r.softTimeLimitGt = &softTimeLimitGt
	return r
}

func (r ApiExtrasJobsListRequest) SoftTimeLimitGte(softTimeLimitGte []float32) ApiExtrasJobsListRequest {
	r.softTimeLimitGte = &softTimeLimitGte
	return r
}

func (r ApiExtrasJobsListRequest) SoftTimeLimitLt(softTimeLimitLt []float32) ApiExtrasJobsListRequest {
	r.softTimeLimitLt = &softTimeLimitLt
	return r
}

func (r ApiExtrasJobsListRequest) SoftTimeLimitLte(softTimeLimitLte []float32) ApiExtrasJobsListRequest {
	r.softTimeLimitLte = &softTimeLimitLte
	return r
}

func (r ApiExtrasJobsListRequest) SoftTimeLimitN(softTimeLimitN []float32) ApiExtrasJobsListRequest {
	r.softTimeLimitN = &softTimeLimitN
	return r
}

func (r ApiExtrasJobsListRequest) SoftTimeLimitOverride(softTimeLimitOverride bool) ApiExtrasJobsListRequest {
	r.softTimeLimitOverride = &softTimeLimitOverride
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasJobsListRequest) Sort(sort string) ApiExtrasJobsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasJobsListRequest) Tags(tags []string) ApiExtrasJobsListRequest {
	r.tags = &tags
	return r
}

func (r ApiExtrasJobsListRequest) TagsIsnull(tagsIsnull bool) ApiExtrasJobsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiExtrasJobsListRequest) TagsN(tagsN []string) ApiExtrasJobsListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiExtrasJobsListRequest) Teams(teams []string) ApiExtrasJobsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasJobsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasJobsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasJobsListRequest) TeamsN(teamsN string) ApiExtrasJobsListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasJobsListRequest) TimeLimit(timeLimit []float32) ApiExtrasJobsListRequest {
	r.timeLimit = &timeLimit
	return r
}

func (r ApiExtrasJobsListRequest) TimeLimitGt(timeLimitGt []float32) ApiExtrasJobsListRequest {
	r.timeLimitGt = &timeLimitGt
	return r
}

func (r ApiExtrasJobsListRequest) TimeLimitGte(timeLimitGte []float32) ApiExtrasJobsListRequest {
	r.timeLimitGte = &timeLimitGte
	return r
}

func (r ApiExtrasJobsListRequest) TimeLimitLt(timeLimitLt []float32) ApiExtrasJobsListRequest {
	r.timeLimitLt = &timeLimitLt
	return r
}

func (r ApiExtrasJobsListRequest) TimeLimitLte(timeLimitLte []float32) ApiExtrasJobsListRequest {
	r.timeLimitLte = &timeLimitLte
	return r
}

func (r ApiExtrasJobsListRequest) TimeLimitN(timeLimitN []float32) ApiExtrasJobsListRequest {
	r.timeLimitN = &timeLimitN
	return r
}

func (r ApiExtrasJobsListRequest) TimeLimitOverride(timeLimitOverride bool) ApiExtrasJobsListRequest {
	r.timeLimitOverride = &timeLimitOverride
	return r
}

// Serializer Depth
func (r ApiExtrasJobsListRequest) Depth(depth int32) ApiExtrasJobsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobsListRequest) Execute() (*PaginatedJobList, *http.Response, error) {
	return r.ApiService.ExtrasJobsListExecute(r)
}

/*
ExtrasJobsList Method for ExtrasJobsList

Retrieve a list of job objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobsListRequest
*/
func (a *ExtrasAPIService) ExtrasJobsList(ctx context.Context) ApiExtrasJobsListRequest {
	return ApiExtrasJobsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJobList
func (a *ExtrasAPIService) ExtrasJobsListExecute(r ApiExtrasJobsListRequest) (*PaginatedJobList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.approvalRequired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approval_required", r.approvalRequired, "form", "")
	}
	if r.approvalRequiredOverride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approval_required_override", r.approvalRequiredOverride, "form", "")
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.descriptionOverride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description_override", r.descriptionOverride, "form", "")
	}
	if r.dryrunDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryrun_default", r.dryrunDefault, "form", "")
	}
	if r.dryrunDefaultOverride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryrun_default_override", r.dryrunDefaultOverride, "form", "")
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.grouping != nil {
		t := *r.grouping
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", t, "form", "multi")
		}
	}
	if r.groupingIc != nil {
		t := *r.groupingIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ic", t, "form", "multi")
		}
	}
	if r.groupingIe != nil {
		t := *r.groupingIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ie", t, "form", "multi")
		}
	}
	if r.groupingIew != nil {
		t := *r.groupingIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__iew", t, "form", "multi")
		}
	}
	if r.groupingIre != nil {
		t := *r.groupingIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__ire", t, "form", "multi")
		}
	}
	if r.groupingIsw != nil {
		t := *r.groupingIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__isw", t, "form", "multi")
		}
	}
	if r.groupingN != nil {
		t := *r.groupingN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__n", t, "form", "multi")
		}
	}
	if r.groupingNic != nil {
		t := *r.groupingNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nic", t, "form", "multi")
		}
	}
	if r.groupingNie != nil {
		t := *r.groupingNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nie", t, "form", "multi")
		}
	}
	if r.groupingNiew != nil {
		t := *r.groupingNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__niew", t, "form", "multi")
		}
	}
	if r.groupingNire != nil {
		t := *r.groupingNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nire", t, "form", "multi")
		}
	}
	if r.groupingNisw != nil {
		t := *r.groupingNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nisw", t, "form", "multi")
		}
	}
	if r.groupingNre != nil {
		t := *r.groupingNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__nre", t, "form", "multi")
		}
	}
	if r.groupingRe != nil {
		t := *r.groupingRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "grouping__re", t, "form", "multi")
		}
	}
	if r.groupingOverride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "grouping_override", r.groupingOverride, "form", "")
	}
	if r.hasSensitiveVariables != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_sensitive_variables", r.hasSensitiveVariables, "form", "")
	}
	if r.hasSensitiveVariablesOverride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_sensitive_variables_override", r.hasSensitiveVariablesOverride, "form", "")
	}
	if r.hidden != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hidden", r.hidden, "form", "")
	}
	if r.hiddenOverride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hidden_override", r.hiddenOverride, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.installed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "installed", r.installed, "form", "")
	}
	if r.isJobButtonReceiver != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_job_button_receiver", r.isJobButtonReceiver, "form", "")
	}
	if r.isJobHookReceiver != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_job_hook_receiver", r.isJobHookReceiver, "form", "")
	}
	if r.jobClassName != nil {
		t := *r.jobClassName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name", t, "form", "multi")
		}
	}
	if r.jobClassNameIc != nil {
		t := *r.jobClassNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__ic", t, "form", "multi")
		}
	}
	if r.jobClassNameIe != nil {
		t := *r.jobClassNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__ie", t, "form", "multi")
		}
	}
	if r.jobClassNameIew != nil {
		t := *r.jobClassNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__iew", t, "form", "multi")
		}
	}
	if r.jobClassNameIre != nil {
		t := *r.jobClassNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__ire", t, "form", "multi")
		}
	}
	if r.jobClassNameIsw != nil {
		t := *r.jobClassNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__isw", t, "form", "multi")
		}
	}
	if r.jobClassNameN != nil {
		t := *r.jobClassNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__n", t, "form", "multi")
		}
	}
	if r.jobClassNameNic != nil {
		t := *r.jobClassNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nic", t, "form", "multi")
		}
	}
	if r.jobClassNameNie != nil {
		t := *r.jobClassNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nie", t, "form", "multi")
		}
	}
	if r.jobClassNameNiew != nil {
		t := *r.jobClassNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__niew", t, "form", "multi")
		}
	}
	if r.jobClassNameNire != nil {
		t := *r.jobClassNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nire", t, "form", "multi")
		}
	}
	if r.jobClassNameNisw != nil {
		t := *r.jobClassNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nisw", t, "form", "multi")
		}
	}
	if r.jobClassNameNre != nil {
		t := *r.jobClassNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__nre", t, "form", "multi")
		}
	}
	if r.jobClassNameRe != nil {
		t := *r.jobClassNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_class_name__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.moduleName != nil {
		t := *r.moduleName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name", t, "form", "multi")
		}
	}
	if r.moduleNameIc != nil {
		t := *r.moduleNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__ic", t, "form", "multi")
		}
	}
	if r.moduleNameIe != nil {
		t := *r.moduleNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__ie", t, "form", "multi")
		}
	}
	if r.moduleNameIew != nil {
		t := *r.moduleNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__iew", t, "form", "multi")
		}
	}
	if r.moduleNameIre != nil {
		t := *r.moduleNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__ire", t, "form", "multi")
		}
	}
	if r.moduleNameIsw != nil {
		t := *r.moduleNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__isw", t, "form", "multi")
		}
	}
	if r.moduleNameN != nil {
		t := *r.moduleNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__n", t, "form", "multi")
		}
	}
	if r.moduleNameNic != nil {
		t := *r.moduleNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nic", t, "form", "multi")
		}
	}
	if r.moduleNameNie != nil {
		t := *r.moduleNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nie", t, "form", "multi")
		}
	}
	if r.moduleNameNiew != nil {
		t := *r.moduleNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__niew", t, "form", "multi")
		}
	}
	if r.moduleNameNire != nil {
		t := *r.moduleNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nire", t, "form", "multi")
		}
	}
	if r.moduleNameNisw != nil {
		t := *r.moduleNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nisw", t, "form", "multi")
		}
	}
	if r.moduleNameNre != nil {
		t := *r.moduleNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__nre", t, "form", "multi")
		}
	}
	if r.moduleNameRe != nil {
		t := *r.moduleNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_name__re", t, "form", "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.nameOverride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name_override", r.nameOverride, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.readOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "read_only", r.readOnly, "form", "")
	}
	if r.softTimeLimit != nil {
		t := *r.softTimeLimit
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit", t, "form", "multi")
		}
	}
	if r.softTimeLimitGt != nil {
		t := *r.softTimeLimitGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__gt", t, "form", "multi")
		}
	}
	if r.softTimeLimitGte != nil {
		t := *r.softTimeLimitGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__gte", t, "form", "multi")
		}
	}
	if r.softTimeLimitLt != nil {
		t := *r.softTimeLimitLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__lt", t, "form", "multi")
		}
	}
	if r.softTimeLimitLte != nil {
		t := *r.softTimeLimitLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__lte", t, "form", "multi")
		}
	}
	if r.softTimeLimitN != nil {
		t := *r.softTimeLimitN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit__n", t, "form", "multi")
		}
	}
	if r.softTimeLimitOverride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "soft_time_limit_override", r.softTimeLimitOverride, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.timeLimit != nil {
		t := *r.timeLimit
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit", t, "form", "multi")
		}
	}
	if r.timeLimitGt != nil {
		t := *r.timeLimitGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__gt", t, "form", "multi")
		}
	}
	if r.timeLimitGte != nil {
		t := *r.timeLimitGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__gte", t, "form", "multi")
		}
	}
	if r.timeLimitLt != nil {
		t := *r.timeLimitLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__lt", t, "form", "multi")
		}
	}
	if r.timeLimitLte != nil {
		t := *r.timeLimitLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__lte", t, "form", "multi")
		}
	}
	if r.timeLimitN != nil {
		t := *r.timeLimitN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit__n", t, "form", "multi")
		}
	}
	if r.timeLimitOverride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit_override", r.timeLimitOverride, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasJobsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasJobsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasJobsNotesCreateExecute(r)
}

/*
ExtrasJobsNotesCreate Method for ExtrasJobsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique object identifier, either a UUID primary key or a composite key.
 @return ApiExtrasJobsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasJobsNotesCreate(ctx context.Context, id string) ApiExtrasJobsNotesCreateRequest {
	return ApiExtrasJobsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasJobsNotesCreateExecute(r ApiExtrasJobsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsNotesCreateByNameRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	name string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobsNotesCreateByNameRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasJobsNotesCreateByNameRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasJobsNotesCreateByNameRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsNotesCreateByNameRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsNotesCreateByNameRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasJobsNotesCreateByNameExecute(r)
}

/*
ExtrasJobsNotesCreateByName Method for ExtrasJobsNotesCreateByName

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiExtrasJobsNotesCreateByNameRequest
*/
func (a *ExtrasAPIService) ExtrasJobsNotesCreateByName(ctx context.Context, name string) ApiExtrasJobsNotesCreateByNameRequest {
	return ApiExtrasJobsNotesCreateByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasJobsNotesCreateByNameExecute(r ApiExtrasJobsNotesCreateByNameRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsNotesCreateByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{name}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasJobsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobsNotesListRequest) Limit(limit int32) ApiExtrasJobsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobsNotesListRequest) Offset(offset int32) ApiExtrasJobsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasJobsNotesListRequest) Depth(depth int32) ApiExtrasJobsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasJobsNotesListExecute(r)
}

/*
ExtrasJobsNotesList Method for ExtrasJobsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique object identifier, either a UUID primary key or a composite key.
 @return ApiExtrasJobsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasJobsNotesList(ctx context.Context, id string) ApiExtrasJobsNotesListRequest {
	return ApiExtrasJobsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasJobsNotesListExecute(r ApiExtrasJobsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsNotesListByNameRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	name string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasJobsNotesListByNameRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsNotesListByNameRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobsNotesListByNameRequest) Limit(limit int32) ApiExtrasJobsNotesListByNameRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobsNotesListByNameRequest) Offset(offset int32) ApiExtrasJobsNotesListByNameRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasJobsNotesListByNameRequest) Depth(depth int32) ApiExtrasJobsNotesListByNameRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobsNotesListByNameRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasJobsNotesListByNameExecute(r)
}

/*
ExtrasJobsNotesListByName Method for ExtrasJobsNotesListByName

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiExtrasJobsNotesListByNameRequest
*/
func (a *ExtrasAPIService) ExtrasJobsNotesListByName(ctx context.Context, name string) ApiExtrasJobsNotesListByNameRequest {
	return ApiExtrasJobsNotesListByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasJobsNotesListByNameExecute(r ApiExtrasJobsNotesListByNameRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsNotesListByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{name}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedJobRequest *PatchedJobRequest
}

func (r ApiExtrasJobsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsPartialUpdateRequest) PatchedJobRequest(patchedJobRequest PatchedJobRequest) ApiExtrasJobsPartialUpdateRequest {
	r.patchedJobRequest = &patchedJobRequest
	return r
}

func (r ApiExtrasJobsPartialUpdateRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsPartialUpdateExecute(r)
}

/*
ExtrasJobsPartialUpdate Method for ExtrasJobsPartialUpdate

Partial update a job object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique object identifier, either a UUID primary key or a composite key.
 @return ApiExtrasJobsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobsPartialUpdate(ctx context.Context, id string) ApiExtrasJobsPartialUpdateRequest {
	return ApiExtrasJobsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasAPIService) ExtrasJobsPartialUpdateExecute(r ApiExtrasJobsPartialUpdateRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJobRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsPartialUpdateByNameRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	name string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedJobRequest *PatchedJobRequest
}

func (r ApiExtrasJobsPartialUpdateByNameRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsPartialUpdateByNameRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsPartialUpdateByNameRequest) PatchedJobRequest(patchedJobRequest PatchedJobRequest) ApiExtrasJobsPartialUpdateByNameRequest {
	r.patchedJobRequest = &patchedJobRequest
	return r
}

func (r ApiExtrasJobsPartialUpdateByNameRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsPartialUpdateByNameExecute(r)
}

/*
ExtrasJobsPartialUpdateByName Method for ExtrasJobsPartialUpdateByName

Partial update a list of job objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiExtrasJobsPartialUpdateByNameRequest
*/
func (a *ExtrasAPIService) ExtrasJobsPartialUpdateByName(ctx context.Context, name string) ApiExtrasJobsPartialUpdateByNameRequest {
	return ApiExtrasJobsPartialUpdateByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasAPIService) ExtrasJobsPartialUpdateByNameExecute(r ApiExtrasJobsPartialUpdateByNameRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsPartialUpdateByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{name}/"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJobRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasJobsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasJobsRetrieveRequest) Depth(depth int32) ApiExtrasJobsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobsRetrieveRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsRetrieveExecute(r)
}

/*
ExtrasJobsRetrieve Method for ExtrasJobsRetrieve

Retrieve a job object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique object identifier, either a UUID primary key or a composite key.
 @return ApiExtrasJobsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasJobsRetrieve(ctx context.Context, id string) ApiExtrasJobsRetrieveRequest {
	return ApiExtrasJobsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasAPIService) ExtrasJobsRetrieveExecute(r ApiExtrasJobsRetrieveRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsRetrieveByNameRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	name string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasJobsRetrieveByNameRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsRetrieveByNameRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasJobsRetrieveByNameRequest) Depth(depth int32) ApiExtrasJobsRetrieveByNameRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobsRetrieveByNameRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsRetrieveByNameExecute(r)
}

/*
ExtrasJobsRetrieveByName Method for ExtrasJobsRetrieveByName

Retrieve a list of job objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiExtrasJobsRetrieveByNameRequest
*/
func (a *ExtrasAPIService) ExtrasJobsRetrieveByName(ctx context.Context, name string) ApiExtrasJobsRetrieveByNameRequest {
	return ApiExtrasJobsRetrieveByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasAPIService) ExtrasJobsRetrieveByNameExecute(r ApiExtrasJobsRetrieveByNameRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsRetrieveByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{name}/"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsRunCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	jobInputRequest *JobInputRequest
}

func (r ApiExtrasJobsRunCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsRunCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsRunCreateRequest) JobInputRequest(jobInputRequest JobInputRequest) ApiExtrasJobsRunCreateRequest {
	r.jobInputRequest = &jobInputRequest
	return r
}

func (r ApiExtrasJobsRunCreateRequest) Execute() (*JobRunResponse, *http.Response, error) {
	return r.ApiService.ExtrasJobsRunCreateExecute(r)
}

/*
ExtrasJobsRunCreate Method for ExtrasJobsRunCreate

Run the specified Job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique object identifier, either a UUID primary key or a composite key.
 @return ApiExtrasJobsRunCreateRequest
*/
func (a *ExtrasAPIService) ExtrasJobsRunCreate(ctx context.Context, id string) ApiExtrasJobsRunCreateRequest {
	return ApiExtrasJobsRunCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobRunResponse
func (a *ExtrasAPIService) ExtrasJobsRunCreateExecute(r ApiExtrasJobsRunCreateRequest) (*JobRunResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobRunResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsRunCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/run/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsRunCreateByNameRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	name string
	format *CircuitsCircuitTerminationsListFormatParameter
	jobInputRequest *JobInputRequest
}

func (r ApiExtrasJobsRunCreateByNameRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsRunCreateByNameRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsRunCreateByNameRequest) JobInputRequest(jobInputRequest JobInputRequest) ApiExtrasJobsRunCreateByNameRequest {
	r.jobInputRequest = &jobInputRequest
	return r
}

func (r ApiExtrasJobsRunCreateByNameRequest) Execute() (*JobRunResponse, *http.Response, error) {
	return r.ApiService.ExtrasJobsRunCreateByNameExecute(r)
}

/*
ExtrasJobsRunCreateByName Method for ExtrasJobsRunCreateByName

Run the specified Job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiExtrasJobsRunCreateByNameRequest
*/
func (a *ExtrasAPIService) ExtrasJobsRunCreateByName(ctx context.Context, name string) ApiExtrasJobsRunCreateByNameRequest {
	return ApiExtrasJobsRunCreateByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return JobRunResponse
func (a *ExtrasAPIService) ExtrasJobsRunCreateByNameExecute(r ApiExtrasJobsRunCreateByNameRequest) (*JobRunResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobRunResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsRunCreateByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{name}/run/"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	jobRequest *JobRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobsUpdateRequest) JobRequest(jobRequest JobRequest) ApiExtrasJobsUpdateRequest {
	r.jobRequest = &jobRequest
	return r
}

func (r ApiExtrasJobsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsUpdateRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsUpdateExecute(r)
}

/*
ExtrasJobsUpdate Method for ExtrasJobsUpdate

Update a job object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique object identifier, either a UUID primary key or a composite key.
 @return ApiExtrasJobsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJobsUpdate(ctx context.Context, id string) ApiExtrasJobsUpdateRequest {
	return ApiExtrasJobsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasAPIService) ExtrasJobsUpdateExecute(r ApiExtrasJobsUpdateRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobRequest == nil {
		return localVarReturnValue, nil, reportError("jobRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsUpdateByNameRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	name string
	jobRequest *JobRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasJobsUpdateByNameRequest) JobRequest(jobRequest JobRequest) ApiExtrasJobsUpdateByNameRequest {
	r.jobRequest = &jobRequest
	return r
}

func (r ApiExtrasJobsUpdateByNameRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsUpdateByNameRequest {
	r.format = &format
	return r
}

func (r ApiExtrasJobsUpdateByNameRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsUpdateByNameExecute(r)
}

/*
ExtrasJobsUpdateByName Method for ExtrasJobsUpdateByName

Update a list of job objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiExtrasJobsUpdateByNameRequest
*/
func (a *ExtrasAPIService) ExtrasJobsUpdateByName(ctx context.Context, name string) ApiExtrasJobsUpdateByNameRequest {
	return ApiExtrasJobsUpdateByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasAPIService) ExtrasJobsUpdateByNameExecute(r ApiExtrasJobsUpdateByNameRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsUpdateByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{name}/"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobRequest == nil {
		return localVarReturnValue, nil, reportError("jobRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsVariablesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	sort *string
	depth *int32
}

func (r ApiExtrasJobsVariablesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsVariablesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobsVariablesListRequest) Limit(limit int32) ApiExtrasJobsVariablesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobsVariablesListRequest) Offset(offset int32) ApiExtrasJobsVariablesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasJobsVariablesListRequest) Sort(sort string) ApiExtrasJobsVariablesListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiExtrasJobsVariablesListRequest) Depth(depth int32) ApiExtrasJobsVariablesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobsVariablesListRequest) Execute() (*PaginatedJobVariableList, *http.Response, error) {
	return r.ApiService.ExtrasJobsVariablesListExecute(r)
}

/*
ExtrasJobsVariablesList Method for ExtrasJobsVariablesList

Get details of the input variables that may/must be specified to run a particular Job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique object identifier, either a UUID primary key or a composite key.
 @return ApiExtrasJobsVariablesListRequest
*/
func (a *ExtrasAPIService) ExtrasJobsVariablesList(ctx context.Context, id string) ApiExtrasJobsVariablesListRequest {
	return ApiExtrasJobsVariablesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedJobVariableList
func (a *ExtrasAPIService) ExtrasJobsVariablesListExecute(r ApiExtrasJobsVariablesListRequest) (*PaginatedJobVariableList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobVariableList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsVariablesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/variables/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsVariablesListByNameRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	name string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	sort *string
	depth *int32
}

func (r ApiExtrasJobsVariablesListByNameRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasJobsVariablesListByNameRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobsVariablesListByNameRequest) Limit(limit int32) ApiExtrasJobsVariablesListByNameRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobsVariablesListByNameRequest) Offset(offset int32) ApiExtrasJobsVariablesListByNameRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasJobsVariablesListByNameRequest) Sort(sort string) ApiExtrasJobsVariablesListByNameRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiExtrasJobsVariablesListByNameRequest) Depth(depth int32) ApiExtrasJobsVariablesListByNameRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasJobsVariablesListByNameRequest) Execute() (*PaginatedJobVariableList, *http.Response, error) {
	return r.ApiService.ExtrasJobsVariablesListByNameExecute(r)
}

/*
ExtrasJobsVariablesListByName Method for ExtrasJobsVariablesListByName

Get details of the input variables that may/must be specified to run a particular Job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name
 @return ApiExtrasJobsVariablesListByNameRequest
*/
func (a *ExtrasAPIService) ExtrasJobsVariablesListByName(ctx context.Context, name string) ApiExtrasJobsVariablesListByNameRequest {
	return ApiExtrasJobsVariablesListByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return PaginatedJobVariableList
func (a *ExtrasAPIService) ExtrasJobsVariablesListByNameExecute(r ApiExtrasJobsVariablesListByNameRequest) (*PaginatedJobVariableList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobVariableList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJobsVariablesListByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{name}/variables/"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataChoicesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataChoicesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasMetadataChoicesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasMetadataChoicesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataChoicesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataChoicesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasMetadataChoicesBulkDestroyExecute(r)
}

/*
ExtrasMetadataChoicesBulkDestroy Method for ExtrasMetadataChoicesBulkDestroy

Destroy a list of metadata choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataChoicesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataChoicesBulkDestroy(ctx context.Context) ApiExtrasMetadataChoicesBulkDestroyRequest {
	return ApiExtrasMetadataChoicesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasMetadataChoicesBulkDestroyExecute(r ApiExtrasMetadataChoicesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataChoicesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasMetadataChoicesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableMetadataChoiceRequest *[]PatchedBulkWritableMetadataChoiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataChoicesBulkPartialUpdateRequest) PatchedBulkWritableMetadataChoiceRequest(patchedBulkWritableMetadataChoiceRequest []PatchedBulkWritableMetadataChoiceRequest) ApiExtrasMetadataChoicesBulkPartialUpdateRequest {
	r.patchedBulkWritableMetadataChoiceRequest = &patchedBulkWritableMetadataChoiceRequest
	return r
}

func (r ApiExtrasMetadataChoicesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataChoicesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataChoicesBulkPartialUpdateRequest) Execute() ([]MetadataChoice, *http.Response, error) {
	return r.ApiService.ExtrasMetadataChoicesBulkPartialUpdateExecute(r)
}

/*
ExtrasMetadataChoicesBulkPartialUpdate Method for ExtrasMetadataChoicesBulkPartialUpdate

Partial update a list of metadata choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataChoicesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataChoicesBulkPartialUpdate(ctx context.Context) ApiExtrasMetadataChoicesBulkPartialUpdateRequest {
	return ApiExtrasMetadataChoicesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MetadataChoice
func (a *ExtrasAPIService) ExtrasMetadataChoicesBulkPartialUpdateExecute(r ApiExtrasMetadataChoicesBulkPartialUpdateRequest) ([]MetadataChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MetadataChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataChoicesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableMetadataChoiceRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableMetadataChoiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableMetadataChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataChoicesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableMetadataChoiceRequest *[]BulkWritableMetadataChoiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataChoicesBulkUpdateRequest) BulkWritableMetadataChoiceRequest(bulkWritableMetadataChoiceRequest []BulkWritableMetadataChoiceRequest) ApiExtrasMetadataChoicesBulkUpdateRequest {
	r.bulkWritableMetadataChoiceRequest = &bulkWritableMetadataChoiceRequest
	return r
}

func (r ApiExtrasMetadataChoicesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataChoicesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataChoicesBulkUpdateRequest) Execute() ([]MetadataChoice, *http.Response, error) {
	return r.ApiService.ExtrasMetadataChoicesBulkUpdateExecute(r)
}

/*
ExtrasMetadataChoicesBulkUpdate Method for ExtrasMetadataChoicesBulkUpdate

Update a list of metadata choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataChoicesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataChoicesBulkUpdate(ctx context.Context) ApiExtrasMetadataChoicesBulkUpdateRequest {
	return ApiExtrasMetadataChoicesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MetadataChoice
func (a *ExtrasAPIService) ExtrasMetadataChoicesBulkUpdateExecute(r ApiExtrasMetadataChoicesBulkUpdateRequest) ([]MetadataChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MetadataChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataChoicesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableMetadataChoiceRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableMetadataChoiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableMetadataChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataChoicesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	metadataChoiceRequest *MetadataChoiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataChoicesCreateRequest) MetadataChoiceRequest(metadataChoiceRequest MetadataChoiceRequest) ApiExtrasMetadataChoicesCreateRequest {
	r.metadataChoiceRequest = &metadataChoiceRequest
	return r
}

func (r ApiExtrasMetadataChoicesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataChoicesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataChoicesCreateRequest) Execute() (*MetadataChoice, *http.Response, error) {
	return r.ApiService.ExtrasMetadataChoicesCreateExecute(r)
}

/*
ExtrasMetadataChoicesCreate Method for ExtrasMetadataChoicesCreate

Create one or more metadata choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataChoicesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataChoicesCreate(ctx context.Context) ApiExtrasMetadataChoicesCreateRequest {
	return ApiExtrasMetadataChoicesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MetadataChoice
func (a *ExtrasAPIService) ExtrasMetadataChoicesCreateExecute(r ApiExtrasMetadataChoicesCreateRequest) (*MetadataChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataChoicesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metadataChoiceRequest == nil {
		return localVarReturnValue, nil, reportError("metadataChoiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.metadataChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataChoicesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataChoicesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataChoicesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataChoicesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasMetadataChoicesDestroyExecute(r)
}

/*
ExtrasMetadataChoicesDestroy Method for ExtrasMetadataChoicesDestroy

Destroy a metadata choice object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata choice.
 @return ApiExtrasMetadataChoicesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataChoicesDestroy(ctx context.Context, id string) ApiExtrasMetadataChoicesDestroyRequest {
	return ApiExtrasMetadataChoicesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasMetadataChoicesDestroyExecute(r ApiExtrasMetadataChoicesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataChoicesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasMetadataChoicesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	metadataType *[]string
	metadataTypeN *[]string
	offset *int32
	q *string
	sort *string
	value *[]string
	valueIc *[]string
	valueIe *[]string
	valueIew *[]string
	valueIre *[]string
	valueIsw *[]string
	valueN *[]string
	valueNic *[]string
	valueNie *[]string
	valueNiew *[]string
	valueNire *[]string
	valueNisw *[]string
	valueNre *[]string
	valueRe *[]string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
	depth *int32
}

func (r ApiExtrasMetadataChoicesListRequest) Created(created []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) CreatedGt(createdGt []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) CreatedGte(createdGte []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasMetadataChoicesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) CreatedLt(createdLt []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) CreatedLte(createdLte []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) CreatedN(createdN []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataChoicesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasMetadataChoicesListRequest) Id(id []string) ApiExtrasMetadataChoicesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdIc(idIc []string) ApiExtrasMetadataChoicesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdIe(idIe []string) ApiExtrasMetadataChoicesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdIew(idIew []string) ApiExtrasMetadataChoicesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdIre(idIre []string) ApiExtrasMetadataChoicesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdIsw(idIsw []string) ApiExtrasMetadataChoicesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdN(idN []string) ApiExtrasMetadataChoicesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdNic(idNic []string) ApiExtrasMetadataChoicesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdNie(idNie []string) ApiExtrasMetadataChoicesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdNiew(idNiew []string) ApiExtrasMetadataChoicesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdNire(idNire []string) ApiExtrasMetadataChoicesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdNisw(idNisw []string) ApiExtrasMetadataChoicesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdNre(idNre []string) ApiExtrasMetadataChoicesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) IdRe(idRe []string) ApiExtrasMetadataChoicesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasMetadataChoicesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasMetadataChoicesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasMetadataChoicesListRequest) Limit(limit int32) ApiExtrasMetadataChoicesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) MetadataType(metadataType []string) ApiExtrasMetadataChoicesListRequest {
	r.metadataType = &metadataType
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) MetadataTypeN(metadataTypeN []string) ApiExtrasMetadataChoicesListRequest {
	r.metadataTypeN = &metadataTypeN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasMetadataChoicesListRequest) Offset(offset int32) ApiExtrasMetadataChoicesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasMetadataChoicesListRequest) Q(q string) ApiExtrasMetadataChoicesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasMetadataChoicesListRequest) Sort(sort string) ApiExtrasMetadataChoicesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) Value(value []string) ApiExtrasMetadataChoicesListRequest {
	r.value = &value
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueIc(valueIc []string) ApiExtrasMetadataChoicesListRequest {
	r.valueIc = &valueIc
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueIe(valueIe []string) ApiExtrasMetadataChoicesListRequest {
	r.valueIe = &valueIe
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueIew(valueIew []string) ApiExtrasMetadataChoicesListRequest {
	r.valueIew = &valueIew
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueIre(valueIre []string) ApiExtrasMetadataChoicesListRequest {
	r.valueIre = &valueIre
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueIsw(valueIsw []string) ApiExtrasMetadataChoicesListRequest {
	r.valueIsw = &valueIsw
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueN(valueN []string) ApiExtrasMetadataChoicesListRequest {
	r.valueN = &valueN
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueNic(valueNic []string) ApiExtrasMetadataChoicesListRequest {
	r.valueNic = &valueNic
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueNie(valueNie []string) ApiExtrasMetadataChoicesListRequest {
	r.valueNie = &valueNie
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueNiew(valueNiew []string) ApiExtrasMetadataChoicesListRequest {
	r.valueNiew = &valueNiew
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueNire(valueNire []string) ApiExtrasMetadataChoicesListRequest {
	r.valueNire = &valueNire
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueNisw(valueNisw []string) ApiExtrasMetadataChoicesListRequest {
	r.valueNisw = &valueNisw
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueNre(valueNre []string) ApiExtrasMetadataChoicesListRequest {
	r.valueNre = &valueNre
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) ValueRe(valueRe []string) ApiExtrasMetadataChoicesListRequest {
	r.valueRe = &valueRe
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) Weight(weight []int32) ApiExtrasMetadataChoicesListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) WeightGt(weightGt []int32) ApiExtrasMetadataChoicesListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) WeightGte(weightGte []int32) ApiExtrasMetadataChoicesListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) WeightLt(weightLt []int32) ApiExtrasMetadataChoicesListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) WeightLte(weightLte []int32) ApiExtrasMetadataChoicesListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) WeightN(weightN []int32) ApiExtrasMetadataChoicesListRequest {
	r.weightN = &weightN
	return r
}

// Serializer Depth
func (r ApiExtrasMetadataChoicesListRequest) Depth(depth int32) ApiExtrasMetadataChoicesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasMetadataChoicesListRequest) Execute() (*PaginatedMetadataChoiceList, *http.Response, error) {
	return r.ApiService.ExtrasMetadataChoicesListExecute(r)
}

/*
ExtrasMetadataChoicesList Method for ExtrasMetadataChoicesList

Retrieve a list of metadata choice objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataChoicesListRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataChoicesList(ctx context.Context) ApiExtrasMetadataChoicesListRequest {
	return ApiExtrasMetadataChoicesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedMetadataChoiceList
func (a *ExtrasAPIService) ExtrasMetadataChoicesListExecute(r ApiExtrasMetadataChoicesListRequest) (*PaginatedMetadataChoiceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedMetadataChoiceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataChoicesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.metadataType != nil {
		t := *r.metadataType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_type", t, "form", "multi")
		}
	}
	if r.metadataTypeN != nil {
		t := *r.metadataTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_type__n", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.value != nil {
		t := *r.value
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value", t, "form", "multi")
		}
	}
	if r.valueIc != nil {
		t := *r.valueIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ic", t, "form", "multi")
		}
	}
	if r.valueIe != nil {
		t := *r.valueIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ie", t, "form", "multi")
		}
	}
	if r.valueIew != nil {
		t := *r.valueIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__iew", t, "form", "multi")
		}
	}
	if r.valueIre != nil {
		t := *r.valueIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__ire", t, "form", "multi")
		}
	}
	if r.valueIsw != nil {
		t := *r.valueIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__isw", t, "form", "multi")
		}
	}
	if r.valueN != nil {
		t := *r.valueN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__n", t, "form", "multi")
		}
	}
	if r.valueNic != nil {
		t := *r.valueNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nic", t, "form", "multi")
		}
	}
	if r.valueNie != nil {
		t := *r.valueNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nie", t, "form", "multi")
		}
	}
	if r.valueNiew != nil {
		t := *r.valueNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__niew", t, "form", "multi")
		}
	}
	if r.valueNire != nil {
		t := *r.valueNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nire", t, "form", "multi")
		}
	}
	if r.valueNisw != nil {
		t := *r.valueNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nisw", t, "form", "multi")
		}
	}
	if r.valueNre != nil {
		t := *r.valueNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__nre", t, "form", "multi")
		}
	}
	if r.valueRe != nil {
		t := *r.valueRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "value__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "value__re", t, "form", "multi")
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "form", "multi")
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "form", "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "form", "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "form", "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "form", "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataChoicesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedMetadataChoiceRequest *PatchedMetadataChoiceRequest
}

func (r ApiExtrasMetadataChoicesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataChoicesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataChoicesPartialUpdateRequest) PatchedMetadataChoiceRequest(patchedMetadataChoiceRequest PatchedMetadataChoiceRequest) ApiExtrasMetadataChoicesPartialUpdateRequest {
	r.patchedMetadataChoiceRequest = &patchedMetadataChoiceRequest
	return r
}

func (r ApiExtrasMetadataChoicesPartialUpdateRequest) Execute() (*MetadataChoice, *http.Response, error) {
	return r.ApiService.ExtrasMetadataChoicesPartialUpdateExecute(r)
}

/*
ExtrasMetadataChoicesPartialUpdate Method for ExtrasMetadataChoicesPartialUpdate

Partial update a metadata choice object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata choice.
 @return ApiExtrasMetadataChoicesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataChoicesPartialUpdate(ctx context.Context, id string) ApiExtrasMetadataChoicesPartialUpdateRequest {
	return ApiExtrasMetadataChoicesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return MetadataChoice
func (a *ExtrasAPIService) ExtrasMetadataChoicesPartialUpdateExecute(r ApiExtrasMetadataChoicesPartialUpdateRequest) (*MetadataChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataChoicesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedMetadataChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataChoicesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasMetadataChoicesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataChoicesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasMetadataChoicesRetrieveRequest) Depth(depth int32) ApiExtrasMetadataChoicesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasMetadataChoicesRetrieveRequest) Execute() (*MetadataChoice, *http.Response, error) {
	return r.ApiService.ExtrasMetadataChoicesRetrieveExecute(r)
}

/*
ExtrasMetadataChoicesRetrieve Method for ExtrasMetadataChoicesRetrieve

Retrieve a metadata choice object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata choice.
 @return ApiExtrasMetadataChoicesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataChoicesRetrieve(ctx context.Context, id string) ApiExtrasMetadataChoicesRetrieveRequest {
	return ApiExtrasMetadataChoicesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return MetadataChoice
func (a *ExtrasAPIService) ExtrasMetadataChoicesRetrieveExecute(r ApiExtrasMetadataChoicesRetrieveRequest) (*MetadataChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataChoicesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataChoicesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	metadataChoiceRequest *MetadataChoiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataChoicesUpdateRequest) MetadataChoiceRequest(metadataChoiceRequest MetadataChoiceRequest) ApiExtrasMetadataChoicesUpdateRequest {
	r.metadataChoiceRequest = &metadataChoiceRequest
	return r
}

func (r ApiExtrasMetadataChoicesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataChoicesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataChoicesUpdateRequest) Execute() (*MetadataChoice, *http.Response, error) {
	return r.ApiService.ExtrasMetadataChoicesUpdateExecute(r)
}

/*
ExtrasMetadataChoicesUpdate Method for ExtrasMetadataChoicesUpdate

Update a metadata choice object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata choice.
 @return ApiExtrasMetadataChoicesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataChoicesUpdate(ctx context.Context, id string) ApiExtrasMetadataChoicesUpdateRequest {
	return ApiExtrasMetadataChoicesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return MetadataChoice
func (a *ExtrasAPIService) ExtrasMetadataChoicesUpdateExecute(r ApiExtrasMetadataChoicesUpdateRequest) (*MetadataChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataChoicesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metadataChoiceRequest == nil {
		return localVarReturnValue, nil, reportError("metadataChoiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.metadataChoiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataTypesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasMetadataTypesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasMetadataTypesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataTypesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesBulkDestroyExecute(r)
}

/*
ExtrasMetadataTypesBulkDestroy Method for ExtrasMetadataTypesBulkDestroy

Destroy a list of metadata type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataTypesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesBulkDestroy(ctx context.Context) ApiExtrasMetadataTypesBulkDestroyRequest {
	return ApiExtrasMetadataTypesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasMetadataTypesBulkDestroyExecute(r ApiExtrasMetadataTypesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableMetadataTypeRequest *[]PatchedBulkWritableMetadataTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataTypesBulkPartialUpdateRequest) PatchedBulkWritableMetadataTypeRequest(patchedBulkWritableMetadataTypeRequest []PatchedBulkWritableMetadataTypeRequest) ApiExtrasMetadataTypesBulkPartialUpdateRequest {
	r.patchedBulkWritableMetadataTypeRequest = &patchedBulkWritableMetadataTypeRequest
	return r
}

func (r ApiExtrasMetadataTypesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataTypesBulkPartialUpdateRequest) Execute() ([]MetadataType, *http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesBulkPartialUpdateExecute(r)
}

/*
ExtrasMetadataTypesBulkPartialUpdate Method for ExtrasMetadataTypesBulkPartialUpdate

Partial update a list of metadata type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataTypesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesBulkPartialUpdate(ctx context.Context) ApiExtrasMetadataTypesBulkPartialUpdateRequest {
	return ApiExtrasMetadataTypesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MetadataType
func (a *ExtrasAPIService) ExtrasMetadataTypesBulkPartialUpdateExecute(r ApiExtrasMetadataTypesBulkPartialUpdateRequest) ([]MetadataType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MetadataType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableMetadataTypeRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableMetadataTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableMetadataTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableMetadataTypeRequest *[]BulkWritableMetadataTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataTypesBulkUpdateRequest) BulkWritableMetadataTypeRequest(bulkWritableMetadataTypeRequest []BulkWritableMetadataTypeRequest) ApiExtrasMetadataTypesBulkUpdateRequest {
	r.bulkWritableMetadataTypeRequest = &bulkWritableMetadataTypeRequest
	return r
}

func (r ApiExtrasMetadataTypesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataTypesBulkUpdateRequest) Execute() ([]MetadataType, *http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesBulkUpdateExecute(r)
}

/*
ExtrasMetadataTypesBulkUpdate Method for ExtrasMetadataTypesBulkUpdate

Update a list of metadata type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataTypesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesBulkUpdate(ctx context.Context) ApiExtrasMetadataTypesBulkUpdateRequest {
	return ApiExtrasMetadataTypesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MetadataType
func (a *ExtrasAPIService) ExtrasMetadataTypesBulkUpdateExecute(r ApiExtrasMetadataTypesBulkUpdateRequest) ([]MetadataType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MetadataType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableMetadataTypeRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableMetadataTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableMetadataTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	metadataTypeRequest *MetadataTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataTypesCreateRequest) MetadataTypeRequest(metadataTypeRequest MetadataTypeRequest) ApiExtrasMetadataTypesCreateRequest {
	r.metadataTypeRequest = &metadataTypeRequest
	return r
}

func (r ApiExtrasMetadataTypesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataTypesCreateRequest) Execute() (*MetadataType, *http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesCreateExecute(r)
}

/*
ExtrasMetadataTypesCreate Method for ExtrasMetadataTypesCreate

Create one or more metadata type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataTypesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesCreate(ctx context.Context) ApiExtrasMetadataTypesCreateRequest {
	return ApiExtrasMetadataTypesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MetadataType
func (a *ExtrasAPIService) ExtrasMetadataTypesCreateExecute(r ApiExtrasMetadataTypesCreateRequest) (*MetadataType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metadataTypeRequest == nil {
		return localVarReturnValue, nil, reportError("metadataTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.metadataTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataTypesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataTypesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesDestroyExecute(r)
}

/*
ExtrasMetadataTypesDestroy Method for ExtrasMetadataTypesDestroy

Destroy a metadata type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata type.
 @return ApiExtrasMetadataTypesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesDestroy(ctx context.Context, id string) ApiExtrasMetadataTypesDestroyRequest {
	return ApiExtrasMetadataTypesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasMetadataTypesDestroyExecute(r ApiExtrasMetadataTypesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentTypes *[]int32
	contentTypesIc *[]int32
	contentTypesIe *[]int32
	contentTypesIew *[]int32
	contentTypesIre *[]int32
	contentTypesIsw *[]int32
	contentTypesN *[]int32
	contentTypesNic *[]int32
	contentTypesNie *[]int32
	contentTypesNiew *[]int32
	contentTypesNire *[]int32
	contentTypesNisw *[]int32
	contentTypesNre *[]int32
	contentTypesRe *[]int32
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dataType *[]string
	dataTypeIc *[]string
	dataTypeIe *[]string
	dataTypeIew *[]string
	dataTypeIre *[]string
	dataTypeIsw *[]string
	dataTypeN *[]string
	dataTypeNic *[]string
	dataTypeNie *[]string
	dataTypeNiew *[]string
	dataTypeNire *[]string
	dataTypeNisw *[]string
	dataTypeNre *[]string
	dataTypeRe *[]string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiExtrasMetadataTypesListRequest) Contacts(contacts []string) ApiExtrasMetadataTypesListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasMetadataTypesListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasMetadataTypesListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasMetadataTypesListRequest) ContactsN(contactsN string) ApiExtrasMetadataTypesListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypes(contentTypes []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesIc(contentTypesIc []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesIc = &contentTypesIc
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesIe(contentTypesIe []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesIe = &contentTypesIe
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesIew(contentTypesIew []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesIew = &contentTypesIew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesIre(contentTypesIre []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesIre = &contentTypesIre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesIsw(contentTypesIsw []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesIsw = &contentTypesIsw
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesNic(contentTypesNic []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesNic = &contentTypesNic
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesNie(contentTypesNie []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesNie = &contentTypesNie
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesNiew(contentTypesNiew []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesNiew = &contentTypesNiew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesNire(contentTypesNire []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesNire = &contentTypesNire
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesNisw(contentTypesNisw []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesNisw = &contentTypesNisw
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesNre(contentTypesNre []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesNre = &contentTypesNre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) ContentTypesRe(contentTypesRe []int32) ApiExtrasMetadataTypesListRequest {
	r.contentTypesRe = &contentTypesRe
	return r
}

func (r ApiExtrasMetadataTypesListRequest) Created(created []time.Time) ApiExtrasMetadataTypesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasMetadataTypesListRequest) CreatedGt(createdGt []time.Time) ApiExtrasMetadataTypesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasMetadataTypesListRequest) CreatedGte(createdGte []time.Time) ApiExtrasMetadataTypesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasMetadataTypesListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasMetadataTypesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasMetadataTypesListRequest) CreatedLt(createdLt []time.Time) ApiExtrasMetadataTypesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasMetadataTypesListRequest) CreatedLte(createdLte []time.Time) ApiExtrasMetadataTypesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasMetadataTypesListRequest) CreatedN(createdN []time.Time) ApiExtrasMetadataTypesListRequest {
	r.createdN = &createdN
	return r
}

// The type of data allowed for any Metadata of this type.
func (r ApiExtrasMetadataTypesListRequest) DataType(dataType []string) ApiExtrasMetadataTypesListRequest {
	r.dataType = &dataType
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeIc(dataTypeIc []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeIc = &dataTypeIc
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeIe(dataTypeIe []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeIe = &dataTypeIe
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeIew(dataTypeIew []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeIew = &dataTypeIew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeIre(dataTypeIre []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeIre = &dataTypeIre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeIsw(dataTypeIsw []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeIsw = &dataTypeIsw
	return r
}

// The type of data allowed for any Metadata of this type.
func (r ApiExtrasMetadataTypesListRequest) DataTypeN(dataTypeN []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeN = &dataTypeN
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeNic(dataTypeNic []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeNic = &dataTypeNic
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeNie(dataTypeNie []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeNie = &dataTypeNie
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeNiew(dataTypeNiew []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeNiew = &dataTypeNiew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeNire(dataTypeNire []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeNire = &dataTypeNire
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeNisw(dataTypeNisw []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeNisw = &dataTypeNisw
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeNre(dataTypeNre []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeNre = &dataTypeNre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DataTypeRe(dataTypeRe []string) ApiExtrasMetadataTypesListRequest {
	r.dataTypeRe = &dataTypeRe
	return r
}

func (r ApiExtrasMetadataTypesListRequest) Description(description []string) ApiExtrasMetadataTypesListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionIc(descriptionIc []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionIe(descriptionIe []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionIew(descriptionIew []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionIre(descriptionIre []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionN(descriptionN []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionNic(descriptionNic []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionNie(descriptionNie []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionNire(descriptionNire []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionNre(descriptionNre []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DescriptionRe(descriptionRe []string) ApiExtrasMetadataTypesListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiExtrasMetadataTypesListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasMetadataTypesListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasMetadataTypesListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasMetadataTypesListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasMetadataTypesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasMetadataTypesListRequest) Id(id []string) ApiExtrasMetadataTypesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdIc(idIc []string) ApiExtrasMetadataTypesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdIe(idIe []string) ApiExtrasMetadataTypesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdIew(idIew []string) ApiExtrasMetadataTypesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdIre(idIre []string) ApiExtrasMetadataTypesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdIsw(idIsw []string) ApiExtrasMetadataTypesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdN(idN []string) ApiExtrasMetadataTypesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdNic(idNic []string) ApiExtrasMetadataTypesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdNie(idNie []string) ApiExtrasMetadataTypesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdNiew(idNiew []string) ApiExtrasMetadataTypesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdNire(idNire []string) ApiExtrasMetadataTypesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdNisw(idNisw []string) ApiExtrasMetadataTypesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdNre(idNre []string) ApiExtrasMetadataTypesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) IdRe(idRe []string) ApiExtrasMetadataTypesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasMetadataTypesListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasMetadataTypesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasMetadataTypesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasMetadataTypesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasMetadataTypesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasMetadataTypesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasMetadataTypesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasMetadataTypesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasMetadataTypesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasMetadataTypesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasMetadataTypesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasMetadataTypesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasMetadataTypesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasMetadataTypesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasMetadataTypesListRequest) Limit(limit int32) ApiExtrasMetadataTypesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasMetadataTypesListRequest) Name(name []string) ApiExtrasMetadataTypesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameIc(nameIc []string) ApiExtrasMetadataTypesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameIe(nameIe []string) ApiExtrasMetadataTypesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameIew(nameIew []string) ApiExtrasMetadataTypesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameIre(nameIre []string) ApiExtrasMetadataTypesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameIsw(nameIsw []string) ApiExtrasMetadataTypesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameN(nameN []string) ApiExtrasMetadataTypesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameNic(nameNic []string) ApiExtrasMetadataTypesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameNie(nameNie []string) ApiExtrasMetadataTypesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameNiew(nameNiew []string) ApiExtrasMetadataTypesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameNire(nameNire []string) ApiExtrasMetadataTypesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameNisw(nameNisw []string) ApiExtrasMetadataTypesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameNre(nameNre []string) ApiExtrasMetadataTypesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasMetadataTypesListRequest) NameRe(nameRe []string) ApiExtrasMetadataTypesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasMetadataTypesListRequest) Offset(offset int32) ApiExtrasMetadataTypesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasMetadataTypesListRequest) Q(q string) ApiExtrasMetadataTypesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasMetadataTypesListRequest) Sort(sort string) ApiExtrasMetadataTypesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasMetadataTypesListRequest) Tags(tags []string) ApiExtrasMetadataTypesListRequest {
	r.tags = &tags
	return r
}

func (r ApiExtrasMetadataTypesListRequest) TagsIsnull(tagsIsnull bool) ApiExtrasMetadataTypesListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiExtrasMetadataTypesListRequest) TagsN(tagsN []string) ApiExtrasMetadataTypesListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiExtrasMetadataTypesListRequest) Teams(teams []string) ApiExtrasMetadataTypesListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasMetadataTypesListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasMetadataTypesListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasMetadataTypesListRequest) TeamsN(teamsN string) ApiExtrasMetadataTypesListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiExtrasMetadataTypesListRequest) Depth(depth int32) ApiExtrasMetadataTypesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasMetadataTypesListRequest) Execute() (*PaginatedMetadataTypeList, *http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesListExecute(r)
}

/*
ExtrasMetadataTypesList Method for ExtrasMetadataTypesList

Retrieve a list of metadata type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasMetadataTypesListRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesList(ctx context.Context) ApiExtrasMetadataTypesListRequest {
	return ApiExtrasMetadataTypesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedMetadataTypeList
func (a *ExtrasAPIService) ExtrasMetadataTypesListExecute(r ApiExtrasMetadataTypesListRequest) (*PaginatedMetadataTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedMetadataTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", t, "form", "multi")
		}
	}
	if r.contentTypesIc != nil {
		t := *r.contentTypesIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", t, "form", "multi")
		}
	}
	if r.contentTypesIe != nil {
		t := *r.contentTypesIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", t, "form", "multi")
		}
	}
	if r.contentTypesIew != nil {
		t := *r.contentTypesIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", t, "form", "multi")
		}
	}
	if r.contentTypesIre != nil {
		t := *r.contentTypesIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", t, "form", "multi")
		}
	}
	if r.contentTypesIsw != nil {
		t := *r.contentTypesIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", t, "form", "multi")
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", t, "form", "multi")
		}
	}
	if r.contentTypesNic != nil {
		t := *r.contentTypesNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", t, "form", "multi")
		}
	}
	if r.contentTypesNie != nil {
		t := *r.contentTypesNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", t, "form", "multi")
		}
	}
	if r.contentTypesNiew != nil {
		t := *r.contentTypesNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", t, "form", "multi")
		}
	}
	if r.contentTypesNire != nil {
		t := *r.contentTypesNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", t, "form", "multi")
		}
	}
	if r.contentTypesNisw != nil {
		t := *r.contentTypesNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", t, "form", "multi")
		}
	}
	if r.contentTypesNre != nil {
		t := *r.contentTypesNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", t, "form", "multi")
		}
	}
	if r.contentTypesRe != nil {
		t := *r.contentTypesRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dataType != nil {
		t := *r.dataType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type", t, "form", "multi")
		}
	}
	if r.dataTypeIc != nil {
		t := *r.dataTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__ic", t, "form", "multi")
		}
	}
	if r.dataTypeIe != nil {
		t := *r.dataTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__ie", t, "form", "multi")
		}
	}
	if r.dataTypeIew != nil {
		t := *r.dataTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__iew", t, "form", "multi")
		}
	}
	if r.dataTypeIre != nil {
		t := *r.dataTypeIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__ire", t, "form", "multi")
		}
	}
	if r.dataTypeIsw != nil {
		t := *r.dataTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__isw", t, "form", "multi")
		}
	}
	if r.dataTypeN != nil {
		t := *r.dataTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__n", t, "form", "multi")
		}
	}
	if r.dataTypeNic != nil {
		t := *r.dataTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nic", t, "form", "multi")
		}
	}
	if r.dataTypeNie != nil {
		t := *r.dataTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nie", t, "form", "multi")
		}
	}
	if r.dataTypeNiew != nil {
		t := *r.dataTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__niew", t, "form", "multi")
		}
	}
	if r.dataTypeNire != nil {
		t := *r.dataTypeNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nire", t, "form", "multi")
		}
	}
	if r.dataTypeNisw != nil {
		t := *r.dataTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nisw", t, "form", "multi")
		}
	}
	if r.dataTypeNre != nil {
		t := *r.dataTypeNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__nre", t, "form", "multi")
		}
	}
	if r.dataTypeRe != nil {
		t := *r.dataTypeRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_type__re", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataTypesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasMetadataTypesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasMetadataTypesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataTypesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesNotesCreateExecute(r)
}

/*
ExtrasMetadataTypesNotesCreate Method for ExtrasMetadataTypesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata type.
 @return ApiExtrasMetadataTypesNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesNotesCreate(ctx context.Context, id string) ApiExtrasMetadataTypesNotesCreateRequest {
	return ApiExtrasMetadataTypesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasMetadataTypesNotesCreateExecute(r ApiExtrasMetadataTypesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasMetadataTypesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasMetadataTypesNotesListRequest) Limit(limit int32) ApiExtrasMetadataTypesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasMetadataTypesNotesListRequest) Offset(offset int32) ApiExtrasMetadataTypesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasMetadataTypesNotesListRequest) Depth(depth int32) ApiExtrasMetadataTypesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasMetadataTypesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesNotesListExecute(r)
}

/*
ExtrasMetadataTypesNotesList Method for ExtrasMetadataTypesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata type.
 @return ApiExtrasMetadataTypesNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesNotesList(ctx context.Context, id string) ApiExtrasMetadataTypesNotesListRequest {
	return ApiExtrasMetadataTypesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasMetadataTypesNotesListExecute(r ApiExtrasMetadataTypesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedMetadataTypeRequest *PatchedMetadataTypeRequest
}

func (r ApiExtrasMetadataTypesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataTypesPartialUpdateRequest) PatchedMetadataTypeRequest(patchedMetadataTypeRequest PatchedMetadataTypeRequest) ApiExtrasMetadataTypesPartialUpdateRequest {
	r.patchedMetadataTypeRequest = &patchedMetadataTypeRequest
	return r
}

func (r ApiExtrasMetadataTypesPartialUpdateRequest) Execute() (*MetadataType, *http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesPartialUpdateExecute(r)
}

/*
ExtrasMetadataTypesPartialUpdate Method for ExtrasMetadataTypesPartialUpdate

Partial update a metadata type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata type.
 @return ApiExtrasMetadataTypesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesPartialUpdate(ctx context.Context, id string) ApiExtrasMetadataTypesPartialUpdateRequest {
	return ApiExtrasMetadataTypesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return MetadataType
func (a *ExtrasAPIService) ExtrasMetadataTypesPartialUpdateExecute(r ApiExtrasMetadataTypesPartialUpdateRequest) (*MetadataType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedMetadataTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasMetadataTypesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasMetadataTypesRetrieveRequest) Depth(depth int32) ApiExtrasMetadataTypesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasMetadataTypesRetrieveRequest) Execute() (*MetadataType, *http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesRetrieveExecute(r)
}

/*
ExtrasMetadataTypesRetrieve Method for ExtrasMetadataTypesRetrieve

Retrieve a metadata type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata type.
 @return ApiExtrasMetadataTypesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesRetrieve(ctx context.Context, id string) ApiExtrasMetadataTypesRetrieveRequest {
	return ApiExtrasMetadataTypesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return MetadataType
func (a *ExtrasAPIService) ExtrasMetadataTypesRetrieveExecute(r ApiExtrasMetadataTypesRetrieveRequest) (*MetadataType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasMetadataTypesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	metadataTypeRequest *MetadataTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasMetadataTypesUpdateRequest) MetadataTypeRequest(metadataTypeRequest MetadataTypeRequest) ApiExtrasMetadataTypesUpdateRequest {
	r.metadataTypeRequest = &metadataTypeRequest
	return r
}

func (r ApiExtrasMetadataTypesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasMetadataTypesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasMetadataTypesUpdateRequest) Execute() (*MetadataType, *http.Response, error) {
	return r.ApiService.ExtrasMetadataTypesUpdateExecute(r)
}

/*
ExtrasMetadataTypesUpdate Method for ExtrasMetadataTypesUpdate

Update a metadata type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this metadata type.
 @return ApiExtrasMetadataTypesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasMetadataTypesUpdate(ctx context.Context, id string) ApiExtrasMetadataTypesUpdateRequest {
	return ApiExtrasMetadataTypesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return MetadataType
func (a *ExtrasAPIService) ExtrasMetadataTypesUpdateExecute(r ApiExtrasMetadataTypesUpdateRequest) (*MetadataType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasMetadataTypesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/metadata-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metadataTypeRequest == nil {
		return localVarReturnValue, nil, reportError("metadataTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.metadataTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasNotesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasNotesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasNotesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasNotesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasNotesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasNotesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasNotesBulkDestroyExecute(r)
}

/*
ExtrasNotesBulkDestroy Method for ExtrasNotesBulkDestroy

Destroy a list of note objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasNotesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasNotesBulkDestroy(ctx context.Context) ApiExtrasNotesBulkDestroyRequest {
	return ApiExtrasNotesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasNotesBulkDestroyExecute(r ApiExtrasNotesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasNotesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/notes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasNotesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableNoteRequest *[]PatchedBulkWritableNoteRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasNotesBulkPartialUpdateRequest) PatchedBulkWritableNoteRequest(patchedBulkWritableNoteRequest []PatchedBulkWritableNoteRequest) ApiExtrasNotesBulkPartialUpdateRequest {
	r.patchedBulkWritableNoteRequest = &patchedBulkWritableNoteRequest
	return r
}

func (r ApiExtrasNotesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasNotesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasNotesBulkPartialUpdateRequest) Execute() ([]Note, *http.Response, error) {
	return r.ApiService.ExtrasNotesBulkPartialUpdateExecute(r)
}

/*
ExtrasNotesBulkPartialUpdate Method for ExtrasNotesBulkPartialUpdate

Partial update a list of note objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasNotesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasNotesBulkPartialUpdate(ctx context.Context) ApiExtrasNotesBulkPartialUpdateRequest {
	return ApiExtrasNotesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Note
func (a *ExtrasAPIService) ExtrasNotesBulkPartialUpdateExecute(r ApiExtrasNotesBulkPartialUpdateRequest) ([]Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasNotesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/notes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableNoteRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableNoteRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableNoteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasNotesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableNoteRequest *[]BulkWritableNoteRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasNotesBulkUpdateRequest) BulkWritableNoteRequest(bulkWritableNoteRequest []BulkWritableNoteRequest) ApiExtrasNotesBulkUpdateRequest {
	r.bulkWritableNoteRequest = &bulkWritableNoteRequest
	return r
}

func (r ApiExtrasNotesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasNotesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasNotesBulkUpdateRequest) Execute() ([]Note, *http.Response, error) {
	return r.ApiService.ExtrasNotesBulkUpdateExecute(r)
}

/*
ExtrasNotesBulkUpdate Method for ExtrasNotesBulkUpdate

Update a list of note objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasNotesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasNotesBulkUpdate(ctx context.Context) ApiExtrasNotesBulkUpdateRequest {
	return ApiExtrasNotesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Note
func (a *ExtrasAPIService) ExtrasNotesBulkUpdateExecute(r ApiExtrasNotesBulkUpdateRequest) ([]Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasNotesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/notes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableNoteRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableNoteRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableNoteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	noteRequest *NoteRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasNotesCreateRequest) NoteRequest(noteRequest NoteRequest) ApiExtrasNotesCreateRequest {
	r.noteRequest = &noteRequest
	return r
}

func (r ApiExtrasNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasNotesCreateExecute(r)
}

/*
ExtrasNotesCreate Method for ExtrasNotesCreate

Create one or more note objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasNotesCreate(ctx context.Context) ApiExtrasNotesCreateRequest {
	return ApiExtrasNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasNotesCreateExecute(r ApiExtrasNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/notes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteRequest == nil {
		return localVarReturnValue, nil, reportError("noteRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasNotesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasNotesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasNotesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasNotesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasNotesDestroyExecute(r)
}

/*
ExtrasNotesDestroy Method for ExtrasNotesDestroy

Destroy a note object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this note.
 @return ApiExtrasNotesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasNotesDestroy(ctx context.Context, id string) ApiExtrasNotesDestroyRequest {
	return ApiExtrasNotesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasNotesDestroyExecute(r ApiExtrasNotesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasNotesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/notes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	assignedObjectId *[]string
	assignedObjectIdIc *[]string
	assignedObjectIdIe *[]string
	assignedObjectIdIew *[]string
	assignedObjectIdIre *[]string
	assignedObjectIdIsw *[]string
	assignedObjectIdN *[]string
	assignedObjectIdNic *[]string
	assignedObjectIdNie *[]string
	assignedObjectIdNiew *[]string
	assignedObjectIdNire *[]string
	assignedObjectIdNisw *[]string
	assignedObjectIdNre *[]string
	assignedObjectIdRe *[]string
	assignedObjectType *string
	assignedObjectTypeN *string
	assignedObjectTypeId *int32
	assignedObjectTypeIdN *int32
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	note *[]string
	noteIc *[]string
	noteIe *[]string
	noteIew *[]string
	noteIre *[]string
	noteIsw *[]string
	noteN *[]string
	noteNic *[]string
	noteNie *[]string
	noteNiew *[]string
	noteNire *[]string
	noteNisw *[]string
	noteNre *[]string
	noteRe *[]string
	offset *int32
	q *string
	sort *string
	user *[]string
	userIsnull *bool
	userN *[]string
	userName *[]string
	userNameIc *[]string
	userNameIe *[]string
	userNameIew *[]string
	userNameIre *[]string
	userNameIsw *[]string
	userNameN *[]string
	userNameNic *[]string
	userNameNie *[]string
	userNameNiew *[]string
	userNameNire *[]string
	userNameNisw *[]string
	userNameNre *[]string
	userNameRe *[]string
	depth *int32
}

func (r ApiExtrasNotesListRequest) AssignedObjectId(assignedObjectId []string) ApiExtrasNotesListRequest {
	r.assignedObjectId = &assignedObjectId
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdIc(assignedObjectIdIc []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdIc = &assignedObjectIdIc
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdIe(assignedObjectIdIe []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdIe = &assignedObjectIdIe
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdIew(assignedObjectIdIew []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdIew = &assignedObjectIdIew
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdIre(assignedObjectIdIre []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdIre = &assignedObjectIdIre
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdIsw(assignedObjectIdIsw []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdIsw = &assignedObjectIdIsw
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdN(assignedObjectIdN []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdN = &assignedObjectIdN
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdNic(assignedObjectIdNic []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdNic = &assignedObjectIdNic
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdNie(assignedObjectIdNie []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdNie = &assignedObjectIdNie
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdNiew(assignedObjectIdNiew []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdNiew = &assignedObjectIdNiew
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdNire(assignedObjectIdNire []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdNire = &assignedObjectIdNire
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdNisw(assignedObjectIdNisw []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdNisw = &assignedObjectIdNisw
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdNre(assignedObjectIdNre []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdNre = &assignedObjectIdNre
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectIdRe(assignedObjectIdRe []string) ApiExtrasNotesListRequest {
	r.assignedObjectIdRe = &assignedObjectIdRe
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectType(assignedObjectType string) ApiExtrasNotesListRequest {
	r.assignedObjectType = &assignedObjectType
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectTypeN(assignedObjectTypeN string) ApiExtrasNotesListRequest {
	r.assignedObjectTypeN = &assignedObjectTypeN
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectTypeId(assignedObjectTypeId int32) ApiExtrasNotesListRequest {
	r.assignedObjectTypeId = &assignedObjectTypeId
	return r
}

func (r ApiExtrasNotesListRequest) AssignedObjectTypeIdN(assignedObjectTypeIdN int32) ApiExtrasNotesListRequest {
	r.assignedObjectTypeIdN = &assignedObjectTypeIdN
	return r
}

func (r ApiExtrasNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasNotesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasNotesListRequest) Id(id []string) ApiExtrasNotesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasNotesListRequest) IdIc(idIc []string) ApiExtrasNotesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasNotesListRequest) IdIe(idIe []string) ApiExtrasNotesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasNotesListRequest) IdIew(idIew []string) ApiExtrasNotesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasNotesListRequest) IdIre(idIre []string) ApiExtrasNotesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasNotesListRequest) IdIsw(idIsw []string) ApiExtrasNotesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasNotesListRequest) IdN(idN []string) ApiExtrasNotesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasNotesListRequest) IdNic(idNic []string) ApiExtrasNotesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasNotesListRequest) IdNie(idNie []string) ApiExtrasNotesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasNotesListRequest) IdNiew(idNiew []string) ApiExtrasNotesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasNotesListRequest) IdNire(idNire []string) ApiExtrasNotesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasNotesListRequest) IdNisw(idNisw []string) ApiExtrasNotesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasNotesListRequest) IdNre(idNre []string) ApiExtrasNotesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasNotesListRequest) IdRe(idRe []string) ApiExtrasNotesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasNotesListRequest) Limit(limit int32) ApiExtrasNotesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasNotesListRequest) Note(note []string) ApiExtrasNotesListRequest {
	r.note = &note
	return r
}

func (r ApiExtrasNotesListRequest) NoteIc(noteIc []string) ApiExtrasNotesListRequest {
	r.noteIc = &noteIc
	return r
}

func (r ApiExtrasNotesListRequest) NoteIe(noteIe []string) ApiExtrasNotesListRequest {
	r.noteIe = &noteIe
	return r
}

func (r ApiExtrasNotesListRequest) NoteIew(noteIew []string) ApiExtrasNotesListRequest {
	r.noteIew = &noteIew
	return r
}

func (r ApiExtrasNotesListRequest) NoteIre(noteIre []string) ApiExtrasNotesListRequest {
	r.noteIre = &noteIre
	return r
}

func (r ApiExtrasNotesListRequest) NoteIsw(noteIsw []string) ApiExtrasNotesListRequest {
	r.noteIsw = &noteIsw
	return r
}

func (r ApiExtrasNotesListRequest) NoteN(noteN []string) ApiExtrasNotesListRequest {
	r.noteN = &noteN
	return r
}

func (r ApiExtrasNotesListRequest) NoteNic(noteNic []string) ApiExtrasNotesListRequest {
	r.noteNic = &noteNic
	return r
}

func (r ApiExtrasNotesListRequest) NoteNie(noteNie []string) ApiExtrasNotesListRequest {
	r.noteNie = &noteNie
	return r
}

func (r ApiExtrasNotesListRequest) NoteNiew(noteNiew []string) ApiExtrasNotesListRequest {
	r.noteNiew = &noteNiew
	return r
}

func (r ApiExtrasNotesListRequest) NoteNire(noteNire []string) ApiExtrasNotesListRequest {
	r.noteNire = &noteNire
	return r
}

func (r ApiExtrasNotesListRequest) NoteNisw(noteNisw []string) ApiExtrasNotesListRequest {
	r.noteNisw = &noteNisw
	return r
}

func (r ApiExtrasNotesListRequest) NoteNre(noteNre []string) ApiExtrasNotesListRequest {
	r.noteNre = &noteNre
	return r
}

func (r ApiExtrasNotesListRequest) NoteRe(noteRe []string) ApiExtrasNotesListRequest {
	r.noteRe = &noteRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasNotesListRequest) Offset(offset int32) ApiExtrasNotesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasNotesListRequest) Q(q string) ApiExtrasNotesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasNotesListRequest) Sort(sort string) ApiExtrasNotesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasNotesListRequest) User(user []string) ApiExtrasNotesListRequest {
	r.user = &user
	return r
}

// User (username or ID) is null
func (r ApiExtrasNotesListRequest) UserIsnull(userIsnull bool) ApiExtrasNotesListRequest {
	r.userIsnull = &userIsnull
	return r
}

func (r ApiExtrasNotesListRequest) UserN(userN []string) ApiExtrasNotesListRequest {
	r.userN = &userN
	return r
}

func (r ApiExtrasNotesListRequest) UserName(userName []string) ApiExtrasNotesListRequest {
	r.userName = &userName
	return r
}

func (r ApiExtrasNotesListRequest) UserNameIc(userNameIc []string) ApiExtrasNotesListRequest {
	r.userNameIc = &userNameIc
	return r
}

func (r ApiExtrasNotesListRequest) UserNameIe(userNameIe []string) ApiExtrasNotesListRequest {
	r.userNameIe = &userNameIe
	return r
}

func (r ApiExtrasNotesListRequest) UserNameIew(userNameIew []string) ApiExtrasNotesListRequest {
	r.userNameIew = &userNameIew
	return r
}

func (r ApiExtrasNotesListRequest) UserNameIre(userNameIre []string) ApiExtrasNotesListRequest {
	r.userNameIre = &userNameIre
	return r
}

func (r ApiExtrasNotesListRequest) UserNameIsw(userNameIsw []string) ApiExtrasNotesListRequest {
	r.userNameIsw = &userNameIsw
	return r
}

func (r ApiExtrasNotesListRequest) UserNameN(userNameN []string) ApiExtrasNotesListRequest {
	r.userNameN = &userNameN
	return r
}

func (r ApiExtrasNotesListRequest) UserNameNic(userNameNic []string) ApiExtrasNotesListRequest {
	r.userNameNic = &userNameNic
	return r
}

func (r ApiExtrasNotesListRequest) UserNameNie(userNameNie []string) ApiExtrasNotesListRequest {
	r.userNameNie = &userNameNie
	return r
}

func (r ApiExtrasNotesListRequest) UserNameNiew(userNameNiew []string) ApiExtrasNotesListRequest {
	r.userNameNiew = &userNameNiew
	return r
}

func (r ApiExtrasNotesListRequest) UserNameNire(userNameNire []string) ApiExtrasNotesListRequest {
	r.userNameNire = &userNameNire
	return r
}

func (r ApiExtrasNotesListRequest) UserNameNisw(userNameNisw []string) ApiExtrasNotesListRequest {
	r.userNameNisw = &userNameNisw
	return r
}

func (r ApiExtrasNotesListRequest) UserNameNre(userNameNre []string) ApiExtrasNotesListRequest {
	r.userNameNre = &userNameNre
	return r
}

func (r ApiExtrasNotesListRequest) UserNameRe(userNameRe []string) ApiExtrasNotesListRequest {
	r.userNameRe = &userNameRe
	return r
}

// Serializer Depth
func (r ApiExtrasNotesListRequest) Depth(depth int32) ApiExtrasNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasNotesListExecute(r)
}

/*
ExtrasNotesList Method for ExtrasNotesList

Retrieve a list of note objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasNotesList(ctx context.Context) ApiExtrasNotesListRequest {
	return ApiExtrasNotesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasNotesListExecute(r ApiExtrasNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/notes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assignedObjectId != nil {
		t := *r.assignedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIc != nil {
		t := *r.assignedObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ic", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIe != nil {
		t := *r.assignedObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ie", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIew != nil {
		t := *r.assignedObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__iew", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIre != nil {
		t := *r.assignedObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ire", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIsw != nil {
		t := *r.assignedObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__isw", t, "form", "multi")
		}
	}
	if r.assignedObjectIdN != nil {
		t := *r.assignedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNic != nil {
		t := *r.assignedObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nic", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNie != nil {
		t := *r.assignedObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nie", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNiew != nil {
		t := *r.assignedObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__niew", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNire != nil {
		t := *r.assignedObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nire", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNisw != nil {
		t := *r.assignedObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nisw", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNre != nil {
		t := *r.assignedObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nre", t, "form", "multi")
		}
	}
	if r.assignedObjectIdRe != nil {
		t := *r.assignedObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__re", t, "form", "multi")
		}
	}
	if r.assignedObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type", r.assignedObjectType, "form", "")
	}
	if r.assignedObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type__n", r.assignedObjectTypeN, "form", "")
	}
	if r.assignedObjectTypeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id", r.assignedObjectTypeId, "form", "")
	}
	if r.assignedObjectTypeIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id__n", r.assignedObjectTypeIdN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.note != nil {
		t := *r.note
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note", t, "form", "multi")
		}
	}
	if r.noteIc != nil {
		t := *r.noteIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__ic", t, "form", "multi")
		}
	}
	if r.noteIe != nil {
		t := *r.noteIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__ie", t, "form", "multi")
		}
	}
	if r.noteIew != nil {
		t := *r.noteIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__iew", t, "form", "multi")
		}
	}
	if r.noteIre != nil {
		t := *r.noteIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__ire", t, "form", "multi")
		}
	}
	if r.noteIsw != nil {
		t := *r.noteIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__isw", t, "form", "multi")
		}
	}
	if r.noteN != nil {
		t := *r.noteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__n", t, "form", "multi")
		}
	}
	if r.noteNic != nil {
		t := *r.noteNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__nic", t, "form", "multi")
		}
	}
	if r.noteNie != nil {
		t := *r.noteNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__nie", t, "form", "multi")
		}
	}
	if r.noteNiew != nil {
		t := *r.noteNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__niew", t, "form", "multi")
		}
	}
	if r.noteNire != nil {
		t := *r.noteNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__nire", t, "form", "multi")
		}
	}
	if r.noteNisw != nil {
		t := *r.noteNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__nisw", t, "form", "multi")
		}
	}
	if r.noteNre != nil {
		t := *r.noteNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__nre", t, "form", "multi")
		}
	}
	if r.noteRe != nil {
		t := *r.noteRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "note__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "note__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "form", "multi")
		}
	}
	if r.userIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user__isnull", r.userIsnull, "form", "")
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", t, "form", "multi")
		}
	}
	if r.userName != nil {
		t := *r.userName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name", t, "form", "multi")
		}
	}
	if r.userNameIc != nil {
		t := *r.userNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ic", t, "form", "multi")
		}
	}
	if r.userNameIe != nil {
		t := *r.userNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ie", t, "form", "multi")
		}
	}
	if r.userNameIew != nil {
		t := *r.userNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__iew", t, "form", "multi")
		}
	}
	if r.userNameIre != nil {
		t := *r.userNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ire", t, "form", "multi")
		}
	}
	if r.userNameIsw != nil {
		t := *r.userNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__isw", t, "form", "multi")
		}
	}
	if r.userNameN != nil {
		t := *r.userNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__n", t, "form", "multi")
		}
	}
	if r.userNameNic != nil {
		t := *r.userNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nic", t, "form", "multi")
		}
	}
	if r.userNameNie != nil {
		t := *r.userNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nie", t, "form", "multi")
		}
	}
	if r.userNameNiew != nil {
		t := *r.userNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__niew", t, "form", "multi")
		}
	}
	if r.userNameNire != nil {
		t := *r.userNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nire", t, "form", "multi")
		}
	}
	if r.userNameNisw != nil {
		t := *r.userNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nisw", t, "form", "multi")
		}
	}
	if r.userNameNre != nil {
		t := *r.userNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nre", t, "form", "multi")
		}
	}
	if r.userNameRe != nil {
		t := *r.userNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__re", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasNotesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedNoteRequest *PatchedNoteRequest
}

func (r ApiExtrasNotesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasNotesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasNotesPartialUpdateRequest) PatchedNoteRequest(patchedNoteRequest PatchedNoteRequest) ApiExtrasNotesPartialUpdateRequest {
	r.patchedNoteRequest = &patchedNoteRequest
	return r
}

func (r ApiExtrasNotesPartialUpdateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasNotesPartialUpdateExecute(r)
}

/*
ExtrasNotesPartialUpdate Method for ExtrasNotesPartialUpdate

Partial update a note object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this note.
 @return ApiExtrasNotesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasNotesPartialUpdate(ctx context.Context, id string) ApiExtrasNotesPartialUpdateRequest {
	return ApiExtrasNotesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasNotesPartialUpdateExecute(r ApiExtrasNotesPartialUpdateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasNotesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/notes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedNoteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasNotesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasNotesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasNotesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasNotesRetrieveRequest) Depth(depth int32) ApiExtrasNotesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasNotesRetrieveRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasNotesRetrieveExecute(r)
}

/*
ExtrasNotesRetrieve Method for ExtrasNotesRetrieve

Retrieve a note object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this note.
 @return ApiExtrasNotesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasNotesRetrieve(ctx context.Context, id string) ApiExtrasNotesRetrieveRequest {
	return ApiExtrasNotesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasNotesRetrieveExecute(r ApiExtrasNotesRetrieveRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasNotesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/notes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasNotesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteRequest *NoteRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasNotesUpdateRequest) NoteRequest(noteRequest NoteRequest) ApiExtrasNotesUpdateRequest {
	r.noteRequest = &noteRequest
	return r
}

func (r ApiExtrasNotesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasNotesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasNotesUpdateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasNotesUpdateExecute(r)
}

/*
ExtrasNotesUpdate Method for ExtrasNotesUpdate

Update a note object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this note.
 @return ApiExtrasNotesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasNotesUpdate(ctx context.Context, id string) ApiExtrasNotesUpdateRequest {
	return ApiExtrasNotesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasNotesUpdateExecute(r ApiExtrasNotesUpdateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasNotesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/notes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteRequest == nil {
		return localVarReturnValue, nil, reportError("noteRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectChangesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	action *[]string
	actionIc *[]string
	actionIe *[]string
	actionIew *[]string
	actionIre *[]string
	actionIsw *[]string
	actionN *[]string
	actionNic *[]string
	actionNie *[]string
	actionNiew *[]string
	actionNire *[]string
	actionNisw *[]string
	actionNre *[]string
	actionRe *[]string
	changedObjectId *[]string
	changedObjectIdIc *[]string
	changedObjectIdIe *[]string
	changedObjectIdIew *[]string
	changedObjectIdIre *[]string
	changedObjectIdIsw *[]string
	changedObjectIdN *[]string
	changedObjectIdNic *[]string
	changedObjectIdNie *[]string
	changedObjectIdNiew *[]string
	changedObjectIdNire *[]string
	changedObjectIdNisw *[]string
	changedObjectIdNre *[]string
	changedObjectIdRe *[]string
	changedObjectType *string
	changedObjectTypeIsnull *bool
	changedObjectTypeN *string
	changedObjectTypeId *int32
	changedObjectTypeIdIsnull *bool
	changedObjectTypeIdN *int32
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	objectRepr *[]string
	objectReprIc *[]string
	objectReprIe *[]string
	objectReprIew *[]string
	objectReprIre *[]string
	objectReprIsw *[]string
	objectReprN *[]string
	objectReprNic *[]string
	objectReprNie *[]string
	objectReprNiew *[]string
	objectReprNire *[]string
	objectReprNisw *[]string
	objectReprNre *[]string
	objectReprRe *[]string
	offset *int32
	q *string
	requestId *[]string
	requestIdIc *[]string
	requestIdIe *[]string
	requestIdIew *[]string
	requestIdIre *[]string
	requestIdIsw *[]string
	requestIdN *[]string
	requestIdNic *[]string
	requestIdNie *[]string
	requestIdNiew *[]string
	requestIdNire *[]string
	requestIdNisw *[]string
	requestIdNre *[]string
	requestIdRe *[]string
	sort *string
	time *[]time.Time
	timeGt *[]time.Time
	timeGte *[]time.Time
	timeLt *[]time.Time
	timeLte *[]time.Time
	timeN *[]time.Time
	user *[]string
	userIsnull *bool
	userN *[]string
	userId *[]*string
	userIdIsnull *bool
	userIdN *[]*string
	userName *[]string
	userNameIc *[]string
	userNameIe *[]string
	userNameIew *[]string
	userNameIre *[]string
	userNameIsw *[]string
	userNameN *[]string
	userNameNic *[]string
	userNameNie *[]string
	userNameNiew *[]string
	userNameNire *[]string
	userNameNisw *[]string
	userNameNre *[]string
	userNameRe *[]string
	depth *int32
}

func (r ApiExtrasObjectChangesListRequest) Action(action []string) ApiExtrasObjectChangesListRequest {
	r.action = &action
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionIc(actionIc []string) ApiExtrasObjectChangesListRequest {
	r.actionIc = &actionIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionIe(actionIe []string) ApiExtrasObjectChangesListRequest {
	r.actionIe = &actionIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionIew(actionIew []string) ApiExtrasObjectChangesListRequest {
	r.actionIew = &actionIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionIre(actionIre []string) ApiExtrasObjectChangesListRequest {
	r.actionIre = &actionIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionIsw(actionIsw []string) ApiExtrasObjectChangesListRequest {
	r.actionIsw = &actionIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionN(actionN []string) ApiExtrasObjectChangesListRequest {
	r.actionN = &actionN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionNic(actionNic []string) ApiExtrasObjectChangesListRequest {
	r.actionNic = &actionNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionNie(actionNie []string) ApiExtrasObjectChangesListRequest {
	r.actionNie = &actionNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionNiew(actionNiew []string) ApiExtrasObjectChangesListRequest {
	r.actionNiew = &actionNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionNire(actionNire []string) ApiExtrasObjectChangesListRequest {
	r.actionNire = &actionNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionNisw(actionNisw []string) ApiExtrasObjectChangesListRequest {
	r.actionNisw = &actionNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionNre(actionNre []string) ApiExtrasObjectChangesListRequest {
	r.actionNre = &actionNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionRe(actionRe []string) ApiExtrasObjectChangesListRequest {
	r.actionRe = &actionRe
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectId(changedObjectId []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectId = &changedObjectId
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIc(changedObjectIdIc []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIc = &changedObjectIdIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIe(changedObjectIdIe []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIe = &changedObjectIdIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIew(changedObjectIdIew []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIew = &changedObjectIdIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIre(changedObjectIdIre []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIre = &changedObjectIdIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIsw(changedObjectIdIsw []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIsw = &changedObjectIdIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdN(changedObjectIdN []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdN = &changedObjectIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNic(changedObjectIdNic []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNic = &changedObjectIdNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNie(changedObjectIdNie []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNie = &changedObjectIdNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNiew(changedObjectIdNiew []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNiew = &changedObjectIdNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNire(changedObjectIdNire []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNire = &changedObjectIdNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNisw(changedObjectIdNisw []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNisw = &changedObjectIdNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNre(changedObjectIdNre []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNre = &changedObjectIdNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdRe(changedObjectIdRe []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdRe = &changedObjectIdRe
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectType(changedObjectType string) ApiExtrasObjectChangesListRequest {
	r.changedObjectType = &changedObjectType
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeIsnull(changedObjectTypeIsnull bool) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeIsnull = &changedObjectTypeIsnull
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeN(changedObjectTypeN string) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeN = &changedObjectTypeN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeId(changedObjectTypeId int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeId = &changedObjectTypeId
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeIdIsnull(changedObjectTypeIdIsnull bool) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeIdIsnull = &changedObjectTypeIdIsnull
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeIdN(changedObjectTypeIdN int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeIdN = &changedObjectTypeIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectChangesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasObjectChangesListRequest) Id(id []string) ApiExtrasObjectChangesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIc(idIc []string) ApiExtrasObjectChangesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIe(idIe []string) ApiExtrasObjectChangesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIew(idIew []string) ApiExtrasObjectChangesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIre(idIre []string) ApiExtrasObjectChangesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIsw(idIsw []string) ApiExtrasObjectChangesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdN(idN []string) ApiExtrasObjectChangesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNic(idNic []string) ApiExtrasObjectChangesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNie(idNie []string) ApiExtrasObjectChangesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNiew(idNiew []string) ApiExtrasObjectChangesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNire(idNire []string) ApiExtrasObjectChangesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNisw(idNisw []string) ApiExtrasObjectChangesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNre(idNre []string) ApiExtrasObjectChangesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdRe(idRe []string) ApiExtrasObjectChangesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasObjectChangesListRequest) Limit(limit int32) ApiExtrasObjectChangesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectRepr(objectRepr []string) ApiExtrasObjectChangesListRequest {
	r.objectRepr = &objectRepr
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIc(objectReprIc []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIc = &objectReprIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIe(objectReprIe []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIe = &objectReprIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIew(objectReprIew []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIew = &objectReprIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIre(objectReprIre []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIre = &objectReprIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIsw(objectReprIsw []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIsw = &objectReprIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprN(objectReprN []string) ApiExtrasObjectChangesListRequest {
	r.objectReprN = &objectReprN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNic(objectReprNic []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNic = &objectReprNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNie(objectReprNie []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNie = &objectReprNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNiew(objectReprNiew []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNiew = &objectReprNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNire(objectReprNire []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNire = &objectReprNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNisw(objectReprNisw []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNisw = &objectReprNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNre(objectReprNre []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNre = &objectReprNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprRe(objectReprRe []string) ApiExtrasObjectChangesListRequest {
	r.objectReprRe = &objectReprRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasObjectChangesListRequest) Offset(offset int32) ApiExtrasObjectChangesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasObjectChangesListRequest) Q(q string) ApiExtrasObjectChangesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestId(requestId []string) ApiExtrasObjectChangesListRequest {
	r.requestId = &requestId
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIc(requestIdIc []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIc = &requestIdIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIe(requestIdIe []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIe = &requestIdIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIew(requestIdIew []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIew = &requestIdIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIre(requestIdIre []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIre = &requestIdIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIsw(requestIdIsw []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIsw = &requestIdIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdN(requestIdN []string) ApiExtrasObjectChangesListRequest {
	r.requestIdN = &requestIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNic(requestIdNic []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNic = &requestIdNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNie(requestIdNie []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNie = &requestIdNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNiew(requestIdNiew []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNiew = &requestIdNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNire(requestIdNire []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNire = &requestIdNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNisw(requestIdNisw []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNisw = &requestIdNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNre(requestIdNre []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNre = &requestIdNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdRe(requestIdRe []string) ApiExtrasObjectChangesListRequest {
	r.requestIdRe = &requestIdRe
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasObjectChangesListRequest) Sort(sort string) ApiExtrasObjectChangesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasObjectChangesListRequest) Time(time []time.Time) ApiExtrasObjectChangesListRequest {
	r.time = &time
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeGt(timeGt []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeGt = &timeGt
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeGte(timeGte []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeGte = &timeGte
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeLt(timeLt []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeLt = &timeLt
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeLte(timeLte []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeLte = &timeLte
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeN(timeN []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeN = &timeN
	return r
}

func (r ApiExtrasObjectChangesListRequest) User(user []string) ApiExtrasObjectChangesListRequest {
	r.user = &user
	return r
}

// User name (ID or username) is null
func (r ApiExtrasObjectChangesListRequest) UserIsnull(userIsnull bool) ApiExtrasObjectChangesListRequest {
	r.userIsnull = &userIsnull
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserN(userN []string) ApiExtrasObjectChangesListRequest {
	r.userN = &userN
	return r
}

// User (ID) - Deprecated (use user filter)
func (r ApiExtrasObjectChangesListRequest) UserId(userId []*string) ApiExtrasObjectChangesListRequest {
	r.userId = &userId
	return r
}

// User (ID) - Deprecated (use user filter) is null
func (r ApiExtrasObjectChangesListRequest) UserIdIsnull(userIdIsnull bool) ApiExtrasObjectChangesListRequest {
	r.userIdIsnull = &userIdIsnull
	return r
}

// Exclude User (ID) - Deprecated (use user filter)
func (r ApiExtrasObjectChangesListRequest) UserIdN(userIdN []*string) ApiExtrasObjectChangesListRequest {
	r.userIdN = &userIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserName(userName []string) ApiExtrasObjectChangesListRequest {
	r.userName = &userName
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIc(userNameIc []string) ApiExtrasObjectChangesListRequest {
	r.userNameIc = &userNameIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIe(userNameIe []string) ApiExtrasObjectChangesListRequest {
	r.userNameIe = &userNameIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIew(userNameIew []string) ApiExtrasObjectChangesListRequest {
	r.userNameIew = &userNameIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIre(userNameIre []string) ApiExtrasObjectChangesListRequest {
	r.userNameIre = &userNameIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIsw(userNameIsw []string) ApiExtrasObjectChangesListRequest {
	r.userNameIsw = &userNameIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameN(userNameN []string) ApiExtrasObjectChangesListRequest {
	r.userNameN = &userNameN
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNic(userNameNic []string) ApiExtrasObjectChangesListRequest {
	r.userNameNic = &userNameNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNie(userNameNie []string) ApiExtrasObjectChangesListRequest {
	r.userNameNie = &userNameNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNiew(userNameNiew []string) ApiExtrasObjectChangesListRequest {
	r.userNameNiew = &userNameNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNire(userNameNire []string) ApiExtrasObjectChangesListRequest {
	r.userNameNire = &userNameNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNisw(userNameNisw []string) ApiExtrasObjectChangesListRequest {
	r.userNameNisw = &userNameNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNre(userNameNre []string) ApiExtrasObjectChangesListRequest {
	r.userNameNre = &userNameNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameRe(userNameRe []string) ApiExtrasObjectChangesListRequest {
	r.userNameRe = &userNameRe
	return r
}

// Serializer Depth
func (r ApiExtrasObjectChangesListRequest) Depth(depth int32) ApiExtrasObjectChangesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasObjectChangesListRequest) Execute() (*PaginatedObjectChangeList, *http.Response, error) {
	return r.ApiService.ExtrasObjectChangesListExecute(r)
}

/*
ExtrasObjectChangesList Method for ExtrasObjectChangesList

Retrieve a list of recent changes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasObjectChangesListRequest
*/
func (a *ExtrasAPIService) ExtrasObjectChangesList(ctx context.Context) ApiExtrasObjectChangesListRequest {
	return ApiExtrasObjectChangesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedObjectChangeList
func (a *ExtrasAPIService) ExtrasObjectChangesListExecute(r ApiExtrasObjectChangesListRequest) (*PaginatedObjectChangeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedObjectChangeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectChangesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-changes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.action != nil {
		t := *r.action
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action", t, "form", "multi")
		}
	}
	if r.actionIc != nil {
		t := *r.actionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__ic", t, "form", "multi")
		}
	}
	if r.actionIe != nil {
		t := *r.actionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__ie", t, "form", "multi")
		}
	}
	if r.actionIew != nil {
		t := *r.actionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__iew", t, "form", "multi")
		}
	}
	if r.actionIre != nil {
		t := *r.actionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__ire", t, "form", "multi")
		}
	}
	if r.actionIsw != nil {
		t := *r.actionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__isw", t, "form", "multi")
		}
	}
	if r.actionN != nil {
		t := *r.actionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__n", t, "form", "multi")
		}
	}
	if r.actionNic != nil {
		t := *r.actionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__nic", t, "form", "multi")
		}
	}
	if r.actionNie != nil {
		t := *r.actionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__nie", t, "form", "multi")
		}
	}
	if r.actionNiew != nil {
		t := *r.actionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__niew", t, "form", "multi")
		}
	}
	if r.actionNire != nil {
		t := *r.actionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__nire", t, "form", "multi")
		}
	}
	if r.actionNisw != nil {
		t := *r.actionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__nisw", t, "form", "multi")
		}
	}
	if r.actionNre != nil {
		t := *r.actionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__nre", t, "form", "multi")
		}
	}
	if r.actionRe != nil {
		t := *r.actionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action__re", t, "form", "multi")
		}
	}
	if r.changedObjectId != nil {
		t := *r.changedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id", t, "form", "multi")
		}
	}
	if r.changedObjectIdIc != nil {
		t := *r.changedObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__ic", t, "form", "multi")
		}
	}
	if r.changedObjectIdIe != nil {
		t := *r.changedObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__ie", t, "form", "multi")
		}
	}
	if r.changedObjectIdIew != nil {
		t := *r.changedObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__iew", t, "form", "multi")
		}
	}
	if r.changedObjectIdIre != nil {
		t := *r.changedObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__ire", t, "form", "multi")
		}
	}
	if r.changedObjectIdIsw != nil {
		t := *r.changedObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__isw", t, "form", "multi")
		}
	}
	if r.changedObjectIdN != nil {
		t := *r.changedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__n", t, "form", "multi")
		}
	}
	if r.changedObjectIdNic != nil {
		t := *r.changedObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nic", t, "form", "multi")
		}
	}
	if r.changedObjectIdNie != nil {
		t := *r.changedObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nie", t, "form", "multi")
		}
	}
	if r.changedObjectIdNiew != nil {
		t := *r.changedObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__niew", t, "form", "multi")
		}
	}
	if r.changedObjectIdNire != nil {
		t := *r.changedObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nire", t, "form", "multi")
		}
	}
	if r.changedObjectIdNisw != nil {
		t := *r.changedObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nisw", t, "form", "multi")
		}
	}
	if r.changedObjectIdNre != nil {
		t := *r.changedObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__nre", t, "form", "multi")
		}
	}
	if r.changedObjectIdRe != nil {
		t := *r.changedObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__re", t, "form", "multi")
		}
	}
	if r.changedObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type", r.changedObjectType, "form", "")
	}
	if r.changedObjectTypeIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type__isnull", r.changedObjectTypeIsnull, "form", "")
	}
	if r.changedObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type__n", r.changedObjectTypeN, "form", "")
	}
	if r.changedObjectTypeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type_id", r.changedObjectTypeId, "form", "")
	}
	if r.changedObjectTypeIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type_id__isnull", r.changedObjectTypeIdIsnull, "form", "")
	}
	if r.changedObjectTypeIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type_id__n", r.changedObjectTypeIdN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.objectRepr != nil {
		t := *r.objectRepr
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr", t, "form", "multi")
		}
	}
	if r.objectReprIc != nil {
		t := *r.objectReprIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ic", t, "form", "multi")
		}
	}
	if r.objectReprIe != nil {
		t := *r.objectReprIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ie", t, "form", "multi")
		}
	}
	if r.objectReprIew != nil {
		t := *r.objectReprIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__iew", t, "form", "multi")
		}
	}
	if r.objectReprIre != nil {
		t := *r.objectReprIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ire", t, "form", "multi")
		}
	}
	if r.objectReprIsw != nil {
		t := *r.objectReprIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__isw", t, "form", "multi")
		}
	}
	if r.objectReprN != nil {
		t := *r.objectReprN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__n", t, "form", "multi")
		}
	}
	if r.objectReprNic != nil {
		t := *r.objectReprNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nic", t, "form", "multi")
		}
	}
	if r.objectReprNie != nil {
		t := *r.objectReprNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nie", t, "form", "multi")
		}
	}
	if r.objectReprNiew != nil {
		t := *r.objectReprNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__niew", t, "form", "multi")
		}
	}
	if r.objectReprNire != nil {
		t := *r.objectReprNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nire", t, "form", "multi")
		}
	}
	if r.objectReprNisw != nil {
		t := *r.objectReprNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nisw", t, "form", "multi")
		}
	}
	if r.objectReprNre != nil {
		t := *r.objectReprNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nre", t, "form", "multi")
		}
	}
	if r.objectReprRe != nil {
		t := *r.objectReprRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.requestId != nil {
		t := *r.requestId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id", t, "form", "multi")
		}
	}
	if r.requestIdIc != nil {
		t := *r.requestIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__ic", t, "form", "multi")
		}
	}
	if r.requestIdIe != nil {
		t := *r.requestIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__ie", t, "form", "multi")
		}
	}
	if r.requestIdIew != nil {
		t := *r.requestIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__iew", t, "form", "multi")
		}
	}
	if r.requestIdIre != nil {
		t := *r.requestIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__ire", t, "form", "multi")
		}
	}
	if r.requestIdIsw != nil {
		t := *r.requestIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__isw", t, "form", "multi")
		}
	}
	if r.requestIdN != nil {
		t := *r.requestIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__n", t, "form", "multi")
		}
	}
	if r.requestIdNic != nil {
		t := *r.requestIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nic", t, "form", "multi")
		}
	}
	if r.requestIdNie != nil {
		t := *r.requestIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nie", t, "form", "multi")
		}
	}
	if r.requestIdNiew != nil {
		t := *r.requestIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__niew", t, "form", "multi")
		}
	}
	if r.requestIdNire != nil {
		t := *r.requestIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nire", t, "form", "multi")
		}
	}
	if r.requestIdNisw != nil {
		t := *r.requestIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nisw", t, "form", "multi")
		}
	}
	if r.requestIdNre != nil {
		t := *r.requestIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__nre", t, "form", "multi")
		}
	}
	if r.requestIdRe != nil {
		t := *r.requestIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "request_id__re", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.time != nil {
		t := *r.time
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time", t, "form", "multi")
		}
	}
	if r.timeGt != nil {
		t := *r.timeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time__gt", t, "form", "multi")
		}
	}
	if r.timeGte != nil {
		t := *r.timeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time__gte", t, "form", "multi")
		}
	}
	if r.timeLt != nil {
		t := *r.timeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time__lt", t, "form", "multi")
		}
	}
	if r.timeLte != nil {
		t := *r.timeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time__lte", t, "form", "multi")
		}
	}
	if r.timeN != nil {
		t := *r.timeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time__n", t, "form", "multi")
		}
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "form", "multi")
		}
	}
	if r.userIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user__isnull", r.userIsnull, "form", "")
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", t, "form", "multi")
		}
	}
	if r.userId != nil {
		t := *r.userId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", t, "form", "multi")
		}
	}
	if r.userIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__isnull", r.userIdIsnull, "form", "")
	}
	if r.userIdN != nil {
		t := *r.userIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", t, "form", "multi")
		}
	}
	if r.userName != nil {
		t := *r.userName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name", t, "form", "multi")
		}
	}
	if r.userNameIc != nil {
		t := *r.userNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ic", t, "form", "multi")
		}
	}
	if r.userNameIe != nil {
		t := *r.userNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ie", t, "form", "multi")
		}
	}
	if r.userNameIew != nil {
		t := *r.userNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__iew", t, "form", "multi")
		}
	}
	if r.userNameIre != nil {
		t := *r.userNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ire", t, "form", "multi")
		}
	}
	if r.userNameIsw != nil {
		t := *r.userNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__isw", t, "form", "multi")
		}
	}
	if r.userNameN != nil {
		t := *r.userNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__n", t, "form", "multi")
		}
	}
	if r.userNameNic != nil {
		t := *r.userNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nic", t, "form", "multi")
		}
	}
	if r.userNameNie != nil {
		t := *r.userNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nie", t, "form", "multi")
		}
	}
	if r.userNameNiew != nil {
		t := *r.userNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__niew", t, "form", "multi")
		}
	}
	if r.userNameNire != nil {
		t := *r.userNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nire", t, "form", "multi")
		}
	}
	if r.userNameNisw != nil {
		t := *r.userNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nisw", t, "form", "multi")
		}
	}
	if r.userNameNre != nil {
		t := *r.userNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nre", t, "form", "multi")
		}
	}
	if r.userNameRe != nil {
		t := *r.userNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__re", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectChangesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasObjectChangesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectChangesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasObjectChangesRetrieveRequest) Depth(depth int32) ApiExtrasObjectChangesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasObjectChangesRetrieveRequest) Execute() (*ObjectChange, *http.Response, error) {
	return r.ApiService.ExtrasObjectChangesRetrieveExecute(r)
}

/*
ExtrasObjectChangesRetrieve Method for ExtrasObjectChangesRetrieve

Retrieve a list of recent changes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this object change.
 @return ApiExtrasObjectChangesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasObjectChangesRetrieve(ctx context.Context, id string) ApiExtrasObjectChangesRetrieveRequest {
	return ApiExtrasObjectChangesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ObjectChange
func (a *ExtrasAPIService) ExtrasObjectChangesRetrieveExecute(r ApiExtrasObjectChangesRetrieveRequest) (*ObjectChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectChangesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-changes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasObjectMetadataBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasObjectMetadataBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasObjectMetadataBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasObjectMetadataBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataBulkDestroyExecute(r)
}

/*
ExtrasObjectMetadataBulkDestroy Method for ExtrasObjectMetadataBulkDestroy

Destroy a list of object metadata objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasObjectMetadataBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataBulkDestroy(ctx context.Context) ApiExtrasObjectMetadataBulkDestroyRequest {
	return ApiExtrasObjectMetadataBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasObjectMetadataBulkDestroyExecute(r ApiExtrasObjectMetadataBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableObjectMetadataRequest *[]PatchedBulkWritableObjectMetadataRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasObjectMetadataBulkPartialUpdateRequest) PatchedBulkWritableObjectMetadataRequest(patchedBulkWritableObjectMetadataRequest []PatchedBulkWritableObjectMetadataRequest) ApiExtrasObjectMetadataBulkPartialUpdateRequest {
	r.patchedBulkWritableObjectMetadataRequest = &patchedBulkWritableObjectMetadataRequest
	return r
}

func (r ApiExtrasObjectMetadataBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasObjectMetadataBulkPartialUpdateRequest) Execute() ([]ObjectMetadata, *http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataBulkPartialUpdateExecute(r)
}

/*
ExtrasObjectMetadataBulkPartialUpdate Method for ExtrasObjectMetadataBulkPartialUpdate

Partial update a list of object metadata objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasObjectMetadataBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataBulkPartialUpdate(ctx context.Context) ApiExtrasObjectMetadataBulkPartialUpdateRequest {
	return ApiExtrasObjectMetadataBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ObjectMetadata
func (a *ExtrasAPIService) ExtrasObjectMetadataBulkPartialUpdateExecute(r ApiExtrasObjectMetadataBulkPartialUpdateRequest) ([]ObjectMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ObjectMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableObjectMetadataRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableObjectMetadataRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableObjectMetadataRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableObjectMetadataRequest *[]BulkWritableObjectMetadataRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasObjectMetadataBulkUpdateRequest) BulkWritableObjectMetadataRequest(bulkWritableObjectMetadataRequest []BulkWritableObjectMetadataRequest) ApiExtrasObjectMetadataBulkUpdateRequest {
	r.bulkWritableObjectMetadataRequest = &bulkWritableObjectMetadataRequest
	return r
}

func (r ApiExtrasObjectMetadataBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasObjectMetadataBulkUpdateRequest) Execute() ([]ObjectMetadata, *http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataBulkUpdateExecute(r)
}

/*
ExtrasObjectMetadataBulkUpdate Method for ExtrasObjectMetadataBulkUpdate

Update a list of object metadata objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasObjectMetadataBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataBulkUpdate(ctx context.Context) ApiExtrasObjectMetadataBulkUpdateRequest {
	return ApiExtrasObjectMetadataBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ObjectMetadata
func (a *ExtrasAPIService) ExtrasObjectMetadataBulkUpdateExecute(r ApiExtrasObjectMetadataBulkUpdateRequest) ([]ObjectMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ObjectMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableObjectMetadataRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableObjectMetadataRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableObjectMetadataRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	objectMetadataRequest *ObjectMetadataRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasObjectMetadataCreateRequest) ObjectMetadataRequest(objectMetadataRequest ObjectMetadataRequest) ApiExtrasObjectMetadataCreateRequest {
	r.objectMetadataRequest = &objectMetadataRequest
	return r
}

func (r ApiExtrasObjectMetadataCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasObjectMetadataCreateRequest) Execute() (*ObjectMetadata, *http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataCreateExecute(r)
}

/*
ExtrasObjectMetadataCreate Method for ExtrasObjectMetadataCreate

Create one or more object metadata objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasObjectMetadataCreateRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataCreate(ctx context.Context) ApiExtrasObjectMetadataCreateRequest {
	return ApiExtrasObjectMetadataCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ObjectMetadata
func (a *ExtrasAPIService) ExtrasObjectMetadataCreateExecute(r ApiExtrasObjectMetadataCreateRequest) (*ObjectMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectMetadataRequest == nil {
		return localVarReturnValue, nil, reportError("objectMetadataRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectMetadataRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasObjectMetadataDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasObjectMetadataDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataDestroyExecute(r)
}

/*
ExtrasObjectMetadataDestroy Method for ExtrasObjectMetadataDestroy

Destroy a object metadata object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this object metadata.
 @return ApiExtrasObjectMetadataDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataDestroy(ctx context.Context, id string) ApiExtrasObjectMetadataDestroyRequest {
	return ApiExtrasObjectMetadataDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasObjectMetadataDestroyExecute(r ApiExtrasObjectMetadataDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	assignedObjectId *[]string
	assignedObjectIdIc *[]string
	assignedObjectIdIe *[]string
	assignedObjectIdIew *[]string
	assignedObjectIdIre *[]string
	assignedObjectIdIsw *[]string
	assignedObjectIdN *[]string
	assignedObjectIdNic *[]string
	assignedObjectIdNie *[]string
	assignedObjectIdNiew *[]string
	assignedObjectIdNire *[]string
	assignedObjectIdNisw *[]string
	assignedObjectIdNre *[]string
	assignedObjectIdRe *[]string
	assignedObjectType *[]int32
	assignedObjectTypeIsnull *bool
	assignedObjectTypeN *[]int32
	contact *[]string
	contactIsnull *bool
	contactN *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	metadataType *[]string
	metadataTypeN *[]string
	offset *int32
	q *string
	scopedFields *[]string
	sort *string
	team *[]string
	teamIsnull *bool
	teamN *[]string
	value *interface{}
	depth *int32
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectId(assignedObjectId []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectId = &assignedObjectId
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdIc(assignedObjectIdIc []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdIc = &assignedObjectIdIc
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdIe(assignedObjectIdIe []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdIe = &assignedObjectIdIe
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdIew(assignedObjectIdIew []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdIew = &assignedObjectIdIew
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdIre(assignedObjectIdIre []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdIre = &assignedObjectIdIre
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdIsw(assignedObjectIdIsw []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdIsw = &assignedObjectIdIsw
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdN(assignedObjectIdN []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdN = &assignedObjectIdN
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdNic(assignedObjectIdNic []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdNic = &assignedObjectIdNic
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdNie(assignedObjectIdNie []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdNie = &assignedObjectIdNie
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdNiew(assignedObjectIdNiew []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdNiew = &assignedObjectIdNiew
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdNire(assignedObjectIdNire []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdNire = &assignedObjectIdNire
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdNisw(assignedObjectIdNisw []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdNisw = &assignedObjectIdNisw
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdNre(assignedObjectIdNre []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdNre = &assignedObjectIdNre
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectIdRe(assignedObjectIdRe []string) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectIdRe = &assignedObjectIdRe
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectType(assignedObjectType []int32) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectType = &assignedObjectType
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectTypeIsnull(assignedObjectTypeIsnull bool) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectTypeIsnull = &assignedObjectTypeIsnull
	return r
}

func (r ApiExtrasObjectMetadataListRequest) AssignedObjectTypeN(assignedObjectTypeN []int32) ApiExtrasObjectMetadataListRequest {
	r.assignedObjectTypeN = &assignedObjectTypeN
	return r
}

func (r ApiExtrasObjectMetadataListRequest) Contact(contact []string) ApiExtrasObjectMetadataListRequest {
	r.contact = &contact
	return r
}

// Contact (name or ID) is null
func (r ApiExtrasObjectMetadataListRequest) ContactIsnull(contactIsnull bool) ApiExtrasObjectMetadataListRequest {
	r.contactIsnull = &contactIsnull
	return r
}

func (r ApiExtrasObjectMetadataListRequest) ContactN(contactN []string) ApiExtrasObjectMetadataListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiExtrasObjectMetadataListRequest) Created(created []time.Time) ApiExtrasObjectMetadataListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasObjectMetadataListRequest) CreatedGt(createdGt []time.Time) ApiExtrasObjectMetadataListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasObjectMetadataListRequest) CreatedGte(createdGte []time.Time) ApiExtrasObjectMetadataListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasObjectMetadataListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasObjectMetadataListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasObjectMetadataListRequest) CreatedLt(createdLt []time.Time) ApiExtrasObjectMetadataListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasObjectMetadataListRequest) CreatedLte(createdLte []time.Time) ApiExtrasObjectMetadataListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasObjectMetadataListRequest) CreatedN(createdN []time.Time) ApiExtrasObjectMetadataListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasObjectMetadataListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasObjectMetadataListRequest) Id(id []string) ApiExtrasObjectMetadataListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdIc(idIc []string) ApiExtrasObjectMetadataListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdIe(idIe []string) ApiExtrasObjectMetadataListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdIew(idIew []string) ApiExtrasObjectMetadataListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdIre(idIre []string) ApiExtrasObjectMetadataListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdIsw(idIsw []string) ApiExtrasObjectMetadataListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdN(idN []string) ApiExtrasObjectMetadataListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdNic(idNic []string) ApiExtrasObjectMetadataListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdNie(idNie []string) ApiExtrasObjectMetadataListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdNiew(idNiew []string) ApiExtrasObjectMetadataListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdNire(idNire []string) ApiExtrasObjectMetadataListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdNisw(idNisw []string) ApiExtrasObjectMetadataListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdNre(idNre []string) ApiExtrasObjectMetadataListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasObjectMetadataListRequest) IdRe(idRe []string) ApiExtrasObjectMetadataListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasObjectMetadataListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasObjectMetadataListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasObjectMetadataListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasObjectMetadataListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasObjectMetadataListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasObjectMetadataListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasObjectMetadataListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasObjectMetadataListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasObjectMetadataListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasObjectMetadataListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasObjectMetadataListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasObjectMetadataListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasObjectMetadataListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasObjectMetadataListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasObjectMetadataListRequest) Limit(limit int32) ApiExtrasObjectMetadataListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasObjectMetadataListRequest) MetadataType(metadataType []string) ApiExtrasObjectMetadataListRequest {
	r.metadataType = &metadataType
	return r
}

func (r ApiExtrasObjectMetadataListRequest) MetadataTypeN(metadataTypeN []string) ApiExtrasObjectMetadataListRequest {
	r.metadataTypeN = &metadataTypeN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasObjectMetadataListRequest) Offset(offset int32) ApiExtrasObjectMetadataListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasObjectMetadataListRequest) Q(q string) ApiExtrasObjectMetadataListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasObjectMetadataListRequest) ScopedFields(scopedFields []string) ApiExtrasObjectMetadataListRequest {
	r.scopedFields = &scopedFields
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasObjectMetadataListRequest) Sort(sort string) ApiExtrasObjectMetadataListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasObjectMetadataListRequest) Team(team []string) ApiExtrasObjectMetadataListRequest {
	r.team = &team
	return r
}

// Team (name or ID) is null
func (r ApiExtrasObjectMetadataListRequest) TeamIsnull(teamIsnull bool) ApiExtrasObjectMetadataListRequest {
	r.teamIsnull = &teamIsnull
	return r
}

func (r ApiExtrasObjectMetadataListRequest) TeamN(teamN []string) ApiExtrasObjectMetadataListRequest {
	r.teamN = &teamN
	return r
}

// Relevant data value to an object field or a set of object fields
func (r ApiExtrasObjectMetadataListRequest) Value(value interface{}) ApiExtrasObjectMetadataListRequest {
	r.value = &value
	return r
}

// Serializer Depth
func (r ApiExtrasObjectMetadataListRequest) Depth(depth int32) ApiExtrasObjectMetadataListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasObjectMetadataListRequest) Execute() (*PaginatedObjectMetadataList, *http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataListExecute(r)
}

/*
ExtrasObjectMetadataList Method for ExtrasObjectMetadataList

Retrieve a list of object metadata objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasObjectMetadataListRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataList(ctx context.Context) ApiExtrasObjectMetadataListRequest {
	return ApiExtrasObjectMetadataListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedObjectMetadataList
func (a *ExtrasAPIService) ExtrasObjectMetadataListExecute(r ApiExtrasObjectMetadataListRequest) (*PaginatedObjectMetadataList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedObjectMetadataList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assignedObjectId != nil {
		t := *r.assignedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIc != nil {
		t := *r.assignedObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ic", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIe != nil {
		t := *r.assignedObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ie", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIew != nil {
		t := *r.assignedObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__iew", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIre != nil {
		t := *r.assignedObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__ire", t, "form", "multi")
		}
	}
	if r.assignedObjectIdIsw != nil {
		t := *r.assignedObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__isw", t, "form", "multi")
		}
	}
	if r.assignedObjectIdN != nil {
		t := *r.assignedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNic != nil {
		t := *r.assignedObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nic", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNie != nil {
		t := *r.assignedObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nie", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNiew != nil {
		t := *r.assignedObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__niew", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNire != nil {
		t := *r.assignedObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nire", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNisw != nil {
		t := *r.assignedObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nisw", t, "form", "multi")
		}
	}
	if r.assignedObjectIdNre != nil {
		t := *r.assignedObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__nre", t, "form", "multi")
		}
	}
	if r.assignedObjectIdRe != nil {
		t := *r.assignedObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__re", t, "form", "multi")
		}
	}
	if r.assignedObjectType != nil {
		t := *r.assignedObjectType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type", t, "form", "multi")
		}
	}
	if r.assignedObjectTypeIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type__isnull", r.assignedObjectTypeIsnull, "form", "")
	}
	if r.assignedObjectTypeN != nil {
		t := *r.assignedObjectTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type__n", t, "form", "multi")
		}
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "form", "multi")
		}
	}
	if r.contactIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contact__isnull", r.contactIsnull, "form", "")
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.metadataType != nil {
		t := *r.metadataType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_type", t, "form", "multi")
		}
	}
	if r.metadataTypeN != nil {
		t := *r.metadataTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "metadata_type__n", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.scopedFields != nil {
		t := *r.scopedFields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "scoped_fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "scoped_fields", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.team != nil {
		t := *r.team
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "team", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "team", t, "form", "multi")
		}
	}
	if r.teamIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "team__isnull", r.teamIsnull, "form", "")
	}
	if r.teamN != nil {
		t := *r.teamN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "team__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "team__n", t, "form", "multi")
		}
	}
	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasObjectMetadataNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasObjectMetadataNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasObjectMetadataNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasObjectMetadataNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataNotesCreateExecute(r)
}

/*
ExtrasObjectMetadataNotesCreate Method for ExtrasObjectMetadataNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this object metadata.
 @return ApiExtrasObjectMetadataNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataNotesCreate(ctx context.Context, id string) ApiExtrasObjectMetadataNotesCreateRequest {
	return ApiExtrasObjectMetadataNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasObjectMetadataNotesCreateExecute(r ApiExtrasObjectMetadataNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasObjectMetadataNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasObjectMetadataNotesListRequest) Limit(limit int32) ApiExtrasObjectMetadataNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasObjectMetadataNotesListRequest) Offset(offset int32) ApiExtrasObjectMetadataNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasObjectMetadataNotesListRequest) Depth(depth int32) ApiExtrasObjectMetadataNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasObjectMetadataNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataNotesListExecute(r)
}

/*
ExtrasObjectMetadataNotesList Method for ExtrasObjectMetadataNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this object metadata.
 @return ApiExtrasObjectMetadataNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataNotesList(ctx context.Context, id string) ApiExtrasObjectMetadataNotesListRequest {
	return ApiExtrasObjectMetadataNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasObjectMetadataNotesListExecute(r ApiExtrasObjectMetadataNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedObjectMetadataRequest *PatchedObjectMetadataRequest
}

func (r ApiExtrasObjectMetadataPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasObjectMetadataPartialUpdateRequest) PatchedObjectMetadataRequest(patchedObjectMetadataRequest PatchedObjectMetadataRequest) ApiExtrasObjectMetadataPartialUpdateRequest {
	r.patchedObjectMetadataRequest = &patchedObjectMetadataRequest
	return r
}

func (r ApiExtrasObjectMetadataPartialUpdateRequest) Execute() (*ObjectMetadata, *http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataPartialUpdateExecute(r)
}

/*
ExtrasObjectMetadataPartialUpdate Method for ExtrasObjectMetadataPartialUpdate

Partial update a object metadata object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this object metadata.
 @return ApiExtrasObjectMetadataPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataPartialUpdate(ctx context.Context, id string) ApiExtrasObjectMetadataPartialUpdateRequest {
	return ApiExtrasObjectMetadataPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ObjectMetadata
func (a *ExtrasAPIService) ExtrasObjectMetadataPartialUpdateExecute(r ApiExtrasObjectMetadataPartialUpdateRequest) (*ObjectMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedObjectMetadataRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasObjectMetadataRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasObjectMetadataRetrieveRequest) Depth(depth int32) ApiExtrasObjectMetadataRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasObjectMetadataRetrieveRequest) Execute() (*ObjectMetadata, *http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataRetrieveExecute(r)
}

/*
ExtrasObjectMetadataRetrieve Method for ExtrasObjectMetadataRetrieve

Retrieve a object metadata object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this object metadata.
 @return ApiExtrasObjectMetadataRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataRetrieve(ctx context.Context, id string) ApiExtrasObjectMetadataRetrieveRequest {
	return ApiExtrasObjectMetadataRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ObjectMetadata
func (a *ExtrasAPIService) ExtrasObjectMetadataRetrieveExecute(r ApiExtrasObjectMetadataRetrieveRequest) (*ObjectMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectMetadataUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	objectMetadataRequest *ObjectMetadataRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasObjectMetadataUpdateRequest) ObjectMetadataRequest(objectMetadataRequest ObjectMetadataRequest) ApiExtrasObjectMetadataUpdateRequest {
	r.objectMetadataRequest = &objectMetadataRequest
	return r
}

func (r ApiExtrasObjectMetadataUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasObjectMetadataUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasObjectMetadataUpdateRequest) Execute() (*ObjectMetadata, *http.Response, error) {
	return r.ApiService.ExtrasObjectMetadataUpdateExecute(r)
}

/*
ExtrasObjectMetadataUpdate Method for ExtrasObjectMetadataUpdate

Update a object metadata object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this object metadata.
 @return ApiExtrasObjectMetadataUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasObjectMetadataUpdate(ctx context.Context, id string) ApiExtrasObjectMetadataUpdateRequest {
	return ApiExtrasObjectMetadataUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ObjectMetadata
func (a *ExtrasAPIService) ExtrasObjectMetadataUpdateExecute(r ApiExtrasObjectMetadataUpdateRequest) (*ObjectMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectMetadataUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-metadata/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectMetadataRequest == nil {
		return localVarReturnValue, nil, reportError("objectMetadataRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectMetadataRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipAssociationsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasRelationshipAssociationsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasRelationshipAssociationsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipAssociationsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipAssociationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsBulkDestroyExecute(r)
}

/*
ExtrasRelationshipAssociationsBulkDestroy Method for ExtrasRelationshipAssociationsBulkDestroy

Destroy a list of relationship association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsBulkDestroy(ctx context.Context) ApiExtrasRelationshipAssociationsBulkDestroyRequest {
	return ApiExtrasRelationshipAssociationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsBulkDestroyExecute(r ApiExtrasRelationshipAssociationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipAssociationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableRelationshipAssociationRequest *[]PatchedBulkWritableRelationshipAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest) PatchedBulkWritableRelationshipAssociationRequest(patchedBulkWritableRelationshipAssociationRequest []PatchedBulkWritableRelationshipAssociationRequest) ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest {
	r.patchedBulkWritableRelationshipAssociationRequest = &patchedBulkWritableRelationshipAssociationRequest
	return r
}

func (r ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest) Execute() ([]RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsBulkPartialUpdateExecute(r)
}

/*
ExtrasRelationshipAssociationsBulkPartialUpdate Method for ExtrasRelationshipAssociationsBulkPartialUpdate

Partial update a list of relationship association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsBulkPartialUpdate(ctx context.Context) ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest {
	return ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RelationshipAssociation
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsBulkPartialUpdateExecute(r ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest) ([]RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipAssociationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableRelationshipAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableRelationshipAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableRelationshipAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableRelationshipAssociationRequest *[]BulkWritableRelationshipAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipAssociationsBulkUpdateRequest) BulkWritableRelationshipAssociationRequest(bulkWritableRelationshipAssociationRequest []BulkWritableRelationshipAssociationRequest) ApiExtrasRelationshipAssociationsBulkUpdateRequest {
	r.bulkWritableRelationshipAssociationRequest = &bulkWritableRelationshipAssociationRequest
	return r
}

func (r ApiExtrasRelationshipAssociationsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipAssociationsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipAssociationsBulkUpdateRequest) Execute() ([]RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsBulkUpdateExecute(r)
}

/*
ExtrasRelationshipAssociationsBulkUpdate Method for ExtrasRelationshipAssociationsBulkUpdate

Update a list of relationship association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsBulkUpdate(ctx context.Context) ApiExtrasRelationshipAssociationsBulkUpdateRequest {
	return ApiExtrasRelationshipAssociationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RelationshipAssociation
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsBulkUpdateExecute(r ApiExtrasRelationshipAssociationsBulkUpdateRequest) ([]RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipAssociationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableRelationshipAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableRelationshipAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableRelationshipAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	relationshipAssociationRequest *RelationshipAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipAssociationsCreateRequest) RelationshipAssociationRequest(relationshipAssociationRequest RelationshipAssociationRequest) ApiExtrasRelationshipAssociationsCreateRequest {
	r.relationshipAssociationRequest = &relationshipAssociationRequest
	return r
}

func (r ApiExtrasRelationshipAssociationsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipAssociationsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipAssociationsCreateRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsCreateExecute(r)
}

/*
ExtrasRelationshipAssociationsCreate Method for ExtrasRelationshipAssociationsCreate

Create one or more relationship association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsCreate(ctx context.Context) ApiExtrasRelationshipAssociationsCreateRequest {
	return ApiExtrasRelationshipAssociationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsCreateExecute(r ApiExtrasRelationshipAssociationsCreateRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipAssociationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationshipAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("relationshipAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationshipAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipAssociationsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipAssociationsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipAssociationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsDestroyExecute(r)
}

/*
ExtrasRelationshipAssociationsDestroy Method for ExtrasRelationshipAssociationsDestroy

Destroy a relationship association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship association.
 @return ApiExtrasRelationshipAssociationsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsDestroy(ctx context.Context, id string) ApiExtrasRelationshipAssociationsDestroyRequest {
	return ApiExtrasRelationshipAssociationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsDestroyExecute(r ApiExtrasRelationshipAssociationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipAssociationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	destinationId *[]string
	destinationIdIc *[]string
	destinationIdIe *[]string
	destinationIdIew *[]string
	destinationIdIre *[]string
	destinationIdIsw *[]string
	destinationIdN *[]string
	destinationIdNic *[]string
	destinationIdNie *[]string
	destinationIdNiew *[]string
	destinationIdNire *[]string
	destinationIdNisw *[]string
	destinationIdNre *[]string
	destinationIdRe *[]string
	destinationType *[]int32
	destinationTypeN *[]int32
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	offset *int32
	peerId *[]string
	q *string
	relationship *[]string
	relationshipN *[]string
	sort *string
	sourceId *[]string
	sourceIdIc *[]string
	sourceIdIe *[]string
	sourceIdIew *[]string
	sourceIdIre *[]string
	sourceIdIsw *[]string
	sourceIdN *[]string
	sourceIdNic *[]string
	sourceIdNie *[]string
	sourceIdNiew *[]string
	sourceIdNire *[]string
	sourceIdNisw *[]string
	sourceIdNre *[]string
	sourceIdRe *[]string
	sourceType *[]int32
	sourceTypeN *[]int32
	depth *int32
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationId(destinationId []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationId = &destinationId
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIc(destinationIdIc []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIc = &destinationIdIc
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIe(destinationIdIe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIe = &destinationIdIe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIew(destinationIdIew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIew = &destinationIdIew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIre(destinationIdIre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIre = &destinationIdIre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIsw(destinationIdIsw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIsw = &destinationIdIsw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdN(destinationIdN []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdN = &destinationIdN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNic(destinationIdNic []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNic = &destinationIdNic
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNie(destinationIdNie []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNie = &destinationIdNie
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNiew(destinationIdNiew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNiew = &destinationIdNiew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNire(destinationIdNire []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNire = &destinationIdNire
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNisw(destinationIdNisw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNisw = &destinationIdNisw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNre(destinationIdNre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNre = &destinationIdNre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdRe(destinationIdRe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdRe = &destinationIdRe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationType(destinationType []int32) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationType = &destinationType
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationTypeN(destinationTypeN []int32) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationTypeN = &destinationTypeN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipAssociationsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasRelationshipAssociationsListRequest) Id(id []string) ApiExtrasRelationshipAssociationsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIc(idIc []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIe(idIe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIew(idIew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIre(idIre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIsw(idIsw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdN(idN []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNic(idNic []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNie(idNie []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNiew(idNiew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNire(idNire []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNisw(idNisw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNre(idNre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdRe(idRe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasRelationshipAssociationsListRequest) Limit(limit int32) ApiExtrasRelationshipAssociationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasRelationshipAssociationsListRequest) Offset(offset int32) ApiExtrasRelationshipAssociationsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) PeerId(peerId []string) ApiExtrasRelationshipAssociationsListRequest {
	r.peerId = &peerId
	return r
}

// Search
func (r ApiExtrasRelationshipAssociationsListRequest) Q(q string) ApiExtrasRelationshipAssociationsListRequest {
	r.q = &q
	return r
}

// Relationship (key)
func (r ApiExtrasRelationshipAssociationsListRequest) Relationship(relationship []string) ApiExtrasRelationshipAssociationsListRequest {
	r.relationship = &relationship
	return r
}

// Exclude Relationship (key)
func (r ApiExtrasRelationshipAssociationsListRequest) RelationshipN(relationshipN []string) ApiExtrasRelationshipAssociationsListRequest {
	r.relationshipN = &relationshipN
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasRelationshipAssociationsListRequest) Sort(sort string) ApiExtrasRelationshipAssociationsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceId(sourceId []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceId = &sourceId
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIc(sourceIdIc []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIc = &sourceIdIc
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIe(sourceIdIe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIe = &sourceIdIe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIew(sourceIdIew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIew = &sourceIdIew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIre(sourceIdIre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIre = &sourceIdIre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIsw(sourceIdIsw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIsw = &sourceIdIsw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdN(sourceIdN []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdN = &sourceIdN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNic(sourceIdNic []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNic = &sourceIdNic
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNie(sourceIdNie []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNie = &sourceIdNie
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNiew(sourceIdNiew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNiew = &sourceIdNiew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNire(sourceIdNire []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNire = &sourceIdNire
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNisw(sourceIdNisw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNisw = &sourceIdNisw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNre(sourceIdNre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNre = &sourceIdNre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdRe(sourceIdRe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdRe = &sourceIdRe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceType(sourceType []int32) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceType = &sourceType
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceTypeN(sourceTypeN []int32) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceTypeN = &sourceTypeN
	return r
}

// Serializer Depth
func (r ApiExtrasRelationshipAssociationsListRequest) Depth(depth int32) ApiExtrasRelationshipAssociationsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) Execute() (*PaginatedRelationshipAssociationList, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsListExecute(r)
}

/*
ExtrasRelationshipAssociationsList Method for ExtrasRelationshipAssociationsList

Retrieve a list of relationship association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsListRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsList(ctx context.Context) ApiExtrasRelationshipAssociationsListRequest {
	return ApiExtrasRelationshipAssociationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRelationshipAssociationList
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsListExecute(r ApiExtrasRelationshipAssociationsListRequest) (*PaginatedRelationshipAssociationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRelationshipAssociationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipAssociationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.destinationId != nil {
		t := *r.destinationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id", t, "form", "multi")
		}
	}
	if r.destinationIdIc != nil {
		t := *r.destinationIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__ic", t, "form", "multi")
		}
	}
	if r.destinationIdIe != nil {
		t := *r.destinationIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__ie", t, "form", "multi")
		}
	}
	if r.destinationIdIew != nil {
		t := *r.destinationIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__iew", t, "form", "multi")
		}
	}
	if r.destinationIdIre != nil {
		t := *r.destinationIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__ire", t, "form", "multi")
		}
	}
	if r.destinationIdIsw != nil {
		t := *r.destinationIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__isw", t, "form", "multi")
		}
	}
	if r.destinationIdN != nil {
		t := *r.destinationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__n", t, "form", "multi")
		}
	}
	if r.destinationIdNic != nil {
		t := *r.destinationIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nic", t, "form", "multi")
		}
	}
	if r.destinationIdNie != nil {
		t := *r.destinationIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nie", t, "form", "multi")
		}
	}
	if r.destinationIdNiew != nil {
		t := *r.destinationIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__niew", t, "form", "multi")
		}
	}
	if r.destinationIdNire != nil {
		t := *r.destinationIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nire", t, "form", "multi")
		}
	}
	if r.destinationIdNisw != nil {
		t := *r.destinationIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nisw", t, "form", "multi")
		}
	}
	if r.destinationIdNre != nil {
		t := *r.destinationIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__nre", t, "form", "multi")
		}
	}
	if r.destinationIdRe != nil {
		t := *r.destinationIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_id__re", t, "form", "multi")
		}
	}
	if r.destinationType != nil {
		t := *r.destinationType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type", t, "form", "multi")
		}
	}
	if r.destinationTypeN != nil {
		t := *r.destinationTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.peerId != nil {
		t := *r.peerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "peer_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "peer_id", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.relationship != nil {
		t := *r.relationship
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "relationship", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "relationship", t, "form", "multi")
		}
	}
	if r.relationshipN != nil {
		t := *r.relationshipN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "relationship__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "relationship__n", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.sourceId != nil {
		t := *r.sourceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id", t, "form", "multi")
		}
	}
	if r.sourceIdIc != nil {
		t := *r.sourceIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__ic", t, "form", "multi")
		}
	}
	if r.sourceIdIe != nil {
		t := *r.sourceIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__ie", t, "form", "multi")
		}
	}
	if r.sourceIdIew != nil {
		t := *r.sourceIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__iew", t, "form", "multi")
		}
	}
	if r.sourceIdIre != nil {
		t := *r.sourceIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__ire", t, "form", "multi")
		}
	}
	if r.sourceIdIsw != nil {
		t := *r.sourceIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__isw", t, "form", "multi")
		}
	}
	if r.sourceIdN != nil {
		t := *r.sourceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__n", t, "form", "multi")
		}
	}
	if r.sourceIdNic != nil {
		t := *r.sourceIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nic", t, "form", "multi")
		}
	}
	if r.sourceIdNie != nil {
		t := *r.sourceIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nie", t, "form", "multi")
		}
	}
	if r.sourceIdNiew != nil {
		t := *r.sourceIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__niew", t, "form", "multi")
		}
	}
	if r.sourceIdNire != nil {
		t := *r.sourceIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nire", t, "form", "multi")
		}
	}
	if r.sourceIdNisw != nil {
		t := *r.sourceIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nisw", t, "form", "multi")
		}
	}
	if r.sourceIdNre != nil {
		t := *r.sourceIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__nre", t, "form", "multi")
		}
	}
	if r.sourceIdRe != nil {
		t := *r.sourceIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__re", t, "form", "multi")
		}
	}
	if r.sourceType != nil {
		t := *r.sourceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_type", t, "form", "multi")
		}
	}
	if r.sourceTypeN != nil {
		t := *r.sourceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_type__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedRelationshipAssociationRequest *PatchedRelationshipAssociationRequest
}

func (r ApiExtrasRelationshipAssociationsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipAssociationsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipAssociationsPartialUpdateRequest) PatchedRelationshipAssociationRequest(patchedRelationshipAssociationRequest PatchedRelationshipAssociationRequest) ApiExtrasRelationshipAssociationsPartialUpdateRequest {
	r.patchedRelationshipAssociationRequest = &patchedRelationshipAssociationRequest
	return r
}

func (r ApiExtrasRelationshipAssociationsPartialUpdateRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsPartialUpdateExecute(r)
}

/*
ExtrasRelationshipAssociationsPartialUpdate Method for ExtrasRelationshipAssociationsPartialUpdate

Partial update a relationship association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship association.
 @return ApiExtrasRelationshipAssociationsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsPartialUpdate(ctx context.Context, id string) ApiExtrasRelationshipAssociationsPartialUpdateRequest {
	return ApiExtrasRelationshipAssociationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsPartialUpdateExecute(r ApiExtrasRelationshipAssociationsPartialUpdateRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipAssociationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRelationshipAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasRelationshipAssociationsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipAssociationsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasRelationshipAssociationsRetrieveRequest) Depth(depth int32) ApiExtrasRelationshipAssociationsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasRelationshipAssociationsRetrieveRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsRetrieveExecute(r)
}

/*
ExtrasRelationshipAssociationsRetrieve Method for ExtrasRelationshipAssociationsRetrieve

Retrieve a relationship association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship association.
 @return ApiExtrasRelationshipAssociationsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsRetrieve(ctx context.Context, id string) ApiExtrasRelationshipAssociationsRetrieveRequest {
	return ApiExtrasRelationshipAssociationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsRetrieveExecute(r ApiExtrasRelationshipAssociationsRetrieveRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipAssociationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	relationshipAssociationRequest *RelationshipAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipAssociationsUpdateRequest) RelationshipAssociationRequest(relationshipAssociationRequest RelationshipAssociationRequest) ApiExtrasRelationshipAssociationsUpdateRequest {
	r.relationshipAssociationRequest = &relationshipAssociationRequest
	return r
}

func (r ApiExtrasRelationshipAssociationsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipAssociationsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipAssociationsUpdateRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsUpdateExecute(r)
}

/*
ExtrasRelationshipAssociationsUpdate Method for ExtrasRelationshipAssociationsUpdate

Update a relationship association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship association.
 @return ApiExtrasRelationshipAssociationsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsUpdate(ctx context.Context, id string) ApiExtrasRelationshipAssociationsUpdateRequest {
	return ApiExtrasRelationshipAssociationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasAPIService) ExtrasRelationshipAssociationsUpdateExecute(r ApiExtrasRelationshipAssociationsUpdateRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipAssociationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationshipAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("relationshipAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationshipAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasRelationshipsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasRelationshipsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRelationshipsBulkDestroyExecute(r)
}

/*
ExtrasRelationshipsBulkDestroy Method for ExtrasRelationshipsBulkDestroy

Destroy a list of relationship objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsBulkDestroy(ctx context.Context) ApiExtrasRelationshipsBulkDestroyRequest {
	return ApiExtrasRelationshipsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasRelationshipsBulkDestroyExecute(r ApiExtrasRelationshipsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableRelationshipRequest *[]PatchedBulkWritableRelationshipRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipsBulkPartialUpdateRequest) PatchedBulkWritableRelationshipRequest(patchedBulkWritableRelationshipRequest []PatchedBulkWritableRelationshipRequest) ApiExtrasRelationshipsBulkPartialUpdateRequest {
	r.patchedBulkWritableRelationshipRequest = &patchedBulkWritableRelationshipRequest
	return r
}

func (r ApiExtrasRelationshipsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipsBulkPartialUpdateRequest) Execute() ([]Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsBulkPartialUpdateExecute(r)
}

/*
ExtrasRelationshipsBulkPartialUpdate Method for ExtrasRelationshipsBulkPartialUpdate

Partial update a list of relationship objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsBulkPartialUpdate(ctx context.Context) ApiExtrasRelationshipsBulkPartialUpdateRequest {
	return ApiExtrasRelationshipsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Relationship
func (a *ExtrasAPIService) ExtrasRelationshipsBulkPartialUpdateExecute(r ApiExtrasRelationshipsBulkPartialUpdateRequest) ([]Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableRelationshipRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableRelationshipRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableRelationshipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableRelationshipRequest *[]BulkWritableRelationshipRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipsBulkUpdateRequest) BulkWritableRelationshipRequest(bulkWritableRelationshipRequest []BulkWritableRelationshipRequest) ApiExtrasRelationshipsBulkUpdateRequest {
	r.bulkWritableRelationshipRequest = &bulkWritableRelationshipRequest
	return r
}

func (r ApiExtrasRelationshipsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipsBulkUpdateRequest) Execute() ([]Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsBulkUpdateExecute(r)
}

/*
ExtrasRelationshipsBulkUpdate Method for ExtrasRelationshipsBulkUpdate

Update a list of relationship objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsBulkUpdate(ctx context.Context) ApiExtrasRelationshipsBulkUpdateRequest {
	return ApiExtrasRelationshipsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Relationship
func (a *ExtrasAPIService) ExtrasRelationshipsBulkUpdateExecute(r ApiExtrasRelationshipsBulkUpdateRequest) ([]Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableRelationshipRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableRelationshipRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableRelationshipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	relationshipRequest *RelationshipRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipsCreateRequest) RelationshipRequest(relationshipRequest RelationshipRequest) ApiExtrasRelationshipsCreateRequest {
	r.relationshipRequest = &relationshipRequest
	return r
}

func (r ApiExtrasRelationshipsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipsCreateRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsCreateExecute(r)
}

/*
ExtrasRelationshipsCreate Method for ExtrasRelationshipsCreate

Create one or more relationship objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsCreate(ctx context.Context) ApiExtrasRelationshipsCreateRequest {
	return ApiExtrasRelationshipsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasAPIService) ExtrasRelationshipsCreateExecute(r ApiExtrasRelationshipsCreateRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationshipRequest == nil {
		return localVarReturnValue, nil, reportError("relationshipRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationshipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRelationshipsDestroyExecute(r)
}

/*
ExtrasRelationshipsDestroy Method for ExtrasRelationshipsDestroy

Destroy a relationship object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsDestroy(ctx context.Context, id string) ApiExtrasRelationshipsDestroyRequest {
	return ApiExtrasRelationshipsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasRelationshipsDestroyExecute(r ApiExtrasRelationshipsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	destinationType *[]int32
	destinationTypeN *[]int32
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	key *[]string
	keyIc *[]string
	keyIe *[]string
	keyIew *[]string
	keyIre *[]string
	keyIsw *[]string
	keyN *[]string
	keyNic *[]string
	keyNie *[]string
	keyNiew *[]string
	keyNire *[]string
	keyNisw *[]string
	keyNre *[]string
	keyRe *[]string
	label *[]string
	labelIc *[]string
	labelIe *[]string
	labelIew *[]string
	labelIre *[]string
	labelIsw *[]string
	labelN *[]string
	labelNic *[]string
	labelNie *[]string
	labelNiew *[]string
	labelNire *[]string
	labelNisw *[]string
	labelNre *[]string
	labelRe *[]string
	limit *int32
	offset *int32
	q *string
	sort *string
	sourceType *[]int32
	sourceTypeN *[]int32
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	type_ *[]string
	typeIc *[]string
	typeIe *[]string
	typeIew *[]string
	typeIre *[]string
	typeIsw *[]string
	typeN *[]string
	typeNic *[]string
	typeNie *[]string
	typeNiew *[]string
	typeNire *[]string
	typeNisw *[]string
	typeNre *[]string
	typeRe *[]string
	depth *int32
}

func (r ApiExtrasRelationshipsListRequest) Contacts(contacts []string) ApiExtrasRelationshipsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasRelationshipsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasRelationshipsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasRelationshipsListRequest) ContactsN(contactsN string) ApiExtrasRelationshipsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasRelationshipsListRequest) DestinationType(destinationType []int32) ApiExtrasRelationshipsListRequest {
	r.destinationType = &destinationType
	return r
}

func (r ApiExtrasRelationshipsListRequest) DestinationTypeN(destinationTypeN []int32) ApiExtrasRelationshipsListRequest {
	r.destinationTypeN = &destinationTypeN
	return r
}

func (r ApiExtrasRelationshipsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasRelationshipsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasRelationshipsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasRelationshipsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasRelationshipsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasRelationshipsListRequest) Id(id []string) ApiExtrasRelationshipsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIc(idIc []string) ApiExtrasRelationshipsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIe(idIe []string) ApiExtrasRelationshipsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIew(idIew []string) ApiExtrasRelationshipsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIre(idIre []string) ApiExtrasRelationshipsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIsw(idIsw []string) ApiExtrasRelationshipsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdN(idN []string) ApiExtrasRelationshipsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNic(idNic []string) ApiExtrasRelationshipsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNie(idNie []string) ApiExtrasRelationshipsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNiew(idNiew []string) ApiExtrasRelationshipsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNire(idNire []string) ApiExtrasRelationshipsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNisw(idNisw []string) ApiExtrasRelationshipsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNre(idNre []string) ApiExtrasRelationshipsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdRe(idRe []string) ApiExtrasRelationshipsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasRelationshipsListRequest) Key(key []string) ApiExtrasRelationshipsListRequest {
	r.key = &key
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyIc(keyIc []string) ApiExtrasRelationshipsListRequest {
	r.keyIc = &keyIc
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyIe(keyIe []string) ApiExtrasRelationshipsListRequest {
	r.keyIe = &keyIe
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyIew(keyIew []string) ApiExtrasRelationshipsListRequest {
	r.keyIew = &keyIew
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyIre(keyIre []string) ApiExtrasRelationshipsListRequest {
	r.keyIre = &keyIre
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyIsw(keyIsw []string) ApiExtrasRelationshipsListRequest {
	r.keyIsw = &keyIsw
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyN(keyN []string) ApiExtrasRelationshipsListRequest {
	r.keyN = &keyN
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyNic(keyNic []string) ApiExtrasRelationshipsListRequest {
	r.keyNic = &keyNic
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyNie(keyNie []string) ApiExtrasRelationshipsListRequest {
	r.keyNie = &keyNie
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyNiew(keyNiew []string) ApiExtrasRelationshipsListRequest {
	r.keyNiew = &keyNiew
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyNire(keyNire []string) ApiExtrasRelationshipsListRequest {
	r.keyNire = &keyNire
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyNisw(keyNisw []string) ApiExtrasRelationshipsListRequest {
	r.keyNisw = &keyNisw
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyNre(keyNre []string) ApiExtrasRelationshipsListRequest {
	r.keyNre = &keyNre
	return r
}

func (r ApiExtrasRelationshipsListRequest) KeyRe(keyRe []string) ApiExtrasRelationshipsListRequest {
	r.keyRe = &keyRe
	return r
}

func (r ApiExtrasRelationshipsListRequest) Label(label []string) ApiExtrasRelationshipsListRequest {
	r.label = &label
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelIc(labelIc []string) ApiExtrasRelationshipsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelIe(labelIe []string) ApiExtrasRelationshipsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelIew(labelIew []string) ApiExtrasRelationshipsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelIre(labelIre []string) ApiExtrasRelationshipsListRequest {
	r.labelIre = &labelIre
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelIsw(labelIsw []string) ApiExtrasRelationshipsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelN(labelN []string) ApiExtrasRelationshipsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelNic(labelNic []string) ApiExtrasRelationshipsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelNie(labelNie []string) ApiExtrasRelationshipsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelNiew(labelNiew []string) ApiExtrasRelationshipsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelNire(labelNire []string) ApiExtrasRelationshipsListRequest {
	r.labelNire = &labelNire
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelNisw(labelNisw []string) ApiExtrasRelationshipsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelNre(labelNre []string) ApiExtrasRelationshipsListRequest {
	r.labelNre = &labelNre
	return r
}

func (r ApiExtrasRelationshipsListRequest) LabelRe(labelRe []string) ApiExtrasRelationshipsListRequest {
	r.labelRe = &labelRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasRelationshipsListRequest) Limit(limit int32) ApiExtrasRelationshipsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasRelationshipsListRequest) Offset(offset int32) ApiExtrasRelationshipsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasRelationshipsListRequest) Q(q string) ApiExtrasRelationshipsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasRelationshipsListRequest) Sort(sort string) ApiExtrasRelationshipsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasRelationshipsListRequest) SourceType(sourceType []int32) ApiExtrasRelationshipsListRequest {
	r.sourceType = &sourceType
	return r
}

func (r ApiExtrasRelationshipsListRequest) SourceTypeN(sourceTypeN []int32) ApiExtrasRelationshipsListRequest {
	r.sourceTypeN = &sourceTypeN
	return r
}

func (r ApiExtrasRelationshipsListRequest) Teams(teams []string) ApiExtrasRelationshipsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasRelationshipsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasRelationshipsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasRelationshipsListRequest) TeamsN(teamsN string) ApiExtrasRelationshipsListRequest {
	r.teamsN = &teamsN
	return r
}

// Cardinality of this relationship
func (r ApiExtrasRelationshipsListRequest) Type_(type_ []string) ApiExtrasRelationshipsListRequest {
	r.type_ = &type_
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeIc(typeIc []string) ApiExtrasRelationshipsListRequest {
	r.typeIc = &typeIc
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeIe(typeIe []string) ApiExtrasRelationshipsListRequest {
	r.typeIe = &typeIe
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeIew(typeIew []string) ApiExtrasRelationshipsListRequest {
	r.typeIew = &typeIew
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeIre(typeIre []string) ApiExtrasRelationshipsListRequest {
	r.typeIre = &typeIre
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeIsw(typeIsw []string) ApiExtrasRelationshipsListRequest {
	r.typeIsw = &typeIsw
	return r
}

// Cardinality of this relationship
func (r ApiExtrasRelationshipsListRequest) TypeN(typeN []string) ApiExtrasRelationshipsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeNic(typeNic []string) ApiExtrasRelationshipsListRequest {
	r.typeNic = &typeNic
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeNie(typeNie []string) ApiExtrasRelationshipsListRequest {
	r.typeNie = &typeNie
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeNiew(typeNiew []string) ApiExtrasRelationshipsListRequest {
	r.typeNiew = &typeNiew
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeNire(typeNire []string) ApiExtrasRelationshipsListRequest {
	r.typeNire = &typeNire
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeNisw(typeNisw []string) ApiExtrasRelationshipsListRequest {
	r.typeNisw = &typeNisw
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeNre(typeNre []string) ApiExtrasRelationshipsListRequest {
	r.typeNre = &typeNre
	return r
}

func (r ApiExtrasRelationshipsListRequest) TypeRe(typeRe []string) ApiExtrasRelationshipsListRequest {
	r.typeRe = &typeRe
	return r
}

// Serializer Depth
func (r ApiExtrasRelationshipsListRequest) Depth(depth int32) ApiExtrasRelationshipsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasRelationshipsListRequest) Execute() (*PaginatedRelationshipList, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsListExecute(r)
}

/*
ExtrasRelationshipsList Method for ExtrasRelationshipsList

Retrieve a list of relationship objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsListRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsList(ctx context.Context) ApiExtrasRelationshipsListRequest {
	return ApiExtrasRelationshipsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRelationshipList
func (a *ExtrasAPIService) ExtrasRelationshipsListExecute(r ApiExtrasRelationshipsListRequest) (*PaginatedRelationshipList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRelationshipList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.destinationType != nil {
		t := *r.destinationType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type", t, "form", "multi")
		}
	}
	if r.destinationTypeN != nil {
		t := *r.destinationTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.key != nil {
		t := *r.key
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key", t, "form", "multi")
		}
	}
	if r.keyIc != nil {
		t := *r.keyIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__ic", t, "form", "multi")
		}
	}
	if r.keyIe != nil {
		t := *r.keyIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__ie", t, "form", "multi")
		}
	}
	if r.keyIew != nil {
		t := *r.keyIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__iew", t, "form", "multi")
		}
	}
	if r.keyIre != nil {
		t := *r.keyIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__ire", t, "form", "multi")
		}
	}
	if r.keyIsw != nil {
		t := *r.keyIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__isw", t, "form", "multi")
		}
	}
	if r.keyN != nil {
		t := *r.keyN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__n", t, "form", "multi")
		}
	}
	if r.keyNic != nil {
		t := *r.keyNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nic", t, "form", "multi")
		}
	}
	if r.keyNie != nil {
		t := *r.keyNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nie", t, "form", "multi")
		}
	}
	if r.keyNiew != nil {
		t := *r.keyNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__niew", t, "form", "multi")
		}
	}
	if r.keyNire != nil {
		t := *r.keyNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nire", t, "form", "multi")
		}
	}
	if r.keyNisw != nil {
		t := *r.keyNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nisw", t, "form", "multi")
		}
	}
	if r.keyNre != nil {
		t := *r.keyNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__nre", t, "form", "multi")
		}
	}
	if r.keyRe != nil {
		t := *r.keyRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "key__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "key__re", t, "form", "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "form", "multi")
		}
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "form", "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "form", "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "form", "multi")
		}
	}
	if r.labelIre != nil {
		t := *r.labelIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ire", t, "form", "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "form", "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "form", "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "form", "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "form", "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "form", "multi")
		}
	}
	if r.labelNire != nil {
		t := *r.labelNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nire", t, "form", "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "form", "multi")
		}
	}
	if r.labelNre != nil {
		t := *r.labelNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nre", t, "form", "multi")
		}
	}
	if r.labelRe != nil {
		t := *r.labelRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.sourceType != nil {
		t := *r.sourceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_type", t, "form", "multi")
		}
	}
	if r.sourceTypeN != nil {
		t := *r.sourceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_type__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "form", "multi")
		}
	}
	if r.typeIc != nil {
		t := *r.typeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__ic", t, "form", "multi")
		}
	}
	if r.typeIe != nil {
		t := *r.typeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__ie", t, "form", "multi")
		}
	}
	if r.typeIew != nil {
		t := *r.typeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__iew", t, "form", "multi")
		}
	}
	if r.typeIre != nil {
		t := *r.typeIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__ire", t, "form", "multi")
		}
	}
	if r.typeIsw != nil {
		t := *r.typeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__isw", t, "form", "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "form", "multi")
		}
	}
	if r.typeNic != nil {
		t := *r.typeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__nic", t, "form", "multi")
		}
	}
	if r.typeNie != nil {
		t := *r.typeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__nie", t, "form", "multi")
		}
	}
	if r.typeNiew != nil {
		t := *r.typeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__niew", t, "form", "multi")
		}
	}
	if r.typeNire != nil {
		t := *r.typeNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__nire", t, "form", "multi")
		}
	}
	if r.typeNisw != nil {
		t := *r.typeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__nisw", t, "form", "multi")
		}
	}
	if r.typeNre != nil {
		t := *r.typeNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__nre", t, "form", "multi")
		}
	}
	if r.typeRe != nil {
		t := *r.typeRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__re", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasRelationshipsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasRelationshipsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsNotesCreateExecute(r)
}

/*
ExtrasRelationshipsNotesCreate Method for ExtrasRelationshipsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsNotesCreate(ctx context.Context, id string) ApiExtrasRelationshipsNotesCreateRequest {
	return ApiExtrasRelationshipsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasRelationshipsNotesCreateExecute(r ApiExtrasRelationshipsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasRelationshipsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasRelationshipsNotesListRequest) Limit(limit int32) ApiExtrasRelationshipsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasRelationshipsNotesListRequest) Offset(offset int32) ApiExtrasRelationshipsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasRelationshipsNotesListRequest) Depth(depth int32) ApiExtrasRelationshipsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasRelationshipsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsNotesListExecute(r)
}

/*
ExtrasRelationshipsNotesList Method for ExtrasRelationshipsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsNotesList(ctx context.Context, id string) ApiExtrasRelationshipsNotesListRequest {
	return ApiExtrasRelationshipsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasRelationshipsNotesListExecute(r ApiExtrasRelationshipsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedRelationshipRequest *PatchedRelationshipRequest
}

func (r ApiExtrasRelationshipsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipsPartialUpdateRequest) PatchedRelationshipRequest(patchedRelationshipRequest PatchedRelationshipRequest) ApiExtrasRelationshipsPartialUpdateRequest {
	r.patchedRelationshipRequest = &patchedRelationshipRequest
	return r
}

func (r ApiExtrasRelationshipsPartialUpdateRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsPartialUpdateExecute(r)
}

/*
ExtrasRelationshipsPartialUpdate Method for ExtrasRelationshipsPartialUpdate

Partial update a relationship object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsPartialUpdate(ctx context.Context, id string) ApiExtrasRelationshipsPartialUpdateRequest {
	return ApiExtrasRelationshipsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasAPIService) ExtrasRelationshipsPartialUpdateExecute(r ApiExtrasRelationshipsPartialUpdateRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRelationshipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasRelationshipsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasRelationshipsRetrieveRequest) Depth(depth int32) ApiExtrasRelationshipsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasRelationshipsRetrieveRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsRetrieveExecute(r)
}

/*
ExtrasRelationshipsRetrieve Method for ExtrasRelationshipsRetrieve

Retrieve a relationship object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsRetrieve(ctx context.Context, id string) ApiExtrasRelationshipsRetrieveRequest {
	return ApiExtrasRelationshipsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasAPIService) ExtrasRelationshipsRetrieveExecute(r ApiExtrasRelationshipsRetrieveRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	relationshipRequest *RelationshipRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRelationshipsUpdateRequest) RelationshipRequest(relationshipRequest RelationshipRequest) ApiExtrasRelationshipsUpdateRequest {
	r.relationshipRequest = &relationshipRequest
	return r
}

func (r ApiExtrasRelationshipsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRelationshipsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRelationshipsUpdateRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsUpdateExecute(r)
}

/*
ExtrasRelationshipsUpdate Method for ExtrasRelationshipsUpdate

Update a relationship object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRelationshipsUpdate(ctx context.Context, id string) ApiExtrasRelationshipsUpdateRequest {
	return ApiExtrasRelationshipsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasAPIService) ExtrasRelationshipsUpdateExecute(r ApiExtrasRelationshipsUpdateRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRelationshipsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationshipRequest == nil {
		return localVarReturnValue, nil, reportError("relationshipRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationshipRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRolesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRolesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasRolesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasRolesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRolesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRolesBulkDestroyExecute(r)
}

/*
ExtrasRolesBulkDestroy Method for ExtrasRolesBulkDestroy

Destroy a list of role objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRolesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasRolesBulkDestroy(ctx context.Context) ApiExtrasRolesBulkDestroyRequest {
	return ApiExtrasRolesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasRolesBulkDestroyExecute(r ApiExtrasRolesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRolesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableRoleRequest *[]PatchedBulkWritableRoleRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRolesBulkPartialUpdateRequest) PatchedBulkWritableRoleRequest(patchedBulkWritableRoleRequest []PatchedBulkWritableRoleRequest) ApiExtrasRolesBulkPartialUpdateRequest {
	r.patchedBulkWritableRoleRequest = &patchedBulkWritableRoleRequest
	return r
}

func (r ApiExtrasRolesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRolesBulkPartialUpdateRequest) Execute() ([]Role, *http.Response, error) {
	return r.ApiService.ExtrasRolesBulkPartialUpdateExecute(r)
}

/*
ExtrasRolesBulkPartialUpdate Method for ExtrasRolesBulkPartialUpdate

Partial update a list of role objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRolesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRolesBulkPartialUpdate(ctx context.Context) ApiExtrasRolesBulkPartialUpdateRequest {
	return ApiExtrasRolesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Role
func (a *ExtrasAPIService) ExtrasRolesBulkPartialUpdateExecute(r ApiExtrasRolesBulkPartialUpdateRequest) ([]Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableRoleRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableRoleRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRolesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableRoleRequest *[]BulkWritableRoleRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRolesBulkUpdateRequest) BulkWritableRoleRequest(bulkWritableRoleRequest []BulkWritableRoleRequest) ApiExtrasRolesBulkUpdateRequest {
	r.bulkWritableRoleRequest = &bulkWritableRoleRequest
	return r
}

func (r ApiExtrasRolesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRolesBulkUpdateRequest) Execute() ([]Role, *http.Response, error) {
	return r.ApiService.ExtrasRolesBulkUpdateExecute(r)
}

/*
ExtrasRolesBulkUpdate Method for ExtrasRolesBulkUpdate

Update a list of role objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRolesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRolesBulkUpdate(ctx context.Context) ApiExtrasRolesBulkUpdateRequest {
	return ApiExtrasRolesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Role
func (a *ExtrasAPIService) ExtrasRolesBulkUpdateExecute(r ApiExtrasRolesBulkUpdateRequest) ([]Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableRoleRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableRoleRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRolesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	roleRequest *RoleRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRolesCreateRequest) RoleRequest(roleRequest RoleRequest) ApiExtrasRolesCreateRequest {
	r.roleRequest = &roleRequest
	return r
}

func (r ApiExtrasRolesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRolesCreateRequest) Execute() (*Role, *http.Response, error) {
	return r.ApiService.ExtrasRolesCreateExecute(r)
}

/*
ExtrasRolesCreate Method for ExtrasRolesCreate

Create one or more role objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRolesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasRolesCreate(ctx context.Context) ApiExtrasRolesCreateRequest {
	return ApiExtrasRolesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Role
func (a *ExtrasAPIService) ExtrasRolesCreateExecute(r ApiExtrasRolesCreateRequest) (*Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.roleRequest == nil {
		return localVarReturnValue, nil, reportError("roleRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRolesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRolesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRolesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRolesDestroyExecute(r)
}

/*
ExtrasRolesDestroy Method for ExtrasRolesDestroy

Destroy a role object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this role.
 @return ApiExtrasRolesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasRolesDestroy(ctx context.Context, id string) ApiExtrasRolesDestroyRequest {
	return ApiExtrasRolesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasRolesDestroyExecute(r ApiExtrasRolesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRolesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	color *[]string
	colorIc *[]string
	colorIe *[]string
	colorIew *[]string
	colorIre *[]string
	colorIsw *[]string
	colorN *[]string
	colorNic *[]string
	colorNie *[]string
	colorNiew *[]string
	colorNire *[]string
	colorNisw *[]string
	colorNre *[]string
	colorRe *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentTypes *[]int32
	contentTypesIc *[]int32
	contentTypesIe *[]int32
	contentTypesIew *[]int32
	contentTypesIre *[]int32
	contentTypesIsw *[]int32
	contentTypesN *[]int32
	contentTypesNic *[]int32
	contentTypesNie *[]int32
	contentTypesNiew *[]int32
	contentTypesNire *[]int32
	contentTypesNisw *[]int32
	contentTypesNre *[]int32
	contentTypesRe *[]int32
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightIsnull *bool
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
	depth *int32
}

func (r ApiExtrasRolesListRequest) Color(color []string) ApiExtrasRolesListRequest {
	r.color = &color
	return r
}

func (r ApiExtrasRolesListRequest) ColorIc(colorIc []string) ApiExtrasRolesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiExtrasRolesListRequest) ColorIe(colorIe []string) ApiExtrasRolesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiExtrasRolesListRequest) ColorIew(colorIew []string) ApiExtrasRolesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiExtrasRolesListRequest) ColorIre(colorIre []string) ApiExtrasRolesListRequest {
	r.colorIre = &colorIre
	return r
}

func (r ApiExtrasRolesListRequest) ColorIsw(colorIsw []string) ApiExtrasRolesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiExtrasRolesListRequest) ColorN(colorN []string) ApiExtrasRolesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiExtrasRolesListRequest) ColorNic(colorNic []string) ApiExtrasRolesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiExtrasRolesListRequest) ColorNie(colorNie []string) ApiExtrasRolesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiExtrasRolesListRequest) ColorNiew(colorNiew []string) ApiExtrasRolesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiExtrasRolesListRequest) ColorNire(colorNire []string) ApiExtrasRolesListRequest {
	r.colorNire = &colorNire
	return r
}

func (r ApiExtrasRolesListRequest) ColorNisw(colorNisw []string) ApiExtrasRolesListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiExtrasRolesListRequest) ColorNre(colorNre []string) ApiExtrasRolesListRequest {
	r.colorNre = &colorNre
	return r
}

func (r ApiExtrasRolesListRequest) ColorRe(colorRe []string) ApiExtrasRolesListRequest {
	r.colorRe = &colorRe
	return r
}

func (r ApiExtrasRolesListRequest) Contacts(contacts []string) ApiExtrasRolesListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasRolesListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasRolesListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasRolesListRequest) ContactsN(contactsN string) ApiExtrasRolesListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypes(contentTypes []int32) ApiExtrasRolesListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesIc(contentTypesIc []int32) ApiExtrasRolesListRequest {
	r.contentTypesIc = &contentTypesIc
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesIe(contentTypesIe []int32) ApiExtrasRolesListRequest {
	r.contentTypesIe = &contentTypesIe
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesIew(contentTypesIew []int32) ApiExtrasRolesListRequest {
	r.contentTypesIew = &contentTypesIew
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesIre(contentTypesIre []int32) ApiExtrasRolesListRequest {
	r.contentTypesIre = &contentTypesIre
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesIsw(contentTypesIsw []int32) ApiExtrasRolesListRequest {
	r.contentTypesIsw = &contentTypesIsw
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasRolesListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesNic(contentTypesNic []int32) ApiExtrasRolesListRequest {
	r.contentTypesNic = &contentTypesNic
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesNie(contentTypesNie []int32) ApiExtrasRolesListRequest {
	r.contentTypesNie = &contentTypesNie
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesNiew(contentTypesNiew []int32) ApiExtrasRolesListRequest {
	r.contentTypesNiew = &contentTypesNiew
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesNire(contentTypesNire []int32) ApiExtrasRolesListRequest {
	r.contentTypesNire = &contentTypesNire
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesNisw(contentTypesNisw []int32) ApiExtrasRolesListRequest {
	r.contentTypesNisw = &contentTypesNisw
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesNre(contentTypesNre []int32) ApiExtrasRolesListRequest {
	r.contentTypesNre = &contentTypesNre
	return r
}

func (r ApiExtrasRolesListRequest) ContentTypesRe(contentTypesRe []int32) ApiExtrasRolesListRequest {
	r.contentTypesRe = &contentTypesRe
	return r
}

func (r ApiExtrasRolesListRequest) Created(created []time.Time) ApiExtrasRolesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasRolesListRequest) CreatedGt(createdGt []time.Time) ApiExtrasRolesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasRolesListRequest) CreatedGte(createdGte []time.Time) ApiExtrasRolesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasRolesListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasRolesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasRolesListRequest) CreatedLt(createdLt []time.Time) ApiExtrasRolesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasRolesListRequest) CreatedLte(createdLte []time.Time) ApiExtrasRolesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasRolesListRequest) CreatedN(createdN []time.Time) ApiExtrasRolesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasRolesListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasRolesListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasRolesListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasRolesListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasRolesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasRolesListRequest) Id(id []string) ApiExtrasRolesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasRolesListRequest) IdIc(idIc []string) ApiExtrasRolesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasRolesListRequest) IdIe(idIe []string) ApiExtrasRolesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasRolesListRequest) IdIew(idIew []string) ApiExtrasRolesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasRolesListRequest) IdIre(idIre []string) ApiExtrasRolesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasRolesListRequest) IdIsw(idIsw []string) ApiExtrasRolesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasRolesListRequest) IdN(idN []string) ApiExtrasRolesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasRolesListRequest) IdNic(idNic []string) ApiExtrasRolesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasRolesListRequest) IdNie(idNie []string) ApiExtrasRolesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasRolesListRequest) IdNiew(idNiew []string) ApiExtrasRolesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasRolesListRequest) IdNire(idNire []string) ApiExtrasRolesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasRolesListRequest) IdNisw(idNisw []string) ApiExtrasRolesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasRolesListRequest) IdNre(idNre []string) ApiExtrasRolesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasRolesListRequest) IdRe(idRe []string) ApiExtrasRolesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasRolesListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasRolesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasRolesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasRolesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasRolesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasRolesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasRolesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasRolesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasRolesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasRolesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasRolesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasRolesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasRolesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasRolesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasRolesListRequest) Limit(limit int32) ApiExtrasRolesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasRolesListRequest) Name(name []string) ApiExtrasRolesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasRolesListRequest) NameIc(nameIc []string) ApiExtrasRolesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasRolesListRequest) NameIe(nameIe []string) ApiExtrasRolesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasRolesListRequest) NameIew(nameIew []string) ApiExtrasRolesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasRolesListRequest) NameIre(nameIre []string) ApiExtrasRolesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasRolesListRequest) NameIsw(nameIsw []string) ApiExtrasRolesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasRolesListRequest) NameN(nameN []string) ApiExtrasRolesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasRolesListRequest) NameNic(nameNic []string) ApiExtrasRolesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasRolesListRequest) NameNie(nameNie []string) ApiExtrasRolesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasRolesListRequest) NameNiew(nameNiew []string) ApiExtrasRolesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasRolesListRequest) NameNire(nameNire []string) ApiExtrasRolesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasRolesListRequest) NameNisw(nameNisw []string) ApiExtrasRolesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasRolesListRequest) NameNre(nameNre []string) ApiExtrasRolesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasRolesListRequest) NameRe(nameRe []string) ApiExtrasRolesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasRolesListRequest) Offset(offset int32) ApiExtrasRolesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasRolesListRequest) Q(q string) ApiExtrasRolesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasRolesListRequest) Sort(sort string) ApiExtrasRolesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasRolesListRequest) Teams(teams []string) ApiExtrasRolesListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasRolesListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasRolesListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasRolesListRequest) TeamsN(teamsN string) ApiExtrasRolesListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasRolesListRequest) Weight(weight []int32) ApiExtrasRolesListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasRolesListRequest) WeightGt(weightGt []int32) ApiExtrasRolesListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasRolesListRequest) WeightGte(weightGte []int32) ApiExtrasRolesListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasRolesListRequest) WeightIsnull(weightIsnull bool) ApiExtrasRolesListRequest {
	r.weightIsnull = &weightIsnull
	return r
}

func (r ApiExtrasRolesListRequest) WeightLt(weightLt []int32) ApiExtrasRolesListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasRolesListRequest) WeightLte(weightLte []int32) ApiExtrasRolesListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasRolesListRequest) WeightN(weightN []int32) ApiExtrasRolesListRequest {
	r.weightN = &weightN
	return r
}

// Serializer Depth
func (r ApiExtrasRolesListRequest) Depth(depth int32) ApiExtrasRolesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasRolesListRequest) Execute() (*PaginatedRoleList, *http.Response, error) {
	return r.ApiService.ExtrasRolesListExecute(r)
}

/*
ExtrasRolesList Method for ExtrasRolesList

Retrieve a list of role objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRolesListRequest
*/
func (a *ExtrasAPIService) ExtrasRolesList(ctx context.Context) ApiExtrasRolesListRequest {
	return ApiExtrasRolesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRoleList
func (a *ExtrasAPIService) ExtrasRolesListExecute(r ApiExtrasRolesListRequest) (*PaginatedRoleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "form", "multi")
		}
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "form", "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "form", "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "form", "multi")
		}
	}
	if r.colorIre != nil {
		t := *r.colorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ire", t, "form", "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "form", "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "form", "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "form", "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "form", "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "form", "multi")
		}
	}
	if r.colorNire != nil {
		t := *r.colorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nire", t, "form", "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "form", "multi")
		}
	}
	if r.colorNre != nil {
		t := *r.colorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nre", t, "form", "multi")
		}
	}
	if r.colorRe != nil {
		t := *r.colorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__re", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", t, "form", "multi")
		}
	}
	if r.contentTypesIc != nil {
		t := *r.contentTypesIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", t, "form", "multi")
		}
	}
	if r.contentTypesIe != nil {
		t := *r.contentTypesIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", t, "form", "multi")
		}
	}
	if r.contentTypesIew != nil {
		t := *r.contentTypesIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", t, "form", "multi")
		}
	}
	if r.contentTypesIre != nil {
		t := *r.contentTypesIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", t, "form", "multi")
		}
	}
	if r.contentTypesIsw != nil {
		t := *r.contentTypesIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", t, "form", "multi")
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", t, "form", "multi")
		}
	}
	if r.contentTypesNic != nil {
		t := *r.contentTypesNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", t, "form", "multi")
		}
	}
	if r.contentTypesNie != nil {
		t := *r.contentTypesNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", t, "form", "multi")
		}
	}
	if r.contentTypesNiew != nil {
		t := *r.contentTypesNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", t, "form", "multi")
		}
	}
	if r.contentTypesNire != nil {
		t := *r.contentTypesNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", t, "form", "multi")
		}
	}
	if r.contentTypesNisw != nil {
		t := *r.contentTypesNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", t, "form", "multi")
		}
	}
	if r.contentTypesNre != nil {
		t := *r.contentTypesNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", t, "form", "multi")
		}
	}
	if r.contentTypesRe != nil {
		t := *r.contentTypesRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "form", "multi")
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "form", "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "form", "multi")
		}
	}
	if r.weightIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight__isnull", r.weightIsnull, "form", "")
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "form", "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "form", "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRolesNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRolesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasRolesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasRolesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRolesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasRolesNotesCreateExecute(r)
}

/*
ExtrasRolesNotesCreate Method for ExtrasRolesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this role.
 @return ApiExtrasRolesNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasRolesNotesCreate(ctx context.Context, id string) ApiExtrasRolesNotesCreateRequest {
	return ApiExtrasRolesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasRolesNotesCreateExecute(r ApiExtrasRolesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRolesNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasRolesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasRolesNotesListRequest) Limit(limit int32) ApiExtrasRolesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasRolesNotesListRequest) Offset(offset int32) ApiExtrasRolesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasRolesNotesListRequest) Depth(depth int32) ApiExtrasRolesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasRolesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasRolesNotesListExecute(r)
}

/*
ExtrasRolesNotesList Method for ExtrasRolesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this role.
 @return ApiExtrasRolesNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasRolesNotesList(ctx context.Context, id string) ApiExtrasRolesNotesListRequest {
	return ApiExtrasRolesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasRolesNotesListExecute(r ApiExtrasRolesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRolesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedRoleRequest *PatchedRoleRequest
}

func (r ApiExtrasRolesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRolesPartialUpdateRequest) PatchedRoleRequest(patchedRoleRequest PatchedRoleRequest) ApiExtrasRolesPartialUpdateRequest {
	r.patchedRoleRequest = &patchedRoleRequest
	return r
}

func (r ApiExtrasRolesPartialUpdateRequest) Execute() (*Role, *http.Response, error) {
	return r.ApiService.ExtrasRolesPartialUpdateExecute(r)
}

/*
ExtrasRolesPartialUpdate Method for ExtrasRolesPartialUpdate

Partial update a role object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this role.
 @return ApiExtrasRolesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRolesPartialUpdate(ctx context.Context, id string) ApiExtrasRolesPartialUpdateRequest {
	return ApiExtrasRolesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Role
func (a *ExtrasAPIService) ExtrasRolesPartialUpdateExecute(r ApiExtrasRolesPartialUpdateRequest) (*Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRolesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasRolesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasRolesRetrieveRequest) Depth(depth int32) ApiExtrasRolesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasRolesRetrieveRequest) Execute() (*Role, *http.Response, error) {
	return r.ApiService.ExtrasRolesRetrieveExecute(r)
}

/*
ExtrasRolesRetrieve Method for ExtrasRolesRetrieve

Retrieve a role object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this role.
 @return ApiExtrasRolesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasRolesRetrieve(ctx context.Context, id string) ApiExtrasRolesRetrieveRequest {
	return ApiExtrasRolesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Role
func (a *ExtrasAPIService) ExtrasRolesRetrieveExecute(r ApiExtrasRolesRetrieveRequest) (*Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRolesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	roleRequest *RoleRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasRolesUpdateRequest) RoleRequest(roleRequest RoleRequest) ApiExtrasRolesUpdateRequest {
	r.roleRequest = &roleRequest
	return r
}

func (r ApiExtrasRolesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasRolesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasRolesUpdateRequest) Execute() (*Role, *http.Response, error) {
	return r.ApiService.ExtrasRolesUpdateExecute(r)
}

/*
ExtrasRolesUpdate Method for ExtrasRolesUpdate

Update a role object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this role.
 @return ApiExtrasRolesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasRolesUpdate(ctx context.Context, id string) ApiExtrasRolesUpdateRequest {
	return ApiExtrasRolesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Role
func (a *ExtrasAPIService) ExtrasRolesUpdateExecute(r ApiExtrasRolesUpdateRequest) (*Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasRolesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.roleRequest == nil {
		return localVarReturnValue, nil, reportError("roleRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedViewsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSavedViewsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasSavedViewsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasSavedViewsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSavedViewsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSavedViewsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSavedViewsBulkDestroyExecute(r)
}

/*
ExtrasSavedViewsBulkDestroy Method for ExtrasSavedViewsBulkDestroy

Destroy a list of saved view objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSavedViewsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSavedViewsBulkDestroy(ctx context.Context) ApiExtrasSavedViewsBulkDestroyRequest {
	return ApiExtrasSavedViewsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSavedViewsBulkDestroyExecute(r ApiExtrasSavedViewsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedViewsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/saved-views/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSavedViewsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableSavedViewRequest *[]PatchedBulkWritableSavedViewRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSavedViewsBulkPartialUpdateRequest) PatchedBulkWritableSavedViewRequest(patchedBulkWritableSavedViewRequest []PatchedBulkWritableSavedViewRequest) ApiExtrasSavedViewsBulkPartialUpdateRequest {
	r.patchedBulkWritableSavedViewRequest = &patchedBulkWritableSavedViewRequest
	return r
}

func (r ApiExtrasSavedViewsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSavedViewsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSavedViewsBulkPartialUpdateRequest) Execute() ([]SavedView, *http.Response, error) {
	return r.ApiService.ExtrasSavedViewsBulkPartialUpdateExecute(r)
}

/*
ExtrasSavedViewsBulkPartialUpdate Method for ExtrasSavedViewsBulkPartialUpdate

Partial update a list of saved view objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSavedViewsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedViewsBulkPartialUpdate(ctx context.Context) ApiExtrasSavedViewsBulkPartialUpdateRequest {
	return ApiExtrasSavedViewsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SavedView
func (a *ExtrasAPIService) ExtrasSavedViewsBulkPartialUpdateExecute(r ApiExtrasSavedViewsBulkPartialUpdateRequest) ([]SavedView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SavedView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedViewsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/saved-views/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableSavedViewRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableSavedViewRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableSavedViewRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedViewsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableSavedViewRequest *[]BulkWritableSavedViewRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSavedViewsBulkUpdateRequest) BulkWritableSavedViewRequest(bulkWritableSavedViewRequest []BulkWritableSavedViewRequest) ApiExtrasSavedViewsBulkUpdateRequest {
	r.bulkWritableSavedViewRequest = &bulkWritableSavedViewRequest
	return r
}

func (r ApiExtrasSavedViewsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSavedViewsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSavedViewsBulkUpdateRequest) Execute() ([]SavedView, *http.Response, error) {
	return r.ApiService.ExtrasSavedViewsBulkUpdateExecute(r)
}

/*
ExtrasSavedViewsBulkUpdate Method for ExtrasSavedViewsBulkUpdate

Update a list of saved view objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSavedViewsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedViewsBulkUpdate(ctx context.Context) ApiExtrasSavedViewsBulkUpdateRequest {
	return ApiExtrasSavedViewsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SavedView
func (a *ExtrasAPIService) ExtrasSavedViewsBulkUpdateExecute(r ApiExtrasSavedViewsBulkUpdateRequest) ([]SavedView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SavedView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedViewsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/saved-views/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableSavedViewRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableSavedViewRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableSavedViewRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedViewsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	savedViewRequest *SavedViewRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSavedViewsCreateRequest) SavedViewRequest(savedViewRequest SavedViewRequest) ApiExtrasSavedViewsCreateRequest {
	r.savedViewRequest = &savedViewRequest
	return r
}

func (r ApiExtrasSavedViewsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSavedViewsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSavedViewsCreateRequest) Execute() (*SavedView, *http.Response, error) {
	return r.ApiService.ExtrasSavedViewsCreateExecute(r)
}

/*
ExtrasSavedViewsCreate Method for ExtrasSavedViewsCreate

Create one or more saved view objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSavedViewsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedViewsCreate(ctx context.Context) ApiExtrasSavedViewsCreateRequest {
	return ApiExtrasSavedViewsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SavedView
func (a *ExtrasAPIService) ExtrasSavedViewsCreateExecute(r ApiExtrasSavedViewsCreateRequest) (*SavedView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SavedView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedViewsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/saved-views/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.savedViewRequest == nil {
		return localVarReturnValue, nil, reportError("savedViewRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.savedViewRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedViewsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSavedViewsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSavedViewsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSavedViewsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSavedViewsDestroyExecute(r)
}

/*
ExtrasSavedViewsDestroy Method for ExtrasSavedViewsDestroy

Destroy a saved view object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this saved view.
 @return ApiExtrasSavedViewsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSavedViewsDestroy(ctx context.Context, id string) ApiExtrasSavedViewsDestroyRequest {
	return ApiExtrasSavedViewsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSavedViewsDestroyExecute(r ApiExtrasSavedViewsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedViewsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/saved-views/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSavedViewsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	isGlobalDefault *bool
	isShared *bool
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	owner *[]string
	ownerN *[]string
	q *string
	sort *string
	view *[]string
	viewIc *[]string
	viewIe *[]string
	viewIew *[]string
	viewIre *[]string
	viewIsw *[]string
	viewN *[]string
	viewNic *[]string
	viewNie *[]string
	viewNiew *[]string
	viewNire *[]string
	viewNisw *[]string
	viewNre *[]string
	viewRe *[]string
	depth *int32
}

func (r ApiExtrasSavedViewsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSavedViewsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasSavedViewsListRequest) Id(id []string) ApiExtrasSavedViewsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdIc(idIc []string) ApiExtrasSavedViewsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdIe(idIe []string) ApiExtrasSavedViewsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdIew(idIew []string) ApiExtrasSavedViewsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdIre(idIre []string) ApiExtrasSavedViewsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdIsw(idIsw []string) ApiExtrasSavedViewsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdN(idN []string) ApiExtrasSavedViewsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdNic(idNic []string) ApiExtrasSavedViewsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdNie(idNie []string) ApiExtrasSavedViewsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdNiew(idNiew []string) ApiExtrasSavedViewsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdNire(idNire []string) ApiExtrasSavedViewsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdNisw(idNisw []string) ApiExtrasSavedViewsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdNre(idNre []string) ApiExtrasSavedViewsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasSavedViewsListRequest) IdRe(idRe []string) ApiExtrasSavedViewsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasSavedViewsListRequest) IsGlobalDefault(isGlobalDefault bool) ApiExtrasSavedViewsListRequest {
	r.isGlobalDefault = &isGlobalDefault
	return r
}

func (r ApiExtrasSavedViewsListRequest) IsShared(isShared bool) ApiExtrasSavedViewsListRequest {
	r.isShared = &isShared
	return r
}

// Number of results to return per page.
func (r ApiExtrasSavedViewsListRequest) Limit(limit int32) ApiExtrasSavedViewsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasSavedViewsListRequest) Name(name []string) ApiExtrasSavedViewsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameIc(nameIc []string) ApiExtrasSavedViewsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameIe(nameIe []string) ApiExtrasSavedViewsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameIew(nameIew []string) ApiExtrasSavedViewsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameIre(nameIre []string) ApiExtrasSavedViewsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameIsw(nameIsw []string) ApiExtrasSavedViewsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameN(nameN []string) ApiExtrasSavedViewsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameNic(nameNic []string) ApiExtrasSavedViewsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameNie(nameNie []string) ApiExtrasSavedViewsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameNiew(nameNiew []string) ApiExtrasSavedViewsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameNire(nameNire []string) ApiExtrasSavedViewsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameNisw(nameNisw []string) ApiExtrasSavedViewsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameNre(nameNre []string) ApiExtrasSavedViewsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasSavedViewsListRequest) NameRe(nameRe []string) ApiExtrasSavedViewsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSavedViewsListRequest) Offset(offset int32) ApiExtrasSavedViewsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasSavedViewsListRequest) Owner(owner []string) ApiExtrasSavedViewsListRequest {
	r.owner = &owner
	return r
}

func (r ApiExtrasSavedViewsListRequest) OwnerN(ownerN []string) ApiExtrasSavedViewsListRequest {
	r.ownerN = &ownerN
	return r
}

// Search
func (r ApiExtrasSavedViewsListRequest) Q(q string) ApiExtrasSavedViewsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasSavedViewsListRequest) Sort(sort string) ApiExtrasSavedViewsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasSavedViewsListRequest) View(view []string) ApiExtrasSavedViewsListRequest {
	r.view = &view
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewIc(viewIc []string) ApiExtrasSavedViewsListRequest {
	r.viewIc = &viewIc
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewIe(viewIe []string) ApiExtrasSavedViewsListRequest {
	r.viewIe = &viewIe
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewIew(viewIew []string) ApiExtrasSavedViewsListRequest {
	r.viewIew = &viewIew
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewIre(viewIre []string) ApiExtrasSavedViewsListRequest {
	r.viewIre = &viewIre
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewIsw(viewIsw []string) ApiExtrasSavedViewsListRequest {
	r.viewIsw = &viewIsw
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewN(viewN []string) ApiExtrasSavedViewsListRequest {
	r.viewN = &viewN
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewNic(viewNic []string) ApiExtrasSavedViewsListRequest {
	r.viewNic = &viewNic
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewNie(viewNie []string) ApiExtrasSavedViewsListRequest {
	r.viewNie = &viewNie
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewNiew(viewNiew []string) ApiExtrasSavedViewsListRequest {
	r.viewNiew = &viewNiew
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewNire(viewNire []string) ApiExtrasSavedViewsListRequest {
	r.viewNire = &viewNire
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewNisw(viewNisw []string) ApiExtrasSavedViewsListRequest {
	r.viewNisw = &viewNisw
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewNre(viewNre []string) ApiExtrasSavedViewsListRequest {
	r.viewNre = &viewNre
	return r
}

func (r ApiExtrasSavedViewsListRequest) ViewRe(viewRe []string) ApiExtrasSavedViewsListRequest {
	r.viewRe = &viewRe
	return r
}

// Serializer Depth
func (r ApiExtrasSavedViewsListRequest) Depth(depth int32) ApiExtrasSavedViewsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSavedViewsListRequest) Execute() (*PaginatedSavedViewList, *http.Response, error) {
	return r.ApiService.ExtrasSavedViewsListExecute(r)
}

/*
ExtrasSavedViewsList Method for ExtrasSavedViewsList

Retrieve a list of saved view objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSavedViewsListRequest
*/
func (a *ExtrasAPIService) ExtrasSavedViewsList(ctx context.Context) ApiExtrasSavedViewsListRequest {
	return ApiExtrasSavedViewsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedSavedViewList
func (a *ExtrasAPIService) ExtrasSavedViewsListExecute(r ApiExtrasSavedViewsListRequest) (*PaginatedSavedViewList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedSavedViewList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedViewsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/saved-views/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.isGlobalDefault != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_global_default", r.isGlobalDefault, "form", "")
	}
	if r.isShared != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_shared", r.isShared, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.owner != nil {
		t := *r.owner
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner", t, "form", "multi")
		}
	}
	if r.ownerN != nil {
		t := *r.ownerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "owner__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "owner__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.view != nil {
		t := *r.view
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view", t, "form", "multi")
		}
	}
	if r.viewIc != nil {
		t := *r.viewIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__ic", t, "form", "multi")
		}
	}
	if r.viewIe != nil {
		t := *r.viewIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__ie", t, "form", "multi")
		}
	}
	if r.viewIew != nil {
		t := *r.viewIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__iew", t, "form", "multi")
		}
	}
	if r.viewIre != nil {
		t := *r.viewIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__ire", t, "form", "multi")
		}
	}
	if r.viewIsw != nil {
		t := *r.viewIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__isw", t, "form", "multi")
		}
	}
	if r.viewN != nil {
		t := *r.viewN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__n", t, "form", "multi")
		}
	}
	if r.viewNic != nil {
		t := *r.viewNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__nic", t, "form", "multi")
		}
	}
	if r.viewNie != nil {
		t := *r.viewNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__nie", t, "form", "multi")
		}
	}
	if r.viewNiew != nil {
		t := *r.viewNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__niew", t, "form", "multi")
		}
	}
	if r.viewNire != nil {
		t := *r.viewNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__nire", t, "form", "multi")
		}
	}
	if r.viewNisw != nil {
		t := *r.viewNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__nisw", t, "form", "multi")
		}
	}
	if r.viewNre != nil {
		t := *r.viewNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__nre", t, "form", "multi")
		}
	}
	if r.viewRe != nil {
		t := *r.viewRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view__re", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedViewsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedSavedViewRequest *PatchedSavedViewRequest
}

func (r ApiExtrasSavedViewsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSavedViewsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSavedViewsPartialUpdateRequest) PatchedSavedViewRequest(patchedSavedViewRequest PatchedSavedViewRequest) ApiExtrasSavedViewsPartialUpdateRequest {
	r.patchedSavedViewRequest = &patchedSavedViewRequest
	return r
}

func (r ApiExtrasSavedViewsPartialUpdateRequest) Execute() (*SavedView, *http.Response, error) {
	return r.ApiService.ExtrasSavedViewsPartialUpdateExecute(r)
}

/*
ExtrasSavedViewsPartialUpdate Method for ExtrasSavedViewsPartialUpdate

Partial update a saved view object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this saved view.
 @return ApiExtrasSavedViewsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedViewsPartialUpdate(ctx context.Context, id string) ApiExtrasSavedViewsPartialUpdateRequest {
	return ApiExtrasSavedViewsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SavedView
func (a *ExtrasAPIService) ExtrasSavedViewsPartialUpdateExecute(r ApiExtrasSavedViewsPartialUpdateRequest) (*SavedView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SavedView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedViewsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/saved-views/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSavedViewRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedViewsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasSavedViewsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSavedViewsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasSavedViewsRetrieveRequest) Depth(depth int32) ApiExtrasSavedViewsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSavedViewsRetrieveRequest) Execute() (*SavedView, *http.Response, error) {
	return r.ApiService.ExtrasSavedViewsRetrieveExecute(r)
}

/*
ExtrasSavedViewsRetrieve Method for ExtrasSavedViewsRetrieve

Retrieve a saved view object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this saved view.
 @return ApiExtrasSavedViewsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasSavedViewsRetrieve(ctx context.Context, id string) ApiExtrasSavedViewsRetrieveRequest {
	return ApiExtrasSavedViewsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SavedView
func (a *ExtrasAPIService) ExtrasSavedViewsRetrieveExecute(r ApiExtrasSavedViewsRetrieveRequest) (*SavedView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SavedView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedViewsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/saved-views/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedViewsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	savedViewRequest *SavedViewRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSavedViewsUpdateRequest) SavedViewRequest(savedViewRequest SavedViewRequest) ApiExtrasSavedViewsUpdateRequest {
	r.savedViewRequest = &savedViewRequest
	return r
}

func (r ApiExtrasSavedViewsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSavedViewsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSavedViewsUpdateRequest) Execute() (*SavedView, *http.Response, error) {
	return r.ApiService.ExtrasSavedViewsUpdateExecute(r)
}

/*
ExtrasSavedViewsUpdate Method for ExtrasSavedViewsUpdate

Update a saved view object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this saved view.
 @return ApiExtrasSavedViewsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedViewsUpdate(ctx context.Context, id string) ApiExtrasSavedViewsUpdateRequest {
	return ApiExtrasSavedViewsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SavedView
func (a *ExtrasAPIService) ExtrasSavedViewsUpdateExecute(r ApiExtrasSavedViewsUpdateRequest) (*SavedView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SavedView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedViewsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/saved-views/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.savedViewRequest == nil {
		return localVarReturnValue, nil, reportError("savedViewRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.savedViewRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsApproveCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	force *bool
	format *CircuitsCircuitTerminationsListFormatParameter
}

// force execution even if start time has passed
func (r ApiExtrasScheduledJobsApproveCreateRequest) Force(force bool) ApiExtrasScheduledJobsApproveCreateRequest {
	r.force = &force
	return r
}

func (r ApiExtrasScheduledJobsApproveCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasScheduledJobsApproveCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasScheduledJobsApproveCreateRequest) Execute() (*ScheduledJob, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsApproveCreateExecute(r)
}

/*
ExtrasScheduledJobsApproveCreate Method for ExtrasScheduledJobsApproveCreate

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this scheduled job.
 @return ApiExtrasScheduledJobsApproveCreateRequest
*/
func (a *ExtrasAPIService) ExtrasScheduledJobsApproveCreate(ctx context.Context, id string) ApiExtrasScheduledJobsApproveCreateRequest {
	return ApiExtrasScheduledJobsApproveCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduledJob
func (a *ExtrasAPIService) ExtrasScheduledJobsApproveCreateExecute(r ApiExtrasScheduledJobsApproveCreateRequest) (*ScheduledJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScheduledJobsApproveCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/{id}/approve/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsDenyCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasScheduledJobsDenyCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasScheduledJobsDenyCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasScheduledJobsDenyCreateRequest) Execute() (*ScheduledJob, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsDenyCreateExecute(r)
}

/*
ExtrasScheduledJobsDenyCreate Method for ExtrasScheduledJobsDenyCreate

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this scheduled job.
 @return ApiExtrasScheduledJobsDenyCreateRequest
*/
func (a *ExtrasAPIService) ExtrasScheduledJobsDenyCreate(ctx context.Context, id string) ApiExtrasScheduledJobsDenyCreateRequest {
	return ApiExtrasScheduledJobsDenyCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduledJob
func (a *ExtrasAPIService) ExtrasScheduledJobsDenyCreateExecute(r ApiExtrasScheduledJobsDenyCreateRequest) (*ScheduledJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScheduledJobsDenyCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/{id}/deny/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsDryRunCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasScheduledJobsDryRunCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasScheduledJobsDryRunCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasScheduledJobsDryRunCreateRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsDryRunCreateExecute(r)
}

/*
ExtrasScheduledJobsDryRunCreate Method for ExtrasScheduledJobsDryRunCreate

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this scheduled job.
 @return ApiExtrasScheduledJobsDryRunCreateRequest
*/
func (a *ExtrasAPIService) ExtrasScheduledJobsDryRunCreate(ctx context.Context, id string) ApiExtrasScheduledJobsDryRunCreateRequest {
	return ApiExtrasScheduledJobsDryRunCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasAPIService) ExtrasScheduledJobsDryRunCreateExecute(r ApiExtrasScheduledJobsDryRunCreateRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScheduledJobsDryRunCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/{id}/dry-run/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	jobModel *[]string
	jobModelIsnull *bool
	jobModelN *[]string
	jobModelId *[]*string
	jobModelIdIsnull *bool
	jobModelIdN *[]*string
	lastRunAt *[]time.Time
	lastRunAtGt *[]time.Time
	lastRunAtGte *[]time.Time
	lastRunAtIsnull *bool
	lastRunAtLt *[]time.Time
	lastRunAtLte *[]time.Time
	lastRunAtN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	startTime *[]time.Time
	startTimeGt *[]time.Time
	startTimeGte *[]time.Time
	startTimeLt *[]time.Time
	startTimeLte *[]time.Time
	startTimeN *[]time.Time
	timeZone *[]DcimLocationsListTimeZoneParameterInner
	timeZoneIc *[]DcimLocationsListTimeZoneParameterInner
	timeZoneIe *[]DcimLocationsListTimeZoneParameterInner
	timeZoneIew *[]DcimLocationsListTimeZoneParameterInner
	timeZoneIre *[]DcimLocationsListTimeZoneParameterInner
	timeZoneIsw *[]DcimLocationsListTimeZoneParameterInner
	timeZoneN *[]DcimLocationsListTimeZoneParameterInner
	timeZoneNic *[]DcimLocationsListTimeZoneParameterInner
	timeZoneNie *[]DcimLocationsListTimeZoneParameterInner
	timeZoneNiew *[]DcimLocationsListTimeZoneParameterInner
	timeZoneNire *[]DcimLocationsListTimeZoneParameterInner
	timeZoneNisw *[]DcimLocationsListTimeZoneParameterInner
	timeZoneNre *[]DcimLocationsListTimeZoneParameterInner
	timeZoneRe *[]DcimLocationsListTimeZoneParameterInner
	totalRunCount *[]int32
	totalRunCountGt *[]int32
	totalRunCountGte *[]int32
	totalRunCountLt *[]int32
	totalRunCountLte *[]int32
	totalRunCountN *[]int32
	depth *int32
}

func (r ApiExtrasScheduledJobsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasScheduledJobsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasScheduledJobsListRequest) Id(id []string) ApiExtrasScheduledJobsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIc(idIc []string) ApiExtrasScheduledJobsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIe(idIe []string) ApiExtrasScheduledJobsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIew(idIew []string) ApiExtrasScheduledJobsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIre(idIre []string) ApiExtrasScheduledJobsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIsw(idIsw []string) ApiExtrasScheduledJobsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdN(idN []string) ApiExtrasScheduledJobsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNic(idNic []string) ApiExtrasScheduledJobsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNie(idNie []string) ApiExtrasScheduledJobsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNiew(idNiew []string) ApiExtrasScheduledJobsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNire(idNire []string) ApiExtrasScheduledJobsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNisw(idNisw []string) ApiExtrasScheduledJobsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNre(idNre []string) ApiExtrasScheduledJobsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdRe(idRe []string) ApiExtrasScheduledJobsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasScheduledJobsListRequest) JobModel(jobModel []string) ApiExtrasScheduledJobsListRequest {
	r.jobModel = &jobModel
	return r
}

// Job (name or ID) is null
func (r ApiExtrasScheduledJobsListRequest) JobModelIsnull(jobModelIsnull bool) ApiExtrasScheduledJobsListRequest {
	r.jobModelIsnull = &jobModelIsnull
	return r
}

func (r ApiExtrasScheduledJobsListRequest) JobModelN(jobModelN []string) ApiExtrasScheduledJobsListRequest {
	r.jobModelN = &jobModelN
	return r
}

// Job (ID) - Deprecated (use job_model filter)
func (r ApiExtrasScheduledJobsListRequest) JobModelId(jobModelId []*string) ApiExtrasScheduledJobsListRequest {
	r.jobModelId = &jobModelId
	return r
}

// Job (ID) - Deprecated (use job_model filter) is null
func (r ApiExtrasScheduledJobsListRequest) JobModelIdIsnull(jobModelIdIsnull bool) ApiExtrasScheduledJobsListRequest {
	r.jobModelIdIsnull = &jobModelIdIsnull
	return r
}

// Exclude Job (ID) - Deprecated (use job_model filter)
func (r ApiExtrasScheduledJobsListRequest) JobModelIdN(jobModelIdN []*string) ApiExtrasScheduledJobsListRequest {
	r.jobModelIdN = &jobModelIdN
	return r
}

func (r ApiExtrasScheduledJobsListRequest) LastRunAt(lastRunAt []time.Time) ApiExtrasScheduledJobsListRequest {
	r.lastRunAt = &lastRunAt
	return r
}

func (r ApiExtrasScheduledJobsListRequest) LastRunAtGt(lastRunAtGt []time.Time) ApiExtrasScheduledJobsListRequest {
	r.lastRunAtGt = &lastRunAtGt
	return r
}

func (r ApiExtrasScheduledJobsListRequest) LastRunAtGte(lastRunAtGte []time.Time) ApiExtrasScheduledJobsListRequest {
	r.lastRunAtGte = &lastRunAtGte
	return r
}

func (r ApiExtrasScheduledJobsListRequest) LastRunAtIsnull(lastRunAtIsnull bool) ApiExtrasScheduledJobsListRequest {
	r.lastRunAtIsnull = &lastRunAtIsnull
	return r
}

func (r ApiExtrasScheduledJobsListRequest) LastRunAtLt(lastRunAtLt []time.Time) ApiExtrasScheduledJobsListRequest {
	r.lastRunAtLt = &lastRunAtLt
	return r
}

func (r ApiExtrasScheduledJobsListRequest) LastRunAtLte(lastRunAtLte []time.Time) ApiExtrasScheduledJobsListRequest {
	r.lastRunAtLte = &lastRunAtLte
	return r
}

func (r ApiExtrasScheduledJobsListRequest) LastRunAtN(lastRunAtN []time.Time) ApiExtrasScheduledJobsListRequest {
	r.lastRunAtN = &lastRunAtN
	return r
}

// Number of results to return per page.
func (r ApiExtrasScheduledJobsListRequest) Limit(limit int32) ApiExtrasScheduledJobsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasScheduledJobsListRequest) Name(name []string) ApiExtrasScheduledJobsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIc(nameIc []string) ApiExtrasScheduledJobsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIe(nameIe []string) ApiExtrasScheduledJobsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIew(nameIew []string) ApiExtrasScheduledJobsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIre(nameIre []string) ApiExtrasScheduledJobsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIsw(nameIsw []string) ApiExtrasScheduledJobsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameN(nameN []string) ApiExtrasScheduledJobsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNic(nameNic []string) ApiExtrasScheduledJobsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNie(nameNie []string) ApiExtrasScheduledJobsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNiew(nameNiew []string) ApiExtrasScheduledJobsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNire(nameNire []string) ApiExtrasScheduledJobsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNisw(nameNisw []string) ApiExtrasScheduledJobsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNre(nameNre []string) ApiExtrasScheduledJobsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameRe(nameRe []string) ApiExtrasScheduledJobsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasScheduledJobsListRequest) Offset(offset int32) ApiExtrasScheduledJobsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasScheduledJobsListRequest) Q(q string) ApiExtrasScheduledJobsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasScheduledJobsListRequest) Sort(sort string) ApiExtrasScheduledJobsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasScheduledJobsListRequest) StartTime(startTime []time.Time) ApiExtrasScheduledJobsListRequest {
	r.startTime = &startTime
	return r
}

func (r ApiExtrasScheduledJobsListRequest) StartTimeGt(startTimeGt []time.Time) ApiExtrasScheduledJobsListRequest {
	r.startTimeGt = &startTimeGt
	return r
}

func (r ApiExtrasScheduledJobsListRequest) StartTimeGte(startTimeGte []time.Time) ApiExtrasScheduledJobsListRequest {
	r.startTimeGte = &startTimeGte
	return r
}

func (r ApiExtrasScheduledJobsListRequest) StartTimeLt(startTimeLt []time.Time) ApiExtrasScheduledJobsListRequest {
	r.startTimeLt = &startTimeLt
	return r
}

func (r ApiExtrasScheduledJobsListRequest) StartTimeLte(startTimeLte []time.Time) ApiExtrasScheduledJobsListRequest {
	r.startTimeLte = &startTimeLte
	return r
}

func (r ApiExtrasScheduledJobsListRequest) StartTimeN(startTimeN []time.Time) ApiExtrasScheduledJobsListRequest {
	r.startTimeN = &startTimeN
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZone(timeZone []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZone = &timeZone
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneIc(timeZoneIc []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneIc = &timeZoneIc
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneIe(timeZoneIe []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneIe = &timeZoneIe
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneIew(timeZoneIew []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneIew = &timeZoneIew
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneIre(timeZoneIre []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneIre = &timeZoneIre
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneIsw(timeZoneIsw []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneIsw = &timeZoneIsw
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneN(timeZoneN []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneN = &timeZoneN
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneNic(timeZoneNic []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneNic = &timeZoneNic
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneNie(timeZoneNie []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneNie = &timeZoneNie
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneNiew(timeZoneNiew []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneNiew = &timeZoneNiew
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneNire(timeZoneNire []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneNire = &timeZoneNire
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneNisw(timeZoneNisw []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneNisw = &timeZoneNisw
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneNre(timeZoneNre []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneNre = &timeZoneNre
	return r
}

// Time zone  
func (r ApiExtrasScheduledJobsListRequest) TimeZoneRe(timeZoneRe []DcimLocationsListTimeZoneParameterInner) ApiExtrasScheduledJobsListRequest {
	r.timeZoneRe = &timeZoneRe
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCount(totalRunCount []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCount = &totalRunCount
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountGt(totalRunCountGt []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountGt = &totalRunCountGt
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountGte(totalRunCountGte []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountGte = &totalRunCountGte
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountLt(totalRunCountLt []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountLt = &totalRunCountLt
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountLte(totalRunCountLte []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountLte = &totalRunCountLte
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountN(totalRunCountN []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountN = &totalRunCountN
	return r
}

// Serializer Depth
func (r ApiExtrasScheduledJobsListRequest) Depth(depth int32) ApiExtrasScheduledJobsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasScheduledJobsListRequest) Execute() (*PaginatedScheduledJobList, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsListExecute(r)
}

/*
ExtrasScheduledJobsList Method for ExtrasScheduledJobsList

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasScheduledJobsListRequest
*/
func (a *ExtrasAPIService) ExtrasScheduledJobsList(ctx context.Context) ApiExtrasScheduledJobsListRequest {
	return ApiExtrasScheduledJobsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedScheduledJobList
func (a *ExtrasAPIService) ExtrasScheduledJobsListExecute(r ApiExtrasScheduledJobsListRequest) (*PaginatedScheduledJobList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedScheduledJobList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScheduledJobsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.jobModel != nil {
		t := *r.jobModel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_model", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_model", t, "form", "multi")
		}
	}
	if r.jobModelIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_model__isnull", r.jobModelIsnull, "form", "")
	}
	if r.jobModelN != nil {
		t := *r.jobModelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_model__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_model__n", t, "form", "multi")
		}
	}
	if r.jobModelId != nil {
		t := *r.jobModelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id", t, "form", "multi")
		}
	}
	if r.jobModelIdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id__isnull", r.jobModelIdIsnull, "form", "")
	}
	if r.jobModelIdN != nil {
		t := *r.jobModelIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "job_model_id__n", t, "form", "multi")
		}
	}
	if r.lastRunAt != nil {
		t := *r.lastRunAt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at", t, "form", "multi")
		}
	}
	if r.lastRunAtGt != nil {
		t := *r.lastRunAtGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__gt", t, "form", "multi")
		}
	}
	if r.lastRunAtGte != nil {
		t := *r.lastRunAtGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__gte", t, "form", "multi")
		}
	}
	if r.lastRunAtIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__isnull", r.lastRunAtIsnull, "form", "")
	}
	if r.lastRunAtLt != nil {
		t := *r.lastRunAtLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__lt", t, "form", "multi")
		}
	}
	if r.lastRunAtLte != nil {
		t := *r.lastRunAtLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__lte", t, "form", "multi")
		}
	}
	if r.lastRunAtN != nil {
		t := *r.lastRunAtN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_run_at__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.startTime != nil {
		t := *r.startTime
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", t, "form", "multi")
		}
	}
	if r.startTimeGt != nil {
		t := *r.startTimeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__gt", t, "form", "multi")
		}
	}
	if r.startTimeGte != nil {
		t := *r.startTimeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__gte", t, "form", "multi")
		}
	}
	if r.startTimeLt != nil {
		t := *r.startTimeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__lt", t, "form", "multi")
		}
	}
	if r.startTimeLte != nil {
		t := *r.startTimeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__lte", t, "form", "multi")
		}
	}
	if r.startTimeN != nil {
		t := *r.startTimeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "start_time__n", t, "form", "multi")
		}
	}
	if r.timeZone != nil {
		t := *r.timeZone
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone", t, "form", "multi")
		}
	}
	if r.timeZoneIc != nil {
		t := *r.timeZoneIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ic", t, "form", "multi")
		}
	}
	if r.timeZoneIe != nil {
		t := *r.timeZoneIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ie", t, "form", "multi")
		}
	}
	if r.timeZoneIew != nil {
		t := *r.timeZoneIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__iew", t, "form", "multi")
		}
	}
	if r.timeZoneIre != nil {
		t := *r.timeZoneIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ire", t, "form", "multi")
		}
	}
	if r.timeZoneIsw != nil {
		t := *r.timeZoneIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__isw", t, "form", "multi")
		}
	}
	if r.timeZoneN != nil {
		t := *r.timeZoneN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__n", t, "form", "multi")
		}
	}
	if r.timeZoneNic != nil {
		t := *r.timeZoneNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nic", t, "form", "multi")
		}
	}
	if r.timeZoneNie != nil {
		t := *r.timeZoneNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nie", t, "form", "multi")
		}
	}
	if r.timeZoneNiew != nil {
		t := *r.timeZoneNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__niew", t, "form", "multi")
		}
	}
	if r.timeZoneNire != nil {
		t := *r.timeZoneNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nire", t, "form", "multi")
		}
	}
	if r.timeZoneNisw != nil {
		t := *r.timeZoneNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nisw", t, "form", "multi")
		}
	}
	if r.timeZoneNre != nil {
		t := *r.timeZoneNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nre", t, "form", "multi")
		}
	}
	if r.timeZoneRe != nil {
		t := *r.timeZoneRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__re", t, "form", "multi")
		}
	}
	if r.totalRunCount != nil {
		t := *r.totalRunCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count", t, "form", "multi")
		}
	}
	if r.totalRunCountGt != nil {
		t := *r.totalRunCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__gt", t, "form", "multi")
		}
	}
	if r.totalRunCountGte != nil {
		t := *r.totalRunCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__gte", t, "form", "multi")
		}
	}
	if r.totalRunCountLt != nil {
		t := *r.totalRunCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__lt", t, "form", "multi")
		}
	}
	if r.totalRunCountLte != nil {
		t := *r.totalRunCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__lte", t, "form", "multi")
		}
	}
	if r.totalRunCountN != nil {
		t := *r.totalRunCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "total_run_count__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasScheduledJobsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasScheduledJobsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasScheduledJobsRetrieveRequest) Depth(depth int32) ApiExtrasScheduledJobsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasScheduledJobsRetrieveRequest) Execute() (*ScheduledJob, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsRetrieveExecute(r)
}

/*
ExtrasScheduledJobsRetrieve Method for ExtrasScheduledJobsRetrieve

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this scheduled job.
 @return ApiExtrasScheduledJobsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasScheduledJobsRetrieve(ctx context.Context, id string) ApiExtrasScheduledJobsRetrieveRequest {
	return ApiExtrasScheduledJobsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduledJob
func (a *ExtrasAPIService) ExtrasScheduledJobsRetrieveExecute(r ApiExtrasScheduledJobsRetrieveRequest) (*ScheduledJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScheduledJobsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasSecretsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasSecretsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsBulkDestroyExecute(r)
}

/*
ExtrasSecretsBulkDestroy Method for ExtrasSecretsBulkDestroy

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsBulkDestroy(ctx context.Context) ApiExtrasSecretsBulkDestroyRequest {
	return ApiExtrasSecretsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSecretsBulkDestroyExecute(r ApiExtrasSecretsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableSecretRequest *[]PatchedBulkWritableSecretRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsBulkPartialUpdateRequest) PatchedBulkWritableSecretRequest(patchedBulkWritableSecretRequest []PatchedBulkWritableSecretRequest) ApiExtrasSecretsBulkPartialUpdateRequest {
	r.patchedBulkWritableSecretRequest = &patchedBulkWritableSecretRequest
	return r
}

func (r ApiExtrasSecretsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsBulkPartialUpdateRequest) Execute() ([]Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsBulkPartialUpdateExecute(r)
}

/*
ExtrasSecretsBulkPartialUpdate Method for ExtrasSecretsBulkPartialUpdate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsBulkPartialUpdate(ctx context.Context) ApiExtrasSecretsBulkPartialUpdateRequest {
	return ApiExtrasSecretsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Secret
func (a *ExtrasAPIService) ExtrasSecretsBulkPartialUpdateExecute(r ApiExtrasSecretsBulkPartialUpdateRequest) ([]Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableSecretRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableSecretRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableSecretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableSecretRequest *[]BulkWritableSecretRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsBulkUpdateRequest) BulkWritableSecretRequest(bulkWritableSecretRequest []BulkWritableSecretRequest) ApiExtrasSecretsBulkUpdateRequest {
	r.bulkWritableSecretRequest = &bulkWritableSecretRequest
	return r
}

func (r ApiExtrasSecretsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsBulkUpdateRequest) Execute() ([]Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsBulkUpdateExecute(r)
}

/*
ExtrasSecretsBulkUpdate Method for ExtrasSecretsBulkUpdate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsBulkUpdate(ctx context.Context) ApiExtrasSecretsBulkUpdateRequest {
	return ApiExtrasSecretsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Secret
func (a *ExtrasAPIService) ExtrasSecretsBulkUpdateExecute(r ApiExtrasSecretsBulkUpdateRequest) ([]Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableSecretRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableSecretRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableSecretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsCheckRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasSecretsCheckRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsCheckRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasSecretsCheckRetrieveRequest) Depth(depth int32) ApiExtrasSecretsCheckRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSecretsCheckRetrieveRequest) Execute() (*ExtrasSecretsCheckRetrieve200Response, *http.Response, error) {
	return r.ApiService.ExtrasSecretsCheckRetrieveExecute(r)
}

/*
ExtrasSecretsCheckRetrieve Method for ExtrasSecretsCheckRetrieve

Check that a secret's value is accessible.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsCheckRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsCheckRetrieve(ctx context.Context, id string) ApiExtrasSecretsCheckRetrieveRequest {
	return ApiExtrasSecretsCheckRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExtrasSecretsCheckRetrieve200Response
func (a *ExtrasAPIService) ExtrasSecretsCheckRetrieveExecute(r ApiExtrasSecretsCheckRetrieveRequest) (*ExtrasSecretsCheckRetrieve200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtrasSecretsCheckRetrieve200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsCheckRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/check/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	secretRequest *SecretRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsCreateRequest) SecretRequest(secretRequest SecretRequest) ApiExtrasSecretsCreateRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiExtrasSecretsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsCreateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsCreateExecute(r)
}

/*
ExtrasSecretsCreate Method for ExtrasSecretsCreate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsCreate(ctx context.Context) ApiExtrasSecretsCreateRequest {
	return ApiExtrasSecretsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasAPIService) ExtrasSecretsCreateExecute(r ApiExtrasSecretsCreateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return localVarReturnValue, nil, reportError("secretRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsDestroyExecute(r)
}

/*
ExtrasSecretsDestroy Method for ExtrasSecretsDestroy

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsDestroy(ctx context.Context, id string) ApiExtrasSecretsDestroyRequest {
	return ApiExtrasSecretsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSecretsDestroyExecute(r ApiExtrasSecretsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsBulkDestroyExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsBulkDestroy Method for ExtrasSecretsGroupsAssociationsBulkDestroy

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsBulkDestroy(ctx context.Context) ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest {
	return ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsBulkDestroyExecute(r ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsAssociationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableSecretsGroupAssociationRequest *[]PatchedBulkWritableSecretsGroupAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest) PatchedBulkWritableSecretsGroupAssociationRequest(patchedBulkWritableSecretsGroupAssociationRequest []PatchedBulkWritableSecretsGroupAssociationRequest) ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest {
	r.patchedBulkWritableSecretsGroupAssociationRequest = &patchedBulkWritableSecretsGroupAssociationRequest
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest) Execute() ([]SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsBulkPartialUpdateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsBulkPartialUpdate Method for ExtrasSecretsGroupsAssociationsBulkPartialUpdate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsBulkPartialUpdate(ctx context.Context) ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest {
	return ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SecretsGroupAssociation
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsBulkPartialUpdateExecute(r ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest) ([]SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsAssociationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableSecretsGroupAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableSecretsGroupAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableSecretsGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableSecretsGroupAssociationRequest *[]BulkWritableSecretsGroupAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest) BulkWritableSecretsGroupAssociationRequest(bulkWritableSecretsGroupAssociationRequest []BulkWritableSecretsGroupAssociationRequest) ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest {
	r.bulkWritableSecretsGroupAssociationRequest = &bulkWritableSecretsGroupAssociationRequest
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest) Execute() ([]SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsBulkUpdateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsBulkUpdate Method for ExtrasSecretsGroupsAssociationsBulkUpdate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsBulkUpdate(ctx context.Context) ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest {
	return ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SecretsGroupAssociation
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsBulkUpdateExecute(r ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest) ([]SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsAssociationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableSecretsGroupAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableSecretsGroupAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableSecretsGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	secretsGroupAssociationRequest *SecretsGroupAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsAssociationsCreateRequest) SecretsGroupAssociationRequest(secretsGroupAssociationRequest SecretsGroupAssociationRequest) ApiExtrasSecretsGroupsAssociationsCreateRequest {
	r.secretsGroupAssociationRequest = &secretsGroupAssociationRequest
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsAssociationsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsCreateRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsCreateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsCreate Method for ExtrasSecretsGroupsAssociationsCreate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsCreate(ctx context.Context) ApiExtrasSecretsGroupsAssociationsCreateRequest {
	return ApiExtrasSecretsGroupsAssociationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsCreateExecute(r ApiExtrasSecretsGroupsAssociationsCreateRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsAssociationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretsGroupAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("secretsGroupAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretsGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsAssociationsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsAssociationsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsDestroyExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsDestroy Method for ExtrasSecretsGroupsAssociationsDestroy

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group association.
 @return ApiExtrasSecretsGroupsAssociationsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsDestroy(ctx context.Context, id string) ApiExtrasSecretsGroupsAssociationsDestroyRequest {
	return ApiExtrasSecretsGroupsAssociationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsDestroyExecute(r ApiExtrasSecretsGroupsAssociationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsAssociationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	accessType *[]string
	accessTypeIc *[]string
	accessTypeIe *[]string
	accessTypeIew *[]string
	accessTypeIre *[]string
	accessTypeIsw *[]string
	accessTypeN *[]string
	accessTypeNic *[]string
	accessTypeNie *[]string
	accessTypeNiew *[]string
	accessTypeNire *[]string
	accessTypeNisw *[]string
	accessTypeNre *[]string
	accessTypeRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	offset *int32
	q *string
	secret *[]string
	secretN *[]string
	secretId *[]string
	secretIdN *[]string
	secretType *[]string
	secretTypeIc *[]string
	secretTypeIe *[]string
	secretTypeIew *[]string
	secretTypeIre *[]string
	secretTypeIsw *[]string
	secretTypeN *[]string
	secretTypeNic *[]string
	secretTypeNie *[]string
	secretTypeNiew *[]string
	secretTypeNire *[]string
	secretTypeNisw *[]string
	secretTypeNre *[]string
	secretTypeRe *[]string
	secretsGroup *[]string
	secretsGroupN *[]string
	sort *string
	depth *int32
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessType(accessType []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessType = &accessType
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeIc(accessTypeIc []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeIc = &accessTypeIc
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeIe(accessTypeIe []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeIe = &accessTypeIe
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeIew(accessTypeIew []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeIew = &accessTypeIew
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeIre(accessTypeIre []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeIre = &accessTypeIre
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeIsw(accessTypeIsw []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeIsw = &accessTypeIsw
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeN(accessTypeN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeN = &accessTypeN
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeNic(accessTypeNic []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeNic = &accessTypeNic
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeNie(accessTypeNie []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeNie = &accessTypeNie
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeNiew(accessTypeNiew []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeNiew = &accessTypeNiew
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeNire(accessTypeNire []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeNire = &accessTypeNire
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeNisw(accessTypeNisw []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeNisw = &accessTypeNisw
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeNre(accessTypeNre []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeNre = &accessTypeNre
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeRe(accessTypeRe []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeRe = &accessTypeRe
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Id(id []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIc(idIc []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIe(idIe []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIew(idIew []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIre(idIre []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIsw(idIsw []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdN(idN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNic(idNic []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNie(idNie []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNiew(idNiew []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNire(idNire []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNisw(idNisw []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNre(idNre []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdRe(idRe []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Limit(limit int32) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Offset(offset int32) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Q(q string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) Secret(secret []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secret = &secret
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretN(secretN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretN = &secretN
	return r
}

// Secret (ID) - Deprecated (use secret filter)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretId(secretId []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretId = &secretId
	return r
}

// Exclude Secret (ID) - Deprecated (use secret filter)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretIdN(secretIdN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretIdN = &secretIdN
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretType(secretType []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretType = &secretType
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeIc(secretTypeIc []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeIc = &secretTypeIc
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeIe(secretTypeIe []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeIe = &secretTypeIe
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeIew(secretTypeIew []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeIew = &secretTypeIew
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeIre(secretTypeIre []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeIre = &secretTypeIre
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeIsw(secretTypeIsw []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeIsw = &secretTypeIsw
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeN(secretTypeN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeN = &secretTypeN
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeNic(secretTypeNic []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeNic = &secretTypeNic
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeNie(secretTypeNie []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeNie = &secretTypeNie
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeNiew(secretTypeNiew []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeNiew = &secretTypeNiew
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeNire(secretTypeNire []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeNire = &secretTypeNire
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeNisw(secretTypeNisw []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeNisw = &secretTypeNisw
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeNre(secretTypeNre []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeNre = &secretTypeNre
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeRe(secretTypeRe []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeRe = &secretTypeRe
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretsGroup(secretsGroup []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretsGroup = &secretsGroup
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretsGroupN(secretsGroupN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretsGroupN = &secretsGroupN
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Sort(sort string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Depth(depth int32) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) Execute() (*PaginatedSecretsGroupAssociationList, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsListExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsList Method for ExtrasSecretsGroupsAssociationsList

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsListRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsList(ctx context.Context) ApiExtrasSecretsGroupsAssociationsListRequest {
	return ApiExtrasSecretsGroupsAssociationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedSecretsGroupAssociationList
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsListExecute(r ApiExtrasSecretsGroupsAssociationsListRequest) (*PaginatedSecretsGroupAssociationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedSecretsGroupAssociationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsAssociationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accessType != nil {
		t := *r.accessType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type", t, "form", "multi")
		}
	}
	if r.accessTypeIc != nil {
		t := *r.accessTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__ic", t, "form", "multi")
		}
	}
	if r.accessTypeIe != nil {
		t := *r.accessTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__ie", t, "form", "multi")
		}
	}
	if r.accessTypeIew != nil {
		t := *r.accessTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__iew", t, "form", "multi")
		}
	}
	if r.accessTypeIre != nil {
		t := *r.accessTypeIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__ire", t, "form", "multi")
		}
	}
	if r.accessTypeIsw != nil {
		t := *r.accessTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__isw", t, "form", "multi")
		}
	}
	if r.accessTypeN != nil {
		t := *r.accessTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__n", t, "form", "multi")
		}
	}
	if r.accessTypeNic != nil {
		t := *r.accessTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nic", t, "form", "multi")
		}
	}
	if r.accessTypeNie != nil {
		t := *r.accessTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nie", t, "form", "multi")
		}
	}
	if r.accessTypeNiew != nil {
		t := *r.accessTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__niew", t, "form", "multi")
		}
	}
	if r.accessTypeNire != nil {
		t := *r.accessTypeNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nire", t, "form", "multi")
		}
	}
	if r.accessTypeNisw != nil {
		t := *r.accessTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nisw", t, "form", "multi")
		}
	}
	if r.accessTypeNre != nil {
		t := *r.accessTypeNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__nre", t, "form", "multi")
		}
	}
	if r.accessTypeRe != nil {
		t := *r.accessTypeRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "access_type__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.secret != nil {
		t := *r.secret
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret", t, "form", "multi")
		}
	}
	if r.secretN != nil {
		t := *r.secretN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__n", t, "form", "multi")
		}
	}
	if r.secretId != nil {
		t := *r.secretId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_id", t, "form", "multi")
		}
	}
	if r.secretIdN != nil {
		t := *r.secretIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_id__n", t, "form", "multi")
		}
	}
	if r.secretType != nil {
		t := *r.secretType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type", t, "form", "multi")
		}
	}
	if r.secretTypeIc != nil {
		t := *r.secretTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__ic", t, "form", "multi")
		}
	}
	if r.secretTypeIe != nil {
		t := *r.secretTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__ie", t, "form", "multi")
		}
	}
	if r.secretTypeIew != nil {
		t := *r.secretTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__iew", t, "form", "multi")
		}
	}
	if r.secretTypeIre != nil {
		t := *r.secretTypeIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__ire", t, "form", "multi")
		}
	}
	if r.secretTypeIsw != nil {
		t := *r.secretTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__isw", t, "form", "multi")
		}
	}
	if r.secretTypeN != nil {
		t := *r.secretTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__n", t, "form", "multi")
		}
	}
	if r.secretTypeNic != nil {
		t := *r.secretTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nic", t, "form", "multi")
		}
	}
	if r.secretTypeNie != nil {
		t := *r.secretTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nie", t, "form", "multi")
		}
	}
	if r.secretTypeNiew != nil {
		t := *r.secretTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__niew", t, "form", "multi")
		}
	}
	if r.secretTypeNire != nil {
		t := *r.secretTypeNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nire", t, "form", "multi")
		}
	}
	if r.secretTypeNisw != nil {
		t := *r.secretTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nisw", t, "form", "multi")
		}
	}
	if r.secretTypeNre != nil {
		t := *r.secretTypeNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__nre", t, "form", "multi")
		}
	}
	if r.secretTypeRe != nil {
		t := *r.secretTypeRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret_type__re", t, "form", "multi")
		}
	}
	if r.secretsGroup != nil {
		t := *r.secretsGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group", t, "form", "multi")
		}
	}
	if r.secretsGroupN != nil {
		t := *r.secretsGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__n", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedSecretsGroupAssociationRequest *PatchedSecretsGroupAssociationRequest
}

func (r ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest) PatchedSecretsGroupAssociationRequest(patchedSecretsGroupAssociationRequest PatchedSecretsGroupAssociationRequest) ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest {
	r.patchedSecretsGroupAssociationRequest = &patchedSecretsGroupAssociationRequest
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsPartialUpdateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsPartialUpdate Method for ExtrasSecretsGroupsAssociationsPartialUpdate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group association.
 @return ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsPartialUpdate(ctx context.Context, id string) ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest {
	return ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsPartialUpdateExecute(r ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsAssociationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecretsGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasSecretsGroupsAssociationsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsAssociationsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasSecretsGroupsAssociationsRetrieveRequest) Depth(depth int32) ApiExtrasSecretsGroupsAssociationsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsRetrieveRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsRetrieveExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsRetrieve Method for ExtrasSecretsGroupsAssociationsRetrieve

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group association.
 @return ApiExtrasSecretsGroupsAssociationsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsRetrieve(ctx context.Context, id string) ApiExtrasSecretsGroupsAssociationsRetrieveRequest {
	return ApiExtrasSecretsGroupsAssociationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsRetrieveExecute(r ApiExtrasSecretsGroupsAssociationsRetrieveRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsAssociationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	secretsGroupAssociationRequest *SecretsGroupAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsAssociationsUpdateRequest) SecretsGroupAssociationRequest(secretsGroupAssociationRequest SecretsGroupAssociationRequest) ApiExtrasSecretsGroupsAssociationsUpdateRequest {
	r.secretsGroupAssociationRequest = &secretsGroupAssociationRequest
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsAssociationsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsUpdateRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsUpdateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsUpdate Method for ExtrasSecretsGroupsAssociationsUpdate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group association.
 @return ApiExtrasSecretsGroupsAssociationsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsUpdate(ctx context.Context, id string) ApiExtrasSecretsGroupsAssociationsUpdateRequest {
	return ApiExtrasSecretsGroupsAssociationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasAPIService) ExtrasSecretsGroupsAssociationsUpdateExecute(r ApiExtrasSecretsGroupsAssociationsUpdateRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsAssociationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretsGroupAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("secretsGroupAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretsGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasSecretsGroupsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasSecretsGroupsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsBulkDestroyExecute(r)
}

/*
ExtrasSecretsGroupsBulkDestroy Method for ExtrasSecretsGroupsBulkDestroy

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsBulkDestroy(ctx context.Context) ApiExtrasSecretsGroupsBulkDestroyRequest {
	return ApiExtrasSecretsGroupsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSecretsGroupsBulkDestroyExecute(r ApiExtrasSecretsGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableSecretsGroupRequest *[]PatchedBulkWritableSecretsGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsBulkPartialUpdateRequest) PatchedBulkWritableSecretsGroupRequest(patchedBulkWritableSecretsGroupRequest []PatchedBulkWritableSecretsGroupRequest) ApiExtrasSecretsGroupsBulkPartialUpdateRequest {
	r.patchedBulkWritableSecretsGroupRequest = &patchedBulkWritableSecretsGroupRequest
	return r
}

func (r ApiExtrasSecretsGroupsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsBulkPartialUpdateRequest) Execute() ([]SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsBulkPartialUpdateExecute(r)
}

/*
ExtrasSecretsGroupsBulkPartialUpdate Method for ExtrasSecretsGroupsBulkPartialUpdate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsBulkPartialUpdate(ctx context.Context) ApiExtrasSecretsGroupsBulkPartialUpdateRequest {
	return ApiExtrasSecretsGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SecretsGroup
func (a *ExtrasAPIService) ExtrasSecretsGroupsBulkPartialUpdateExecute(r ApiExtrasSecretsGroupsBulkPartialUpdateRequest) ([]SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableSecretsGroupRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableSecretsGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableSecretsGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableSecretsGroupRequest *[]BulkWritableSecretsGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsBulkUpdateRequest) BulkWritableSecretsGroupRequest(bulkWritableSecretsGroupRequest []BulkWritableSecretsGroupRequest) ApiExtrasSecretsGroupsBulkUpdateRequest {
	r.bulkWritableSecretsGroupRequest = &bulkWritableSecretsGroupRequest
	return r
}

func (r ApiExtrasSecretsGroupsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsBulkUpdateRequest) Execute() ([]SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsBulkUpdateExecute(r)
}

/*
ExtrasSecretsGroupsBulkUpdate Method for ExtrasSecretsGroupsBulkUpdate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsBulkUpdate(ctx context.Context) ApiExtrasSecretsGroupsBulkUpdateRequest {
	return ApiExtrasSecretsGroupsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SecretsGroup
func (a *ExtrasAPIService) ExtrasSecretsGroupsBulkUpdateExecute(r ApiExtrasSecretsGroupsBulkUpdateRequest) ([]SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableSecretsGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableSecretsGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableSecretsGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	secretsGroupRequest *SecretsGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsCreateRequest) SecretsGroupRequest(secretsGroupRequest SecretsGroupRequest) ApiExtrasSecretsGroupsCreateRequest {
	r.secretsGroupRequest = &secretsGroupRequest
	return r
}

func (r ApiExtrasSecretsGroupsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsCreateRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsCreateExecute(r)
}

/*
ExtrasSecretsGroupsCreate Method for ExtrasSecretsGroupsCreate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsCreate(ctx context.Context) ApiExtrasSecretsGroupsCreateRequest {
	return ApiExtrasSecretsGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasAPIService) ExtrasSecretsGroupsCreateExecute(r ApiExtrasSecretsGroupsCreateRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretsGroupRequest == nil {
		return localVarReturnValue, nil, reportError("secretsGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretsGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsDestroyExecute(r)
}

/*
ExtrasSecretsGroupsDestroy Method for ExtrasSecretsGroupsDestroy

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsDestroy(ctx context.Context, id string) ApiExtrasSecretsGroupsDestroyRequest {
	return ApiExtrasSecretsGroupsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSecretsGroupsDestroyExecute(r ApiExtrasSecretsGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiExtrasSecretsGroupsListRequest) Contacts(contacts []string) ApiExtrasSecretsGroupsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasSecretsGroupsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasSecretsGroupsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasSecretsGroupsListRequest) ContactsN(contactsN string) ApiExtrasSecretsGroupsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) Created(created []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasSecretsGroupsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) CreatedN(createdN []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasSecretsGroupsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasSecretsGroupsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasSecretsGroupsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasSecretsGroupsListRequest) Id(id []string) ApiExtrasSecretsGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIc(idIc []string) ApiExtrasSecretsGroupsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIe(idIe []string) ApiExtrasSecretsGroupsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIew(idIew []string) ApiExtrasSecretsGroupsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIre(idIre []string) ApiExtrasSecretsGroupsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIsw(idIsw []string) ApiExtrasSecretsGroupsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdN(idN []string) ApiExtrasSecretsGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNic(idNic []string) ApiExtrasSecretsGroupsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNie(idNie []string) ApiExtrasSecretsGroupsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNiew(idNiew []string) ApiExtrasSecretsGroupsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNire(idNire []string) ApiExtrasSecretsGroupsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNisw(idNisw []string) ApiExtrasSecretsGroupsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNre(idNre []string) ApiExtrasSecretsGroupsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdRe(idRe []string) ApiExtrasSecretsGroupsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasSecretsGroupsListRequest) Limit(limit int32) ApiExtrasSecretsGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) Name(name []string) ApiExtrasSecretsGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIc(nameIc []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIe(nameIe []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIew(nameIew []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIre(nameIre []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIsw(nameIsw []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameN(nameN []string) ApiExtrasSecretsGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNic(nameNic []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNie(nameNie []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNiew(nameNiew []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNire(nameNire []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNisw(nameNisw []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNre(nameNre []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameRe(nameRe []string) ApiExtrasSecretsGroupsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSecretsGroupsListRequest) Offset(offset int32) ApiExtrasSecretsGroupsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasSecretsGroupsListRequest) Q(q string) ApiExtrasSecretsGroupsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasSecretsGroupsListRequest) Sort(sort string) ApiExtrasSecretsGroupsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) Teams(teams []string) ApiExtrasSecretsGroupsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasSecretsGroupsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasSecretsGroupsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasSecretsGroupsListRequest) TeamsN(teamsN string) ApiExtrasSecretsGroupsListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiExtrasSecretsGroupsListRequest) Depth(depth int32) ApiExtrasSecretsGroupsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) Execute() (*PaginatedSecretsGroupList, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsListExecute(r)
}

/*
ExtrasSecretsGroupsList Method for ExtrasSecretsGroupsList

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsListRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsList(ctx context.Context) ApiExtrasSecretsGroupsListRequest {
	return ApiExtrasSecretsGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedSecretsGroupList
func (a *ExtrasAPIService) ExtrasSecretsGroupsListExecute(r ApiExtrasSecretsGroupsListRequest) (*PaginatedSecretsGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedSecretsGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasSecretsGroupsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasSecretsGroupsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsNotesCreateExecute(r)
}

/*
ExtrasSecretsGroupsNotesCreate Method for ExtrasSecretsGroupsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsNotesCreate(ctx context.Context, id string) ApiExtrasSecretsGroupsNotesCreateRequest {
	return ApiExtrasSecretsGroupsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasSecretsGroupsNotesCreateExecute(r ApiExtrasSecretsGroupsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasSecretsGroupsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasSecretsGroupsNotesListRequest) Limit(limit int32) ApiExtrasSecretsGroupsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSecretsGroupsNotesListRequest) Offset(offset int32) ApiExtrasSecretsGroupsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasSecretsGroupsNotesListRequest) Depth(depth int32) ApiExtrasSecretsGroupsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSecretsGroupsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsNotesListExecute(r)
}

/*
ExtrasSecretsGroupsNotesList Method for ExtrasSecretsGroupsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsNotesList(ctx context.Context, id string) ApiExtrasSecretsGroupsNotesListRequest {
	return ApiExtrasSecretsGroupsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasSecretsGroupsNotesListExecute(r ApiExtrasSecretsGroupsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedSecretsGroupRequest *PatchedSecretsGroupRequest
}

func (r ApiExtrasSecretsGroupsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsPartialUpdateRequest) PatchedSecretsGroupRequest(patchedSecretsGroupRequest PatchedSecretsGroupRequest) ApiExtrasSecretsGroupsPartialUpdateRequest {
	r.patchedSecretsGroupRequest = &patchedSecretsGroupRequest
	return r
}

func (r ApiExtrasSecretsGroupsPartialUpdateRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsPartialUpdateExecute(r)
}

/*
ExtrasSecretsGroupsPartialUpdate Method for ExtrasSecretsGroupsPartialUpdate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsPartialUpdate(ctx context.Context, id string) ApiExtrasSecretsGroupsPartialUpdateRequest {
	return ApiExtrasSecretsGroupsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasAPIService) ExtrasSecretsGroupsPartialUpdateExecute(r ApiExtrasSecretsGroupsPartialUpdateRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecretsGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasSecretsGroupsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasSecretsGroupsRetrieveRequest) Depth(depth int32) ApiExtrasSecretsGroupsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSecretsGroupsRetrieveRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsRetrieveExecute(r)
}

/*
ExtrasSecretsGroupsRetrieve Method for ExtrasSecretsGroupsRetrieve

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsRetrieve(ctx context.Context, id string) ApiExtrasSecretsGroupsRetrieveRequest {
	return ApiExtrasSecretsGroupsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasAPIService) ExtrasSecretsGroupsRetrieveExecute(r ApiExtrasSecretsGroupsRetrieveRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	secretsGroupRequest *SecretsGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsGroupsUpdateRequest) SecretsGroupRequest(secretsGroupRequest SecretsGroupRequest) ApiExtrasSecretsGroupsUpdateRequest {
	r.secretsGroupRequest = &secretsGroupRequest
	return r
}

func (r ApiExtrasSecretsGroupsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsGroupsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsGroupsUpdateRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsUpdateExecute(r)
}

/*
ExtrasSecretsGroupsUpdate Method for ExtrasSecretsGroupsUpdate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsGroupsUpdate(ctx context.Context, id string) ApiExtrasSecretsGroupsUpdateRequest {
	return ApiExtrasSecretsGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasAPIService) ExtrasSecretsGroupsUpdateExecute(r ApiExtrasSecretsGroupsUpdateRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretsGroupRequest == nil {
		return localVarReturnValue, nil, reportError("secretsGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretsGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	provider *[]string
	providerIc *[]string
	providerIe *[]string
	providerIew *[]string
	providerIre *[]string
	providerIsw *[]string
	providerN *[]string
	providerNic *[]string
	providerNie *[]string
	providerNiew *[]string
	providerNire *[]string
	providerNisw *[]string
	providerNre *[]string
	providerRe *[]string
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiExtrasSecretsListRequest) Contacts(contacts []string) ApiExtrasSecretsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasSecretsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasSecretsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasSecretsListRequest) ContactsN(contactsN string) ApiExtrasSecretsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasSecretsListRequest) Created(created []time.Time) ApiExtrasSecretsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasSecretsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasSecretsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasSecretsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasSecretsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasSecretsListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasSecretsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasSecretsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasSecretsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasSecretsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasSecretsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasSecretsListRequest) CreatedN(createdN []time.Time) ApiExtrasSecretsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasSecretsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasSecretsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasSecretsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasSecretsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasSecretsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasSecretsListRequest) Id(id []string) ApiExtrasSecretsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasSecretsListRequest) IdIc(idIc []string) ApiExtrasSecretsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasSecretsListRequest) IdIe(idIe []string) ApiExtrasSecretsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasSecretsListRequest) IdIew(idIew []string) ApiExtrasSecretsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasSecretsListRequest) IdIre(idIre []string) ApiExtrasSecretsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasSecretsListRequest) IdIsw(idIsw []string) ApiExtrasSecretsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasSecretsListRequest) IdN(idN []string) ApiExtrasSecretsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasSecretsListRequest) IdNic(idNic []string) ApiExtrasSecretsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasSecretsListRequest) IdNie(idNie []string) ApiExtrasSecretsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasSecretsListRequest) IdNiew(idNiew []string) ApiExtrasSecretsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasSecretsListRequest) IdNire(idNire []string) ApiExtrasSecretsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasSecretsListRequest) IdNisw(idNisw []string) ApiExtrasSecretsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasSecretsListRequest) IdNre(idNre []string) ApiExtrasSecretsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasSecretsListRequest) IdRe(idRe []string) ApiExtrasSecretsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasSecretsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasSecretsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasSecretsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasSecretsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasSecretsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasSecretsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasSecretsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasSecretsListRequest) Limit(limit int32) ApiExtrasSecretsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasSecretsListRequest) Name(name []string) ApiExtrasSecretsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasSecretsListRequest) NameIc(nameIc []string) ApiExtrasSecretsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasSecretsListRequest) NameIe(nameIe []string) ApiExtrasSecretsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasSecretsListRequest) NameIew(nameIew []string) ApiExtrasSecretsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasSecretsListRequest) NameIre(nameIre []string) ApiExtrasSecretsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasSecretsListRequest) NameIsw(nameIsw []string) ApiExtrasSecretsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasSecretsListRequest) NameN(nameN []string) ApiExtrasSecretsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasSecretsListRequest) NameNic(nameNic []string) ApiExtrasSecretsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasSecretsListRequest) NameNie(nameNie []string) ApiExtrasSecretsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasSecretsListRequest) NameNiew(nameNiew []string) ApiExtrasSecretsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasSecretsListRequest) NameNire(nameNire []string) ApiExtrasSecretsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasSecretsListRequest) NameNisw(nameNisw []string) ApiExtrasSecretsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasSecretsListRequest) NameNre(nameNre []string) ApiExtrasSecretsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasSecretsListRequest) NameRe(nameRe []string) ApiExtrasSecretsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSecretsListRequest) Offset(offset int32) ApiExtrasSecretsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasSecretsListRequest) Provider(provider []string) ApiExtrasSecretsListRequest {
	r.provider = &provider
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIc(providerIc []string) ApiExtrasSecretsListRequest {
	r.providerIc = &providerIc
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIe(providerIe []string) ApiExtrasSecretsListRequest {
	r.providerIe = &providerIe
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIew(providerIew []string) ApiExtrasSecretsListRequest {
	r.providerIew = &providerIew
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIre(providerIre []string) ApiExtrasSecretsListRequest {
	r.providerIre = &providerIre
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIsw(providerIsw []string) ApiExtrasSecretsListRequest {
	r.providerIsw = &providerIsw
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderN(providerN []string) ApiExtrasSecretsListRequest {
	r.providerN = &providerN
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNic(providerNic []string) ApiExtrasSecretsListRequest {
	r.providerNic = &providerNic
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNie(providerNie []string) ApiExtrasSecretsListRequest {
	r.providerNie = &providerNie
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNiew(providerNiew []string) ApiExtrasSecretsListRequest {
	r.providerNiew = &providerNiew
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNire(providerNire []string) ApiExtrasSecretsListRequest {
	r.providerNire = &providerNire
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNisw(providerNisw []string) ApiExtrasSecretsListRequest {
	r.providerNisw = &providerNisw
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNre(providerNre []string) ApiExtrasSecretsListRequest {
	r.providerNre = &providerNre
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderRe(providerRe []string) ApiExtrasSecretsListRequest {
	r.providerRe = &providerRe
	return r
}

// Search
func (r ApiExtrasSecretsListRequest) Q(q string) ApiExtrasSecretsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasSecretsListRequest) Sort(sort string) ApiExtrasSecretsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasSecretsListRequest) Tags(tags []string) ApiExtrasSecretsListRequest {
	r.tags = &tags
	return r
}

func (r ApiExtrasSecretsListRequest) TagsIsnull(tagsIsnull bool) ApiExtrasSecretsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiExtrasSecretsListRequest) TagsN(tagsN []string) ApiExtrasSecretsListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiExtrasSecretsListRequest) Teams(teams []string) ApiExtrasSecretsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasSecretsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasSecretsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasSecretsListRequest) TeamsN(teamsN string) ApiExtrasSecretsListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiExtrasSecretsListRequest) Depth(depth int32) ApiExtrasSecretsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSecretsListRequest) Execute() (*PaginatedSecretList, *http.Response, error) {
	return r.ApiService.ExtrasSecretsListExecute(r)
}

/*
ExtrasSecretsList Method for ExtrasSecretsList

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsListRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsList(ctx context.Context) ApiExtrasSecretsListRequest {
	return ApiExtrasSecretsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedSecretList
func (a *ExtrasAPIService) ExtrasSecretsListExecute(r ApiExtrasSecretsListRequest) (*PaginatedSecretList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedSecretList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.provider != nil {
		t := *r.provider
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider", t, "form", "multi")
		}
	}
	if r.providerIc != nil {
		t := *r.providerIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__ic", t, "form", "multi")
		}
	}
	if r.providerIe != nil {
		t := *r.providerIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__ie", t, "form", "multi")
		}
	}
	if r.providerIew != nil {
		t := *r.providerIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__iew", t, "form", "multi")
		}
	}
	if r.providerIre != nil {
		t := *r.providerIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__ire", t, "form", "multi")
		}
	}
	if r.providerIsw != nil {
		t := *r.providerIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__isw", t, "form", "multi")
		}
	}
	if r.providerN != nil {
		t := *r.providerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", t, "form", "multi")
		}
	}
	if r.providerNic != nil {
		t := *r.providerNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nic", t, "form", "multi")
		}
	}
	if r.providerNie != nil {
		t := *r.providerNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nie", t, "form", "multi")
		}
	}
	if r.providerNiew != nil {
		t := *r.providerNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__niew", t, "form", "multi")
		}
	}
	if r.providerNire != nil {
		t := *r.providerNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nire", t, "form", "multi")
		}
	}
	if r.providerNisw != nil {
		t := *r.providerNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nisw", t, "form", "multi")
		}
	}
	if r.providerNre != nil {
		t := *r.providerNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__nre", t, "form", "multi")
		}
	}
	if r.providerRe != nil {
		t := *r.providerRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__re", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasSecretsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasSecretsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasSecretsNotesCreateExecute(r)
}

/*
ExtrasSecretsNotesCreate Method for ExtrasSecretsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsNotesCreate(ctx context.Context, id string) ApiExtrasSecretsNotesCreateRequest {
	return ApiExtrasSecretsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasSecretsNotesCreateExecute(r ApiExtrasSecretsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasSecretsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasSecretsNotesListRequest) Limit(limit int32) ApiExtrasSecretsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSecretsNotesListRequest) Offset(offset int32) ApiExtrasSecretsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasSecretsNotesListRequest) Depth(depth int32) ApiExtrasSecretsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSecretsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasSecretsNotesListExecute(r)
}

/*
ExtrasSecretsNotesList Method for ExtrasSecretsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsNotesList(ctx context.Context, id string) ApiExtrasSecretsNotesListRequest {
	return ApiExtrasSecretsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasSecretsNotesListExecute(r ApiExtrasSecretsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedSecretRequest *PatchedSecretRequest
}

func (r ApiExtrasSecretsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsPartialUpdateRequest) PatchedSecretRequest(patchedSecretRequest PatchedSecretRequest) ApiExtrasSecretsPartialUpdateRequest {
	r.patchedSecretRequest = &patchedSecretRequest
	return r
}

func (r ApiExtrasSecretsPartialUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsPartialUpdateExecute(r)
}

/*
ExtrasSecretsPartialUpdate Method for ExtrasSecretsPartialUpdate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsPartialUpdate(ctx context.Context, id string) ApiExtrasSecretsPartialUpdateRequest {
	return ApiExtrasSecretsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasAPIService) ExtrasSecretsPartialUpdateExecute(r ApiExtrasSecretsPartialUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasSecretsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasSecretsRetrieveRequest) Depth(depth int32) ApiExtrasSecretsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasSecretsRetrieveRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsRetrieveExecute(r)
}

/*
ExtrasSecretsRetrieve Method for ExtrasSecretsRetrieve

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsRetrieve(ctx context.Context, id string) ApiExtrasSecretsRetrieveRequest {
	return ApiExtrasSecretsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasAPIService) ExtrasSecretsRetrieveExecute(r ApiExtrasSecretsRetrieveRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	secretRequest *SecretRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasSecretsUpdateRequest) SecretRequest(secretRequest SecretRequest) ApiExtrasSecretsUpdateRequest {
	r.secretRequest = &secretRequest
	return r
}

func (r ApiExtrasSecretsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasSecretsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasSecretsUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsUpdateExecute(r)
}

/*
ExtrasSecretsUpdate Method for ExtrasSecretsUpdate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSecretsUpdate(ctx context.Context, id string) ApiExtrasSecretsUpdateRequest {
	return ApiExtrasSecretsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasAPIService) ExtrasSecretsUpdateExecute(r ApiExtrasSecretsUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSecretsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretRequest == nil {
		return localVarReturnValue, nil, reportError("secretRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStaticGroupAssociationsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasStaticGroupAssociationsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasStaticGroupAssociationsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStaticGroupAssociationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsBulkDestroyExecute(r)
}

/*
ExtrasStaticGroupAssociationsBulkDestroy Method for ExtrasStaticGroupAssociationsBulkDestroy

Manage Static Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStaticGroupAssociationsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsBulkDestroy(ctx context.Context) ApiExtrasStaticGroupAssociationsBulkDestroyRequest {
	return ApiExtrasStaticGroupAssociationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsBulkDestroyExecute(r ApiExtrasStaticGroupAssociationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableStaticGroupAssociationRequest *[]PatchedBulkWritableStaticGroupAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest) PatchedBulkWritableStaticGroupAssociationRequest(patchedBulkWritableStaticGroupAssociationRequest []PatchedBulkWritableStaticGroupAssociationRequest) ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest {
	r.patchedBulkWritableStaticGroupAssociationRequest = &patchedBulkWritableStaticGroupAssociationRequest
	return r
}

func (r ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest) Execute() ([]StaticGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsBulkPartialUpdateExecute(r)
}

/*
ExtrasStaticGroupAssociationsBulkPartialUpdate Method for ExtrasStaticGroupAssociationsBulkPartialUpdate

Manage Static Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsBulkPartialUpdate(ctx context.Context) ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest {
	return ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []StaticGroupAssociation
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsBulkPartialUpdateExecute(r ApiExtrasStaticGroupAssociationsBulkPartialUpdateRequest) ([]StaticGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []StaticGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableStaticGroupAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableStaticGroupAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableStaticGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableStaticGroupAssociationRequest *[]BulkWritableStaticGroupAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStaticGroupAssociationsBulkUpdateRequest) BulkWritableStaticGroupAssociationRequest(bulkWritableStaticGroupAssociationRequest []BulkWritableStaticGroupAssociationRequest) ApiExtrasStaticGroupAssociationsBulkUpdateRequest {
	r.bulkWritableStaticGroupAssociationRequest = &bulkWritableStaticGroupAssociationRequest
	return r
}

func (r ApiExtrasStaticGroupAssociationsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStaticGroupAssociationsBulkUpdateRequest) Execute() ([]StaticGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsBulkUpdateExecute(r)
}

/*
ExtrasStaticGroupAssociationsBulkUpdate Method for ExtrasStaticGroupAssociationsBulkUpdate

Manage Static Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStaticGroupAssociationsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsBulkUpdate(ctx context.Context) ApiExtrasStaticGroupAssociationsBulkUpdateRequest {
	return ApiExtrasStaticGroupAssociationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []StaticGroupAssociation
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsBulkUpdateExecute(r ApiExtrasStaticGroupAssociationsBulkUpdateRequest) ([]StaticGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []StaticGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableStaticGroupAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableStaticGroupAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableStaticGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	staticGroupAssociationRequest *StaticGroupAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStaticGroupAssociationsCreateRequest) StaticGroupAssociationRequest(staticGroupAssociationRequest StaticGroupAssociationRequest) ApiExtrasStaticGroupAssociationsCreateRequest {
	r.staticGroupAssociationRequest = &staticGroupAssociationRequest
	return r
}

func (r ApiExtrasStaticGroupAssociationsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStaticGroupAssociationsCreateRequest) Execute() (*StaticGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsCreateExecute(r)
}

/*
ExtrasStaticGroupAssociationsCreate Method for ExtrasStaticGroupAssociationsCreate

Manage Static Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStaticGroupAssociationsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsCreate(ctx context.Context) ApiExtrasStaticGroupAssociationsCreateRequest {
	return ApiExtrasStaticGroupAssociationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StaticGroupAssociation
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsCreateExecute(r ApiExtrasStaticGroupAssociationsCreateRequest) (*StaticGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StaticGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.staticGroupAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("staticGroupAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.staticGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStaticGroupAssociationsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStaticGroupAssociationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsDestroyExecute(r)
}

/*
ExtrasStaticGroupAssociationsDestroy Method for ExtrasStaticGroupAssociationsDestroy

Manage Static Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this static group association.
 @return ApiExtrasStaticGroupAssociationsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsDestroy(ctx context.Context, id string) ApiExtrasStaticGroupAssociationsDestroyRequest {
	return ApiExtrasStaticGroupAssociationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsDestroyExecute(r ApiExtrasStaticGroupAssociationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	associatedObjectId *[]string
	associatedObjectIdIc *[]string
	associatedObjectIdIe *[]string
	associatedObjectIdIew *[]string
	associatedObjectIdIre *[]string
	associatedObjectIdIsw *[]string
	associatedObjectIdN *[]string
	associatedObjectIdNic *[]string
	associatedObjectIdNie *[]string
	associatedObjectIdNiew *[]string
	associatedObjectIdNire *[]string
	associatedObjectIdNisw *[]string
	associatedObjectIdNre *[]string
	associatedObjectIdRe *[]string
	associatedObjectType *[]int32
	associatedObjectTypeN *[]int32
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroup *[]string
	dynamicGroupN *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	offset *int32
	q *string
	sort *string
	depth *int32
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectId(associatedObjectId []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectId = &associatedObjectId
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdIc(associatedObjectIdIc []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdIc = &associatedObjectIdIc
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdIe(associatedObjectIdIe []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdIe = &associatedObjectIdIe
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdIew(associatedObjectIdIew []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdIew = &associatedObjectIdIew
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdIre(associatedObjectIdIre []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdIre = &associatedObjectIdIre
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdIsw(associatedObjectIdIsw []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdIsw = &associatedObjectIdIsw
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdN(associatedObjectIdN []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdN = &associatedObjectIdN
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdNic(associatedObjectIdNic []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdNic = &associatedObjectIdNic
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdNie(associatedObjectIdNie []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdNie = &associatedObjectIdNie
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdNiew(associatedObjectIdNiew []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdNiew = &associatedObjectIdNiew
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdNire(associatedObjectIdNire []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdNire = &associatedObjectIdNire
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdNisw(associatedObjectIdNisw []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdNisw = &associatedObjectIdNisw
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdNre(associatedObjectIdNre []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdNre = &associatedObjectIdNre
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectIdRe(associatedObjectIdRe []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectIdRe = &associatedObjectIdRe
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectType(associatedObjectType []int32) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectType = &associatedObjectType
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) AssociatedObjectTypeN(associatedObjectTypeN []int32) ApiExtrasStaticGroupAssociationsListRequest {
	r.associatedObjectTypeN = &associatedObjectTypeN
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) Created(created []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasStaticGroupAssociationsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) CreatedN(createdN []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) DynamicGroup(dynamicGroup []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.dynamicGroup = &dynamicGroup
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) DynamicGroupN(dynamicGroupN []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.dynamicGroupN = &dynamicGroupN
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasStaticGroupAssociationsListRequest) Id(id []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdIc(idIc []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdIe(idIe []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdIew(idIew []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdIre(idIre []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdIsw(idIsw []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdN(idN []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdNic(idNic []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdNie(idNie []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdNiew(idNiew []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdNire(idNire []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdNisw(idNisw []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdNre(idNre []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) IdRe(idRe []string) ApiExtrasStaticGroupAssociationsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasStaticGroupAssociationsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasStaticGroupAssociationsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasStaticGroupAssociationsListRequest) Limit(limit int32) ApiExtrasStaticGroupAssociationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasStaticGroupAssociationsListRequest) Offset(offset int32) ApiExtrasStaticGroupAssociationsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasStaticGroupAssociationsListRequest) Q(q string) ApiExtrasStaticGroupAssociationsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasStaticGroupAssociationsListRequest) Sort(sort string) ApiExtrasStaticGroupAssociationsListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiExtrasStaticGroupAssociationsListRequest) Depth(depth int32) ApiExtrasStaticGroupAssociationsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasStaticGroupAssociationsListRequest) Execute() (*PaginatedStaticGroupAssociationList, *http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsListExecute(r)
}

/*
ExtrasStaticGroupAssociationsList Method for ExtrasStaticGroupAssociationsList

Manage Static Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStaticGroupAssociationsListRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsList(ctx context.Context) ApiExtrasStaticGroupAssociationsListRequest {
	return ApiExtrasStaticGroupAssociationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedStaticGroupAssociationList
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsListExecute(r ApiExtrasStaticGroupAssociationsListRequest) (*PaginatedStaticGroupAssociationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedStaticGroupAssociationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.associatedObjectId != nil {
		t := *r.associatedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIc != nil {
		t := *r.associatedObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ic", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIe != nil {
		t := *r.associatedObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ie", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIew != nil {
		t := *r.associatedObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__iew", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIre != nil {
		t := *r.associatedObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__ire", t, "form", "multi")
		}
	}
	if r.associatedObjectIdIsw != nil {
		t := *r.associatedObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__isw", t, "form", "multi")
		}
	}
	if r.associatedObjectIdN != nil {
		t := *r.associatedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__n", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNic != nil {
		t := *r.associatedObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nic", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNie != nil {
		t := *r.associatedObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nie", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNiew != nil {
		t := *r.associatedObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__niew", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNire != nil {
		t := *r.associatedObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nire", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNisw != nil {
		t := *r.associatedObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nisw", t, "form", "multi")
		}
	}
	if r.associatedObjectIdNre != nil {
		t := *r.associatedObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__nre", t, "form", "multi")
		}
	}
	if r.associatedObjectIdRe != nil {
		t := *r.associatedObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_id__re", t, "form", "multi")
		}
	}
	if r.associatedObjectType != nil {
		t := *r.associatedObjectType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_type", t, "form", "multi")
		}
	}
	if r.associatedObjectTypeN != nil {
		t := *r.associatedObjectTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "associated_object_type__n", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroup != nil {
		t := *r.dynamicGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_group", t, "form", "multi")
		}
	}
	if r.dynamicGroupN != nil {
		t := *r.dynamicGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_group__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStaticGroupAssociationsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasStaticGroupAssociationsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasStaticGroupAssociationsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStaticGroupAssociationsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsNotesCreateExecute(r)
}

/*
ExtrasStaticGroupAssociationsNotesCreate Method for ExtrasStaticGroupAssociationsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this static group association.
 @return ApiExtrasStaticGroupAssociationsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsNotesCreate(ctx context.Context, id string) ApiExtrasStaticGroupAssociationsNotesCreateRequest {
	return ApiExtrasStaticGroupAssociationsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsNotesCreateExecute(r ApiExtrasStaticGroupAssociationsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasStaticGroupAssociationsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasStaticGroupAssociationsNotesListRequest) Limit(limit int32) ApiExtrasStaticGroupAssociationsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasStaticGroupAssociationsNotesListRequest) Offset(offset int32) ApiExtrasStaticGroupAssociationsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasStaticGroupAssociationsNotesListRequest) Depth(depth int32) ApiExtrasStaticGroupAssociationsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasStaticGroupAssociationsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsNotesListExecute(r)
}

/*
ExtrasStaticGroupAssociationsNotesList Method for ExtrasStaticGroupAssociationsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this static group association.
 @return ApiExtrasStaticGroupAssociationsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsNotesList(ctx context.Context, id string) ApiExtrasStaticGroupAssociationsNotesListRequest {
	return ApiExtrasStaticGroupAssociationsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsNotesListExecute(r ApiExtrasStaticGroupAssociationsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedStaticGroupAssociationRequest *PatchedStaticGroupAssociationRequest
}

func (r ApiExtrasStaticGroupAssociationsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStaticGroupAssociationsPartialUpdateRequest) PatchedStaticGroupAssociationRequest(patchedStaticGroupAssociationRequest PatchedStaticGroupAssociationRequest) ApiExtrasStaticGroupAssociationsPartialUpdateRequest {
	r.patchedStaticGroupAssociationRequest = &patchedStaticGroupAssociationRequest
	return r
}

func (r ApiExtrasStaticGroupAssociationsPartialUpdateRequest) Execute() (*StaticGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsPartialUpdateExecute(r)
}

/*
ExtrasStaticGroupAssociationsPartialUpdate Method for ExtrasStaticGroupAssociationsPartialUpdate

Manage Static Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this static group association.
 @return ApiExtrasStaticGroupAssociationsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsPartialUpdate(ctx context.Context, id string) ApiExtrasStaticGroupAssociationsPartialUpdateRequest {
	return ApiExtrasStaticGroupAssociationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StaticGroupAssociation
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsPartialUpdateExecute(r ApiExtrasStaticGroupAssociationsPartialUpdateRequest) (*StaticGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StaticGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedStaticGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasStaticGroupAssociationsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasStaticGroupAssociationsRetrieveRequest) Depth(depth int32) ApiExtrasStaticGroupAssociationsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasStaticGroupAssociationsRetrieveRequest) Execute() (*StaticGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsRetrieveExecute(r)
}

/*
ExtrasStaticGroupAssociationsRetrieve Method for ExtrasStaticGroupAssociationsRetrieve

Manage Static Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this static group association.
 @return ApiExtrasStaticGroupAssociationsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsRetrieve(ctx context.Context, id string) ApiExtrasStaticGroupAssociationsRetrieveRequest {
	return ApiExtrasStaticGroupAssociationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StaticGroupAssociation
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsRetrieveExecute(r ApiExtrasStaticGroupAssociationsRetrieveRequest) (*StaticGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StaticGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStaticGroupAssociationsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	staticGroupAssociationRequest *StaticGroupAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStaticGroupAssociationsUpdateRequest) StaticGroupAssociationRequest(staticGroupAssociationRequest StaticGroupAssociationRequest) ApiExtrasStaticGroupAssociationsUpdateRequest {
	r.staticGroupAssociationRequest = &staticGroupAssociationRequest
	return r
}

func (r ApiExtrasStaticGroupAssociationsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStaticGroupAssociationsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStaticGroupAssociationsUpdateRequest) Execute() (*StaticGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasStaticGroupAssociationsUpdateExecute(r)
}

/*
ExtrasStaticGroupAssociationsUpdate Method for ExtrasStaticGroupAssociationsUpdate

Manage Static Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this static group association.
 @return ApiExtrasStaticGroupAssociationsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsUpdate(ctx context.Context, id string) ApiExtrasStaticGroupAssociationsUpdateRequest {
	return ApiExtrasStaticGroupAssociationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StaticGroupAssociation
func (a *ExtrasAPIService) ExtrasStaticGroupAssociationsUpdateExecute(r ApiExtrasStaticGroupAssociationsUpdateRequest) (*StaticGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StaticGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStaticGroupAssociationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/static-group-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.staticGroupAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("staticGroupAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.staticGroupAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStatusesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasStatusesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasStatusesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStatusesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasStatusesBulkDestroyExecute(r)
}

/*
ExtrasStatusesBulkDestroy Method for ExtrasStatusesBulkDestroy

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesBulkDestroy(ctx context.Context) ApiExtrasStatusesBulkDestroyRequest {
	return ApiExtrasStatusesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasStatusesBulkDestroyExecute(r ApiExtrasStatusesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasStatusesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableStatusRequest *[]PatchedBulkWritableStatusRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStatusesBulkPartialUpdateRequest) PatchedBulkWritableStatusRequest(patchedBulkWritableStatusRequest []PatchedBulkWritableStatusRequest) ApiExtrasStatusesBulkPartialUpdateRequest {
	r.patchedBulkWritableStatusRequest = &patchedBulkWritableStatusRequest
	return r
}

func (r ApiExtrasStatusesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStatusesBulkPartialUpdateRequest) Execute() ([]Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesBulkPartialUpdateExecute(r)
}

/*
ExtrasStatusesBulkPartialUpdate Method for ExtrasStatusesBulkPartialUpdate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesBulkPartialUpdate(ctx context.Context) ApiExtrasStatusesBulkPartialUpdateRequest {
	return ApiExtrasStatusesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Status
func (a *ExtrasAPIService) ExtrasStatusesBulkPartialUpdateExecute(r ApiExtrasStatusesBulkPartialUpdateRequest) ([]Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableStatusRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableStatusRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableStatusRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableStatusRequest *[]BulkWritableStatusRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStatusesBulkUpdateRequest) BulkWritableStatusRequest(bulkWritableStatusRequest []BulkWritableStatusRequest) ApiExtrasStatusesBulkUpdateRequest {
	r.bulkWritableStatusRequest = &bulkWritableStatusRequest
	return r
}

func (r ApiExtrasStatusesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStatusesBulkUpdateRequest) Execute() ([]Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesBulkUpdateExecute(r)
}

/*
ExtrasStatusesBulkUpdate Method for ExtrasStatusesBulkUpdate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesBulkUpdate(ctx context.Context) ApiExtrasStatusesBulkUpdateRequest {
	return ApiExtrasStatusesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Status
func (a *ExtrasAPIService) ExtrasStatusesBulkUpdateExecute(r ApiExtrasStatusesBulkUpdateRequest) ([]Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableStatusRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableStatusRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableStatusRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	statusRequest *StatusRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStatusesCreateRequest) StatusRequest(statusRequest StatusRequest) ApiExtrasStatusesCreateRequest {
	r.statusRequest = &statusRequest
	return r
}

func (r ApiExtrasStatusesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStatusesCreateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesCreateExecute(r)
}

/*
ExtrasStatusesCreate Method for ExtrasStatusesCreate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesCreate(ctx context.Context) ApiExtrasStatusesCreateRequest {
	return ApiExtrasStatusesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasAPIService) ExtrasStatusesCreateExecute(r ApiExtrasStatusesCreateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.statusRequest == nil {
		return localVarReturnValue, nil, reportError("statusRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.statusRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStatusesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStatusesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasStatusesDestroyExecute(r)
}

/*
ExtrasStatusesDestroy Method for ExtrasStatusesDestroy

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesDestroy(ctx context.Context, id string) ApiExtrasStatusesDestroyRequest {
	return ApiExtrasStatusesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasStatusesDestroyExecute(r ApiExtrasStatusesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasStatusesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	color *[]string
	colorIc *[]string
	colorIe *[]string
	colorIew *[]string
	colorIre *[]string
	colorIsw *[]string
	colorN *[]string
	colorNic *[]string
	colorNie *[]string
	colorNiew *[]string
	colorNire *[]string
	colorNisw *[]string
	colorNre *[]string
	colorRe *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentTypes *[]int32
	contentTypesIc *[]int32
	contentTypesIe *[]int32
	contentTypesIew *[]int32
	contentTypesIre *[]int32
	contentTypesIsw *[]int32
	contentTypesN *[]int32
	contentTypesNic *[]int32
	contentTypesNie *[]int32
	contentTypesNiew *[]int32
	contentTypesNire *[]int32
	contentTypesNisw *[]int32
	contentTypesNre *[]int32
	contentTypesRe *[]int32
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiExtrasStatusesListRequest) Color(color []string) ApiExtrasStatusesListRequest {
	r.color = &color
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIc(colorIc []string) ApiExtrasStatusesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIe(colorIe []string) ApiExtrasStatusesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIew(colorIew []string) ApiExtrasStatusesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIre(colorIre []string) ApiExtrasStatusesListRequest {
	r.colorIre = &colorIre
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIsw(colorIsw []string) ApiExtrasStatusesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiExtrasStatusesListRequest) ColorN(colorN []string) ApiExtrasStatusesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNic(colorNic []string) ApiExtrasStatusesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNie(colorNie []string) ApiExtrasStatusesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNiew(colorNiew []string) ApiExtrasStatusesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNire(colorNire []string) ApiExtrasStatusesListRequest {
	r.colorNire = &colorNire
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNisw(colorNisw []string) ApiExtrasStatusesListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNre(colorNre []string) ApiExtrasStatusesListRequest {
	r.colorNre = &colorNre
	return r
}

func (r ApiExtrasStatusesListRequest) ColorRe(colorRe []string) ApiExtrasStatusesListRequest {
	r.colorRe = &colorRe
	return r
}

func (r ApiExtrasStatusesListRequest) Contacts(contacts []string) ApiExtrasStatusesListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasStatusesListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasStatusesListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasStatusesListRequest) ContactsN(contactsN string) ApiExtrasStatusesListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypes(contentTypes []int32) ApiExtrasStatusesListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesIc(contentTypesIc []int32) ApiExtrasStatusesListRequest {
	r.contentTypesIc = &contentTypesIc
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesIe(contentTypesIe []int32) ApiExtrasStatusesListRequest {
	r.contentTypesIe = &contentTypesIe
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesIew(contentTypesIew []int32) ApiExtrasStatusesListRequest {
	r.contentTypesIew = &contentTypesIew
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesIre(contentTypesIre []int32) ApiExtrasStatusesListRequest {
	r.contentTypesIre = &contentTypesIre
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesIsw(contentTypesIsw []int32) ApiExtrasStatusesListRequest {
	r.contentTypesIsw = &contentTypesIsw
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasStatusesListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesNic(contentTypesNic []int32) ApiExtrasStatusesListRequest {
	r.contentTypesNic = &contentTypesNic
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesNie(contentTypesNie []int32) ApiExtrasStatusesListRequest {
	r.contentTypesNie = &contentTypesNie
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesNiew(contentTypesNiew []int32) ApiExtrasStatusesListRequest {
	r.contentTypesNiew = &contentTypesNiew
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesNire(contentTypesNire []int32) ApiExtrasStatusesListRequest {
	r.contentTypesNire = &contentTypesNire
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesNisw(contentTypesNisw []int32) ApiExtrasStatusesListRequest {
	r.contentTypesNisw = &contentTypesNisw
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesNre(contentTypesNre []int32) ApiExtrasStatusesListRequest {
	r.contentTypesNre = &contentTypesNre
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesRe(contentTypesRe []int32) ApiExtrasStatusesListRequest {
	r.contentTypesRe = &contentTypesRe
	return r
}

func (r ApiExtrasStatusesListRequest) Created(created []time.Time) ApiExtrasStatusesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasStatusesListRequest) CreatedGt(createdGt []time.Time) ApiExtrasStatusesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasStatusesListRequest) CreatedGte(createdGte []time.Time) ApiExtrasStatusesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasStatusesListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasStatusesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasStatusesListRequest) CreatedLt(createdLt []time.Time) ApiExtrasStatusesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasStatusesListRequest) CreatedLte(createdLte []time.Time) ApiExtrasStatusesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasStatusesListRequest) CreatedN(createdN []time.Time) ApiExtrasStatusesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasStatusesListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasStatusesListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasStatusesListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasStatusesListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasStatusesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasStatusesListRequest) Id(id []string) ApiExtrasStatusesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasStatusesListRequest) IdIc(idIc []string) ApiExtrasStatusesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasStatusesListRequest) IdIe(idIe []string) ApiExtrasStatusesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasStatusesListRequest) IdIew(idIew []string) ApiExtrasStatusesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasStatusesListRequest) IdIre(idIre []string) ApiExtrasStatusesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasStatusesListRequest) IdIsw(idIsw []string) ApiExtrasStatusesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasStatusesListRequest) IdN(idN []string) ApiExtrasStatusesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasStatusesListRequest) IdNic(idNic []string) ApiExtrasStatusesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasStatusesListRequest) IdNie(idNie []string) ApiExtrasStatusesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasStatusesListRequest) IdNiew(idNiew []string) ApiExtrasStatusesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasStatusesListRequest) IdNire(idNire []string) ApiExtrasStatusesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasStatusesListRequest) IdNisw(idNisw []string) ApiExtrasStatusesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasStatusesListRequest) IdNre(idNre []string) ApiExtrasStatusesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasStatusesListRequest) IdRe(idRe []string) ApiExtrasStatusesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasStatusesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasStatusesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasStatusesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasStatusesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasStatusesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasStatusesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasStatusesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasStatusesListRequest) Limit(limit int32) ApiExtrasStatusesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasStatusesListRequest) Name(name []string) ApiExtrasStatusesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasStatusesListRequest) NameIc(nameIc []string) ApiExtrasStatusesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasStatusesListRequest) NameIe(nameIe []string) ApiExtrasStatusesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasStatusesListRequest) NameIew(nameIew []string) ApiExtrasStatusesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasStatusesListRequest) NameIre(nameIre []string) ApiExtrasStatusesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasStatusesListRequest) NameIsw(nameIsw []string) ApiExtrasStatusesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasStatusesListRequest) NameN(nameN []string) ApiExtrasStatusesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasStatusesListRequest) NameNic(nameNic []string) ApiExtrasStatusesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasStatusesListRequest) NameNie(nameNie []string) ApiExtrasStatusesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasStatusesListRequest) NameNiew(nameNiew []string) ApiExtrasStatusesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasStatusesListRequest) NameNire(nameNire []string) ApiExtrasStatusesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasStatusesListRequest) NameNisw(nameNisw []string) ApiExtrasStatusesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasStatusesListRequest) NameNre(nameNre []string) ApiExtrasStatusesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasStatusesListRequest) NameRe(nameRe []string) ApiExtrasStatusesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasStatusesListRequest) Offset(offset int32) ApiExtrasStatusesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasStatusesListRequest) Q(q string) ApiExtrasStatusesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasStatusesListRequest) Sort(sort string) ApiExtrasStatusesListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasStatusesListRequest) Teams(teams []string) ApiExtrasStatusesListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasStatusesListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasStatusesListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasStatusesListRequest) TeamsN(teamsN string) ApiExtrasStatusesListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiExtrasStatusesListRequest) Depth(depth int32) ApiExtrasStatusesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasStatusesListRequest) Execute() (*PaginatedStatusList, *http.Response, error) {
	return r.ApiService.ExtrasStatusesListExecute(r)
}

/*
ExtrasStatusesList Method for ExtrasStatusesList

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesListRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesList(ctx context.Context) ApiExtrasStatusesListRequest {
	return ApiExtrasStatusesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedStatusList
func (a *ExtrasAPIService) ExtrasStatusesListExecute(r ApiExtrasStatusesListRequest) (*PaginatedStatusList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedStatusList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "form", "multi")
		}
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "form", "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "form", "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "form", "multi")
		}
	}
	if r.colorIre != nil {
		t := *r.colorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ire", t, "form", "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "form", "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "form", "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "form", "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "form", "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "form", "multi")
		}
	}
	if r.colorNire != nil {
		t := *r.colorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nire", t, "form", "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "form", "multi")
		}
	}
	if r.colorNre != nil {
		t := *r.colorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nre", t, "form", "multi")
		}
	}
	if r.colorRe != nil {
		t := *r.colorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__re", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", t, "form", "multi")
		}
	}
	if r.contentTypesIc != nil {
		t := *r.contentTypesIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", t, "form", "multi")
		}
	}
	if r.contentTypesIe != nil {
		t := *r.contentTypesIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", t, "form", "multi")
		}
	}
	if r.contentTypesIew != nil {
		t := *r.contentTypesIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", t, "form", "multi")
		}
	}
	if r.contentTypesIre != nil {
		t := *r.contentTypesIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", t, "form", "multi")
		}
	}
	if r.contentTypesIsw != nil {
		t := *r.contentTypesIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", t, "form", "multi")
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", t, "form", "multi")
		}
	}
	if r.contentTypesNic != nil {
		t := *r.contentTypesNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", t, "form", "multi")
		}
	}
	if r.contentTypesNie != nil {
		t := *r.contentTypesNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", t, "form", "multi")
		}
	}
	if r.contentTypesNiew != nil {
		t := *r.contentTypesNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", t, "form", "multi")
		}
	}
	if r.contentTypesNire != nil {
		t := *r.contentTypesNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", t, "form", "multi")
		}
	}
	if r.contentTypesNisw != nil {
		t := *r.contentTypesNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", t, "form", "multi")
		}
	}
	if r.contentTypesNre != nil {
		t := *r.contentTypesNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", t, "form", "multi")
		}
	}
	if r.contentTypesRe != nil {
		t := *r.contentTypesRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStatusesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasStatusesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasStatusesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStatusesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasStatusesNotesCreateExecute(r)
}

/*
ExtrasStatusesNotesCreate Method for ExtrasStatusesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesNotesCreate(ctx context.Context, id string) ApiExtrasStatusesNotesCreateRequest {
	return ApiExtrasStatusesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasStatusesNotesCreateExecute(r ApiExtrasStatusesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasStatusesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasStatusesNotesListRequest) Limit(limit int32) ApiExtrasStatusesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasStatusesNotesListRequest) Offset(offset int32) ApiExtrasStatusesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasStatusesNotesListRequest) Depth(depth int32) ApiExtrasStatusesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasStatusesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasStatusesNotesListExecute(r)
}

/*
ExtrasStatusesNotesList Method for ExtrasStatusesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesNotesList(ctx context.Context, id string) ApiExtrasStatusesNotesListRequest {
	return ApiExtrasStatusesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasStatusesNotesListExecute(r ApiExtrasStatusesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedStatusRequest *PatchedStatusRequest
}

func (r ApiExtrasStatusesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStatusesPartialUpdateRequest) PatchedStatusRequest(patchedStatusRequest PatchedStatusRequest) ApiExtrasStatusesPartialUpdateRequest {
	r.patchedStatusRequest = &patchedStatusRequest
	return r
}

func (r ApiExtrasStatusesPartialUpdateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesPartialUpdateExecute(r)
}

/*
ExtrasStatusesPartialUpdate Method for ExtrasStatusesPartialUpdate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesPartialUpdate(ctx context.Context, id string) ApiExtrasStatusesPartialUpdateRequest {
	return ApiExtrasStatusesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasAPIService) ExtrasStatusesPartialUpdateExecute(r ApiExtrasStatusesPartialUpdateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedStatusRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasStatusesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasStatusesRetrieveRequest) Depth(depth int32) ApiExtrasStatusesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasStatusesRetrieveRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesRetrieveExecute(r)
}

/*
ExtrasStatusesRetrieve Method for ExtrasStatusesRetrieve

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesRetrieve(ctx context.Context, id string) ApiExtrasStatusesRetrieveRequest {
	return ApiExtrasStatusesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasAPIService) ExtrasStatusesRetrieveExecute(r ApiExtrasStatusesRetrieveRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	statusRequest *StatusRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasStatusesUpdateRequest) StatusRequest(statusRequest StatusRequest) ApiExtrasStatusesUpdateRequest {
	r.statusRequest = &statusRequest
	return r
}

func (r ApiExtrasStatusesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasStatusesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasStatusesUpdateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesUpdateExecute(r)
}

/*
ExtrasStatusesUpdate Method for ExtrasStatusesUpdate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasStatusesUpdate(ctx context.Context, id string) ApiExtrasStatusesUpdateRequest {
	return ApiExtrasStatusesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasAPIService) ExtrasStatusesUpdateExecute(r ApiExtrasStatusesUpdateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasStatusesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.statusRequest == nil {
		return localVarReturnValue, nil, reportError("statusRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.statusRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTagsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasTagsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasTagsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTagsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasTagsBulkDestroyExecute(r)
}

/*
ExtrasTagsBulkDestroy Method for ExtrasTagsBulkDestroy

Destroy a list of tag objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasTagsBulkDestroy(ctx context.Context) ApiExtrasTagsBulkDestroyRequest {
	return ApiExtrasTagsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasTagsBulkDestroyExecute(r ApiExtrasTagsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasTagsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableTagRequest *[]PatchedBulkWritableTagRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) PatchedBulkWritableTagRequest(patchedBulkWritableTagRequest []PatchedBulkWritableTagRequest) ApiExtrasTagsBulkPartialUpdateRequest {
	r.patchedBulkWritableTagRequest = &patchedBulkWritableTagRequest
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) Execute() ([]Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsBulkPartialUpdateExecute(r)
}

/*
ExtrasTagsBulkPartialUpdate Method for ExtrasTagsBulkPartialUpdate

Partial update a list of tag objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsBulkPartialUpdate(ctx context.Context) ApiExtrasTagsBulkPartialUpdateRequest {
	return ApiExtrasTagsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Tag
func (a *ExtrasAPIService) ExtrasTagsBulkPartialUpdateExecute(r ApiExtrasTagsBulkPartialUpdateRequest) ([]Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableTagRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableTagRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableTagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableTagRequest *[]BulkWritableTagRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTagsBulkUpdateRequest) BulkWritableTagRequest(bulkWritableTagRequest []BulkWritableTagRequest) ApiExtrasTagsBulkUpdateRequest {
	r.bulkWritableTagRequest = &bulkWritableTagRequest
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) Execute() ([]Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsBulkUpdateExecute(r)
}

/*
ExtrasTagsBulkUpdate Method for ExtrasTagsBulkUpdate

Update a list of tag objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsBulkUpdate(ctx context.Context) ApiExtrasTagsBulkUpdateRequest {
	return ApiExtrasTagsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Tag
func (a *ExtrasAPIService) ExtrasTagsBulkUpdateExecute(r ApiExtrasTagsBulkUpdateRequest) ([]Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableTagRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableTagRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableTagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	tagRequest *TagRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTagsCreateRequest) TagRequest(tagRequest TagRequest) ApiExtrasTagsCreateRequest {
	r.tagRequest = &tagRequest
	return r
}

func (r ApiExtrasTagsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTagsCreateRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsCreateExecute(r)
}

/*
ExtrasTagsCreate Method for ExtrasTagsCreate

Create one or more tag objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsCreate(ctx context.Context) ApiExtrasTagsCreateRequest {
	return ApiExtrasTagsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Tag
func (a *ExtrasAPIService) ExtrasTagsCreateExecute(r ApiExtrasTagsCreateRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagRequest == nil {
		return localVarReturnValue, nil, reportError("tagRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTagsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTagsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasTagsDestroyExecute(r)
}

/*
ExtrasTagsDestroy Method for ExtrasTagsDestroy

Destroy a tag object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasTagsDestroy(ctx context.Context, id string) ApiExtrasTagsDestroyRequest {
	return ApiExtrasTagsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasTagsDestroyExecute(r ApiExtrasTagsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasTagsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	color *[]string
	colorIc *[]string
	colorIe *[]string
	colorIew *[]string
	colorIre *[]string
	colorIsw *[]string
	colorN *[]string
	colorNic *[]string
	colorNie *[]string
	colorNiew *[]string
	colorNire *[]string
	colorNisw *[]string
	colorNre *[]string
	colorRe *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentTypes *[]int32
	contentTypesIc *[]int32
	contentTypesIe *[]int32
	contentTypesIew *[]int32
	contentTypesIre *[]int32
	contentTypesIsw *[]int32
	contentTypesN *[]int32
	contentTypesNic *[]int32
	contentTypesNie *[]int32
	contentTypesNiew *[]int32
	contentTypesNire *[]int32
	contentTypesNisw *[]int32
	contentTypesNre *[]int32
	contentTypesRe *[]int32
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiExtrasTagsListRequest) Color(color []string) ApiExtrasTagsListRequest {
	r.color = &color
	return r
}

func (r ApiExtrasTagsListRequest) ColorIc(colorIc []string) ApiExtrasTagsListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiExtrasTagsListRequest) ColorIe(colorIe []string) ApiExtrasTagsListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiExtrasTagsListRequest) ColorIew(colorIew []string) ApiExtrasTagsListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiExtrasTagsListRequest) ColorIre(colorIre []string) ApiExtrasTagsListRequest {
	r.colorIre = &colorIre
	return r
}

func (r ApiExtrasTagsListRequest) ColorIsw(colorIsw []string) ApiExtrasTagsListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiExtrasTagsListRequest) ColorN(colorN []string) ApiExtrasTagsListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiExtrasTagsListRequest) ColorNic(colorNic []string) ApiExtrasTagsListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiExtrasTagsListRequest) ColorNie(colorNie []string) ApiExtrasTagsListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiExtrasTagsListRequest) ColorNiew(colorNiew []string) ApiExtrasTagsListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiExtrasTagsListRequest) ColorNire(colorNire []string) ApiExtrasTagsListRequest {
	r.colorNire = &colorNire
	return r
}

func (r ApiExtrasTagsListRequest) ColorNisw(colorNisw []string) ApiExtrasTagsListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiExtrasTagsListRequest) ColorNre(colorNre []string) ApiExtrasTagsListRequest {
	r.colorNre = &colorNre
	return r
}

func (r ApiExtrasTagsListRequest) ColorRe(colorRe []string) ApiExtrasTagsListRequest {
	r.colorRe = &colorRe
	return r
}

func (r ApiExtrasTagsListRequest) Contacts(contacts []string) ApiExtrasTagsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasTagsListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasTagsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasTagsListRequest) ContactsN(contactsN string) ApiExtrasTagsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypes(contentTypes []int32) ApiExtrasTagsListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesIc(contentTypesIc []int32) ApiExtrasTagsListRequest {
	r.contentTypesIc = &contentTypesIc
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesIe(contentTypesIe []int32) ApiExtrasTagsListRequest {
	r.contentTypesIe = &contentTypesIe
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesIew(contentTypesIew []int32) ApiExtrasTagsListRequest {
	r.contentTypesIew = &contentTypesIew
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesIre(contentTypesIre []int32) ApiExtrasTagsListRequest {
	r.contentTypesIre = &contentTypesIre
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesIsw(contentTypesIsw []int32) ApiExtrasTagsListRequest {
	r.contentTypesIsw = &contentTypesIsw
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasTagsListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesNic(contentTypesNic []int32) ApiExtrasTagsListRequest {
	r.contentTypesNic = &contentTypesNic
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesNie(contentTypesNie []int32) ApiExtrasTagsListRequest {
	r.contentTypesNie = &contentTypesNie
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesNiew(contentTypesNiew []int32) ApiExtrasTagsListRequest {
	r.contentTypesNiew = &contentTypesNiew
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesNire(contentTypesNire []int32) ApiExtrasTagsListRequest {
	r.contentTypesNire = &contentTypesNire
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesNisw(contentTypesNisw []int32) ApiExtrasTagsListRequest {
	r.contentTypesNisw = &contentTypesNisw
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesNre(contentTypesNre []int32) ApiExtrasTagsListRequest {
	r.contentTypesNre = &contentTypesNre
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesRe(contentTypesRe []int32) ApiExtrasTagsListRequest {
	r.contentTypesRe = &contentTypesRe
	return r
}

func (r ApiExtrasTagsListRequest) Created(created []time.Time) ApiExtrasTagsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasTagsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasTagsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasTagsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasTagsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasTagsListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasTagsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasTagsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasTagsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasTagsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasTagsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasTagsListRequest) CreatedN(createdN []time.Time) ApiExtrasTagsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasTagsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasTagsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasTagsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasTagsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasTagsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasTagsListRequest) Id(id []string) ApiExtrasTagsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasTagsListRequest) IdIc(idIc []string) ApiExtrasTagsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasTagsListRequest) IdIe(idIe []string) ApiExtrasTagsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasTagsListRequest) IdIew(idIew []string) ApiExtrasTagsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasTagsListRequest) IdIre(idIre []string) ApiExtrasTagsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasTagsListRequest) IdIsw(idIsw []string) ApiExtrasTagsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasTagsListRequest) IdN(idN []string) ApiExtrasTagsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasTagsListRequest) IdNic(idNic []string) ApiExtrasTagsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasTagsListRequest) IdNie(idNie []string) ApiExtrasTagsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasTagsListRequest) IdNiew(idNiew []string) ApiExtrasTagsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasTagsListRequest) IdNire(idNire []string) ApiExtrasTagsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasTagsListRequest) IdNisw(idNisw []string) ApiExtrasTagsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasTagsListRequest) IdNre(idNre []string) ApiExtrasTagsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasTagsListRequest) IdRe(idRe []string) ApiExtrasTagsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasTagsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasTagsListRequest) Limit(limit int32) ApiExtrasTagsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasTagsListRequest) Name(name []string) ApiExtrasTagsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasTagsListRequest) NameIc(nameIc []string) ApiExtrasTagsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasTagsListRequest) NameIe(nameIe []string) ApiExtrasTagsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasTagsListRequest) NameIew(nameIew []string) ApiExtrasTagsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasTagsListRequest) NameIre(nameIre []string) ApiExtrasTagsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasTagsListRequest) NameIsw(nameIsw []string) ApiExtrasTagsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasTagsListRequest) NameN(nameN []string) ApiExtrasTagsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasTagsListRequest) NameNic(nameNic []string) ApiExtrasTagsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasTagsListRequest) NameNie(nameNie []string) ApiExtrasTagsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasTagsListRequest) NameNiew(nameNiew []string) ApiExtrasTagsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasTagsListRequest) NameNire(nameNire []string) ApiExtrasTagsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasTagsListRequest) NameNisw(nameNisw []string) ApiExtrasTagsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasTagsListRequest) NameNre(nameNre []string) ApiExtrasTagsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasTagsListRequest) NameRe(nameRe []string) ApiExtrasTagsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasTagsListRequest) Offset(offset int32) ApiExtrasTagsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasTagsListRequest) Q(q string) ApiExtrasTagsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasTagsListRequest) Sort(sort string) ApiExtrasTagsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasTagsListRequest) Teams(teams []string) ApiExtrasTagsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasTagsListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasTagsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasTagsListRequest) TeamsN(teamsN string) ApiExtrasTagsListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiExtrasTagsListRequest) Depth(depth int32) ApiExtrasTagsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasTagsListRequest) Execute() (*PaginatedTagList, *http.Response, error) {
	return r.ApiService.ExtrasTagsListExecute(r)
}

/*
ExtrasTagsList Method for ExtrasTagsList

Retrieve a list of tag objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsListRequest
*/
func (a *ExtrasAPIService) ExtrasTagsList(ctx context.Context) ApiExtrasTagsListRequest {
	return ApiExtrasTagsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedTagList
func (a *ExtrasAPIService) ExtrasTagsListExecute(r ApiExtrasTagsListRequest) (*PaginatedTagList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedTagList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "form", "multi")
		}
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "form", "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "form", "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "form", "multi")
		}
	}
	if r.colorIre != nil {
		t := *r.colorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ire", t, "form", "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "form", "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "form", "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "form", "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "form", "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "form", "multi")
		}
	}
	if r.colorNire != nil {
		t := *r.colorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nire", t, "form", "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "form", "multi")
		}
	}
	if r.colorNre != nil {
		t := *r.colorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nre", t, "form", "multi")
		}
	}
	if r.colorRe != nil {
		t := *r.colorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__re", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", t, "form", "multi")
		}
	}
	if r.contentTypesIc != nil {
		t := *r.contentTypesIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", t, "form", "multi")
		}
	}
	if r.contentTypesIe != nil {
		t := *r.contentTypesIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", t, "form", "multi")
		}
	}
	if r.contentTypesIew != nil {
		t := *r.contentTypesIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", t, "form", "multi")
		}
	}
	if r.contentTypesIre != nil {
		t := *r.contentTypesIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", t, "form", "multi")
		}
	}
	if r.contentTypesIsw != nil {
		t := *r.contentTypesIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", t, "form", "multi")
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", t, "form", "multi")
		}
	}
	if r.contentTypesNic != nil {
		t := *r.contentTypesNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", t, "form", "multi")
		}
	}
	if r.contentTypesNie != nil {
		t := *r.contentTypesNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", t, "form", "multi")
		}
	}
	if r.contentTypesNiew != nil {
		t := *r.contentTypesNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", t, "form", "multi")
		}
	}
	if r.contentTypesNire != nil {
		t := *r.contentTypesNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", t, "form", "multi")
		}
	}
	if r.contentTypesNisw != nil {
		t := *r.contentTypesNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", t, "form", "multi")
		}
	}
	if r.contentTypesNre != nil {
		t := *r.contentTypesNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", t, "form", "multi")
		}
	}
	if r.contentTypesRe != nil {
		t := *r.contentTypesRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTagsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasTagsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasTagsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTagsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasTagsNotesCreateExecute(r)
}

/*
ExtrasTagsNotesCreate Method for ExtrasTagsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsNotesCreate(ctx context.Context, id string) ApiExtrasTagsNotesCreateRequest {
	return ApiExtrasTagsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasTagsNotesCreateExecute(r ApiExtrasTagsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasTagsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasTagsNotesListRequest) Limit(limit int32) ApiExtrasTagsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasTagsNotesListRequest) Offset(offset int32) ApiExtrasTagsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasTagsNotesListRequest) Depth(depth int32) ApiExtrasTagsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasTagsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasTagsNotesListExecute(r)
}

/*
ExtrasTagsNotesList Method for ExtrasTagsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasTagsNotesList(ctx context.Context, id string) ApiExtrasTagsNotesListRequest {
	return ApiExtrasTagsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasTagsNotesListExecute(r ApiExtrasTagsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedTagRequest *PatchedTagRequest
}

func (r ApiExtrasTagsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTagsPartialUpdateRequest) PatchedTagRequest(patchedTagRequest PatchedTagRequest) ApiExtrasTagsPartialUpdateRequest {
	r.patchedTagRequest = &patchedTagRequest
	return r
}

func (r ApiExtrasTagsPartialUpdateRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsPartialUpdateExecute(r)
}

/*
ExtrasTagsPartialUpdate Method for ExtrasTagsPartialUpdate

Partial update a tag object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsPartialUpdate(ctx context.Context, id string) ApiExtrasTagsPartialUpdateRequest {
	return ApiExtrasTagsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Tag
func (a *ExtrasAPIService) ExtrasTagsPartialUpdateExecute(r ApiExtrasTagsPartialUpdateRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedTagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasTagsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasTagsRetrieveRequest) Depth(depth int32) ApiExtrasTagsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasTagsRetrieveRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsRetrieveExecute(r)
}

/*
ExtrasTagsRetrieve Method for ExtrasTagsRetrieve

Retrieve a tag object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasTagsRetrieve(ctx context.Context, id string) ApiExtrasTagsRetrieveRequest {
	return ApiExtrasTagsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Tag
func (a *ExtrasAPIService) ExtrasTagsRetrieveExecute(r ApiExtrasTagsRetrieveRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	tagRequest *TagRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTagsUpdateRequest) TagRequest(tagRequest TagRequest) ApiExtrasTagsUpdateRequest {
	r.tagRequest = &tagRequest
	return r
}

func (r ApiExtrasTagsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTagsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTagsUpdateRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsUpdateExecute(r)
}

/*
ExtrasTagsUpdate Method for ExtrasTagsUpdate

Update a tag object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsUpdate(ctx context.Context, id string) ApiExtrasTagsUpdateRequest {
	return ApiExtrasTagsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Tag
func (a *ExtrasAPIService) ExtrasTagsUpdateExecute(r ApiExtrasTagsUpdateRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagRequest == nil {
		return localVarReturnValue, nil, reportError("tagRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTeamsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTeamsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasTeamsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasTeamsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTeamsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasTeamsBulkDestroyExecute(r)
}

/*
ExtrasTeamsBulkDestroy Method for ExtrasTeamsBulkDestroy

Destroy a list of team objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTeamsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsBulkDestroy(ctx context.Context) ApiExtrasTeamsBulkDestroyRequest {
	return ApiExtrasTeamsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasTeamsBulkDestroyExecute(r ApiExtrasTeamsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasTeamsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableTeamRequest *[]PatchedBulkWritableTeamRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTeamsBulkPartialUpdateRequest) PatchedBulkWritableTeamRequest(patchedBulkWritableTeamRequest []PatchedBulkWritableTeamRequest) ApiExtrasTeamsBulkPartialUpdateRequest {
	r.patchedBulkWritableTeamRequest = &patchedBulkWritableTeamRequest
	return r
}

func (r ApiExtrasTeamsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTeamsBulkPartialUpdateRequest) Execute() ([]Team, *http.Response, error) {
	return r.ApiService.ExtrasTeamsBulkPartialUpdateExecute(r)
}

/*
ExtrasTeamsBulkPartialUpdate Method for ExtrasTeamsBulkPartialUpdate

Partial update a list of team objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTeamsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsBulkPartialUpdate(ctx context.Context) ApiExtrasTeamsBulkPartialUpdateRequest {
	return ApiExtrasTeamsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Team
func (a *ExtrasAPIService) ExtrasTeamsBulkPartialUpdateExecute(r ApiExtrasTeamsBulkPartialUpdateRequest) ([]Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableTeamRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableTeamRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableTeamRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTeamsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableTeamRequest *[]BulkWritableTeamRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTeamsBulkUpdateRequest) BulkWritableTeamRequest(bulkWritableTeamRequest []BulkWritableTeamRequest) ApiExtrasTeamsBulkUpdateRequest {
	r.bulkWritableTeamRequest = &bulkWritableTeamRequest
	return r
}

func (r ApiExtrasTeamsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTeamsBulkUpdateRequest) Execute() ([]Team, *http.Response, error) {
	return r.ApiService.ExtrasTeamsBulkUpdateExecute(r)
}

/*
ExtrasTeamsBulkUpdate Method for ExtrasTeamsBulkUpdate

Update a list of team objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTeamsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsBulkUpdate(ctx context.Context) ApiExtrasTeamsBulkUpdateRequest {
	return ApiExtrasTeamsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Team
func (a *ExtrasAPIService) ExtrasTeamsBulkUpdateExecute(r ApiExtrasTeamsBulkUpdateRequest) ([]Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableTeamRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableTeamRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableTeamRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTeamsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	teamRequest *TeamRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTeamsCreateRequest) TeamRequest(teamRequest TeamRequest) ApiExtrasTeamsCreateRequest {
	r.teamRequest = &teamRequest
	return r
}

func (r ApiExtrasTeamsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTeamsCreateRequest) Execute() (*Team, *http.Response, error) {
	return r.ApiService.ExtrasTeamsCreateExecute(r)
}

/*
ExtrasTeamsCreate Method for ExtrasTeamsCreate

Create one or more team objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTeamsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsCreate(ctx context.Context) ApiExtrasTeamsCreateRequest {
	return ApiExtrasTeamsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Team
func (a *ExtrasAPIService) ExtrasTeamsCreateExecute(r ApiExtrasTeamsCreateRequest) (*Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.teamRequest == nil {
		return localVarReturnValue, nil, reportError("teamRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTeamsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTeamsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTeamsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasTeamsDestroyExecute(r)
}

/*
ExtrasTeamsDestroy Method for ExtrasTeamsDestroy

Destroy a team object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this team.
 @return ApiExtrasTeamsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsDestroy(ctx context.Context, id string) ApiExtrasTeamsDestroyRequest {
	return ApiExtrasTeamsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasTeamsDestroyExecute(r ApiExtrasTeamsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasTeamsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	address *[]string
	addressIc *[]string
	addressIe *[]string
	addressIew *[]string
	addressIre *[]string
	addressIsw *[]string
	addressN *[]string
	addressNic *[]string
	addressNie *[]string
	addressNiew *[]string
	addressNire *[]string
	addressNisw *[]string
	addressNre *[]string
	addressRe *[]string
	comments *[]string
	commentsIc *[]string
	commentsIe *[]string
	commentsIew *[]string
	commentsIre *[]string
	commentsIsw *[]string
	commentsN *[]string
	commentsNic *[]string
	commentsNie *[]string
	commentsNiew *[]string
	commentsNire *[]string
	commentsNisw *[]string
	commentsNre *[]string
	commentsRe *[]string
	contacts *[]string
	contactsN *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	dynamicGroups *[]string
	dynamicGroupsN *string
	email *[]string
	emailIc *[]string
	emailIe *[]string
	emailIew *[]string
	emailIre *[]string
	emailIsw *[]string
	emailN *[]string
	emailNic *[]string
	emailNie *[]string
	emailNiew *[]string
	emailNire *[]string
	emailNisw *[]string
	emailNre *[]string
	emailRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	phone *[]string
	phoneIc *[]string
	phoneIe *[]string
	phoneIew *[]string
	phoneIre *[]string
	phoneIsw *[]string
	phoneN *[]string
	phoneNic *[]string
	phoneNie *[]string
	phoneNiew *[]string
	phoneNire *[]string
	phoneNisw *[]string
	phoneNre *[]string
	phoneRe *[]string
	q *string
	similarToLocationData *[]string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	depth *int32
}

func (r ApiExtrasTeamsListRequest) Address(address []string) ApiExtrasTeamsListRequest {
	r.address = &address
	return r
}

func (r ApiExtrasTeamsListRequest) AddressIc(addressIc []string) ApiExtrasTeamsListRequest {
	r.addressIc = &addressIc
	return r
}

func (r ApiExtrasTeamsListRequest) AddressIe(addressIe []string) ApiExtrasTeamsListRequest {
	r.addressIe = &addressIe
	return r
}

func (r ApiExtrasTeamsListRequest) AddressIew(addressIew []string) ApiExtrasTeamsListRequest {
	r.addressIew = &addressIew
	return r
}

func (r ApiExtrasTeamsListRequest) AddressIre(addressIre []string) ApiExtrasTeamsListRequest {
	r.addressIre = &addressIre
	return r
}

func (r ApiExtrasTeamsListRequest) AddressIsw(addressIsw []string) ApiExtrasTeamsListRequest {
	r.addressIsw = &addressIsw
	return r
}

func (r ApiExtrasTeamsListRequest) AddressN(addressN []string) ApiExtrasTeamsListRequest {
	r.addressN = &addressN
	return r
}

func (r ApiExtrasTeamsListRequest) AddressNic(addressNic []string) ApiExtrasTeamsListRequest {
	r.addressNic = &addressNic
	return r
}

func (r ApiExtrasTeamsListRequest) AddressNie(addressNie []string) ApiExtrasTeamsListRequest {
	r.addressNie = &addressNie
	return r
}

func (r ApiExtrasTeamsListRequest) AddressNiew(addressNiew []string) ApiExtrasTeamsListRequest {
	r.addressNiew = &addressNiew
	return r
}

func (r ApiExtrasTeamsListRequest) AddressNire(addressNire []string) ApiExtrasTeamsListRequest {
	r.addressNire = &addressNire
	return r
}

func (r ApiExtrasTeamsListRequest) AddressNisw(addressNisw []string) ApiExtrasTeamsListRequest {
	r.addressNisw = &addressNisw
	return r
}

func (r ApiExtrasTeamsListRequest) AddressNre(addressNre []string) ApiExtrasTeamsListRequest {
	r.addressNre = &addressNre
	return r
}

func (r ApiExtrasTeamsListRequest) AddressRe(addressRe []string) ApiExtrasTeamsListRequest {
	r.addressRe = &addressRe
	return r
}

func (r ApiExtrasTeamsListRequest) Comments(comments []string) ApiExtrasTeamsListRequest {
	r.comments = &comments
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsIc(commentsIc []string) ApiExtrasTeamsListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsIe(commentsIe []string) ApiExtrasTeamsListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsIew(commentsIew []string) ApiExtrasTeamsListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsIre(commentsIre []string) ApiExtrasTeamsListRequest {
	r.commentsIre = &commentsIre
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsIsw(commentsIsw []string) ApiExtrasTeamsListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsN(commentsN []string) ApiExtrasTeamsListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsNic(commentsNic []string) ApiExtrasTeamsListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsNie(commentsNie []string) ApiExtrasTeamsListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsNiew(commentsNiew []string) ApiExtrasTeamsListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsNire(commentsNire []string) ApiExtrasTeamsListRequest {
	r.commentsNire = &commentsNire
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsNisw(commentsNisw []string) ApiExtrasTeamsListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsNre(commentsNre []string) ApiExtrasTeamsListRequest {
	r.commentsNre = &commentsNre
	return r
}

func (r ApiExtrasTeamsListRequest) CommentsRe(commentsRe []string) ApiExtrasTeamsListRequest {
	r.commentsRe = &commentsRe
	return r
}

func (r ApiExtrasTeamsListRequest) Contacts(contacts []string) ApiExtrasTeamsListRequest {
	r.contacts = &contacts
	return r
}

func (r ApiExtrasTeamsListRequest) ContactsN(contactsN []string) ApiExtrasTeamsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasTeamsListRequest) Created(created []time.Time) ApiExtrasTeamsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasTeamsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasTeamsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasTeamsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasTeamsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasTeamsListRequest) CreatedIsnull(createdIsnull bool) ApiExtrasTeamsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiExtrasTeamsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasTeamsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasTeamsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasTeamsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasTeamsListRequest) CreatedN(createdN []time.Time) ApiExtrasTeamsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasTeamsListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasTeamsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasTeamsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasTeamsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasTeamsListRequest) Email(email []string) ApiExtrasTeamsListRequest {
	r.email = &email
	return r
}

func (r ApiExtrasTeamsListRequest) EmailIc(emailIc []string) ApiExtrasTeamsListRequest {
	r.emailIc = &emailIc
	return r
}

func (r ApiExtrasTeamsListRequest) EmailIe(emailIe []string) ApiExtrasTeamsListRequest {
	r.emailIe = &emailIe
	return r
}

func (r ApiExtrasTeamsListRequest) EmailIew(emailIew []string) ApiExtrasTeamsListRequest {
	r.emailIew = &emailIew
	return r
}

func (r ApiExtrasTeamsListRequest) EmailIre(emailIre []string) ApiExtrasTeamsListRequest {
	r.emailIre = &emailIre
	return r
}

func (r ApiExtrasTeamsListRequest) EmailIsw(emailIsw []string) ApiExtrasTeamsListRequest {
	r.emailIsw = &emailIsw
	return r
}

func (r ApiExtrasTeamsListRequest) EmailN(emailN []string) ApiExtrasTeamsListRequest {
	r.emailN = &emailN
	return r
}

func (r ApiExtrasTeamsListRequest) EmailNic(emailNic []string) ApiExtrasTeamsListRequest {
	r.emailNic = &emailNic
	return r
}

func (r ApiExtrasTeamsListRequest) EmailNie(emailNie []string) ApiExtrasTeamsListRequest {
	r.emailNie = &emailNie
	return r
}

func (r ApiExtrasTeamsListRequest) EmailNiew(emailNiew []string) ApiExtrasTeamsListRequest {
	r.emailNiew = &emailNiew
	return r
}

func (r ApiExtrasTeamsListRequest) EmailNire(emailNire []string) ApiExtrasTeamsListRequest {
	r.emailNire = &emailNire
	return r
}

func (r ApiExtrasTeamsListRequest) EmailNisw(emailNisw []string) ApiExtrasTeamsListRequest {
	r.emailNisw = &emailNisw
	return r
}

func (r ApiExtrasTeamsListRequest) EmailNre(emailNre []string) ApiExtrasTeamsListRequest {
	r.emailNre = &emailNre
	return r
}

func (r ApiExtrasTeamsListRequest) EmailRe(emailRe []string) ApiExtrasTeamsListRequest {
	r.emailRe = &emailRe
	return r
}

func (r ApiExtrasTeamsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasTeamsListRequest) Id(id []string) ApiExtrasTeamsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasTeamsListRequest) IdIc(idIc []string) ApiExtrasTeamsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasTeamsListRequest) IdIe(idIe []string) ApiExtrasTeamsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasTeamsListRequest) IdIew(idIew []string) ApiExtrasTeamsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasTeamsListRequest) IdIre(idIre []string) ApiExtrasTeamsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasTeamsListRequest) IdIsw(idIsw []string) ApiExtrasTeamsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasTeamsListRequest) IdN(idN []string) ApiExtrasTeamsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasTeamsListRequest) IdNic(idNic []string) ApiExtrasTeamsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasTeamsListRequest) IdNie(idNie []string) ApiExtrasTeamsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasTeamsListRequest) IdNiew(idNiew []string) ApiExtrasTeamsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasTeamsListRequest) IdNire(idNire []string) ApiExtrasTeamsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasTeamsListRequest) IdNisw(idNisw []string) ApiExtrasTeamsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasTeamsListRequest) IdNre(idNre []string) ApiExtrasTeamsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasTeamsListRequest) IdRe(idRe []string) ApiExtrasTeamsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasTeamsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasTeamsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasTeamsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasTeamsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasTeamsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasTeamsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasTeamsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiExtrasTeamsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiExtrasTeamsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasTeamsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasTeamsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasTeamsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasTeamsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasTeamsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasTeamsListRequest) Limit(limit int32) ApiExtrasTeamsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasTeamsListRequest) Name(name []string) ApiExtrasTeamsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasTeamsListRequest) NameIc(nameIc []string) ApiExtrasTeamsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasTeamsListRequest) NameIe(nameIe []string) ApiExtrasTeamsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasTeamsListRequest) NameIew(nameIew []string) ApiExtrasTeamsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasTeamsListRequest) NameIre(nameIre []string) ApiExtrasTeamsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasTeamsListRequest) NameIsw(nameIsw []string) ApiExtrasTeamsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasTeamsListRequest) NameN(nameN []string) ApiExtrasTeamsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasTeamsListRequest) NameNic(nameNic []string) ApiExtrasTeamsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasTeamsListRequest) NameNie(nameNie []string) ApiExtrasTeamsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasTeamsListRequest) NameNiew(nameNiew []string) ApiExtrasTeamsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasTeamsListRequest) NameNire(nameNire []string) ApiExtrasTeamsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasTeamsListRequest) NameNisw(nameNisw []string) ApiExtrasTeamsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasTeamsListRequest) NameNre(nameNre []string) ApiExtrasTeamsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasTeamsListRequest) NameRe(nameRe []string) ApiExtrasTeamsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasTeamsListRequest) Offset(offset int32) ApiExtrasTeamsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasTeamsListRequest) Phone(phone []string) ApiExtrasTeamsListRequest {
	r.phone = &phone
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneIc(phoneIc []string) ApiExtrasTeamsListRequest {
	r.phoneIc = &phoneIc
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneIe(phoneIe []string) ApiExtrasTeamsListRequest {
	r.phoneIe = &phoneIe
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneIew(phoneIew []string) ApiExtrasTeamsListRequest {
	r.phoneIew = &phoneIew
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneIre(phoneIre []string) ApiExtrasTeamsListRequest {
	r.phoneIre = &phoneIre
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneIsw(phoneIsw []string) ApiExtrasTeamsListRequest {
	r.phoneIsw = &phoneIsw
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneN(phoneN []string) ApiExtrasTeamsListRequest {
	r.phoneN = &phoneN
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneNic(phoneNic []string) ApiExtrasTeamsListRequest {
	r.phoneNic = &phoneNic
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneNie(phoneNie []string) ApiExtrasTeamsListRequest {
	r.phoneNie = &phoneNie
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneNiew(phoneNiew []string) ApiExtrasTeamsListRequest {
	r.phoneNiew = &phoneNiew
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneNire(phoneNire []string) ApiExtrasTeamsListRequest {
	r.phoneNire = &phoneNire
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneNisw(phoneNisw []string) ApiExtrasTeamsListRequest {
	r.phoneNisw = &phoneNisw
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneNre(phoneNre []string) ApiExtrasTeamsListRequest {
	r.phoneNre = &phoneNre
	return r
}

func (r ApiExtrasTeamsListRequest) PhoneRe(phoneRe []string) ApiExtrasTeamsListRequest {
	r.phoneRe = &phoneRe
	return r
}

// Search
func (r ApiExtrasTeamsListRequest) Q(q string) ApiExtrasTeamsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasTeamsListRequest) SimilarToLocationData(similarToLocationData []string) ApiExtrasTeamsListRequest {
	r.similarToLocationData = &similarToLocationData
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasTeamsListRequest) Sort(sort string) ApiExtrasTeamsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasTeamsListRequest) Tags(tags []string) ApiExtrasTeamsListRequest {
	r.tags = &tags
	return r
}

func (r ApiExtrasTeamsListRequest) TagsIsnull(tagsIsnull bool) ApiExtrasTeamsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiExtrasTeamsListRequest) TagsN(tagsN []string) ApiExtrasTeamsListRequest {
	r.tagsN = &tagsN
	return r
}

// Serializer Depth
func (r ApiExtrasTeamsListRequest) Depth(depth int32) ApiExtrasTeamsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasTeamsListRequest) Execute() (*PaginatedTeamList, *http.Response, error) {
	return r.ApiService.ExtrasTeamsListExecute(r)
}

/*
ExtrasTeamsList Method for ExtrasTeamsList

Retrieve a list of team objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTeamsListRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsList(ctx context.Context) ApiExtrasTeamsListRequest {
	return ApiExtrasTeamsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedTeamList
func (a *ExtrasAPIService) ExtrasTeamsListExecute(r ApiExtrasTeamsListRequest) (*PaginatedTeamList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedTeamList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.address != nil {
		t := *r.address
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address", t, "form", "multi")
		}
	}
	if r.addressIc != nil {
		t := *r.addressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__ic", t, "form", "multi")
		}
	}
	if r.addressIe != nil {
		t := *r.addressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__ie", t, "form", "multi")
		}
	}
	if r.addressIew != nil {
		t := *r.addressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__iew", t, "form", "multi")
		}
	}
	if r.addressIre != nil {
		t := *r.addressIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__ire", t, "form", "multi")
		}
	}
	if r.addressIsw != nil {
		t := *r.addressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__isw", t, "form", "multi")
		}
	}
	if r.addressN != nil {
		t := *r.addressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__n", t, "form", "multi")
		}
	}
	if r.addressNic != nil {
		t := *r.addressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nic", t, "form", "multi")
		}
	}
	if r.addressNie != nil {
		t := *r.addressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nie", t, "form", "multi")
		}
	}
	if r.addressNiew != nil {
		t := *r.addressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__niew", t, "form", "multi")
		}
	}
	if r.addressNire != nil {
		t := *r.addressNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nire", t, "form", "multi")
		}
	}
	if r.addressNisw != nil {
		t := *r.addressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nisw", t, "form", "multi")
		}
	}
	if r.addressNre != nil {
		t := *r.addressNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__nre", t, "form", "multi")
		}
	}
	if r.addressRe != nil {
		t := *r.addressRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "address__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "address__re", t, "form", "multi")
		}
	}
	if r.comments != nil {
		t := *r.comments
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments", t, "form", "multi")
		}
	}
	if r.commentsIc != nil {
		t := *r.commentsIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", t, "form", "multi")
		}
	}
	if r.commentsIe != nil {
		t := *r.commentsIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", t, "form", "multi")
		}
	}
	if r.commentsIew != nil {
		t := *r.commentsIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", t, "form", "multi")
		}
	}
	if r.commentsIre != nil {
		t := *r.commentsIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", t, "form", "multi")
		}
	}
	if r.commentsIsw != nil {
		t := *r.commentsIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", t, "form", "multi")
		}
	}
	if r.commentsN != nil {
		t := *r.commentsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", t, "form", "multi")
		}
	}
	if r.commentsNic != nil {
		t := *r.commentsNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", t, "form", "multi")
		}
	}
	if r.commentsNie != nil {
		t := *r.commentsNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", t, "form", "multi")
		}
	}
	if r.commentsNiew != nil {
		t := *r.commentsNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", t, "form", "multi")
		}
	}
	if r.commentsNire != nil {
		t := *r.commentsNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", t, "form", "multi")
		}
	}
	if r.commentsNisw != nil {
		t := *r.commentsNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", t, "form", "multi")
		}
	}
	if r.commentsNre != nil {
		t := *r.commentsNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", t, "form", "multi")
		}
	}
	if r.commentsRe != nil {
		t := *r.commentsRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsN != nil {
		t := *r.contactsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.email != nil {
		t := *r.email
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email", t, "form", "multi")
		}
	}
	if r.emailIc != nil {
		t := *r.emailIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__ic", t, "form", "multi")
		}
	}
	if r.emailIe != nil {
		t := *r.emailIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__ie", t, "form", "multi")
		}
	}
	if r.emailIew != nil {
		t := *r.emailIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__iew", t, "form", "multi")
		}
	}
	if r.emailIre != nil {
		t := *r.emailIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__ire", t, "form", "multi")
		}
	}
	if r.emailIsw != nil {
		t := *r.emailIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__isw", t, "form", "multi")
		}
	}
	if r.emailN != nil {
		t := *r.emailN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__n", t, "form", "multi")
		}
	}
	if r.emailNic != nil {
		t := *r.emailNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nic", t, "form", "multi")
		}
	}
	if r.emailNie != nil {
		t := *r.emailNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nie", t, "form", "multi")
		}
	}
	if r.emailNiew != nil {
		t := *r.emailNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__niew", t, "form", "multi")
		}
	}
	if r.emailNire != nil {
		t := *r.emailNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nire", t, "form", "multi")
		}
	}
	if r.emailNisw != nil {
		t := *r.emailNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nisw", t, "form", "multi")
		}
	}
	if r.emailNre != nil {
		t := *r.emailNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__nre", t, "form", "multi")
		}
	}
	if r.emailRe != nil {
		t := *r.emailRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "email__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "email__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.phone != nil {
		t := *r.phone
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone", t, "form", "multi")
		}
	}
	if r.phoneIc != nil {
		t := *r.phoneIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ic", t, "form", "multi")
		}
	}
	if r.phoneIe != nil {
		t := *r.phoneIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ie", t, "form", "multi")
		}
	}
	if r.phoneIew != nil {
		t := *r.phoneIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__iew", t, "form", "multi")
		}
	}
	if r.phoneIre != nil {
		t := *r.phoneIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__ire", t, "form", "multi")
		}
	}
	if r.phoneIsw != nil {
		t := *r.phoneIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__isw", t, "form", "multi")
		}
	}
	if r.phoneN != nil {
		t := *r.phoneN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__n", t, "form", "multi")
		}
	}
	if r.phoneNic != nil {
		t := *r.phoneNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nic", t, "form", "multi")
		}
	}
	if r.phoneNie != nil {
		t := *r.phoneNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nie", t, "form", "multi")
		}
	}
	if r.phoneNiew != nil {
		t := *r.phoneNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__niew", t, "form", "multi")
		}
	}
	if r.phoneNire != nil {
		t := *r.phoneNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nire", t, "form", "multi")
		}
	}
	if r.phoneNisw != nil {
		t := *r.phoneNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nisw", t, "form", "multi")
		}
	}
	if r.phoneNre != nil {
		t := *r.phoneNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__nre", t, "form", "multi")
		}
	}
	if r.phoneRe != nil {
		t := *r.phoneRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "phone__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "phone__re", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.similarToLocationData != nil {
		t := *r.similarToLocationData
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "similar_to_location_data", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "similar_to_location_data", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTeamsNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTeamsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasTeamsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasTeamsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTeamsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasTeamsNotesCreateExecute(r)
}

/*
ExtrasTeamsNotesCreate Method for ExtrasTeamsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this team.
 @return ApiExtrasTeamsNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsNotesCreate(ctx context.Context, id string) ApiExtrasTeamsNotesCreateRequest {
	return ApiExtrasTeamsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasTeamsNotesCreateExecute(r ApiExtrasTeamsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTeamsNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasTeamsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasTeamsNotesListRequest) Limit(limit int32) ApiExtrasTeamsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasTeamsNotesListRequest) Offset(offset int32) ApiExtrasTeamsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasTeamsNotesListRequest) Depth(depth int32) ApiExtrasTeamsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasTeamsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasTeamsNotesListExecute(r)
}

/*
ExtrasTeamsNotesList Method for ExtrasTeamsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this team.
 @return ApiExtrasTeamsNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsNotesList(ctx context.Context, id string) ApiExtrasTeamsNotesListRequest {
	return ApiExtrasTeamsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasTeamsNotesListExecute(r ApiExtrasTeamsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTeamsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedTeamRequest *PatchedTeamRequest
}

func (r ApiExtrasTeamsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTeamsPartialUpdateRequest) PatchedTeamRequest(patchedTeamRequest PatchedTeamRequest) ApiExtrasTeamsPartialUpdateRequest {
	r.patchedTeamRequest = &patchedTeamRequest
	return r
}

func (r ApiExtrasTeamsPartialUpdateRequest) Execute() (*Team, *http.Response, error) {
	return r.ApiService.ExtrasTeamsPartialUpdateExecute(r)
}

/*
ExtrasTeamsPartialUpdate Method for ExtrasTeamsPartialUpdate

Partial update a team object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this team.
 @return ApiExtrasTeamsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsPartialUpdate(ctx context.Context, id string) ApiExtrasTeamsPartialUpdateRequest {
	return ApiExtrasTeamsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Team
func (a *ExtrasAPIService) ExtrasTeamsPartialUpdateExecute(r ApiExtrasTeamsPartialUpdateRequest) (*Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedTeamRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTeamsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasTeamsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasTeamsRetrieveRequest) Depth(depth int32) ApiExtrasTeamsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasTeamsRetrieveRequest) Execute() (*Team, *http.Response, error) {
	return r.ApiService.ExtrasTeamsRetrieveExecute(r)
}

/*
ExtrasTeamsRetrieve Method for ExtrasTeamsRetrieve

Retrieve a team object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this team.
 @return ApiExtrasTeamsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsRetrieve(ctx context.Context, id string) ApiExtrasTeamsRetrieveRequest {
	return ApiExtrasTeamsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Team
func (a *ExtrasAPIService) ExtrasTeamsRetrieveExecute(r ApiExtrasTeamsRetrieveRequest) (*Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTeamsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	teamRequest *TeamRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasTeamsUpdateRequest) TeamRequest(teamRequest TeamRequest) ApiExtrasTeamsUpdateRequest {
	r.teamRequest = &teamRequest
	return r
}

func (r ApiExtrasTeamsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasTeamsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasTeamsUpdateRequest) Execute() (*Team, *http.Response, error) {
	return r.ApiService.ExtrasTeamsUpdateExecute(r)
}

/*
ExtrasTeamsUpdate Method for ExtrasTeamsUpdate

Update a team object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this team.
 @return ApiExtrasTeamsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTeamsUpdate(ctx context.Context, id string) ApiExtrasTeamsUpdateRequest {
	return ApiExtrasTeamsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Team
func (a *ExtrasAPIService) ExtrasTeamsUpdateExecute(r ApiExtrasTeamsUpdateRequest) (*Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTeamsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/teams/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.teamRequest == nil {
		return localVarReturnValue, nil, reportError("teamRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasUserSavedViewAssociationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasUserSavedViewAssociationsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasUserSavedViewAssociationsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasUserSavedViewAssociationsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasUserSavedViewAssociationsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasUserSavedViewAssociationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasUserSavedViewAssociationsBulkDestroyExecute(r)
}

/*
ExtrasUserSavedViewAssociationsBulkDestroy Method for ExtrasUserSavedViewAssociationsBulkDestroy

Destroy a list of user saved view association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasUserSavedViewAssociationsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsBulkDestroy(ctx context.Context) ApiExtrasUserSavedViewAssociationsBulkDestroyRequest {
	return ApiExtrasUserSavedViewAssociationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsBulkDestroyExecute(r ApiExtrasUserSavedViewAssociationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasUserSavedViewAssociationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/user-saved-view-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableUserSavedViewAssociationRequest *[]PatchedBulkWritableUserSavedViewAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest) PatchedBulkWritableUserSavedViewAssociationRequest(patchedBulkWritableUserSavedViewAssociationRequest []PatchedBulkWritableUserSavedViewAssociationRequest) ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest {
	r.patchedBulkWritableUserSavedViewAssociationRequest = &patchedBulkWritableUserSavedViewAssociationRequest
	return r
}

func (r ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest) Execute() ([]UserSavedViewAssociation, *http.Response, error) {
	return r.ApiService.ExtrasUserSavedViewAssociationsBulkPartialUpdateExecute(r)
}

/*
ExtrasUserSavedViewAssociationsBulkPartialUpdate Method for ExtrasUserSavedViewAssociationsBulkPartialUpdate

Partial update a list of user saved view association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsBulkPartialUpdate(ctx context.Context) ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest {
	return ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []UserSavedViewAssociation
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsBulkPartialUpdateExecute(r ApiExtrasUserSavedViewAssociationsBulkPartialUpdateRequest) ([]UserSavedViewAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UserSavedViewAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasUserSavedViewAssociationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/user-saved-view-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableUserSavedViewAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableUserSavedViewAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableUserSavedViewAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasUserSavedViewAssociationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableUserSavedViewAssociationRequest *[]BulkWritableUserSavedViewAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasUserSavedViewAssociationsBulkUpdateRequest) BulkWritableUserSavedViewAssociationRequest(bulkWritableUserSavedViewAssociationRequest []BulkWritableUserSavedViewAssociationRequest) ApiExtrasUserSavedViewAssociationsBulkUpdateRequest {
	r.bulkWritableUserSavedViewAssociationRequest = &bulkWritableUserSavedViewAssociationRequest
	return r
}

func (r ApiExtrasUserSavedViewAssociationsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasUserSavedViewAssociationsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasUserSavedViewAssociationsBulkUpdateRequest) Execute() ([]UserSavedViewAssociation, *http.Response, error) {
	return r.ApiService.ExtrasUserSavedViewAssociationsBulkUpdateExecute(r)
}

/*
ExtrasUserSavedViewAssociationsBulkUpdate Method for ExtrasUserSavedViewAssociationsBulkUpdate

Update a list of user saved view association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasUserSavedViewAssociationsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsBulkUpdate(ctx context.Context) ApiExtrasUserSavedViewAssociationsBulkUpdateRequest {
	return ApiExtrasUserSavedViewAssociationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []UserSavedViewAssociation
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsBulkUpdateExecute(r ApiExtrasUserSavedViewAssociationsBulkUpdateRequest) ([]UserSavedViewAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UserSavedViewAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasUserSavedViewAssociationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/user-saved-view-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableUserSavedViewAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableUserSavedViewAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableUserSavedViewAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasUserSavedViewAssociationsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	userSavedViewAssociationRequest *UserSavedViewAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasUserSavedViewAssociationsCreateRequest) UserSavedViewAssociationRequest(userSavedViewAssociationRequest UserSavedViewAssociationRequest) ApiExtrasUserSavedViewAssociationsCreateRequest {
	r.userSavedViewAssociationRequest = &userSavedViewAssociationRequest
	return r
}

func (r ApiExtrasUserSavedViewAssociationsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasUserSavedViewAssociationsCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasUserSavedViewAssociationsCreateRequest) Execute() (*UserSavedViewAssociation, *http.Response, error) {
	return r.ApiService.ExtrasUserSavedViewAssociationsCreateExecute(r)
}

/*
ExtrasUserSavedViewAssociationsCreate Method for ExtrasUserSavedViewAssociationsCreate

Create one or more user saved view association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasUserSavedViewAssociationsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsCreate(ctx context.Context) ApiExtrasUserSavedViewAssociationsCreateRequest {
	return ApiExtrasUserSavedViewAssociationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserSavedViewAssociation
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsCreateExecute(r ApiExtrasUserSavedViewAssociationsCreateRequest) (*UserSavedViewAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserSavedViewAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasUserSavedViewAssociationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/user-saved-view-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userSavedViewAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("userSavedViewAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userSavedViewAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasUserSavedViewAssociationsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasUserSavedViewAssociationsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasUserSavedViewAssociationsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasUserSavedViewAssociationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasUserSavedViewAssociationsDestroyExecute(r)
}

/*
ExtrasUserSavedViewAssociationsDestroy Method for ExtrasUserSavedViewAssociationsDestroy

Destroy a user saved view association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this user saved view association.
 @return ApiExtrasUserSavedViewAssociationsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsDestroy(ctx context.Context, id string) ApiExtrasUserSavedViewAssociationsDestroyRequest {
	return ApiExtrasUserSavedViewAssociationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsDestroyExecute(r ApiExtrasUserSavedViewAssociationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasUserSavedViewAssociationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/user-saved-view-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasUserSavedViewAssociationsListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	created *[]time.Time
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	limit *int32
	offset *int32
	savedView *[]string
	savedViewN *[]string
	sort *string
	user *[]string
	userN *[]string
	viewName *[]string
	viewNameIc *[]string
	viewNameIe *[]string
	viewNameIew *[]string
	viewNameIre *[]string
	viewNameIsw *[]string
	viewNameN *[]string
	viewNameNic *[]string
	viewNameNie *[]string
	viewNameNiew *[]string
	viewNameNire *[]string
	viewNameNisw *[]string
	viewNameNre *[]string
	viewNameRe *[]string
	depth *int32
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) Created(created []time.Time) ApiExtrasUserSavedViewAssociationsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasUserSavedViewAssociationsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasUserSavedViewAssociationsListRequest) Id(id []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdIc(idIc []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdIe(idIe []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdIew(idIew []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdIre(idIre []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdIsw(idIsw []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdN(idN []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdNic(idNic []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdNie(idNie []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdNiew(idNiew []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdNire(idNire []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdNisw(idNisw []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdNre(idNre []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) IdRe(idRe []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasUserSavedViewAssociationsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

// Number of results to return per page.
func (r ApiExtrasUserSavedViewAssociationsListRequest) Limit(limit int32) ApiExtrasUserSavedViewAssociationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasUserSavedViewAssociationsListRequest) Offset(offset int32) ApiExtrasUserSavedViewAssociationsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) SavedView(savedView []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.savedView = &savedView
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) SavedViewN(savedViewN []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.savedViewN = &savedViewN
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasUserSavedViewAssociationsListRequest) Sort(sort string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) User(user []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.user = &user
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) UserN(userN []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.userN = &userN
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewName(viewName []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewName = &viewName
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameIc(viewNameIc []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameIc = &viewNameIc
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameIe(viewNameIe []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameIe = &viewNameIe
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameIew(viewNameIew []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameIew = &viewNameIew
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameIre(viewNameIre []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameIre = &viewNameIre
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameIsw(viewNameIsw []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameIsw = &viewNameIsw
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameN(viewNameN []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameN = &viewNameN
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameNic(viewNameNic []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameNic = &viewNameNic
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameNie(viewNameNie []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameNie = &viewNameNie
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameNiew(viewNameNiew []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameNiew = &viewNameNiew
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameNire(viewNameNire []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameNire = &viewNameNire
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameNisw(viewNameNisw []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameNisw = &viewNameNisw
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameNre(viewNameNre []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameNre = &viewNameNre
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) ViewNameRe(viewNameRe []string) ApiExtrasUserSavedViewAssociationsListRequest {
	r.viewNameRe = &viewNameRe
	return r
}

// Serializer Depth
func (r ApiExtrasUserSavedViewAssociationsListRequest) Depth(depth int32) ApiExtrasUserSavedViewAssociationsListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasUserSavedViewAssociationsListRequest) Execute() (*PaginatedUserSavedViewAssociationList, *http.Response, error) {
	return r.ApiService.ExtrasUserSavedViewAssociationsListExecute(r)
}

/*
ExtrasUserSavedViewAssociationsList Method for ExtrasUserSavedViewAssociationsList

Retrieve a list of user saved view association objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasUserSavedViewAssociationsListRequest
*/
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsList(ctx context.Context) ApiExtrasUserSavedViewAssociationsListRequest {
	return ApiExtrasUserSavedViewAssociationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedUserSavedViewAssociationList
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsListExecute(r ApiExtrasUserSavedViewAssociationsListRequest) (*PaginatedUserSavedViewAssociationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedUserSavedViewAssociationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasUserSavedViewAssociationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/user-saved-view-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.savedView != nil {
		t := *r.savedView
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "saved_view", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "saved_view", t, "form", "multi")
		}
	}
	if r.savedViewN != nil {
		t := *r.savedViewN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "saved_view__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "saved_view__n", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "form", "multi")
		}
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", t, "form", "multi")
		}
	}
	if r.viewName != nil {
		t := *r.viewName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name", t, "form", "multi")
		}
	}
	if r.viewNameIc != nil {
		t := *r.viewNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__ic", t, "form", "multi")
		}
	}
	if r.viewNameIe != nil {
		t := *r.viewNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__ie", t, "form", "multi")
		}
	}
	if r.viewNameIew != nil {
		t := *r.viewNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__iew", t, "form", "multi")
		}
	}
	if r.viewNameIre != nil {
		t := *r.viewNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__ire", t, "form", "multi")
		}
	}
	if r.viewNameIsw != nil {
		t := *r.viewNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__isw", t, "form", "multi")
		}
	}
	if r.viewNameN != nil {
		t := *r.viewNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__n", t, "form", "multi")
		}
	}
	if r.viewNameNic != nil {
		t := *r.viewNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nic", t, "form", "multi")
		}
	}
	if r.viewNameNie != nil {
		t := *r.viewNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nie", t, "form", "multi")
		}
	}
	if r.viewNameNiew != nil {
		t := *r.viewNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__niew", t, "form", "multi")
		}
	}
	if r.viewNameNire != nil {
		t := *r.viewNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nire", t, "form", "multi")
		}
	}
	if r.viewNameNisw != nil {
		t := *r.viewNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nisw", t, "form", "multi")
		}
	}
	if r.viewNameNre != nil {
		t := *r.viewNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__nre", t, "form", "multi")
		}
	}
	if r.viewNameRe != nil {
		t := *r.viewNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "view_name__re", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasUserSavedViewAssociationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedUserSavedViewAssociationRequest *PatchedUserSavedViewAssociationRequest
}

func (r ApiExtrasUserSavedViewAssociationsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasUserSavedViewAssociationsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasUserSavedViewAssociationsPartialUpdateRequest) PatchedUserSavedViewAssociationRequest(patchedUserSavedViewAssociationRequest PatchedUserSavedViewAssociationRequest) ApiExtrasUserSavedViewAssociationsPartialUpdateRequest {
	r.patchedUserSavedViewAssociationRequest = &patchedUserSavedViewAssociationRequest
	return r
}

func (r ApiExtrasUserSavedViewAssociationsPartialUpdateRequest) Execute() (*UserSavedViewAssociation, *http.Response, error) {
	return r.ApiService.ExtrasUserSavedViewAssociationsPartialUpdateExecute(r)
}

/*
ExtrasUserSavedViewAssociationsPartialUpdate Method for ExtrasUserSavedViewAssociationsPartialUpdate

Partial update a user saved view association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this user saved view association.
 @return ApiExtrasUserSavedViewAssociationsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsPartialUpdate(ctx context.Context, id string) ApiExtrasUserSavedViewAssociationsPartialUpdateRequest {
	return ApiExtrasUserSavedViewAssociationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UserSavedViewAssociation
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsPartialUpdateExecute(r ApiExtrasUserSavedViewAssociationsPartialUpdateRequest) (*UserSavedViewAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserSavedViewAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasUserSavedViewAssociationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/user-saved-view-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedUserSavedViewAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasUserSavedViewAssociationsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasUserSavedViewAssociationsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasUserSavedViewAssociationsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasUserSavedViewAssociationsRetrieveRequest) Depth(depth int32) ApiExtrasUserSavedViewAssociationsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasUserSavedViewAssociationsRetrieveRequest) Execute() (*UserSavedViewAssociation, *http.Response, error) {
	return r.ApiService.ExtrasUserSavedViewAssociationsRetrieveExecute(r)
}

/*
ExtrasUserSavedViewAssociationsRetrieve Method for ExtrasUserSavedViewAssociationsRetrieve

Retrieve a user saved view association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this user saved view association.
 @return ApiExtrasUserSavedViewAssociationsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsRetrieve(ctx context.Context, id string) ApiExtrasUserSavedViewAssociationsRetrieveRequest {
	return ApiExtrasUserSavedViewAssociationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UserSavedViewAssociation
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsRetrieveExecute(r ApiExtrasUserSavedViewAssociationsRetrieveRequest) (*UserSavedViewAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserSavedViewAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasUserSavedViewAssociationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/user-saved-view-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasUserSavedViewAssociationsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	userSavedViewAssociationRequest *UserSavedViewAssociationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasUserSavedViewAssociationsUpdateRequest) UserSavedViewAssociationRequest(userSavedViewAssociationRequest UserSavedViewAssociationRequest) ApiExtrasUserSavedViewAssociationsUpdateRequest {
	r.userSavedViewAssociationRequest = &userSavedViewAssociationRequest
	return r
}

func (r ApiExtrasUserSavedViewAssociationsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasUserSavedViewAssociationsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasUserSavedViewAssociationsUpdateRequest) Execute() (*UserSavedViewAssociation, *http.Response, error) {
	return r.ApiService.ExtrasUserSavedViewAssociationsUpdateExecute(r)
}

/*
ExtrasUserSavedViewAssociationsUpdate Method for ExtrasUserSavedViewAssociationsUpdate

Update a user saved view association object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this user saved view association.
 @return ApiExtrasUserSavedViewAssociationsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsUpdate(ctx context.Context, id string) ApiExtrasUserSavedViewAssociationsUpdateRequest {
	return ApiExtrasUserSavedViewAssociationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UserSavedViewAssociation
func (a *ExtrasAPIService) ExtrasUserSavedViewAssociationsUpdateExecute(r ApiExtrasUserSavedViewAssociationsUpdateRequest) (*UserSavedViewAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserSavedViewAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasUserSavedViewAssociationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/user-saved-view-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userSavedViewAssociationRequest == nil {
		return localVarReturnValue, nil, reportError("userSavedViewAssociationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userSavedViewAssociationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasWebhooksBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiExtrasWebhooksBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiExtrasWebhooksBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasWebhooksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasWebhooksBulkDestroyExecute(r)
}

/*
ExtrasWebhooksBulkDestroy Method for ExtrasWebhooksBulkDestroy

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksBulkDestroy(ctx context.Context) ApiExtrasWebhooksBulkDestroyRequest {
	return ApiExtrasWebhooksBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasWebhooksBulkDestroyExecute(r ApiExtrasWebhooksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasWebhooksBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	patchedBulkWritableWebhookRequest *[]PatchedBulkWritableWebhookRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasWebhooksBulkPartialUpdateRequest) PatchedBulkWritableWebhookRequest(patchedBulkWritableWebhookRequest []PatchedBulkWritableWebhookRequest) ApiExtrasWebhooksBulkPartialUpdateRequest {
	r.patchedBulkWritableWebhookRequest = &patchedBulkWritableWebhookRequest
	return r
}

func (r ApiExtrasWebhooksBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasWebhooksBulkPartialUpdateRequest) Execute() ([]Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksBulkPartialUpdateExecute(r)
}

/*
ExtrasWebhooksBulkPartialUpdate Method for ExtrasWebhooksBulkPartialUpdate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksBulkPartialUpdate(ctx context.Context) ApiExtrasWebhooksBulkPartialUpdateRequest {
	return ApiExtrasWebhooksBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Webhook
func (a *ExtrasAPIService) ExtrasWebhooksBulkPartialUpdateExecute(r ApiExtrasWebhooksBulkPartialUpdateRequest) ([]Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableWebhookRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableWebhookRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableWebhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	bulkWritableWebhookRequest *[]BulkWritableWebhookRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasWebhooksBulkUpdateRequest) BulkWritableWebhookRequest(bulkWritableWebhookRequest []BulkWritableWebhookRequest) ApiExtrasWebhooksBulkUpdateRequest {
	r.bulkWritableWebhookRequest = &bulkWritableWebhookRequest
	return r
}

func (r ApiExtrasWebhooksBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasWebhooksBulkUpdateRequest) Execute() ([]Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksBulkUpdateExecute(r)
}

/*
ExtrasWebhooksBulkUpdate Method for ExtrasWebhooksBulkUpdate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksBulkUpdate(ctx context.Context) ApiExtrasWebhooksBulkUpdateRequest {
	return ApiExtrasWebhooksBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Webhook
func (a *ExtrasAPIService) ExtrasWebhooksBulkUpdateExecute(r ApiExtrasWebhooksBulkUpdateRequest) ([]Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableWebhookRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableWebhookRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableWebhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	webhookRequest *WebhookRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasWebhooksCreateRequest) WebhookRequest(webhookRequest WebhookRequest) ApiExtrasWebhooksCreateRequest {
	r.webhookRequest = &webhookRequest
	return r
}

func (r ApiExtrasWebhooksCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasWebhooksCreateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksCreateExecute(r)
}

/*
ExtrasWebhooksCreate Method for ExtrasWebhooksCreate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksCreateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksCreate(ctx context.Context) ApiExtrasWebhooksCreateRequest {
	return ApiExtrasWebhooksCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasAPIService) ExtrasWebhooksCreateExecute(r ApiExtrasWebhooksCreateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhookRequest == nil {
		return localVarReturnValue, nil, reportError("webhookRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasWebhooksDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksDestroyRequest {
	r.format = &format
	return r
}

func (r ApiExtrasWebhooksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasWebhooksDestroyExecute(r)
}

/*
ExtrasWebhooksDestroy Method for ExtrasWebhooksDestroy

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksDestroy(ctx context.Context, id string) ApiExtrasWebhooksDestroyRequest {
	return ApiExtrasWebhooksDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasWebhooksDestroyExecute(r ApiExtrasWebhooksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasWebhooksListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentTypes *[]int32
	contentTypesIc *[]int32
	contentTypesIe *[]int32
	contentTypesIew *[]int32
	contentTypesIre *[]int32
	contentTypesIsw *[]int32
	contentTypesN *[]int32
	contentTypesNic *[]int32
	contentTypesNie *[]int32
	contentTypesNiew *[]int32
	contentTypesNire *[]int32
	contentTypesNisw *[]int32
	contentTypesNre *[]int32
	contentTypesRe *[]int32
	dynamicGroups *[]string
	dynamicGroupsN *string
	enabled *bool
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	payloadUrl *[]string
	payloadUrlIc *[]string
	payloadUrlIe *[]string
	payloadUrlIew *[]string
	payloadUrlIre *[]string
	payloadUrlIsw *[]string
	payloadUrlN *[]string
	payloadUrlNic *[]string
	payloadUrlNie *[]string
	payloadUrlNiew *[]string
	payloadUrlNire *[]string
	payloadUrlNisw *[]string
	payloadUrlNre *[]string
	payloadUrlRe *[]string
	q *string
	sort *string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	typeCreate *bool
	typeDelete *bool
	typeUpdate *bool
	depth *int32
}

func (r ApiExtrasWebhooksListRequest) Contacts(contacts []string) ApiExtrasWebhooksListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiExtrasWebhooksListRequest) ContactsIsnull(contactsIsnull bool) ApiExtrasWebhooksListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiExtrasWebhooksListRequest) ContactsN(contactsN string) ApiExtrasWebhooksListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypes(contentTypes []int32) ApiExtrasWebhooksListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesIc(contentTypesIc []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesIc = &contentTypesIc
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesIe(contentTypesIe []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesIe = &contentTypesIe
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesIew(contentTypesIew []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesIew = &contentTypesIew
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesIre(contentTypesIre []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesIre = &contentTypesIre
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesIsw(contentTypesIsw []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesIsw = &contentTypesIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesNic(contentTypesNic []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesNic = &contentTypesNic
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesNie(contentTypesNie []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesNie = &contentTypesNie
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesNiew(contentTypesNiew []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesNiew = &contentTypesNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesNire(contentTypesNire []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesNire = &contentTypesNire
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesNisw(contentTypesNisw []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesNisw = &contentTypesNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesNre(contentTypesNre []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesNre = &contentTypesNre
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesRe(contentTypesRe []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesRe = &contentTypesRe
	return r
}

func (r ApiExtrasWebhooksListRequest) DynamicGroups(dynamicGroups []string) ApiExtrasWebhooksListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiExtrasWebhooksListRequest) DynamicGroupsN(dynamicGroupsN string) ApiExtrasWebhooksListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiExtrasWebhooksListRequest) Enabled(enabled bool) ApiExtrasWebhooksListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiExtrasWebhooksListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiExtrasWebhooksListRequest) Id(id []string) ApiExtrasWebhooksListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasWebhooksListRequest) IdIc(idIc []string) ApiExtrasWebhooksListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasWebhooksListRequest) IdIe(idIe []string) ApiExtrasWebhooksListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasWebhooksListRequest) IdIew(idIew []string) ApiExtrasWebhooksListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasWebhooksListRequest) IdIre(idIre []string) ApiExtrasWebhooksListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasWebhooksListRequest) IdIsw(idIsw []string) ApiExtrasWebhooksListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) IdN(idN []string) ApiExtrasWebhooksListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasWebhooksListRequest) IdNic(idNic []string) ApiExtrasWebhooksListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasWebhooksListRequest) IdNie(idNie []string) ApiExtrasWebhooksListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasWebhooksListRequest) IdNiew(idNiew []string) ApiExtrasWebhooksListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) IdNire(idNire []string) ApiExtrasWebhooksListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasWebhooksListRequest) IdNisw(idNisw []string) ApiExtrasWebhooksListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) IdNre(idNre []string) ApiExtrasWebhooksListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasWebhooksListRequest) IdRe(idRe []string) ApiExtrasWebhooksListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasWebhooksListRequest) Limit(limit int32) ApiExtrasWebhooksListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasWebhooksListRequest) Name(name []string) ApiExtrasWebhooksListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIc(nameIc []string) ApiExtrasWebhooksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIe(nameIe []string) ApiExtrasWebhooksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIew(nameIew []string) ApiExtrasWebhooksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIre(nameIre []string) ApiExtrasWebhooksListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIsw(nameIsw []string) ApiExtrasWebhooksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) NameN(nameN []string) ApiExtrasWebhooksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNic(nameNic []string) ApiExtrasWebhooksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNie(nameNie []string) ApiExtrasWebhooksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNiew(nameNiew []string) ApiExtrasWebhooksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNire(nameNire []string) ApiExtrasWebhooksListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNisw(nameNisw []string) ApiExtrasWebhooksListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNre(nameNre []string) ApiExtrasWebhooksListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasWebhooksListRequest) NameRe(nameRe []string) ApiExtrasWebhooksListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasWebhooksListRequest) Offset(offset int32) ApiExtrasWebhooksListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrl(payloadUrl []string) ApiExtrasWebhooksListRequest {
	r.payloadUrl = &payloadUrl
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIc(payloadUrlIc []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIc = &payloadUrlIc
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIe(payloadUrlIe []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIe = &payloadUrlIe
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIew(payloadUrlIew []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIew = &payloadUrlIew
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIre(payloadUrlIre []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIre = &payloadUrlIre
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIsw(payloadUrlIsw []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIsw = &payloadUrlIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlN(payloadUrlN []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlN = &payloadUrlN
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNic(payloadUrlNic []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNic = &payloadUrlNic
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNie(payloadUrlNie []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNie = &payloadUrlNie
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNiew(payloadUrlNiew []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNiew = &payloadUrlNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNire(payloadUrlNire []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNire = &payloadUrlNire
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNisw(payloadUrlNisw []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNisw = &payloadUrlNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNre(payloadUrlNre []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNre = &payloadUrlNre
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlRe(payloadUrlRe []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlRe = &payloadUrlRe
	return r
}

// Search
func (r ApiExtrasWebhooksListRequest) Q(q string) ApiExtrasWebhooksListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasWebhooksListRequest) Sort(sort string) ApiExtrasWebhooksListRequest {
	r.sort = &sort
	return r
}

func (r ApiExtrasWebhooksListRequest) Teams(teams []string) ApiExtrasWebhooksListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiExtrasWebhooksListRequest) TeamsIsnull(teamsIsnull bool) ApiExtrasWebhooksListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiExtrasWebhooksListRequest) TeamsN(teamsN string) ApiExtrasWebhooksListRequest {
	r.teamsN = &teamsN
	return r
}

func (r ApiExtrasWebhooksListRequest) TypeCreate(typeCreate bool) ApiExtrasWebhooksListRequest {
	r.typeCreate = &typeCreate
	return r
}

func (r ApiExtrasWebhooksListRequest) TypeDelete(typeDelete bool) ApiExtrasWebhooksListRequest {
	r.typeDelete = &typeDelete
	return r
}

func (r ApiExtrasWebhooksListRequest) TypeUpdate(typeUpdate bool) ApiExtrasWebhooksListRequest {
	r.typeUpdate = &typeUpdate
	return r
}

// Serializer Depth
func (r ApiExtrasWebhooksListRequest) Depth(depth int32) ApiExtrasWebhooksListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasWebhooksListRequest) Execute() (*PaginatedWebhookList, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksListExecute(r)
}

/*
ExtrasWebhooksList Method for ExtrasWebhooksList

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksListRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksList(ctx context.Context) ApiExtrasWebhooksListRequest {
	return ApiExtrasWebhooksListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedWebhookList
func (a *ExtrasAPIService) ExtrasWebhooksListExecute(r ApiExtrasWebhooksListRequest) (*PaginatedWebhookList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedWebhookList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", t, "form", "multi")
		}
	}
	if r.contentTypesIc != nil {
		t := *r.contentTypesIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", t, "form", "multi")
		}
	}
	if r.contentTypesIe != nil {
		t := *r.contentTypesIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", t, "form", "multi")
		}
	}
	if r.contentTypesIew != nil {
		t := *r.contentTypesIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", t, "form", "multi")
		}
	}
	if r.contentTypesIre != nil {
		t := *r.contentTypesIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", t, "form", "multi")
		}
	}
	if r.contentTypesIsw != nil {
		t := *r.contentTypesIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", t, "form", "multi")
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", t, "form", "multi")
		}
	}
	if r.contentTypesNic != nil {
		t := *r.contentTypesNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", t, "form", "multi")
		}
	}
	if r.contentTypesNie != nil {
		t := *r.contentTypesNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", t, "form", "multi")
		}
	}
	if r.contentTypesNiew != nil {
		t := *r.contentTypesNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", t, "form", "multi")
		}
	}
	if r.contentTypesNire != nil {
		t := *r.contentTypesNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", t, "form", "multi")
		}
	}
	if r.contentTypesNisw != nil {
		t := *r.contentTypesNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", t, "form", "multi")
		}
	}
	if r.contentTypesNre != nil {
		t := *r.contentTypesNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", t, "form", "multi")
		}
	}
	if r.contentTypesRe != nil {
		t := *r.contentTypesRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.payloadUrl != nil {
		t := *r.payloadUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url", t, "form", "multi")
		}
	}
	if r.payloadUrlIc != nil {
		t := *r.payloadUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__ic", t, "form", "multi")
		}
	}
	if r.payloadUrlIe != nil {
		t := *r.payloadUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__ie", t, "form", "multi")
		}
	}
	if r.payloadUrlIew != nil {
		t := *r.payloadUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__iew", t, "form", "multi")
		}
	}
	if r.payloadUrlIre != nil {
		t := *r.payloadUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__ire", t, "form", "multi")
		}
	}
	if r.payloadUrlIsw != nil {
		t := *r.payloadUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__isw", t, "form", "multi")
		}
	}
	if r.payloadUrlN != nil {
		t := *r.payloadUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__n", t, "form", "multi")
		}
	}
	if r.payloadUrlNic != nil {
		t := *r.payloadUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nic", t, "form", "multi")
		}
	}
	if r.payloadUrlNie != nil {
		t := *r.payloadUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nie", t, "form", "multi")
		}
	}
	if r.payloadUrlNiew != nil {
		t := *r.payloadUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__niew", t, "form", "multi")
		}
	}
	if r.payloadUrlNire != nil {
		t := *r.payloadUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nire", t, "form", "multi")
		}
	}
	if r.payloadUrlNisw != nil {
		t := *r.payloadUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nisw", t, "form", "multi")
		}
	}
	if r.payloadUrlNre != nil {
		t := *r.payloadUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__nre", t, "form", "multi")
		}
	}
	if r.payloadUrlRe != nil {
		t := *r.payloadUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url__re", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.typeCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_create", r.typeCreate, "form", "")
	}
	if r.typeDelete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_delete", r.typeDelete, "form", "")
	}
	if r.typeUpdate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_update", r.typeUpdate, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksNotesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasWebhooksNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiExtrasWebhooksNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiExtrasWebhooksNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasWebhooksNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksNotesCreateExecute(r)
}

/*
ExtrasWebhooksNotesCreate Method for ExtrasWebhooksNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksNotesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksNotesCreate(ctx context.Context, id string) ApiExtrasWebhooksNotesCreateRequest {
	return ApiExtrasWebhooksNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *ExtrasAPIService) ExtrasWebhooksNotesCreateExecute(r ApiExtrasWebhooksNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksNotesListRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiExtrasWebhooksNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiExtrasWebhooksNotesListRequest) Limit(limit int32) ApiExtrasWebhooksNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasWebhooksNotesListRequest) Offset(offset int32) ApiExtrasWebhooksNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiExtrasWebhooksNotesListRequest) Depth(depth int32) ApiExtrasWebhooksNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasWebhooksNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksNotesListExecute(r)
}

/*
ExtrasWebhooksNotesList Method for ExtrasWebhooksNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksNotesListRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksNotesList(ctx context.Context, id string) ApiExtrasWebhooksNotesListRequest {
	return ApiExtrasWebhooksNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *ExtrasAPIService) ExtrasWebhooksNotesListExecute(r ApiExtrasWebhooksNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedWebhookRequest *PatchedWebhookRequest
}

func (r ApiExtrasWebhooksPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasWebhooksPartialUpdateRequest) PatchedWebhookRequest(patchedWebhookRequest PatchedWebhookRequest) ApiExtrasWebhooksPartialUpdateRequest {
	r.patchedWebhookRequest = &patchedWebhookRequest
	return r
}

func (r ApiExtrasWebhooksPartialUpdateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksPartialUpdateExecute(r)
}

/*
ExtrasWebhooksPartialUpdate Method for ExtrasWebhooksPartialUpdate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksPartialUpdate(ctx context.Context, id string) ApiExtrasWebhooksPartialUpdateRequest {
	return ApiExtrasWebhooksPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasAPIService) ExtrasWebhooksPartialUpdateExecute(r ApiExtrasWebhooksPartialUpdateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWebhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiExtrasWebhooksRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiExtrasWebhooksRetrieveRequest) Depth(depth int32) ApiExtrasWebhooksRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiExtrasWebhooksRetrieveRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksRetrieveExecute(r)
}

/*
ExtrasWebhooksRetrieve Method for ExtrasWebhooksRetrieve

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksRetrieve(ctx context.Context, id string) ApiExtrasWebhooksRetrieveRequest {
	return ApiExtrasWebhooksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasAPIService) ExtrasWebhooksRetrieveExecute(r ApiExtrasWebhooksRetrieveRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasAPIService
	id string
	webhookRequest *WebhookRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiExtrasWebhooksUpdateRequest) WebhookRequest(webhookRequest WebhookRequest) ApiExtrasWebhooksUpdateRequest {
	r.webhookRequest = &webhookRequest
	return r
}

func (r ApiExtrasWebhooksUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiExtrasWebhooksUpdateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasWebhooksUpdateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksUpdateExecute(r)
}

/*
ExtrasWebhooksUpdate Method for ExtrasWebhooksUpdate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksUpdate(ctx context.Context, id string) ApiExtrasWebhooksUpdateRequest {
	return ApiExtrasWebhooksUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasAPIService) ExtrasWebhooksUpdateExecute(r ApiExtrasWebhooksUpdateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhookRequest == nil {
		return localVarReturnValue, nil, reportError("webhookRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
