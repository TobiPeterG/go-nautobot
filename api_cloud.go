/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"time"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// CloudAPIService CloudAPI service
type CloudAPIService service

type ApiCloudCloudAccountsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudAccountsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCloudCloudAccountsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCloudCloudAccountsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudAccountsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudAccountsBulkDestroyExecute(r)
}

/*
CloudCloudAccountsBulkDestroy Method for CloudCloudAccountsBulkDestroy

Destroy a list of cloud account objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudAccountsBulkDestroyRequest
*/
func (a *CloudAPIService) CloudCloudAccountsBulkDestroy(ctx context.Context) ApiCloudCloudAccountsBulkDestroyRequest {
	return ApiCloudCloudAccountsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudAccountsBulkDestroyExecute(r ApiCloudCloudAccountsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	patchedBulkWritableCloudAccountRequest *[]PatchedBulkWritableCloudAccountRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudAccountsBulkPartialUpdateRequest) PatchedBulkWritableCloudAccountRequest(patchedBulkWritableCloudAccountRequest []PatchedBulkWritableCloudAccountRequest) ApiCloudCloudAccountsBulkPartialUpdateRequest {
	r.patchedBulkWritableCloudAccountRequest = &patchedBulkWritableCloudAccountRequest
	return r
}

func (r ApiCloudCloudAccountsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudAccountsBulkPartialUpdateRequest) Execute() ([]CloudAccount, *http.Response, error) {
	return r.ApiService.CloudCloudAccountsBulkPartialUpdateExecute(r)
}

/*
CloudCloudAccountsBulkPartialUpdate Method for CloudCloudAccountsBulkPartialUpdate

Partial update a list of cloud account objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudAccountsBulkPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudAccountsBulkPartialUpdate(ctx context.Context) ApiCloudCloudAccountsBulkPartialUpdateRequest {
	return ApiCloudCloudAccountsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudAccount
func (a *CloudAPIService) CloudCloudAccountsBulkPartialUpdateExecute(r ApiCloudCloudAccountsBulkPartialUpdateRequest) ([]CloudAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCloudAccountRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCloudAccountRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCloudAccountRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkWritableCloudAccountRequest *[]BulkWritableCloudAccountRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudAccountsBulkUpdateRequest) BulkWritableCloudAccountRequest(bulkWritableCloudAccountRequest []BulkWritableCloudAccountRequest) ApiCloudCloudAccountsBulkUpdateRequest {
	r.bulkWritableCloudAccountRequest = &bulkWritableCloudAccountRequest
	return r
}

func (r ApiCloudCloudAccountsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudAccountsBulkUpdateRequest) Execute() ([]CloudAccount, *http.Response, error) {
	return r.ApiService.CloudCloudAccountsBulkUpdateExecute(r)
}

/*
CloudCloudAccountsBulkUpdate Method for CloudCloudAccountsBulkUpdate

Update a list of cloud account objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudAccountsBulkUpdateRequest
*/
func (a *CloudAPIService) CloudCloudAccountsBulkUpdate(ctx context.Context) ApiCloudCloudAccountsBulkUpdateRequest {
	return ApiCloudCloudAccountsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudAccount
func (a *CloudAPIService) CloudCloudAccountsBulkUpdateExecute(r ApiCloudCloudAccountsBulkUpdateRequest) ([]CloudAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCloudAccountRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCloudAccountRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCloudAccountRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudAccountRequest *CloudAccountRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudAccountsCreateRequest) CloudAccountRequest(cloudAccountRequest CloudAccountRequest) ApiCloudCloudAccountsCreateRequest {
	r.cloudAccountRequest = &cloudAccountRequest
	return r
}

func (r ApiCloudCloudAccountsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudAccountsCreateRequest) Execute() (*CloudAccount, *http.Response, error) {
	return r.ApiService.CloudCloudAccountsCreateExecute(r)
}

/*
CloudCloudAccountsCreate Method for CloudCloudAccountsCreate

Create one or more cloud account objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudAccountsCreateRequest
*/
func (a *CloudAPIService) CloudCloudAccountsCreate(ctx context.Context) ApiCloudCloudAccountsCreateRequest {
	return ApiCloudCloudAccountsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudAccount
func (a *CloudAPIService) CloudCloudAccountsCreateExecute(r ApiCloudCloudAccountsCreateRequest) (*CloudAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudAccountRequest == nil {
		return localVarReturnValue, nil, reportError("cloudAccountRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudAccountRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudAccountsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudAccountsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudAccountsDestroyExecute(r)
}

/*
CloudCloudAccountsDestroy Method for CloudCloudAccountsDestroy

Destroy a cloud account object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud account.
 @return ApiCloudCloudAccountsDestroyRequest
*/
func (a *CloudAPIService) CloudCloudAccountsDestroy(ctx context.Context, id string) ApiCloudCloudAccountsDestroyRequest {
	return ApiCloudCloudAccountsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudAccountsDestroyExecute(r ApiCloudCloudAccountsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	accountNumber *[]string
	accountNumberIc *[]string
	accountNumberIe *[]string
	accountNumberIew *[]string
	accountNumberIre *[]string
	accountNumberIsw *[]string
	accountNumberN *[]string
	accountNumberNic *[]string
	accountNumberNie *[]string
	accountNumberNiew *[]string
	accountNumberNire *[]string
	accountNumberNisw *[]string
	accountNumberNre *[]string
	accountNumberRe *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	provider *[]string
	providerN *[]string
	q *string
	secretsGroup *[]string
	secretsGroupIsnull *bool
	secretsGroupN *[]string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiCloudCloudAccountsListRequest) AccountNumber(accountNumber []string) ApiCloudCloudAccountsListRequest {
	r.accountNumber = &accountNumber
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberIc(accountNumberIc []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberIc = &accountNumberIc
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberIe(accountNumberIe []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberIe = &accountNumberIe
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberIew(accountNumberIew []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberIew = &accountNumberIew
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberIre(accountNumberIre []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberIre = &accountNumberIre
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberIsw(accountNumberIsw []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberIsw = &accountNumberIsw
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberN(accountNumberN []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberN = &accountNumberN
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberNic(accountNumberNic []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberNic = &accountNumberNic
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberNie(accountNumberNie []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberNie = &accountNumberNie
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberNiew(accountNumberNiew []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberNiew = &accountNumberNiew
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberNire(accountNumberNire []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberNire = &accountNumberNire
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberNisw(accountNumberNisw []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberNisw = &accountNumberNisw
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberNre(accountNumberNre []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberNre = &accountNumberNre
	return r
}

func (r ApiCloudCloudAccountsListRequest) AccountNumberRe(accountNumberRe []string) ApiCloudCloudAccountsListRequest {
	r.accountNumberRe = &accountNumberRe
	return r
}

func (r ApiCloudCloudAccountsListRequest) Contacts(contacts []string) ApiCloudCloudAccountsListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiCloudCloudAccountsListRequest) ContactsIsnull(contactsIsnull bool) ApiCloudCloudAccountsListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiCloudCloudAccountsListRequest) ContactsN(contactsN string) ApiCloudCloudAccountsListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiCloudCloudAccountsListRequest) Created(created []time.Time) ApiCloudCloudAccountsListRequest {
	r.created = &created
	return r
}

func (r ApiCloudCloudAccountsListRequest) CreatedGt(createdGt []time.Time) ApiCloudCloudAccountsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCloudCloudAccountsListRequest) CreatedGte(createdGte []time.Time) ApiCloudCloudAccountsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCloudCloudAccountsListRequest) CreatedIsnull(createdIsnull bool) ApiCloudCloudAccountsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiCloudCloudAccountsListRequest) CreatedLt(createdLt []time.Time) ApiCloudCloudAccountsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCloudCloudAccountsListRequest) CreatedLte(createdLte []time.Time) ApiCloudCloudAccountsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCloudCloudAccountsListRequest) CreatedN(createdN []time.Time) ApiCloudCloudAccountsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCloudCloudAccountsListRequest) Description(description []string) ApiCloudCloudAccountsListRequest {
	r.description = &description
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionIc(descriptionIc []string) ApiCloudCloudAccountsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionIe(descriptionIe []string) ApiCloudCloudAccountsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionIew(descriptionIew []string) ApiCloudCloudAccountsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionIre(descriptionIre []string) ApiCloudCloudAccountsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionIsw(descriptionIsw []string) ApiCloudCloudAccountsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionN(descriptionN []string) ApiCloudCloudAccountsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionNic(descriptionNic []string) ApiCloudCloudAccountsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionNie(descriptionNie []string) ApiCloudCloudAccountsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionNiew(descriptionNiew []string) ApiCloudCloudAccountsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionNire(descriptionNire []string) ApiCloudCloudAccountsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionNisw(descriptionNisw []string) ApiCloudCloudAccountsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionNre(descriptionNre []string) ApiCloudCloudAccountsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiCloudCloudAccountsListRequest) DescriptionRe(descriptionRe []string) ApiCloudCloudAccountsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiCloudCloudAccountsListRequest) DynamicGroups(dynamicGroups []string) ApiCloudCloudAccountsListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiCloudCloudAccountsListRequest) DynamicGroupsN(dynamicGroupsN string) ApiCloudCloudAccountsListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiCloudCloudAccountsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCloudCloudAccountsListRequest) Id(id []string) ApiCloudCloudAccountsListRequest {
	r.id = &id
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdIc(idIc []string) ApiCloudCloudAccountsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdIe(idIe []string) ApiCloudCloudAccountsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdIew(idIew []string) ApiCloudCloudAccountsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdIre(idIre []string) ApiCloudCloudAccountsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdIsw(idIsw []string) ApiCloudCloudAccountsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdN(idN []string) ApiCloudCloudAccountsListRequest {
	r.idN = &idN
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdNic(idNic []string) ApiCloudCloudAccountsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdNie(idNie []string) ApiCloudCloudAccountsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdNiew(idNiew []string) ApiCloudCloudAccountsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdNire(idNire []string) ApiCloudCloudAccountsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdNisw(idNisw []string) ApiCloudCloudAccountsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdNre(idNre []string) ApiCloudCloudAccountsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCloudCloudAccountsListRequest) IdRe(idRe []string) ApiCloudCloudAccountsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiCloudCloudAccountsListRequest) LastUpdated(lastUpdated []time.Time) ApiCloudCloudAccountsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCloudCloudAccountsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCloudCloudAccountsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCloudCloudAccountsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCloudCloudAccountsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCloudCloudAccountsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiCloudCloudAccountsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiCloudCloudAccountsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCloudCloudAccountsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCloudCloudAccountsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCloudCloudAccountsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCloudCloudAccountsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCloudCloudAccountsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudAccountsListRequest) Limit(limit int32) ApiCloudCloudAccountsListRequest {
	r.limit = &limit
	return r
}

func (r ApiCloudCloudAccountsListRequest) Name(name []string) ApiCloudCloudAccountsListRequest {
	r.name = &name
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameIc(nameIc []string) ApiCloudCloudAccountsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameIe(nameIe []string) ApiCloudCloudAccountsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameIew(nameIew []string) ApiCloudCloudAccountsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameIre(nameIre []string) ApiCloudCloudAccountsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameIsw(nameIsw []string) ApiCloudCloudAccountsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameN(nameN []string) ApiCloudCloudAccountsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameNic(nameNic []string) ApiCloudCloudAccountsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameNie(nameNie []string) ApiCloudCloudAccountsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameNiew(nameNiew []string) ApiCloudCloudAccountsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameNire(nameNire []string) ApiCloudCloudAccountsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameNisw(nameNisw []string) ApiCloudCloudAccountsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameNre(nameNre []string) ApiCloudCloudAccountsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiCloudCloudAccountsListRequest) NameRe(nameRe []string) ApiCloudCloudAccountsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudAccountsListRequest) Offset(offset int32) ApiCloudCloudAccountsListRequest {
	r.offset = &offset
	return r
}

func (r ApiCloudCloudAccountsListRequest) Provider(provider []string) ApiCloudCloudAccountsListRequest {
	r.provider = &provider
	return r
}

func (r ApiCloudCloudAccountsListRequest) ProviderN(providerN []string) ApiCloudCloudAccountsListRequest {
	r.providerN = &providerN
	return r
}

// Search
func (r ApiCloudCloudAccountsListRequest) Q(q string) ApiCloudCloudAccountsListRequest {
	r.q = &q
	return r
}

func (r ApiCloudCloudAccountsListRequest) SecretsGroup(secretsGroup []string) ApiCloudCloudAccountsListRequest {
	r.secretsGroup = &secretsGroup
	return r
}

// Secrets group (name or ID) is null
func (r ApiCloudCloudAccountsListRequest) SecretsGroupIsnull(secretsGroupIsnull bool) ApiCloudCloudAccountsListRequest {
	r.secretsGroupIsnull = &secretsGroupIsnull
	return r
}

func (r ApiCloudCloudAccountsListRequest) SecretsGroupN(secretsGroupN []string) ApiCloudCloudAccountsListRequest {
	r.secretsGroupN = &secretsGroupN
	return r
}

// Which field to use when ordering the results.
func (r ApiCloudCloudAccountsListRequest) Sort(sort string) ApiCloudCloudAccountsListRequest {
	r.sort = &sort
	return r
}

func (r ApiCloudCloudAccountsListRequest) Tags(tags []string) ApiCloudCloudAccountsListRequest {
	r.tags = &tags
	return r
}

func (r ApiCloudCloudAccountsListRequest) TagsIsnull(tagsIsnull bool) ApiCloudCloudAccountsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiCloudCloudAccountsListRequest) TagsN(tagsN []string) ApiCloudCloudAccountsListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiCloudCloudAccountsListRequest) Teams(teams []string) ApiCloudCloudAccountsListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiCloudCloudAccountsListRequest) TeamsIsnull(teamsIsnull bool) ApiCloudCloudAccountsListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiCloudCloudAccountsListRequest) TeamsN(teamsN string) ApiCloudCloudAccountsListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiCloudCloudAccountsListRequest) Depth(depth int32) ApiCloudCloudAccountsListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudAccountsListRequest) Execute() (*PaginatedCloudAccountList, *http.Response, error) {
	return r.ApiService.CloudCloudAccountsListExecute(r)
}

/*
CloudCloudAccountsList Method for CloudCloudAccountsList

Retrieve a list of cloud account objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudAccountsListRequest
*/
func (a *CloudAPIService) CloudCloudAccountsList(ctx context.Context) ApiCloudCloudAccountsListRequest {
	return ApiCloudCloudAccountsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCloudAccountList
func (a *CloudAPIService) CloudCloudAccountsListExecute(r ApiCloudCloudAccountsListRequest) (*PaginatedCloudAccountList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCloudAccountList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountNumber != nil {
		t := *r.accountNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number", t, "form", "multi")
		}
	}
	if r.accountNumberIc != nil {
		t := *r.accountNumberIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__ic", t, "form", "multi")
		}
	}
	if r.accountNumberIe != nil {
		t := *r.accountNumberIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__ie", t, "form", "multi")
		}
	}
	if r.accountNumberIew != nil {
		t := *r.accountNumberIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__iew", t, "form", "multi")
		}
	}
	if r.accountNumberIre != nil {
		t := *r.accountNumberIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__ire", t, "form", "multi")
		}
	}
	if r.accountNumberIsw != nil {
		t := *r.accountNumberIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__isw", t, "form", "multi")
		}
	}
	if r.accountNumberN != nil {
		t := *r.accountNumberN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__n", t, "form", "multi")
		}
	}
	if r.accountNumberNic != nil {
		t := *r.accountNumberNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nic", t, "form", "multi")
		}
	}
	if r.accountNumberNie != nil {
		t := *r.accountNumberNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nie", t, "form", "multi")
		}
	}
	if r.accountNumberNiew != nil {
		t := *r.accountNumberNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__niew", t, "form", "multi")
		}
	}
	if r.accountNumberNire != nil {
		t := *r.accountNumberNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nire", t, "form", "multi")
		}
	}
	if r.accountNumberNisw != nil {
		t := *r.accountNumberNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nisw", t, "form", "multi")
		}
	}
	if r.accountNumberNre != nil {
		t := *r.accountNumberNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__nre", t, "form", "multi")
		}
	}
	if r.accountNumberRe != nil {
		t := *r.accountNumberRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "account_number__re", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.provider != nil {
		t := *r.provider
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider", t, "form", "multi")
		}
	}
	if r.providerN != nil {
		t := *r.providerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.secretsGroup != nil {
		t := *r.secretsGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group", t, "form", "multi")
		}
	}
	if r.secretsGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__isnull", r.secretsGroupIsnull, "form", "")
	}
	if r.secretsGroupN != nil {
		t := *r.secretsGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secrets_group__n", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsNotesCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudAccountsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCloudCloudAccountsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCloudCloudAccountsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudAccountsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CloudCloudAccountsNotesCreateExecute(r)
}

/*
CloudCloudAccountsNotesCreate Method for CloudCloudAccountsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud account.
 @return ApiCloudCloudAccountsNotesCreateRequest
*/
func (a *CloudAPIService) CloudCloudAccountsNotesCreate(ctx context.Context, id string) ApiCloudCloudAccountsNotesCreateRequest {
	return ApiCloudCloudAccountsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CloudAPIService) CloudCloudAccountsNotesCreateExecute(r ApiCloudCloudAccountsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsNotesListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCloudCloudAccountsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudAccountsNotesListRequest) Limit(limit int32) ApiCloudCloudAccountsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudAccountsNotesListRequest) Offset(offset int32) ApiCloudCloudAccountsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCloudCloudAccountsNotesListRequest) Depth(depth int32) ApiCloudCloudAccountsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudAccountsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CloudCloudAccountsNotesListExecute(r)
}

/*
CloudCloudAccountsNotesList Method for CloudCloudAccountsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud account.
 @return ApiCloudCloudAccountsNotesListRequest
*/
func (a *CloudAPIService) CloudCloudAccountsNotesList(ctx context.Context, id string) ApiCloudCloudAccountsNotesListRequest {
	return ApiCloudCloudAccountsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CloudAPIService) CloudCloudAccountsNotesListExecute(r ApiCloudCloudAccountsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCloudAccountRequest *PatchedCloudAccountRequest
}

func (r ApiCloudCloudAccountsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudAccountsPartialUpdateRequest) PatchedCloudAccountRequest(patchedCloudAccountRequest PatchedCloudAccountRequest) ApiCloudCloudAccountsPartialUpdateRequest {
	r.patchedCloudAccountRequest = &patchedCloudAccountRequest
	return r
}

func (r ApiCloudCloudAccountsPartialUpdateRequest) Execute() (*CloudAccount, *http.Response, error) {
	return r.ApiService.CloudCloudAccountsPartialUpdateExecute(r)
}

/*
CloudCloudAccountsPartialUpdate Method for CloudCloudAccountsPartialUpdate

Partial update a cloud account object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud account.
 @return ApiCloudCloudAccountsPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudAccountsPartialUpdate(ctx context.Context, id string) ApiCloudCloudAccountsPartialUpdateRequest {
	return ApiCloudCloudAccountsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudAccount
func (a *CloudAPIService) CloudCloudAccountsPartialUpdateExecute(r ApiCloudCloudAccountsPartialUpdateRequest) (*CloudAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCloudAccountRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsRetrieveRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCloudCloudAccountsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCloudCloudAccountsRetrieveRequest) Depth(depth int32) ApiCloudCloudAccountsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudAccountsRetrieveRequest) Execute() (*CloudAccount, *http.Response, error) {
	return r.ApiService.CloudCloudAccountsRetrieveExecute(r)
}

/*
CloudCloudAccountsRetrieve Method for CloudCloudAccountsRetrieve

Retrieve a cloud account object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud account.
 @return ApiCloudCloudAccountsRetrieveRequest
*/
func (a *CloudAPIService) CloudCloudAccountsRetrieve(ctx context.Context, id string) ApiCloudCloudAccountsRetrieveRequest {
	return ApiCloudCloudAccountsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudAccount
func (a *CloudAPIService) CloudCloudAccountsRetrieveExecute(r ApiCloudCloudAccountsRetrieveRequest) (*CloudAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudAccountsUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	cloudAccountRequest *CloudAccountRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudAccountsUpdateRequest) CloudAccountRequest(cloudAccountRequest CloudAccountRequest) ApiCloudCloudAccountsUpdateRequest {
	r.cloudAccountRequest = &cloudAccountRequest
	return r
}

func (r ApiCloudCloudAccountsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudAccountsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudAccountsUpdateRequest) Execute() (*CloudAccount, *http.Response, error) {
	return r.ApiService.CloudCloudAccountsUpdateExecute(r)
}

/*
CloudCloudAccountsUpdate Method for CloudCloudAccountsUpdate

Update a cloud account object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud account.
 @return ApiCloudCloudAccountsUpdateRequest
*/
func (a *CloudAPIService) CloudCloudAccountsUpdate(ctx context.Context, id string) ApiCloudCloudAccountsUpdateRequest {
	return ApiCloudCloudAccountsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudAccount
func (a *CloudAPIService) CloudCloudAccountsUpdateExecute(r ApiCloudCloudAccountsUpdateRequest) (*CloudAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudAccountsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-accounts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudAccountRequest == nil {
		return localVarReturnValue, nil, reportError("cloudAccountRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudAccountRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsBulkDestroyExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsBulkDestroy Method for CloudCloudNetworkPrefixAssignmentsBulkDestroy

Destroy a list of cloud network prefix assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsBulkDestroy(ctx context.Context) ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsBulkDestroyExecute(r ApiCloudCloudNetworkPrefixAssignmentsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	patchedBulkWritableCloudNetworkPrefixAssignmentRequest *[]PatchedBulkWritableCloudNetworkPrefixAssignmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest) PatchedBulkWritableCloudNetworkPrefixAssignmentRequest(patchedBulkWritableCloudNetworkPrefixAssignmentRequest []PatchedBulkWritableCloudNetworkPrefixAssignmentRequest) ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest {
	r.patchedBulkWritableCloudNetworkPrefixAssignmentRequest = &patchedBulkWritableCloudNetworkPrefixAssignmentRequest
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest) Execute() ([]CloudNetworkPrefixAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsBulkPartialUpdateExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsBulkPartialUpdate Method for CloudCloudNetworkPrefixAssignmentsBulkPartialUpdate

Partial update a list of cloud network prefix assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsBulkPartialUpdate(ctx context.Context) ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudNetworkPrefixAssignment
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsBulkPartialUpdateExecute(r ApiCloudCloudNetworkPrefixAssignmentsBulkPartialUpdateRequest) ([]CloudNetworkPrefixAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudNetworkPrefixAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCloudNetworkPrefixAssignmentRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCloudNetworkPrefixAssignmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCloudNetworkPrefixAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkWritableCloudNetworkPrefixAssignmentRequest *[]BulkWritableCloudNetworkPrefixAssignmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest) BulkWritableCloudNetworkPrefixAssignmentRequest(bulkWritableCloudNetworkPrefixAssignmentRequest []BulkWritableCloudNetworkPrefixAssignmentRequest) ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest {
	r.bulkWritableCloudNetworkPrefixAssignmentRequest = &bulkWritableCloudNetworkPrefixAssignmentRequest
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest) Execute() ([]CloudNetworkPrefixAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsBulkUpdateExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsBulkUpdate Method for CloudCloudNetworkPrefixAssignmentsBulkUpdate

Update a list of cloud network prefix assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsBulkUpdate(ctx context.Context) ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudNetworkPrefixAssignment
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsBulkUpdateExecute(r ApiCloudCloudNetworkPrefixAssignmentsBulkUpdateRequest) ([]CloudNetworkPrefixAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudNetworkPrefixAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCloudNetworkPrefixAssignmentRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCloudNetworkPrefixAssignmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCloudNetworkPrefixAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudNetworkPrefixAssignmentRequest *CloudNetworkPrefixAssignmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworkPrefixAssignmentsCreateRequest) CloudNetworkPrefixAssignmentRequest(cloudNetworkPrefixAssignmentRequest CloudNetworkPrefixAssignmentRequest) ApiCloudCloudNetworkPrefixAssignmentsCreateRequest {
	r.cloudNetworkPrefixAssignmentRequest = &cloudNetworkPrefixAssignmentRequest
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsCreateRequest) Execute() (*CloudNetworkPrefixAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsCreateExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsCreate Method for CloudCloudNetworkPrefixAssignmentsCreate

Create one or more cloud network prefix assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworkPrefixAssignmentsCreateRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsCreate(ctx context.Context) ApiCloudCloudNetworkPrefixAssignmentsCreateRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudNetworkPrefixAssignment
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsCreateExecute(r ApiCloudCloudNetworkPrefixAssignmentsCreateRequest) (*CloudNetworkPrefixAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudNetworkPrefixAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudNetworkPrefixAssignmentRequest == nil {
		return localVarReturnValue, nil, reportError("cloudNetworkPrefixAssignmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudNetworkPrefixAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworkPrefixAssignmentsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsDestroyExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsDestroy Method for CloudCloudNetworkPrefixAssignmentsDestroy

Destroy a cloud network prefix assignment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network prefix assignment.
 @return ApiCloudCloudNetworkPrefixAssignmentsDestroyRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsDestroy(ctx context.Context, id string) ApiCloudCloudNetworkPrefixAssignmentsDestroyRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsDestroyExecute(r ApiCloudCloudNetworkPrefixAssignmentsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudNetwork *[]string
	cloudNetworkN *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	offset *int32
	prefix *[]string
	prefixN *[]string
	q *string
	sort *string
	depth *int32
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) CloudNetwork(cloudNetwork []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.cloudNetwork = &cloudNetwork
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) CloudNetworkN(cloudNetworkN []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.cloudNetworkN = &cloudNetworkN
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) Id(id []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.id = &id
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdIc(idIc []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdIe(idIe []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdIew(idIew []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdIre(idIre []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdIsw(idIsw []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdN(idN []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idN = &idN
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdNic(idNic []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdNie(idNie []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdNiew(idNiew []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdNire(idNire []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdNisw(idNisw []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdNre(idNre []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) IdRe(idRe []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) Limit(limit int32) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) Offset(offset int32) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.offset = &offset
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) Prefix(prefix []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.prefix = &prefix
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) PrefixN(prefixN []string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.prefixN = &prefixN
	return r
}

// Search
func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) Q(q string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) Sort(sort string) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) Depth(depth int32) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsListRequest) Execute() (*PaginatedCloudNetworkPrefixAssignmentList, *http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsListExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsList Method for CloudCloudNetworkPrefixAssignmentsList

Retrieve a list of cloud network prefix assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworkPrefixAssignmentsListRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsList(ctx context.Context) ApiCloudCloudNetworkPrefixAssignmentsListRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCloudNetworkPrefixAssignmentList
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsListExecute(r ApiCloudCloudNetworkPrefixAssignmentsListRequest) (*PaginatedCloudNetworkPrefixAssignmentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCloudNetworkPrefixAssignmentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cloudNetwork != nil {
		t := *r.cloudNetwork
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_network", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_network", t, "form", "multi")
		}
	}
	if r.cloudNetworkN != nil {
		t := *r.cloudNetworkN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_network__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_network__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.prefix != nil {
		t := *r.prefix
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefix", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefix", t, "form", "multi")
		}
	}
	if r.prefixN != nil {
		t := *r.prefixN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefix__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefix__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsNotesCreateExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsNotesCreate Method for CloudCloudNetworkPrefixAssignmentsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network prefix assignment.
 @return ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsNotesCreate(ctx context.Context, id string) ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsNotesCreateExecute(r ApiCloudCloudNetworkPrefixAssignmentsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest) Limit(limit int32) ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest) Offset(offset int32) ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest) Depth(depth int32) ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsNotesListExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsNotesList Method for CloudCloudNetworkPrefixAssignmentsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network prefix assignment.
 @return ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsNotesList(ctx context.Context, id string) ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsNotesListExecute(r ApiCloudCloudNetworkPrefixAssignmentsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCloudNetworkPrefixAssignmentRequest *PatchedCloudNetworkPrefixAssignmentRequest
}

func (r ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest) PatchedCloudNetworkPrefixAssignmentRequest(patchedCloudNetworkPrefixAssignmentRequest PatchedCloudNetworkPrefixAssignmentRequest) ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest {
	r.patchedCloudNetworkPrefixAssignmentRequest = &patchedCloudNetworkPrefixAssignmentRequest
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest) Execute() (*CloudNetworkPrefixAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsPartialUpdateExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsPartialUpdate Method for CloudCloudNetworkPrefixAssignmentsPartialUpdate

Partial update a cloud network prefix assignment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network prefix assignment.
 @return ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsPartialUpdate(ctx context.Context, id string) ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudNetworkPrefixAssignment
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsPartialUpdateExecute(r ApiCloudCloudNetworkPrefixAssignmentsPartialUpdateRequest) (*CloudNetworkPrefixAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudNetworkPrefixAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCloudNetworkPrefixAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest) Depth(depth int32) ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest) Execute() (*CloudNetworkPrefixAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsRetrieveExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsRetrieve Method for CloudCloudNetworkPrefixAssignmentsRetrieve

Retrieve a cloud network prefix assignment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network prefix assignment.
 @return ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsRetrieve(ctx context.Context, id string) ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudNetworkPrefixAssignment
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsRetrieveExecute(r ApiCloudCloudNetworkPrefixAssignmentsRetrieveRequest) (*CloudNetworkPrefixAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudNetworkPrefixAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	cloudNetworkPrefixAssignmentRequest *CloudNetworkPrefixAssignmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest) CloudNetworkPrefixAssignmentRequest(cloudNetworkPrefixAssignmentRequest CloudNetworkPrefixAssignmentRequest) ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest {
	r.cloudNetworkPrefixAssignmentRequest = &cloudNetworkPrefixAssignmentRequest
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest) Execute() (*CloudNetworkPrefixAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudNetworkPrefixAssignmentsUpdateExecute(r)
}

/*
CloudCloudNetworkPrefixAssignmentsUpdate Method for CloudCloudNetworkPrefixAssignmentsUpdate

Update a cloud network prefix assignment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network prefix assignment.
 @return ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest
*/
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsUpdate(ctx context.Context, id string) ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest {
	return ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudNetworkPrefixAssignment
func (a *CloudAPIService) CloudCloudNetworkPrefixAssignmentsUpdateExecute(r ApiCloudCloudNetworkPrefixAssignmentsUpdateRequest) (*CloudNetworkPrefixAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudNetworkPrefixAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworkPrefixAssignmentsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-network-prefix-assignments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudNetworkPrefixAssignmentRequest == nil {
		return localVarReturnValue, nil, reportError("cloudNetworkPrefixAssignmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudNetworkPrefixAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworksBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCloudCloudNetworksBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCloudCloudNetworksBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudNetworksBulkDestroyExecute(r)
}

/*
CloudCloudNetworksBulkDestroy Method for CloudCloudNetworksBulkDestroy

Destroy a list of cloud network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworksBulkDestroyRequest
*/
func (a *CloudAPIService) CloudCloudNetworksBulkDestroy(ctx context.Context) ApiCloudCloudNetworksBulkDestroyRequest {
	return ApiCloudCloudNetworksBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudNetworksBulkDestroyExecute(r ApiCloudCloudNetworksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	patchedBulkWritableCloudNetworkRequest *[]PatchedBulkWritableCloudNetworkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworksBulkPartialUpdateRequest) PatchedBulkWritableCloudNetworkRequest(patchedBulkWritableCloudNetworkRequest []PatchedBulkWritableCloudNetworkRequest) ApiCloudCloudNetworksBulkPartialUpdateRequest {
	r.patchedBulkWritableCloudNetworkRequest = &patchedBulkWritableCloudNetworkRequest
	return r
}

func (r ApiCloudCloudNetworksBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworksBulkPartialUpdateRequest) Execute() ([]CloudNetwork, *http.Response, error) {
	return r.ApiService.CloudCloudNetworksBulkPartialUpdateExecute(r)
}

/*
CloudCloudNetworksBulkPartialUpdate Method for CloudCloudNetworksBulkPartialUpdate

Partial update a list of cloud network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworksBulkPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudNetworksBulkPartialUpdate(ctx context.Context) ApiCloudCloudNetworksBulkPartialUpdateRequest {
	return ApiCloudCloudNetworksBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudNetwork
func (a *CloudAPIService) CloudCloudNetworksBulkPartialUpdateExecute(r ApiCloudCloudNetworksBulkPartialUpdateRequest) ([]CloudNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCloudNetworkRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCloudNetworkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCloudNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkWritableCloudNetworkRequest *[]BulkWritableCloudNetworkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworksBulkUpdateRequest) BulkWritableCloudNetworkRequest(bulkWritableCloudNetworkRequest []BulkWritableCloudNetworkRequest) ApiCloudCloudNetworksBulkUpdateRequest {
	r.bulkWritableCloudNetworkRequest = &bulkWritableCloudNetworkRequest
	return r
}

func (r ApiCloudCloudNetworksBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworksBulkUpdateRequest) Execute() ([]CloudNetwork, *http.Response, error) {
	return r.ApiService.CloudCloudNetworksBulkUpdateExecute(r)
}

/*
CloudCloudNetworksBulkUpdate Method for CloudCloudNetworksBulkUpdate

Update a list of cloud network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworksBulkUpdateRequest
*/
func (a *CloudAPIService) CloudCloudNetworksBulkUpdate(ctx context.Context) ApiCloudCloudNetworksBulkUpdateRequest {
	return ApiCloudCloudNetworksBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudNetwork
func (a *CloudAPIService) CloudCloudNetworksBulkUpdateExecute(r ApiCloudCloudNetworksBulkUpdateRequest) ([]CloudNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCloudNetworkRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCloudNetworkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCloudNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudNetworkRequest *CloudNetworkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworksCreateRequest) CloudNetworkRequest(cloudNetworkRequest CloudNetworkRequest) ApiCloudCloudNetworksCreateRequest {
	r.cloudNetworkRequest = &cloudNetworkRequest
	return r
}

func (r ApiCloudCloudNetworksCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworksCreateRequest) Execute() (*CloudNetwork, *http.Response, error) {
	return r.ApiService.CloudCloudNetworksCreateExecute(r)
}

/*
CloudCloudNetworksCreate Method for CloudCloudNetworksCreate

Create one or more cloud network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworksCreateRequest
*/
func (a *CloudAPIService) CloudCloudNetworksCreate(ctx context.Context) ApiCloudCloudNetworksCreateRequest {
	return ApiCloudCloudNetworksCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudNetwork
func (a *CloudAPIService) CloudCloudNetworksCreateExecute(r ApiCloudCloudNetworksCreateRequest) (*CloudNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudNetworkRequest == nil {
		return localVarReturnValue, nil, reportError("cloudNetworkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworksDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudNetworksDestroyExecute(r)
}

/*
CloudCloudNetworksDestroy Method for CloudCloudNetworksDestroy

Destroy a cloud network object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network.
 @return ApiCloudCloudNetworksDestroyRequest
*/
func (a *CloudAPIService) CloudCloudNetworksDestroy(ctx context.Context, id string) ApiCloudCloudNetworksDestroyRequest {
	return ApiCloudCloudNetworksDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudNetworksDestroyExecute(r ApiCloudCloudNetworksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudAccount *[]string
	cloudAccountN *[]string
	cloudResourceType *[]string
	cloudResourceTypeN *[]string
	cloudServices *[]string
	cloudServicesIsnull *bool
	cloudServicesN *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	parent *[]string
	parentIsnull *bool
	parentN *[]string
	prefixes *[]string
	prefixesN *[]string
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiCloudCloudNetworksListRequest) CloudAccount(cloudAccount []string) ApiCloudCloudNetworksListRequest {
	r.cloudAccount = &cloudAccount
	return r
}

func (r ApiCloudCloudNetworksListRequest) CloudAccountN(cloudAccountN []string) ApiCloudCloudNetworksListRequest {
	r.cloudAccountN = &cloudAccountN
	return r
}

func (r ApiCloudCloudNetworksListRequest) CloudResourceType(cloudResourceType []string) ApiCloudCloudNetworksListRequest {
	r.cloudResourceType = &cloudResourceType
	return r
}

func (r ApiCloudCloudNetworksListRequest) CloudResourceTypeN(cloudResourceTypeN []string) ApiCloudCloudNetworksListRequest {
	r.cloudResourceTypeN = &cloudResourceTypeN
	return r
}

func (r ApiCloudCloudNetworksListRequest) CloudServices(cloudServices []string) ApiCloudCloudNetworksListRequest {
	r.cloudServices = &cloudServices
	return r
}

// Cloud services (name or ID) is null
func (r ApiCloudCloudNetworksListRequest) CloudServicesIsnull(cloudServicesIsnull bool) ApiCloudCloudNetworksListRequest {
	r.cloudServicesIsnull = &cloudServicesIsnull
	return r
}

func (r ApiCloudCloudNetworksListRequest) CloudServicesN(cloudServicesN []string) ApiCloudCloudNetworksListRequest {
	r.cloudServicesN = &cloudServicesN
	return r
}

func (r ApiCloudCloudNetworksListRequest) Contacts(contacts []string) ApiCloudCloudNetworksListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiCloudCloudNetworksListRequest) ContactsIsnull(contactsIsnull bool) ApiCloudCloudNetworksListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiCloudCloudNetworksListRequest) ContactsN(contactsN string) ApiCloudCloudNetworksListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiCloudCloudNetworksListRequest) Created(created []time.Time) ApiCloudCloudNetworksListRequest {
	r.created = &created
	return r
}

func (r ApiCloudCloudNetworksListRequest) CreatedGt(createdGt []time.Time) ApiCloudCloudNetworksListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCloudCloudNetworksListRequest) CreatedGte(createdGte []time.Time) ApiCloudCloudNetworksListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCloudCloudNetworksListRequest) CreatedIsnull(createdIsnull bool) ApiCloudCloudNetworksListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiCloudCloudNetworksListRequest) CreatedLt(createdLt []time.Time) ApiCloudCloudNetworksListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCloudCloudNetworksListRequest) CreatedLte(createdLte []time.Time) ApiCloudCloudNetworksListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCloudCloudNetworksListRequest) CreatedN(createdN []time.Time) ApiCloudCloudNetworksListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCloudCloudNetworksListRequest) Description(description []string) ApiCloudCloudNetworksListRequest {
	r.description = &description
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionIc(descriptionIc []string) ApiCloudCloudNetworksListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionIe(descriptionIe []string) ApiCloudCloudNetworksListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionIew(descriptionIew []string) ApiCloudCloudNetworksListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionIre(descriptionIre []string) ApiCloudCloudNetworksListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionIsw(descriptionIsw []string) ApiCloudCloudNetworksListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionN(descriptionN []string) ApiCloudCloudNetworksListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionNic(descriptionNic []string) ApiCloudCloudNetworksListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionNie(descriptionNie []string) ApiCloudCloudNetworksListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionNiew(descriptionNiew []string) ApiCloudCloudNetworksListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionNire(descriptionNire []string) ApiCloudCloudNetworksListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionNisw(descriptionNisw []string) ApiCloudCloudNetworksListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionNre(descriptionNre []string) ApiCloudCloudNetworksListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiCloudCloudNetworksListRequest) DescriptionRe(descriptionRe []string) ApiCloudCloudNetworksListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiCloudCloudNetworksListRequest) DynamicGroups(dynamicGroups []string) ApiCloudCloudNetworksListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiCloudCloudNetworksListRequest) DynamicGroupsN(dynamicGroupsN string) ApiCloudCloudNetworksListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiCloudCloudNetworksListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCloudCloudNetworksListRequest) Id(id []string) ApiCloudCloudNetworksListRequest {
	r.id = &id
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdIc(idIc []string) ApiCloudCloudNetworksListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdIe(idIe []string) ApiCloudCloudNetworksListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdIew(idIew []string) ApiCloudCloudNetworksListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdIre(idIre []string) ApiCloudCloudNetworksListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdIsw(idIsw []string) ApiCloudCloudNetworksListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdN(idN []string) ApiCloudCloudNetworksListRequest {
	r.idN = &idN
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdNic(idNic []string) ApiCloudCloudNetworksListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdNie(idNie []string) ApiCloudCloudNetworksListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdNiew(idNiew []string) ApiCloudCloudNetworksListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdNire(idNire []string) ApiCloudCloudNetworksListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdNisw(idNisw []string) ApiCloudCloudNetworksListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdNre(idNre []string) ApiCloudCloudNetworksListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCloudCloudNetworksListRequest) IdRe(idRe []string) ApiCloudCloudNetworksListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiCloudCloudNetworksListRequest) LastUpdated(lastUpdated []time.Time) ApiCloudCloudNetworksListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCloudCloudNetworksListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCloudCloudNetworksListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCloudCloudNetworksListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCloudCloudNetworksListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCloudCloudNetworksListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiCloudCloudNetworksListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiCloudCloudNetworksListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCloudCloudNetworksListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCloudCloudNetworksListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCloudCloudNetworksListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCloudCloudNetworksListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCloudCloudNetworksListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudNetworksListRequest) Limit(limit int32) ApiCloudCloudNetworksListRequest {
	r.limit = &limit
	return r
}

func (r ApiCloudCloudNetworksListRequest) Name(name []string) ApiCloudCloudNetworksListRequest {
	r.name = &name
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameIc(nameIc []string) ApiCloudCloudNetworksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameIe(nameIe []string) ApiCloudCloudNetworksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameIew(nameIew []string) ApiCloudCloudNetworksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameIre(nameIre []string) ApiCloudCloudNetworksListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameIsw(nameIsw []string) ApiCloudCloudNetworksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameN(nameN []string) ApiCloudCloudNetworksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameNic(nameNic []string) ApiCloudCloudNetworksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameNie(nameNie []string) ApiCloudCloudNetworksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameNiew(nameNiew []string) ApiCloudCloudNetworksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameNire(nameNire []string) ApiCloudCloudNetworksListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameNisw(nameNisw []string) ApiCloudCloudNetworksListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameNre(nameNre []string) ApiCloudCloudNetworksListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiCloudCloudNetworksListRequest) NameRe(nameRe []string) ApiCloudCloudNetworksListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudNetworksListRequest) Offset(offset int32) ApiCloudCloudNetworksListRequest {
	r.offset = &offset
	return r
}

func (r ApiCloudCloudNetworksListRequest) Parent(parent []string) ApiCloudCloudNetworksListRequest {
	r.parent = &parent
	return r
}

// Parent cloud network (name or ID) is null
func (r ApiCloudCloudNetworksListRequest) ParentIsnull(parentIsnull bool) ApiCloudCloudNetworksListRequest {
	r.parentIsnull = &parentIsnull
	return r
}

func (r ApiCloudCloudNetworksListRequest) ParentN(parentN []string) ApiCloudCloudNetworksListRequest {
	r.parentN = &parentN
	return r
}

func (r ApiCloudCloudNetworksListRequest) Prefixes(prefixes []string) ApiCloudCloudNetworksListRequest {
	r.prefixes = &prefixes
	return r
}

func (r ApiCloudCloudNetworksListRequest) PrefixesN(prefixesN []string) ApiCloudCloudNetworksListRequest {
	r.prefixesN = &prefixesN
	return r
}

// Search
func (r ApiCloudCloudNetworksListRequest) Q(q string) ApiCloudCloudNetworksListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCloudCloudNetworksListRequest) Sort(sort string) ApiCloudCloudNetworksListRequest {
	r.sort = &sort
	return r
}

func (r ApiCloudCloudNetworksListRequest) Tags(tags []string) ApiCloudCloudNetworksListRequest {
	r.tags = &tags
	return r
}

func (r ApiCloudCloudNetworksListRequest) TagsIsnull(tagsIsnull bool) ApiCloudCloudNetworksListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiCloudCloudNetworksListRequest) TagsN(tagsN []string) ApiCloudCloudNetworksListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiCloudCloudNetworksListRequest) Teams(teams []string) ApiCloudCloudNetworksListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiCloudCloudNetworksListRequest) TeamsIsnull(teamsIsnull bool) ApiCloudCloudNetworksListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiCloudCloudNetworksListRequest) TeamsN(teamsN string) ApiCloudCloudNetworksListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiCloudCloudNetworksListRequest) Depth(depth int32) ApiCloudCloudNetworksListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudNetworksListRequest) Execute() (*PaginatedCloudNetworkList, *http.Response, error) {
	return r.ApiService.CloudCloudNetworksListExecute(r)
}

/*
CloudCloudNetworksList Method for CloudCloudNetworksList

Retrieve a list of cloud network objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudNetworksListRequest
*/
func (a *CloudAPIService) CloudCloudNetworksList(ctx context.Context) ApiCloudCloudNetworksListRequest {
	return ApiCloudCloudNetworksListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCloudNetworkList
func (a *CloudAPIService) CloudCloudNetworksListExecute(r ApiCloudCloudNetworksListRequest) (*PaginatedCloudNetworkList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCloudNetworkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cloudAccount != nil {
		t := *r.cloudAccount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_account", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_account", t, "form", "multi")
		}
	}
	if r.cloudAccountN != nil {
		t := *r.cloudAccountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_account__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_account__n", t, "form", "multi")
		}
	}
	if r.cloudResourceType != nil {
		t := *r.cloudResourceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_resource_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_resource_type", t, "form", "multi")
		}
	}
	if r.cloudResourceTypeN != nil {
		t := *r.cloudResourceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_resource_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_resource_type__n", t, "form", "multi")
		}
	}
	if r.cloudServices != nil {
		t := *r.cloudServices
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_services", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_services", t, "form", "multi")
		}
	}
	if r.cloudServicesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_services__isnull", r.cloudServicesIsnull, "form", "")
	}
	if r.cloudServicesN != nil {
		t := *r.cloudServicesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_services__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_services__n", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.parent != nil {
		t := *r.parent
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent", t, "form", "multi")
		}
	}
	if r.parentIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parent__isnull", r.parentIsnull, "form", "")
	}
	if r.parentN != nil {
		t := *r.parentN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", t, "form", "multi")
		}
	}
	if r.prefixes != nil {
		t := *r.prefixes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefixes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefixes", t, "form", "multi")
		}
	}
	if r.prefixesN != nil {
		t := *r.prefixesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefixes__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefixes__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksNotesCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworksNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCloudCloudNetworksNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCloudCloudNetworksNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworksNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CloudCloudNetworksNotesCreateExecute(r)
}

/*
CloudCloudNetworksNotesCreate Method for CloudCloudNetworksNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network.
 @return ApiCloudCloudNetworksNotesCreateRequest
*/
func (a *CloudAPIService) CloudCloudNetworksNotesCreate(ctx context.Context, id string) ApiCloudCloudNetworksNotesCreateRequest {
	return ApiCloudCloudNetworksNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CloudAPIService) CloudCloudNetworksNotesCreateExecute(r ApiCloudCloudNetworksNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksNotesListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCloudCloudNetworksNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudNetworksNotesListRequest) Limit(limit int32) ApiCloudCloudNetworksNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudNetworksNotesListRequest) Offset(offset int32) ApiCloudCloudNetworksNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCloudCloudNetworksNotesListRequest) Depth(depth int32) ApiCloudCloudNetworksNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudNetworksNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CloudCloudNetworksNotesListExecute(r)
}

/*
CloudCloudNetworksNotesList Method for CloudCloudNetworksNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network.
 @return ApiCloudCloudNetworksNotesListRequest
*/
func (a *CloudAPIService) CloudCloudNetworksNotesList(ctx context.Context, id string) ApiCloudCloudNetworksNotesListRequest {
	return ApiCloudCloudNetworksNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CloudAPIService) CloudCloudNetworksNotesListExecute(r ApiCloudCloudNetworksNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCloudNetworkRequest *PatchedCloudNetworkRequest
}

func (r ApiCloudCloudNetworksPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworksPartialUpdateRequest) PatchedCloudNetworkRequest(patchedCloudNetworkRequest PatchedCloudNetworkRequest) ApiCloudCloudNetworksPartialUpdateRequest {
	r.patchedCloudNetworkRequest = &patchedCloudNetworkRequest
	return r
}

func (r ApiCloudCloudNetworksPartialUpdateRequest) Execute() (*CloudNetwork, *http.Response, error) {
	return r.ApiService.CloudCloudNetworksPartialUpdateExecute(r)
}

/*
CloudCloudNetworksPartialUpdate Method for CloudCloudNetworksPartialUpdate

Partial update a cloud network object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network.
 @return ApiCloudCloudNetworksPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudNetworksPartialUpdate(ctx context.Context, id string) ApiCloudCloudNetworksPartialUpdateRequest {
	return ApiCloudCloudNetworksPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudNetwork
func (a *CloudAPIService) CloudCloudNetworksPartialUpdateExecute(r ApiCloudCloudNetworksPartialUpdateRequest) (*CloudNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCloudNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksRetrieveRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCloudCloudNetworksRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCloudCloudNetworksRetrieveRequest) Depth(depth int32) ApiCloudCloudNetworksRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudNetworksRetrieveRequest) Execute() (*CloudNetwork, *http.Response, error) {
	return r.ApiService.CloudCloudNetworksRetrieveExecute(r)
}

/*
CloudCloudNetworksRetrieve Method for CloudCloudNetworksRetrieve

Retrieve a cloud network object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network.
 @return ApiCloudCloudNetworksRetrieveRequest
*/
func (a *CloudAPIService) CloudCloudNetworksRetrieve(ctx context.Context, id string) ApiCloudCloudNetworksRetrieveRequest {
	return ApiCloudCloudNetworksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudNetwork
func (a *CloudAPIService) CloudCloudNetworksRetrieveExecute(r ApiCloudCloudNetworksRetrieveRequest) (*CloudNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudNetworksUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	cloudNetworkRequest *CloudNetworkRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudNetworksUpdateRequest) CloudNetworkRequest(cloudNetworkRequest CloudNetworkRequest) ApiCloudCloudNetworksUpdateRequest {
	r.cloudNetworkRequest = &cloudNetworkRequest
	return r
}

func (r ApiCloudCloudNetworksUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudNetworksUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudNetworksUpdateRequest) Execute() (*CloudNetwork, *http.Response, error) {
	return r.ApiService.CloudCloudNetworksUpdateExecute(r)
}

/*
CloudCloudNetworksUpdate Method for CloudCloudNetworksUpdate

Update a cloud network object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud network.
 @return ApiCloudCloudNetworksUpdateRequest
*/
func (a *CloudAPIService) CloudCloudNetworksUpdate(ctx context.Context, id string) ApiCloudCloudNetworksUpdateRequest {
	return ApiCloudCloudNetworksUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudNetwork
func (a *CloudAPIService) CloudCloudNetworksUpdateExecute(r ApiCloudCloudNetworksUpdateRequest) (*CloudNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudNetworksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-networks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudNetworkRequest == nil {
		return localVarReturnValue, nil, reportError("cloudNetworkRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudNetworkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudResourceTypesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCloudCloudResourceTypesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCloudCloudResourceTypesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudResourceTypesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesBulkDestroyExecute(r)
}

/*
CloudCloudResourceTypesBulkDestroy Method for CloudCloudResourceTypesBulkDestroy

Destroy a list of cloud resource type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudResourceTypesBulkDestroyRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesBulkDestroy(ctx context.Context) ApiCloudCloudResourceTypesBulkDestroyRequest {
	return ApiCloudCloudResourceTypesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudResourceTypesBulkDestroyExecute(r ApiCloudCloudResourceTypesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	patchedBulkWritableCloudResourceTypeRequest *[]PatchedBulkWritableCloudResourceTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudResourceTypesBulkPartialUpdateRequest) PatchedBulkWritableCloudResourceTypeRequest(patchedBulkWritableCloudResourceTypeRequest []PatchedBulkWritableCloudResourceTypeRequest) ApiCloudCloudResourceTypesBulkPartialUpdateRequest {
	r.patchedBulkWritableCloudResourceTypeRequest = &patchedBulkWritableCloudResourceTypeRequest
	return r
}

func (r ApiCloudCloudResourceTypesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudResourceTypesBulkPartialUpdateRequest) Execute() ([]CloudResourceType, *http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesBulkPartialUpdateExecute(r)
}

/*
CloudCloudResourceTypesBulkPartialUpdate Method for CloudCloudResourceTypesBulkPartialUpdate

Partial update a list of cloud resource type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudResourceTypesBulkPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesBulkPartialUpdate(ctx context.Context) ApiCloudCloudResourceTypesBulkPartialUpdateRequest {
	return ApiCloudCloudResourceTypesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudResourceType
func (a *CloudAPIService) CloudCloudResourceTypesBulkPartialUpdateExecute(r ApiCloudCloudResourceTypesBulkPartialUpdateRequest) ([]CloudResourceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudResourceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCloudResourceTypeRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCloudResourceTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCloudResourceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkWritableCloudResourceTypeRequest *[]BulkWritableCloudResourceTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudResourceTypesBulkUpdateRequest) BulkWritableCloudResourceTypeRequest(bulkWritableCloudResourceTypeRequest []BulkWritableCloudResourceTypeRequest) ApiCloudCloudResourceTypesBulkUpdateRequest {
	r.bulkWritableCloudResourceTypeRequest = &bulkWritableCloudResourceTypeRequest
	return r
}

func (r ApiCloudCloudResourceTypesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudResourceTypesBulkUpdateRequest) Execute() ([]CloudResourceType, *http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesBulkUpdateExecute(r)
}

/*
CloudCloudResourceTypesBulkUpdate Method for CloudCloudResourceTypesBulkUpdate

Update a list of cloud resource type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudResourceTypesBulkUpdateRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesBulkUpdate(ctx context.Context) ApiCloudCloudResourceTypesBulkUpdateRequest {
	return ApiCloudCloudResourceTypesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudResourceType
func (a *CloudAPIService) CloudCloudResourceTypesBulkUpdateExecute(r ApiCloudCloudResourceTypesBulkUpdateRequest) ([]CloudResourceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudResourceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCloudResourceTypeRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCloudResourceTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCloudResourceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudResourceTypeRequest *CloudResourceTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudResourceTypesCreateRequest) CloudResourceTypeRequest(cloudResourceTypeRequest CloudResourceTypeRequest) ApiCloudCloudResourceTypesCreateRequest {
	r.cloudResourceTypeRequest = &cloudResourceTypeRequest
	return r
}

func (r ApiCloudCloudResourceTypesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudResourceTypesCreateRequest) Execute() (*CloudResourceType, *http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesCreateExecute(r)
}

/*
CloudCloudResourceTypesCreate Method for CloudCloudResourceTypesCreate

Create one or more cloud resource type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudResourceTypesCreateRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesCreate(ctx context.Context) ApiCloudCloudResourceTypesCreateRequest {
	return ApiCloudCloudResourceTypesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudResourceType
func (a *CloudAPIService) CloudCloudResourceTypesCreateExecute(r ApiCloudCloudResourceTypesCreateRequest) (*CloudResourceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudResourceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudResourceTypeRequest == nil {
		return localVarReturnValue, nil, reportError("cloudResourceTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudResourceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudResourceTypesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudResourceTypesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesDestroyExecute(r)
}

/*
CloudCloudResourceTypesDestroy Method for CloudCloudResourceTypesDestroy

Destroy a cloud resource type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud resource type.
 @return ApiCloudCloudResourceTypesDestroyRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesDestroy(ctx context.Context, id string) ApiCloudCloudResourceTypesDestroyRequest {
	return ApiCloudCloudResourceTypesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudResourceTypesDestroyExecute(r ApiCloudCloudResourceTypesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	contentTypes *[]int32
	contentTypesIc *[]int32
	contentTypesIe *[]int32
	contentTypesIew *[]int32
	contentTypesIre *[]int32
	contentTypesIsw *[]int32
	contentTypesN *[]int32
	contentTypesNic *[]int32
	contentTypesNie *[]int32
	contentTypesNiew *[]int32
	contentTypesNire *[]int32
	contentTypesNisw *[]int32
	contentTypesNre *[]int32
	contentTypesRe *[]int32
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	provider *[]string
	providerN *[]string
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiCloudCloudResourceTypesListRequest) Contacts(contacts []string) ApiCloudCloudResourceTypesListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiCloudCloudResourceTypesListRequest) ContactsIsnull(contactsIsnull bool) ApiCloudCloudResourceTypesListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiCloudCloudResourceTypesListRequest) ContactsN(contactsN string) ApiCloudCloudResourceTypesListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypes(contentTypes []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesIc(contentTypesIc []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesIc = &contentTypesIc
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesIe(contentTypesIe []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesIe = &contentTypesIe
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesIew(contentTypesIew []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesIew = &contentTypesIew
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesIre(contentTypesIre []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesIre = &contentTypesIre
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesIsw(contentTypesIsw []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesIsw = &contentTypesIsw
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesN(contentTypesN []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesNic(contentTypesNic []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesNic = &contentTypesNic
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesNie(contentTypesNie []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesNie = &contentTypesNie
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesNiew(contentTypesNiew []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesNiew = &contentTypesNiew
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesNire(contentTypesNire []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesNire = &contentTypesNire
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesNisw(contentTypesNisw []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesNisw = &contentTypesNisw
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesNre(contentTypesNre []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesNre = &contentTypesNre
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ContentTypesRe(contentTypesRe []int32) ApiCloudCloudResourceTypesListRequest {
	r.contentTypesRe = &contentTypesRe
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) Created(created []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.created = &created
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) CreatedGt(createdGt []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) CreatedGte(createdGte []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) CreatedIsnull(createdIsnull bool) ApiCloudCloudResourceTypesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) CreatedLt(createdLt []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) CreatedLte(createdLte []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) CreatedN(createdN []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) Description(description []string) ApiCloudCloudResourceTypesListRequest {
	r.description = &description
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionIc(descriptionIc []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionIe(descriptionIe []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionIew(descriptionIew []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionIre(descriptionIre []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionIsw(descriptionIsw []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionN(descriptionN []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionNic(descriptionNic []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionNie(descriptionNie []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionNiew(descriptionNiew []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionNire(descriptionNire []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionNisw(descriptionNisw []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionNre(descriptionNre []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DescriptionRe(descriptionRe []string) ApiCloudCloudResourceTypesListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) DynamicGroups(dynamicGroups []string) ApiCloudCloudResourceTypesListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiCloudCloudResourceTypesListRequest) DynamicGroupsN(dynamicGroupsN string) ApiCloudCloudResourceTypesListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCloudCloudResourceTypesListRequest) Id(id []string) ApiCloudCloudResourceTypesListRequest {
	r.id = &id
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdIc(idIc []string) ApiCloudCloudResourceTypesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdIe(idIe []string) ApiCloudCloudResourceTypesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdIew(idIew []string) ApiCloudCloudResourceTypesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdIre(idIre []string) ApiCloudCloudResourceTypesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdIsw(idIsw []string) ApiCloudCloudResourceTypesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdN(idN []string) ApiCloudCloudResourceTypesListRequest {
	r.idN = &idN
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdNic(idNic []string) ApiCloudCloudResourceTypesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdNie(idNie []string) ApiCloudCloudResourceTypesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdNiew(idNiew []string) ApiCloudCloudResourceTypesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdNire(idNire []string) ApiCloudCloudResourceTypesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdNisw(idNisw []string) ApiCloudCloudResourceTypesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdNre(idNre []string) ApiCloudCloudResourceTypesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) IdRe(idRe []string) ApiCloudCloudResourceTypesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) LastUpdated(lastUpdated []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiCloudCloudResourceTypesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCloudCloudResourceTypesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudResourceTypesListRequest) Limit(limit int32) ApiCloudCloudResourceTypesListRequest {
	r.limit = &limit
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) Name(name []string) ApiCloudCloudResourceTypesListRequest {
	r.name = &name
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameIc(nameIc []string) ApiCloudCloudResourceTypesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameIe(nameIe []string) ApiCloudCloudResourceTypesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameIew(nameIew []string) ApiCloudCloudResourceTypesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameIre(nameIre []string) ApiCloudCloudResourceTypesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameIsw(nameIsw []string) ApiCloudCloudResourceTypesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameN(nameN []string) ApiCloudCloudResourceTypesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameNic(nameNic []string) ApiCloudCloudResourceTypesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameNie(nameNie []string) ApiCloudCloudResourceTypesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameNiew(nameNiew []string) ApiCloudCloudResourceTypesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameNire(nameNire []string) ApiCloudCloudResourceTypesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameNisw(nameNisw []string) ApiCloudCloudResourceTypesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameNre(nameNre []string) ApiCloudCloudResourceTypesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) NameRe(nameRe []string) ApiCloudCloudResourceTypesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudResourceTypesListRequest) Offset(offset int32) ApiCloudCloudResourceTypesListRequest {
	r.offset = &offset
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) Provider(provider []string) ApiCloudCloudResourceTypesListRequest {
	r.provider = &provider
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) ProviderN(providerN []string) ApiCloudCloudResourceTypesListRequest {
	r.providerN = &providerN
	return r
}

// Search
func (r ApiCloudCloudResourceTypesListRequest) Q(q string) ApiCloudCloudResourceTypesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCloudCloudResourceTypesListRequest) Sort(sort string) ApiCloudCloudResourceTypesListRequest {
	r.sort = &sort
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) Tags(tags []string) ApiCloudCloudResourceTypesListRequest {
	r.tags = &tags
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) TagsIsnull(tagsIsnull bool) ApiCloudCloudResourceTypesListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) TagsN(tagsN []string) ApiCloudCloudResourceTypesListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) Teams(teams []string) ApiCloudCloudResourceTypesListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiCloudCloudResourceTypesListRequest) TeamsIsnull(teamsIsnull bool) ApiCloudCloudResourceTypesListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiCloudCloudResourceTypesListRequest) TeamsN(teamsN string) ApiCloudCloudResourceTypesListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiCloudCloudResourceTypesListRequest) Depth(depth int32) ApiCloudCloudResourceTypesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudResourceTypesListRequest) Execute() (*PaginatedCloudResourceTypeList, *http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesListExecute(r)
}

/*
CloudCloudResourceTypesList Method for CloudCloudResourceTypesList

Retrieve a list of cloud resource type objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudResourceTypesListRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesList(ctx context.Context) ApiCloudCloudResourceTypesListRequest {
	return ApiCloudCloudResourceTypesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCloudResourceTypeList
func (a *CloudAPIService) CloudCloudResourceTypesListExecute(r ApiCloudCloudResourceTypesListRequest) (*PaginatedCloudResourceTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCloudResourceTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types", t, "form", "multi")
		}
	}
	if r.contentTypesIc != nil {
		t := *r.contentTypesIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ic", t, "form", "multi")
		}
	}
	if r.contentTypesIe != nil {
		t := *r.contentTypesIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ie", t, "form", "multi")
		}
	}
	if r.contentTypesIew != nil {
		t := *r.contentTypesIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__iew", t, "form", "multi")
		}
	}
	if r.contentTypesIre != nil {
		t := *r.contentTypesIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__ire", t, "form", "multi")
		}
	}
	if r.contentTypesIsw != nil {
		t := *r.contentTypesIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__isw", t, "form", "multi")
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__n", t, "form", "multi")
		}
	}
	if r.contentTypesNic != nil {
		t := *r.contentTypesNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nic", t, "form", "multi")
		}
	}
	if r.contentTypesNie != nil {
		t := *r.contentTypesNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nie", t, "form", "multi")
		}
	}
	if r.contentTypesNiew != nil {
		t := *r.contentTypesNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__niew", t, "form", "multi")
		}
	}
	if r.contentTypesNire != nil {
		t := *r.contentTypesNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nire", t, "form", "multi")
		}
	}
	if r.contentTypesNisw != nil {
		t := *r.contentTypesNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nisw", t, "form", "multi")
		}
	}
	if r.contentTypesNre != nil {
		t := *r.contentTypesNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__nre", t, "form", "multi")
		}
	}
	if r.contentTypesRe != nil {
		t := *r.contentTypesRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_types__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.provider != nil {
		t := *r.provider
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider", t, "form", "multi")
		}
	}
	if r.providerN != nil {
		t := *r.providerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "provider__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesNotesCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudResourceTypesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCloudCloudResourceTypesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCloudCloudResourceTypesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudResourceTypesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesNotesCreateExecute(r)
}

/*
CloudCloudResourceTypesNotesCreate Method for CloudCloudResourceTypesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud resource type.
 @return ApiCloudCloudResourceTypesNotesCreateRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesNotesCreate(ctx context.Context, id string) ApiCloudCloudResourceTypesNotesCreateRequest {
	return ApiCloudCloudResourceTypesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CloudAPIService) CloudCloudResourceTypesNotesCreateExecute(r ApiCloudCloudResourceTypesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesNotesListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCloudCloudResourceTypesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudResourceTypesNotesListRequest) Limit(limit int32) ApiCloudCloudResourceTypesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudResourceTypesNotesListRequest) Offset(offset int32) ApiCloudCloudResourceTypesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCloudCloudResourceTypesNotesListRequest) Depth(depth int32) ApiCloudCloudResourceTypesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudResourceTypesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesNotesListExecute(r)
}

/*
CloudCloudResourceTypesNotesList Method for CloudCloudResourceTypesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud resource type.
 @return ApiCloudCloudResourceTypesNotesListRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesNotesList(ctx context.Context, id string) ApiCloudCloudResourceTypesNotesListRequest {
	return ApiCloudCloudResourceTypesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CloudAPIService) CloudCloudResourceTypesNotesListExecute(r ApiCloudCloudResourceTypesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCloudResourceTypeRequest *PatchedCloudResourceTypeRequest
}

func (r ApiCloudCloudResourceTypesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudResourceTypesPartialUpdateRequest) PatchedCloudResourceTypeRequest(patchedCloudResourceTypeRequest PatchedCloudResourceTypeRequest) ApiCloudCloudResourceTypesPartialUpdateRequest {
	r.patchedCloudResourceTypeRequest = &patchedCloudResourceTypeRequest
	return r
}

func (r ApiCloudCloudResourceTypesPartialUpdateRequest) Execute() (*CloudResourceType, *http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesPartialUpdateExecute(r)
}

/*
CloudCloudResourceTypesPartialUpdate Method for CloudCloudResourceTypesPartialUpdate

Partial update a cloud resource type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud resource type.
 @return ApiCloudCloudResourceTypesPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesPartialUpdate(ctx context.Context, id string) ApiCloudCloudResourceTypesPartialUpdateRequest {
	return ApiCloudCloudResourceTypesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudResourceType
func (a *CloudAPIService) CloudCloudResourceTypesPartialUpdateExecute(r ApiCloudCloudResourceTypesPartialUpdateRequest) (*CloudResourceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudResourceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCloudResourceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesRetrieveRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCloudCloudResourceTypesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCloudCloudResourceTypesRetrieveRequest) Depth(depth int32) ApiCloudCloudResourceTypesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudResourceTypesRetrieveRequest) Execute() (*CloudResourceType, *http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesRetrieveExecute(r)
}

/*
CloudCloudResourceTypesRetrieve Method for CloudCloudResourceTypesRetrieve

Retrieve a cloud resource type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud resource type.
 @return ApiCloudCloudResourceTypesRetrieveRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesRetrieve(ctx context.Context, id string) ApiCloudCloudResourceTypesRetrieveRequest {
	return ApiCloudCloudResourceTypesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudResourceType
func (a *CloudAPIService) CloudCloudResourceTypesRetrieveExecute(r ApiCloudCloudResourceTypesRetrieveRequest) (*CloudResourceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudResourceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudResourceTypesUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	cloudResourceTypeRequest *CloudResourceTypeRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudResourceTypesUpdateRequest) CloudResourceTypeRequest(cloudResourceTypeRequest CloudResourceTypeRequest) ApiCloudCloudResourceTypesUpdateRequest {
	r.cloudResourceTypeRequest = &cloudResourceTypeRequest
	return r
}

func (r ApiCloudCloudResourceTypesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudResourceTypesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudResourceTypesUpdateRequest) Execute() (*CloudResourceType, *http.Response, error) {
	return r.ApiService.CloudCloudResourceTypesUpdateExecute(r)
}

/*
CloudCloudResourceTypesUpdate Method for CloudCloudResourceTypesUpdate

Update a cloud resource type object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud resource type.
 @return ApiCloudCloudResourceTypesUpdateRequest
*/
func (a *CloudAPIService) CloudCloudResourceTypesUpdate(ctx context.Context, id string) ApiCloudCloudResourceTypesUpdateRequest {
	return ApiCloudCloudResourceTypesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudResourceType
func (a *CloudAPIService) CloudCloudResourceTypesUpdateExecute(r ApiCloudCloudResourceTypesUpdateRequest) (*CloudResourceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudResourceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudResourceTypesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-resource-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudResourceTypeRequest == nil {
		return localVarReturnValue, nil, reportError("cloudResourceTypeRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudResourceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsBulkDestroyExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsBulkDestroy Method for CloudCloudServiceNetworkAssignmentsBulkDestroy

Destroy a list of cloud service network assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsBulkDestroy(ctx context.Context) ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest {
	return ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsBulkDestroyExecute(r ApiCloudCloudServiceNetworkAssignmentsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	patchedBulkWritableCloudServiceNetworkAssignmentRequest *[]PatchedBulkWritableCloudServiceNetworkAssignmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest) PatchedBulkWritableCloudServiceNetworkAssignmentRequest(patchedBulkWritableCloudServiceNetworkAssignmentRequest []PatchedBulkWritableCloudServiceNetworkAssignmentRequest) ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest {
	r.patchedBulkWritableCloudServiceNetworkAssignmentRequest = &patchedBulkWritableCloudServiceNetworkAssignmentRequest
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest) Execute() ([]CloudServiceNetworkAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsBulkPartialUpdateExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsBulkPartialUpdate Method for CloudCloudServiceNetworkAssignmentsBulkPartialUpdate

Partial update a list of cloud service network assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsBulkPartialUpdate(ctx context.Context) ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest {
	return ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudServiceNetworkAssignment
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsBulkPartialUpdateExecute(r ApiCloudCloudServiceNetworkAssignmentsBulkPartialUpdateRequest) ([]CloudServiceNetworkAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudServiceNetworkAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCloudServiceNetworkAssignmentRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCloudServiceNetworkAssignmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCloudServiceNetworkAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkWritableCloudServiceNetworkAssignmentRequest *[]BulkWritableCloudServiceNetworkAssignmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest) BulkWritableCloudServiceNetworkAssignmentRequest(bulkWritableCloudServiceNetworkAssignmentRequest []BulkWritableCloudServiceNetworkAssignmentRequest) ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest {
	r.bulkWritableCloudServiceNetworkAssignmentRequest = &bulkWritableCloudServiceNetworkAssignmentRequest
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest) Execute() ([]CloudServiceNetworkAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsBulkUpdateExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsBulkUpdate Method for CloudCloudServiceNetworkAssignmentsBulkUpdate

Update a list of cloud service network assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsBulkUpdate(ctx context.Context) ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest {
	return ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudServiceNetworkAssignment
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsBulkUpdateExecute(r ApiCloudCloudServiceNetworkAssignmentsBulkUpdateRequest) ([]CloudServiceNetworkAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudServiceNetworkAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCloudServiceNetworkAssignmentRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCloudServiceNetworkAssignmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCloudServiceNetworkAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudServiceNetworkAssignmentRequest *CloudServiceNetworkAssignmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServiceNetworkAssignmentsCreateRequest) CloudServiceNetworkAssignmentRequest(cloudServiceNetworkAssignmentRequest CloudServiceNetworkAssignmentRequest) ApiCloudCloudServiceNetworkAssignmentsCreateRequest {
	r.cloudServiceNetworkAssignmentRequest = &cloudServiceNetworkAssignmentRequest
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsCreateRequest) Execute() (*CloudServiceNetworkAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsCreateExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsCreate Method for CloudCloudServiceNetworkAssignmentsCreate

Create one or more cloud service network assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServiceNetworkAssignmentsCreateRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsCreate(ctx context.Context) ApiCloudCloudServiceNetworkAssignmentsCreateRequest {
	return ApiCloudCloudServiceNetworkAssignmentsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudServiceNetworkAssignment
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsCreateExecute(r ApiCloudCloudServiceNetworkAssignmentsCreateRequest) (*CloudServiceNetworkAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudServiceNetworkAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudServiceNetworkAssignmentRequest == nil {
		return localVarReturnValue, nil, reportError("cloudServiceNetworkAssignmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudServiceNetworkAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServiceNetworkAssignmentsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsDestroyExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsDestroy Method for CloudCloudServiceNetworkAssignmentsDestroy

Destroy a cloud service network assignment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service network assignment.
 @return ApiCloudCloudServiceNetworkAssignmentsDestroyRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsDestroy(ctx context.Context, id string) ApiCloudCloudServiceNetworkAssignmentsDestroyRequest {
	return ApiCloudCloudServiceNetworkAssignmentsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsDestroyExecute(r ApiCloudCloudServiceNetworkAssignmentsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudNetwork *[]string
	cloudNetworkN *[]string
	cloudService *[]string
	cloudServiceN *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	offset *int32
	q *string
	sort *string
	depth *int32
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) CloudNetwork(cloudNetwork []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.cloudNetwork = &cloudNetwork
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) CloudNetworkN(cloudNetworkN []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.cloudNetworkN = &cloudNetworkN
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) CloudService(cloudService []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.cloudService = &cloudService
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) CloudServiceN(cloudServiceN []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.cloudServiceN = &cloudServiceN
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) Id(id []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.id = &id
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdIc(idIc []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdIe(idIe []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdIew(idIew []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdIre(idIre []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdIsw(idIsw []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdN(idN []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idN = &idN
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdNic(idNic []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdNie(idNie []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdNiew(idNiew []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdNire(idNire []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdNisw(idNisw []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdNre(idNre []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) IdRe(idRe []string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) Limit(limit int32) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) Offset(offset int32) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) Q(q string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) Sort(sort string) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.sort = &sort
	return r
}

// Serializer Depth
func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) Depth(depth int32) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsListRequest) Execute() (*PaginatedCloudServiceNetworkAssignmentList, *http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsListExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsList Method for CloudCloudServiceNetworkAssignmentsList

Retrieve a list of cloud service network assignment objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServiceNetworkAssignmentsListRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsList(ctx context.Context) ApiCloudCloudServiceNetworkAssignmentsListRequest {
	return ApiCloudCloudServiceNetworkAssignmentsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCloudServiceNetworkAssignmentList
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsListExecute(r ApiCloudCloudServiceNetworkAssignmentsListRequest) (*PaginatedCloudServiceNetworkAssignmentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCloudServiceNetworkAssignmentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cloudNetwork != nil {
		t := *r.cloudNetwork
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_network", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_network", t, "form", "multi")
		}
	}
	if r.cloudNetworkN != nil {
		t := *r.cloudNetworkN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_network__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_network__n", t, "form", "multi")
		}
	}
	if r.cloudService != nil {
		t := *r.cloudService
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_service", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_service", t, "form", "multi")
		}
	}
	if r.cloudServiceN != nil {
		t := *r.cloudServiceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_service__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_service__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsNotesCreateExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsNotesCreate Method for CloudCloudServiceNetworkAssignmentsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service network assignment.
 @return ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsNotesCreate(ctx context.Context, id string) ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest {
	return ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsNotesCreateExecute(r ApiCloudCloudServiceNetworkAssignmentsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsNotesListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCloudCloudServiceNetworkAssignmentsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudServiceNetworkAssignmentsNotesListRequest) Limit(limit int32) ApiCloudCloudServiceNetworkAssignmentsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudServiceNetworkAssignmentsNotesListRequest) Offset(offset int32) ApiCloudCloudServiceNetworkAssignmentsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCloudCloudServiceNetworkAssignmentsNotesListRequest) Depth(depth int32) ApiCloudCloudServiceNetworkAssignmentsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsNotesListExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsNotesList Method for CloudCloudServiceNetworkAssignmentsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service network assignment.
 @return ApiCloudCloudServiceNetworkAssignmentsNotesListRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsNotesList(ctx context.Context, id string) ApiCloudCloudServiceNetworkAssignmentsNotesListRequest {
	return ApiCloudCloudServiceNetworkAssignmentsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsNotesListExecute(r ApiCloudCloudServiceNetworkAssignmentsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCloudServiceNetworkAssignmentRequest *PatchedCloudServiceNetworkAssignmentRequest
}

func (r ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest) PatchedCloudServiceNetworkAssignmentRequest(patchedCloudServiceNetworkAssignmentRequest PatchedCloudServiceNetworkAssignmentRequest) ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest {
	r.patchedCloudServiceNetworkAssignmentRequest = &patchedCloudServiceNetworkAssignmentRequest
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest) Execute() (*CloudServiceNetworkAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsPartialUpdateExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsPartialUpdate Method for CloudCloudServiceNetworkAssignmentsPartialUpdate

Partial update a cloud service network assignment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service network assignment.
 @return ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsPartialUpdate(ctx context.Context, id string) ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest {
	return ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudServiceNetworkAssignment
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsPartialUpdateExecute(r ApiCloudCloudServiceNetworkAssignmentsPartialUpdateRequest) (*CloudServiceNetworkAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudServiceNetworkAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCloudServiceNetworkAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest) Depth(depth int32) ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest) Execute() (*CloudServiceNetworkAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsRetrieveExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsRetrieve Method for CloudCloudServiceNetworkAssignmentsRetrieve

Retrieve a cloud service network assignment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service network assignment.
 @return ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsRetrieve(ctx context.Context, id string) ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest {
	return ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudServiceNetworkAssignment
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsRetrieveExecute(r ApiCloudCloudServiceNetworkAssignmentsRetrieveRequest) (*CloudServiceNetworkAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudServiceNetworkAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServiceNetworkAssignmentsUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	cloudServiceNetworkAssignmentRequest *CloudServiceNetworkAssignmentRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServiceNetworkAssignmentsUpdateRequest) CloudServiceNetworkAssignmentRequest(cloudServiceNetworkAssignmentRequest CloudServiceNetworkAssignmentRequest) ApiCloudCloudServiceNetworkAssignmentsUpdateRequest {
	r.cloudServiceNetworkAssignmentRequest = &cloudServiceNetworkAssignmentRequest
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServiceNetworkAssignmentsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServiceNetworkAssignmentsUpdateRequest) Execute() (*CloudServiceNetworkAssignment, *http.Response, error) {
	return r.ApiService.CloudCloudServiceNetworkAssignmentsUpdateExecute(r)
}

/*
CloudCloudServiceNetworkAssignmentsUpdate Method for CloudCloudServiceNetworkAssignmentsUpdate

Update a cloud service network assignment object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service network assignment.
 @return ApiCloudCloudServiceNetworkAssignmentsUpdateRequest
*/
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsUpdate(ctx context.Context, id string) ApiCloudCloudServiceNetworkAssignmentsUpdateRequest {
	return ApiCloudCloudServiceNetworkAssignmentsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudServiceNetworkAssignment
func (a *CloudAPIService) CloudCloudServiceNetworkAssignmentsUpdateExecute(r ApiCloudCloudServiceNetworkAssignmentsUpdateRequest) (*CloudServiceNetworkAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudServiceNetworkAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServiceNetworkAssignmentsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-service-network-assignments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudServiceNetworkAssignmentRequest == nil {
		return localVarReturnValue, nil, reportError("cloudServiceNetworkAssignmentRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudServiceNetworkAssignmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServicesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServicesBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiCloudCloudServicesBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiCloudCloudServicesBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServicesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudServicesBulkDestroyExecute(r)
}

/*
CloudCloudServicesBulkDestroy Method for CloudCloudServicesBulkDestroy

Destroy a list of cloud service objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServicesBulkDestroyRequest
*/
func (a *CloudAPIService) CloudCloudServicesBulkDestroy(ctx context.Context) ApiCloudCloudServicesBulkDestroyRequest {
	return ApiCloudCloudServicesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudServicesBulkDestroyExecute(r ApiCloudCloudServicesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudServicesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	patchedBulkWritableCloudServiceRequest *[]PatchedBulkWritableCloudServiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServicesBulkPartialUpdateRequest) PatchedBulkWritableCloudServiceRequest(patchedBulkWritableCloudServiceRequest []PatchedBulkWritableCloudServiceRequest) ApiCloudCloudServicesBulkPartialUpdateRequest {
	r.patchedBulkWritableCloudServiceRequest = &patchedBulkWritableCloudServiceRequest
	return r
}

func (r ApiCloudCloudServicesBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServicesBulkPartialUpdateRequest) Execute() ([]CloudService, *http.Response, error) {
	return r.ApiService.CloudCloudServicesBulkPartialUpdateExecute(r)
}

/*
CloudCloudServicesBulkPartialUpdate Method for CloudCloudServicesBulkPartialUpdate

Partial update a list of cloud service objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServicesBulkPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudServicesBulkPartialUpdate(ctx context.Context) ApiCloudCloudServicesBulkPartialUpdateRequest {
	return ApiCloudCloudServicesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudService
func (a *CloudAPIService) CloudCloudServicesBulkPartialUpdateExecute(r ApiCloudCloudServicesBulkPartialUpdateRequest) ([]CloudService, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableCloudServiceRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableCloudServiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableCloudServiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServicesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	bulkWritableCloudServiceRequest *[]BulkWritableCloudServiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServicesBulkUpdateRequest) BulkWritableCloudServiceRequest(bulkWritableCloudServiceRequest []BulkWritableCloudServiceRequest) ApiCloudCloudServicesBulkUpdateRequest {
	r.bulkWritableCloudServiceRequest = &bulkWritableCloudServiceRequest
	return r
}

func (r ApiCloudCloudServicesBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServicesBulkUpdateRequest) Execute() ([]CloudService, *http.Response, error) {
	return r.ApiService.CloudCloudServicesBulkUpdateExecute(r)
}

/*
CloudCloudServicesBulkUpdate Method for CloudCloudServicesBulkUpdate

Update a list of cloud service objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServicesBulkUpdateRequest
*/
func (a *CloudAPIService) CloudCloudServicesBulkUpdate(ctx context.Context) ApiCloudCloudServicesBulkUpdateRequest {
	return ApiCloudCloudServicesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CloudService
func (a *CloudAPIService) CloudCloudServicesBulkUpdateExecute(r ApiCloudCloudServicesBulkUpdateRequest) ([]CloudService, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableCloudServiceRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableCloudServiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableCloudServiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServicesCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudServiceRequest *CloudServiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServicesCreateRequest) CloudServiceRequest(cloudServiceRequest CloudServiceRequest) ApiCloudCloudServicesCreateRequest {
	r.cloudServiceRequest = &cloudServiceRequest
	return r
}

func (r ApiCloudCloudServicesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServicesCreateRequest) Execute() (*CloudService, *http.Response, error) {
	return r.ApiService.CloudCloudServicesCreateExecute(r)
}

/*
CloudCloudServicesCreate Method for CloudCloudServicesCreate

Create one or more cloud service objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServicesCreateRequest
*/
func (a *CloudAPIService) CloudCloudServicesCreate(ctx context.Context) ApiCloudCloudServicesCreateRequest {
	return ApiCloudCloudServicesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudService
func (a *CloudAPIService) CloudCloudServicesCreateExecute(r ApiCloudCloudServicesCreateRequest) (*CloudService, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudServiceRequest == nil {
		return localVarReturnValue, nil, reportError("cloudServiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudServiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServicesDestroyRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServicesDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesDestroyRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServicesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CloudCloudServicesDestroyExecute(r)
}

/*
CloudCloudServicesDestroy Method for CloudCloudServicesDestroy

Destroy a cloud service object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service.
 @return ApiCloudCloudServicesDestroyRequest
*/
func (a *CloudAPIService) CloudCloudServicesDestroy(ctx context.Context, id string) ApiCloudCloudServicesDestroyRequest {
	return ApiCloudCloudServicesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CloudAPIService) CloudCloudServicesDestroyExecute(r ApiCloudCloudServicesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCloudCloudServicesListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	cloudAccount *[]string
	cloudAccountIsnull *bool
	cloudAccountN *[]string
	cloudNetworks *[]string
	cloudNetworksN *[]string
	cloudResourceType *[]string
	cloudResourceTypeN *[]string
	contacts *[]string
	contactsIsnull *bool
	contactsN *string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	dynamicGroups *[]string
	dynamicGroupsN *string
	format *CircuitsCircuitTerminationsListFormatParameter
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	teams *[]string
	teamsIsnull *bool
	teamsN *string
	depth *int32
}

func (r ApiCloudCloudServicesListRequest) CloudAccount(cloudAccount []string) ApiCloudCloudServicesListRequest {
	r.cloudAccount = &cloudAccount
	return r
}

// Cloud account (name or ID) is null
func (r ApiCloudCloudServicesListRequest) CloudAccountIsnull(cloudAccountIsnull bool) ApiCloudCloudServicesListRequest {
	r.cloudAccountIsnull = &cloudAccountIsnull
	return r
}

func (r ApiCloudCloudServicesListRequest) CloudAccountN(cloudAccountN []string) ApiCloudCloudServicesListRequest {
	r.cloudAccountN = &cloudAccountN
	return r
}

func (r ApiCloudCloudServicesListRequest) CloudNetworks(cloudNetworks []string) ApiCloudCloudServicesListRequest {
	r.cloudNetworks = &cloudNetworks
	return r
}

func (r ApiCloudCloudServicesListRequest) CloudNetworksN(cloudNetworksN []string) ApiCloudCloudServicesListRequest {
	r.cloudNetworksN = &cloudNetworksN
	return r
}

func (r ApiCloudCloudServicesListRequest) CloudResourceType(cloudResourceType []string) ApiCloudCloudServicesListRequest {
	r.cloudResourceType = &cloudResourceType
	return r
}

func (r ApiCloudCloudServicesListRequest) CloudResourceTypeN(cloudResourceTypeN []string) ApiCloudCloudServicesListRequest {
	r.cloudResourceTypeN = &cloudResourceTypeN
	return r
}

func (r ApiCloudCloudServicesListRequest) Contacts(contacts []string) ApiCloudCloudServicesListRequest {
	r.contacts = &contacts
	return r
}

// Contacts (name or ID) is null
func (r ApiCloudCloudServicesListRequest) ContactsIsnull(contactsIsnull bool) ApiCloudCloudServicesListRequest {
	r.contactsIsnull = &contactsIsnull
	return r
}

// Exclude Contacts (name or ID)
func (r ApiCloudCloudServicesListRequest) ContactsN(contactsN string) ApiCloudCloudServicesListRequest {
	r.contactsN = &contactsN
	return r
}

func (r ApiCloudCloudServicesListRequest) Created(created []time.Time) ApiCloudCloudServicesListRequest {
	r.created = &created
	return r
}

func (r ApiCloudCloudServicesListRequest) CreatedGt(createdGt []time.Time) ApiCloudCloudServicesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCloudCloudServicesListRequest) CreatedGte(createdGte []time.Time) ApiCloudCloudServicesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCloudCloudServicesListRequest) CreatedIsnull(createdIsnull bool) ApiCloudCloudServicesListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiCloudCloudServicesListRequest) CreatedLt(createdLt []time.Time) ApiCloudCloudServicesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCloudCloudServicesListRequest) CreatedLte(createdLte []time.Time) ApiCloudCloudServicesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCloudCloudServicesListRequest) CreatedN(createdN []time.Time) ApiCloudCloudServicesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCloudCloudServicesListRequest) Description(description []string) ApiCloudCloudServicesListRequest {
	r.description = &description
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionIc(descriptionIc []string) ApiCloudCloudServicesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionIe(descriptionIe []string) ApiCloudCloudServicesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionIew(descriptionIew []string) ApiCloudCloudServicesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionIre(descriptionIre []string) ApiCloudCloudServicesListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionIsw(descriptionIsw []string) ApiCloudCloudServicesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionN(descriptionN []string) ApiCloudCloudServicesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionNic(descriptionNic []string) ApiCloudCloudServicesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionNie(descriptionNie []string) ApiCloudCloudServicesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionNiew(descriptionNiew []string) ApiCloudCloudServicesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionNire(descriptionNire []string) ApiCloudCloudServicesListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionNisw(descriptionNisw []string) ApiCloudCloudServicesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionNre(descriptionNre []string) ApiCloudCloudServicesListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiCloudCloudServicesListRequest) DescriptionRe(descriptionRe []string) ApiCloudCloudServicesListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiCloudCloudServicesListRequest) DynamicGroups(dynamicGroups []string) ApiCloudCloudServicesListRequest {
	r.dynamicGroups = &dynamicGroups
	return r
}

// Exclude Dynamic groups (name or ID)
func (r ApiCloudCloudServicesListRequest) DynamicGroupsN(dynamicGroupsN string) ApiCloudCloudServicesListRequest {
	r.dynamicGroupsN = &dynamicGroupsN
	return r
}

func (r ApiCloudCloudServicesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesListRequest {
	r.format = &format
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiCloudCloudServicesListRequest) Id(id []string) ApiCloudCloudServicesListRequest {
	r.id = &id
	return r
}

func (r ApiCloudCloudServicesListRequest) IdIc(idIc []string) ApiCloudCloudServicesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiCloudCloudServicesListRequest) IdIe(idIe []string) ApiCloudCloudServicesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiCloudCloudServicesListRequest) IdIew(idIew []string) ApiCloudCloudServicesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiCloudCloudServicesListRequest) IdIre(idIre []string) ApiCloudCloudServicesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiCloudCloudServicesListRequest) IdIsw(idIsw []string) ApiCloudCloudServicesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiCloudCloudServicesListRequest) IdN(idN []string) ApiCloudCloudServicesListRequest {
	r.idN = &idN
	return r
}

func (r ApiCloudCloudServicesListRequest) IdNic(idNic []string) ApiCloudCloudServicesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiCloudCloudServicesListRequest) IdNie(idNie []string) ApiCloudCloudServicesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiCloudCloudServicesListRequest) IdNiew(idNiew []string) ApiCloudCloudServicesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiCloudCloudServicesListRequest) IdNire(idNire []string) ApiCloudCloudServicesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiCloudCloudServicesListRequest) IdNisw(idNisw []string) ApiCloudCloudServicesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiCloudCloudServicesListRequest) IdNre(idNre []string) ApiCloudCloudServicesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiCloudCloudServicesListRequest) IdRe(idRe []string) ApiCloudCloudServicesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiCloudCloudServicesListRequest) LastUpdated(lastUpdated []time.Time) ApiCloudCloudServicesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCloudCloudServicesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCloudCloudServicesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCloudCloudServicesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCloudCloudServicesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCloudCloudServicesListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiCloudCloudServicesListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiCloudCloudServicesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCloudCloudServicesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCloudCloudServicesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCloudCloudServicesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCloudCloudServicesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCloudCloudServicesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudServicesListRequest) Limit(limit int32) ApiCloudCloudServicesListRequest {
	r.limit = &limit
	return r
}

func (r ApiCloudCloudServicesListRequest) Name(name []string) ApiCloudCloudServicesListRequest {
	r.name = &name
	return r
}

func (r ApiCloudCloudServicesListRequest) NameIc(nameIc []string) ApiCloudCloudServicesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiCloudCloudServicesListRequest) NameIe(nameIe []string) ApiCloudCloudServicesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiCloudCloudServicesListRequest) NameIew(nameIew []string) ApiCloudCloudServicesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiCloudCloudServicesListRequest) NameIre(nameIre []string) ApiCloudCloudServicesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiCloudCloudServicesListRequest) NameIsw(nameIsw []string) ApiCloudCloudServicesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiCloudCloudServicesListRequest) NameN(nameN []string) ApiCloudCloudServicesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiCloudCloudServicesListRequest) NameNic(nameNic []string) ApiCloudCloudServicesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiCloudCloudServicesListRequest) NameNie(nameNie []string) ApiCloudCloudServicesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiCloudCloudServicesListRequest) NameNiew(nameNiew []string) ApiCloudCloudServicesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiCloudCloudServicesListRequest) NameNire(nameNire []string) ApiCloudCloudServicesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiCloudCloudServicesListRequest) NameNisw(nameNisw []string) ApiCloudCloudServicesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiCloudCloudServicesListRequest) NameNre(nameNre []string) ApiCloudCloudServicesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiCloudCloudServicesListRequest) NameRe(nameRe []string) ApiCloudCloudServicesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudServicesListRequest) Offset(offset int32) ApiCloudCloudServicesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiCloudCloudServicesListRequest) Q(q string) ApiCloudCloudServicesListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiCloudCloudServicesListRequest) Sort(sort string) ApiCloudCloudServicesListRequest {
	r.sort = &sort
	return r
}

func (r ApiCloudCloudServicesListRequest) Tags(tags []string) ApiCloudCloudServicesListRequest {
	r.tags = &tags
	return r
}

func (r ApiCloudCloudServicesListRequest) TagsIsnull(tagsIsnull bool) ApiCloudCloudServicesListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiCloudCloudServicesListRequest) TagsN(tagsN []string) ApiCloudCloudServicesListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiCloudCloudServicesListRequest) Teams(teams []string) ApiCloudCloudServicesListRequest {
	r.teams = &teams
	return r
}

// Teams (name or ID) is null
func (r ApiCloudCloudServicesListRequest) TeamsIsnull(teamsIsnull bool) ApiCloudCloudServicesListRequest {
	r.teamsIsnull = &teamsIsnull
	return r
}

// Exclude Teams (name or ID)
func (r ApiCloudCloudServicesListRequest) TeamsN(teamsN string) ApiCloudCloudServicesListRequest {
	r.teamsN = &teamsN
	return r
}

// Serializer Depth
func (r ApiCloudCloudServicesListRequest) Depth(depth int32) ApiCloudCloudServicesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudServicesListRequest) Execute() (*PaginatedCloudServiceList, *http.Response, error) {
	return r.ApiService.CloudCloudServicesListExecute(r)
}

/*
CloudCloudServicesList Method for CloudCloudServicesList

Retrieve a list of cloud service objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCloudServicesListRequest
*/
func (a *CloudAPIService) CloudCloudServicesList(ctx context.Context) ApiCloudCloudServicesListRequest {
	return ApiCloudCloudServicesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCloudServiceList
func (a *CloudAPIService) CloudCloudServicesListExecute(r ApiCloudCloudServicesListRequest) (*PaginatedCloudServiceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCloudServiceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cloudAccount != nil {
		t := *r.cloudAccount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_account", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_account", t, "form", "multi")
		}
	}
	if r.cloudAccountIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_account__isnull", r.cloudAccountIsnull, "form", "")
	}
	if r.cloudAccountN != nil {
		t := *r.cloudAccountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_account__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_account__n", t, "form", "multi")
		}
	}
	if r.cloudNetworks != nil {
		t := *r.cloudNetworks
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_networks", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_networks", t, "form", "multi")
		}
	}
	if r.cloudNetworksN != nil {
		t := *r.cloudNetworksN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_networks__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_networks__n", t, "form", "multi")
		}
	}
	if r.cloudResourceType != nil {
		t := *r.cloudResourceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_resource_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_resource_type", t, "form", "multi")
		}
	}
	if r.cloudResourceTypeN != nil {
		t := *r.cloudResourceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_resource_type__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cloud_resource_type__n", t, "form", "multi")
		}
	}
	if r.contacts != nil {
		t := *r.contacts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contacts", t, "form", "multi")
		}
	}
	if r.contactsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__isnull", r.contactsIsnull, "form", "")
	}
	if r.contactsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contacts__n", r.contactsN, "form", "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.dynamicGroups != nil {
		t := *r.dynamicGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups", t, "form", "multi")
		}
	}
	if r.dynamicGroupsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dynamic_groups__n", r.dynamicGroupsN, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.teams != nil {
		t := *r.teams
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teams", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teams", t, "form", "multi")
		}
	}
	if r.teamsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__isnull", r.teamsIsnull, "form", "")
	}
	if r.teamsN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "teams__n", r.teamsN, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServicesNotesCreateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServicesNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiCloudCloudServicesNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiCloudCloudServicesNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServicesNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.CloudCloudServicesNotesCreateExecute(r)
}

/*
CloudCloudServicesNotesCreate Method for CloudCloudServicesNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service.
 @return ApiCloudCloudServicesNotesCreateRequest
*/
func (a *CloudAPIService) CloudCloudServicesNotesCreate(ctx context.Context, id string) ApiCloudCloudServicesNotesCreateRequest {
	return ApiCloudCloudServicesNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *CloudAPIService) CloudCloudServicesNotesCreateExecute(r ApiCloudCloudServicesNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServicesNotesListRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiCloudCloudServicesNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiCloudCloudServicesNotesListRequest) Limit(limit int32) ApiCloudCloudServicesNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiCloudCloudServicesNotesListRequest) Offset(offset int32) ApiCloudCloudServicesNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiCloudCloudServicesNotesListRequest) Depth(depth int32) ApiCloudCloudServicesNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudServicesNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.CloudCloudServicesNotesListExecute(r)
}

/*
CloudCloudServicesNotesList Method for CloudCloudServicesNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service.
 @return ApiCloudCloudServicesNotesListRequest
*/
func (a *CloudAPIService) CloudCloudServicesNotesList(ctx context.Context, id string) ApiCloudCloudServicesNotesListRequest {
	return ApiCloudCloudServicesNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *CloudAPIService) CloudCloudServicesNotesListExecute(r ApiCloudCloudServicesNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServicesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedCloudServiceRequest *PatchedCloudServiceRequest
}

func (r ApiCloudCloudServicesPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServicesPartialUpdateRequest) PatchedCloudServiceRequest(patchedCloudServiceRequest PatchedCloudServiceRequest) ApiCloudCloudServicesPartialUpdateRequest {
	r.patchedCloudServiceRequest = &patchedCloudServiceRequest
	return r
}

func (r ApiCloudCloudServicesPartialUpdateRequest) Execute() (*CloudService, *http.Response, error) {
	return r.ApiService.CloudCloudServicesPartialUpdateExecute(r)
}

/*
CloudCloudServicesPartialUpdate Method for CloudCloudServicesPartialUpdate

Partial update a cloud service object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service.
 @return ApiCloudCloudServicesPartialUpdateRequest
*/
func (a *CloudAPIService) CloudCloudServicesPartialUpdate(ctx context.Context, id string) ApiCloudCloudServicesPartialUpdateRequest {
	return ApiCloudCloudServicesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudService
func (a *CloudAPIService) CloudCloudServicesPartialUpdateExecute(r ApiCloudCloudServicesPartialUpdateRequest) (*CloudService, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCloudServiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServicesRetrieveRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiCloudCloudServicesRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiCloudCloudServicesRetrieveRequest) Depth(depth int32) ApiCloudCloudServicesRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiCloudCloudServicesRetrieveRequest) Execute() (*CloudService, *http.Response, error) {
	return r.ApiService.CloudCloudServicesRetrieveExecute(r)
}

/*
CloudCloudServicesRetrieve Method for CloudCloudServicesRetrieve

Retrieve a cloud service object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service.
 @return ApiCloudCloudServicesRetrieveRequest
*/
func (a *CloudAPIService) CloudCloudServicesRetrieve(ctx context.Context, id string) ApiCloudCloudServicesRetrieveRequest {
	return ApiCloudCloudServicesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudService
func (a *CloudAPIService) CloudCloudServicesRetrieveExecute(r ApiCloudCloudServicesRetrieveRequest) (*CloudService, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCloudServicesUpdateRequest struct {
	ctx context.Context
	ApiService *CloudAPIService
	id string
	cloudServiceRequest *CloudServiceRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiCloudCloudServicesUpdateRequest) CloudServiceRequest(cloudServiceRequest CloudServiceRequest) ApiCloudCloudServicesUpdateRequest {
	r.cloudServiceRequest = &cloudServiceRequest
	return r
}

func (r ApiCloudCloudServicesUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiCloudCloudServicesUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCloudCloudServicesUpdateRequest) Execute() (*CloudService, *http.Response, error) {
	return r.ApiService.CloudCloudServicesUpdateExecute(r)
}

/*
CloudCloudServicesUpdate Method for CloudCloudServicesUpdate

Update a cloud service object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cloud service.
 @return ApiCloudCloudServicesUpdateRequest
*/
func (a *CloudAPIService) CloudCloudServicesUpdate(ctx context.Context, id string) ApiCloudCloudServicesUpdateRequest {
	return ApiCloudCloudServicesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudService
func (a *CloudAPIService) CloudCloudServicesUpdateExecute(r ApiCloudCloudServicesUpdateRequest) (*CloudService, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudAPIService.CloudCloudServicesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud/cloud-services/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cloudServiceRequest == nil {
		return localVarReturnValue, nil, reportError("cloudServiceRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cloudServiceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
