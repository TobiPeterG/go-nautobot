/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// checks if the PrefixLengthRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrefixLengthRequest{}

// PrefixLengthRequest struct for PrefixLengthRequest
type PrefixLengthRequest struct {
	PrefixLength int32 `json:"prefix_length"`
	AdditionalProperties map[string]interface{}
}

type _PrefixLengthRequest PrefixLengthRequest

// NewPrefixLengthRequest instantiates a new PrefixLengthRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrefixLengthRequest(prefixLength int32) *PrefixLengthRequest {
	this := PrefixLengthRequest{}
	this.PrefixLength = prefixLength
	return &this
}

// NewPrefixLengthRequestWithDefaults instantiates a new PrefixLengthRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrefixLengthRequestWithDefaults() *PrefixLengthRequest {
	this := PrefixLengthRequest{}
	return &this
}

// GetPrefixLength returns the PrefixLength field value
func (o *PrefixLengthRequest) GetPrefixLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value
// and a boolean to check if the value has been set.
func (o *PrefixLengthRequest) GetPrefixLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixLength, true
}

// SetPrefixLength sets field value
func (o *PrefixLengthRequest) SetPrefixLength(v int32) {
	o.PrefixLength = v
}

func (o PrefixLengthRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrefixLengthRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["prefix_length"] = o.PrefixLength

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrefixLengthRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prefix_length",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrefixLengthRequest := _PrefixLengthRequest{}

	err = json.Unmarshal(data, &varPrefixLengthRequest)

	if err != nil {
		return err
	}

	*o = PrefixLengthRequest(varPrefixLengthRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prefix_length")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrefixLengthRequest struct {
	value *PrefixLengthRequest
	isSet bool
}

func (v NullablePrefixLengthRequest) Get() *PrefixLengthRequest {
	return v.value
}

func (v *NullablePrefixLengthRequest) Set(val *PrefixLengthRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixLengthRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixLengthRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixLengthRequest(val *PrefixLengthRequest) *NullablePrefixLengthRequest {
	return &NullablePrefixLengthRequest{value: val, isSet: true}
}

func (v NullablePrefixLengthRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixLengthRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


