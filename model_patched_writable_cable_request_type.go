/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PatchedWritableCableRequestType - struct for PatchedWritableCableRequestType
type PatchedWritableCableRequestType struct {
	BlankEnum *BlankEnum
	CableTypeChoices *CableTypeChoices
}

// BlankEnumAsPatchedWritableCableRequestType is a convenience function that returns BlankEnum wrapped in PatchedWritableCableRequestType
func BlankEnumAsPatchedWritableCableRequestType(v *BlankEnum) PatchedWritableCableRequestType {
	return PatchedWritableCableRequestType{
		BlankEnum: v,
	}
}

// CableTypeChoicesAsPatchedWritableCableRequestType is a convenience function that returns CableTypeChoices wrapped in PatchedWritableCableRequestType
func CableTypeChoicesAsPatchedWritableCableRequestType(v *CableTypeChoices) PatchedWritableCableRequestType {
	return PatchedWritableCableRequestType{
		CableTypeChoices: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PatchedWritableCableRequestType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BlankEnum
	err = newStrictDecoder(data).Decode(&dst.BlankEnum)
	if err == nil {
		jsonBlankEnum, _ := json.Marshal(dst.BlankEnum)
		if string(jsonBlankEnum) == "{}" { // empty struct
			dst.BlankEnum = nil
		} else {
			if err = validator.Validate(dst.BlankEnum); err != nil {
				dst.BlankEnum = nil
			} else {
				match++
			}
		}
	} else {
		dst.BlankEnum = nil
	}

	// try to unmarshal data into CableTypeChoices
	err = newStrictDecoder(data).Decode(&dst.CableTypeChoices)
	if err == nil {
		jsonCableTypeChoices, _ := json.Marshal(dst.CableTypeChoices)
		if string(jsonCableTypeChoices) == "{}" { // empty struct
			dst.CableTypeChoices = nil
		} else {
			if err = validator.Validate(dst.CableTypeChoices); err != nil {
				dst.CableTypeChoices = nil
			} else {
				match++
			}
		}
	} else {
		dst.CableTypeChoices = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BlankEnum = nil
		dst.CableTypeChoices = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PatchedWritableCableRequestType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PatchedWritableCableRequestType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PatchedWritableCableRequestType) MarshalJSON() ([]byte, error) {
	if src.BlankEnum != nil {
		return json.Marshal(&src.BlankEnum)
	}

	if src.CableTypeChoices != nil {
		return json.Marshal(&src.CableTypeChoices)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PatchedWritableCableRequestType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BlankEnum != nil {
		return obj.BlankEnum
	}

	if obj.CableTypeChoices != nil {
		return obj.CableTypeChoices
	}

	// all schemas are nil
	return nil
}

type NullablePatchedWritableCableRequestType struct {
	value *PatchedWritableCableRequestType
	isSet bool
}

func (v NullablePatchedWritableCableRequestType) Get() *PatchedWritableCableRequestType {
	return v.value
}

func (v *NullablePatchedWritableCableRequestType) Set(val *PatchedWritableCableRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableCableRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableCableRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableCableRequestType(val *PatchedWritableCableRequestType) *NullablePatchedWritableCableRequestType {
	return &NullablePatchedWritableCableRequestType{value: val, isSet: true}
}

func (v NullablePatchedWritableCableRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableCableRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


