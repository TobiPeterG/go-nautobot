/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// CircuitsCircuitTerminationsListFormatParameter the model 'CircuitsCircuitTerminationsListFormatParameter'
type CircuitsCircuitTerminationsListFormatParameter string

// List of circuits_circuit_terminations_list_format_parameter
const (
	CIRCUITSCIRCUITTERMINATIONSLISTFORMATPARAMETER_CSV CircuitsCircuitTerminationsListFormatParameter = "csv"
	CIRCUITSCIRCUITTERMINATIONSLISTFORMATPARAMETER_JSON CircuitsCircuitTerminationsListFormatParameter = "json"
)

// All allowed values of CircuitsCircuitTerminationsListFormatParameter enum
var AllowedCircuitsCircuitTerminationsListFormatParameterEnumValues = []CircuitsCircuitTerminationsListFormatParameter{
	"csv",
	"json",
}

func (v *CircuitsCircuitTerminationsListFormatParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CircuitsCircuitTerminationsListFormatParameter(value)
	for _, existing := range AllowedCircuitsCircuitTerminationsListFormatParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CircuitsCircuitTerminationsListFormatParameter", value)
}

// NewCircuitsCircuitTerminationsListFormatParameterFromValue returns a pointer to a valid CircuitsCircuitTerminationsListFormatParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitsCircuitTerminationsListFormatParameterFromValue(v string) (*CircuitsCircuitTerminationsListFormatParameter, error) {
	ev := CircuitsCircuitTerminationsListFormatParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CircuitsCircuitTerminationsListFormatParameter: valid values are %v", v, AllowedCircuitsCircuitTerminationsListFormatParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitsCircuitTerminationsListFormatParameter) IsValid() bool {
	for _, existing := range AllowedCircuitsCircuitTerminationsListFormatParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to circuits_circuit_terminations_list_format_parameter value
func (v CircuitsCircuitTerminationsListFormatParameter) Ptr() *CircuitsCircuitTerminationsListFormatParameter {
	return &v
}

type NullableCircuitsCircuitTerminationsListFormatParameter struct {
	value *CircuitsCircuitTerminationsListFormatParameter
	isSet bool
}

func (v NullableCircuitsCircuitTerminationsListFormatParameter) Get() *CircuitsCircuitTerminationsListFormatParameter {
	return v.value
}

func (v *NullableCircuitsCircuitTerminationsListFormatParameter) Set(val *CircuitsCircuitTerminationsListFormatParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitsCircuitTerminationsListFormatParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitsCircuitTerminationsListFormatParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitsCircuitTerminationsListFormatParameter(val *CircuitsCircuitTerminationsListFormatParameter) *NullableCircuitsCircuitTerminationsListFormatParameter {
	return &NullableCircuitsCircuitTerminationsListFormatParameter{value: val, isSet: true}
}

func (v NullableCircuitsCircuitTerminationsListFormatParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitsCircuitTerminationsListFormatParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

