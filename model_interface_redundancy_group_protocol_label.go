/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// InterfaceRedundancyGroupProtocolLabel the model 'InterfaceRedundancyGroupProtocolLabel'
type InterfaceRedundancyGroupProtocolLabel string

// List of InterfaceRedundancyGroup_protocol_label
const (
	INTERFACEREDUNDANCYGROUPPROTOCOLLABEL_HSRP InterfaceRedundancyGroupProtocolLabel = "HSRP"
	INTERFACEREDUNDANCYGROUPPROTOCOLLABEL_VRRP InterfaceRedundancyGroupProtocolLabel = "VRRP"
	INTERFACEREDUNDANCYGROUPPROTOCOLLABEL_GLBP InterfaceRedundancyGroupProtocolLabel = "GLBP"
	INTERFACEREDUNDANCYGROUPPROTOCOLLABEL_CARP InterfaceRedundancyGroupProtocolLabel = "CARP"
)

// All allowed values of InterfaceRedundancyGroupProtocolLabel enum
var AllowedInterfaceRedundancyGroupProtocolLabelEnumValues = []InterfaceRedundancyGroupProtocolLabel{
	"HSRP",
	"VRRP",
	"GLBP",
	"CARP",
}

func (v *InterfaceRedundancyGroupProtocolLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceRedundancyGroupProtocolLabel(value)
	for _, existing := range AllowedInterfaceRedundancyGroupProtocolLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceRedundancyGroupProtocolLabel", value)
}

// NewInterfaceRedundancyGroupProtocolLabelFromValue returns a pointer to a valid InterfaceRedundancyGroupProtocolLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceRedundancyGroupProtocolLabelFromValue(v string) (*InterfaceRedundancyGroupProtocolLabel, error) {
	ev := InterfaceRedundancyGroupProtocolLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceRedundancyGroupProtocolLabel: valid values are %v", v, AllowedInterfaceRedundancyGroupProtocolLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceRedundancyGroupProtocolLabel) IsValid() bool {
	for _, existing := range AllowedInterfaceRedundancyGroupProtocolLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterfaceRedundancyGroup_protocol_label value
func (v InterfaceRedundancyGroupProtocolLabel) Ptr() *InterfaceRedundancyGroupProtocolLabel {
	return &v
}

type NullableInterfaceRedundancyGroupProtocolLabel struct {
	value *InterfaceRedundancyGroupProtocolLabel
	isSet bool
}

func (v NullableInterfaceRedundancyGroupProtocolLabel) Get() *InterfaceRedundancyGroupProtocolLabel {
	return v.value
}

func (v *NullableInterfaceRedundancyGroupProtocolLabel) Set(val *InterfaceRedundancyGroupProtocolLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceRedundancyGroupProtocolLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceRedundancyGroupProtocolLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceRedundancyGroupProtocolLabel(val *InterfaceRedundancyGroupProtocolLabel) *NullableInterfaceRedundancyGroupProtocolLabel {
	return &NullableInterfaceRedundancyGroupProtocolLabel{value: val, isSet: true}
}

func (v NullableInterfaceRedundancyGroupProtocolLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceRedundancyGroupProtocolLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

