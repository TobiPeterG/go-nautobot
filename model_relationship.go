/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Relationship type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Relationship{}

// Relationship Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type Relationship struct {
	Id string `json:"id"`
	ObjectType string `json:"object_type" validate:"regexp=^[a-z][a-z0-9_]+\\\\.[a-z][a-z0-9_]+$"`
	// Human friendly display value
	Display string `json:"display"`
	Url string `json:"url"`
	NaturalSlug string `json:"natural_slug"`
	SourceType string `json:"source_type"`
	DestinationType string `json:"destination_type"`
	// Label of the relationship as displayed to users
	Label string `json:"label"`
	// Internal relationship key. Please use underscores rather than dashes in this key.
	Key *string `json:"key,omitempty" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	Description *string `json:"description,omitempty"`
	// Cardinality of this relationship
	Type *RelationshipTypeChoices `json:"type,omitempty"`
	RequiredOn *BulkWritableRelationshipRequestRequiredOn `json:"required_on,omitempty"`
	// Label for related destination objects, as displayed on the source object.
	SourceLabel *string `json:"source_label,omitempty"`
	// Hide this relationship on the source object.
	SourceHidden *bool `json:"source_hidden,omitempty"`
	// Filterset filter matching the applicable source objects of the selected type
	SourceFilter interface{} `json:"source_filter,omitempty"`
	// Label for related source objects, as displayed on the destination object.
	DestinationLabel *string `json:"destination_label,omitempty"`
	// Hide this relationship on the destination object.
	DestinationHidden *bool `json:"destination_hidden,omitempty"`
	// Filterset filter matching the applicable destination objects of the selected type
	DestinationFilter interface{} `json:"destination_filter,omitempty"`
	// Hide this field from the object's primary information tab. It will appear in the \"Advanced\" tab instead.
	AdvancedUi *bool `json:"advanced_ui,omitempty"`
	Created NullableTime `json:"created"`
	LastUpdated NullableTime `json:"last_updated"`
	NotesUrl string `json:"notes_url"`
	AdditionalProperties map[string]interface{}
}

type _Relationship Relationship

// NewRelationship instantiates a new Relationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationship(id string, objectType string, display string, url string, naturalSlug string, sourceType string, destinationType string, label string, created NullableTime, lastUpdated NullableTime, notesUrl string) *Relationship {
	this := Relationship{}
	this.Id = id
	this.ObjectType = objectType
	this.Display = display
	this.Url = url
	this.NaturalSlug = naturalSlug
	this.SourceType = sourceType
	this.DestinationType = destinationType
	this.Label = label
	this.Created = created
	this.LastUpdated = lastUpdated
	this.NotesUrl = notesUrl
	return &this
}

// NewRelationshipWithDefaults instantiates a new Relationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipWithDefaults() *Relationship {
	this := Relationship{}
	return &this
}

// GetId returns the Id field value
func (o *Relationship) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Relationship) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *Relationship) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *Relationship) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDisplay returns the Display field value
func (o *Relationship) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *Relationship) SetDisplay(v string) {
	o.Display = v
}

// GetUrl returns the Url field value
func (o *Relationship) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Relationship) SetUrl(v string) {
	o.Url = v
}

// GetNaturalSlug returns the NaturalSlug field value
func (o *Relationship) GetNaturalSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NaturalSlug
}

// GetNaturalSlugOk returns a tuple with the NaturalSlug field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetNaturalSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NaturalSlug, true
}

// SetNaturalSlug sets field value
func (o *Relationship) SetNaturalSlug(v string) {
	o.NaturalSlug = v
}

// GetSourceType returns the SourceType field value
func (o *Relationship) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *Relationship) SetSourceType(v string) {
	o.SourceType = v
}

// GetDestinationType returns the DestinationType field value
func (o *Relationship) GetDestinationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetDestinationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *Relationship) SetDestinationType(v string) {
	o.DestinationType = v
}

// GetLabel returns the Label field value
func (o *Relationship) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Relationship) SetLabel(v string) {
	o.Label = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Relationship) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Relationship) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Relationship) SetKey(v string) {
	o.Key = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Relationship) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Relationship) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Relationship) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Relationship) GetType() RelationshipTypeChoices {
	if o == nil || IsNil(o.Type) {
		var ret RelationshipTypeChoices
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetTypeOk() (*RelationshipTypeChoices, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Relationship) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RelationshipTypeChoices and assigns it to the Type field.
func (o *Relationship) SetType(v RelationshipTypeChoices) {
	o.Type = &v
}

// GetRequiredOn returns the RequiredOn field value if set, zero value otherwise.
func (o *Relationship) GetRequiredOn() BulkWritableRelationshipRequestRequiredOn {
	if o == nil || IsNil(o.RequiredOn) {
		var ret BulkWritableRelationshipRequestRequiredOn
		return ret
	}
	return *o.RequiredOn
}

// GetRequiredOnOk returns a tuple with the RequiredOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetRequiredOnOk() (*BulkWritableRelationshipRequestRequiredOn, bool) {
	if o == nil || IsNil(o.RequiredOn) {
		return nil, false
	}
	return o.RequiredOn, true
}

// HasRequiredOn returns a boolean if a field has been set.
func (o *Relationship) HasRequiredOn() bool {
	if o != nil && !IsNil(o.RequiredOn) {
		return true
	}

	return false
}

// SetRequiredOn gets a reference to the given BulkWritableRelationshipRequestRequiredOn and assigns it to the RequiredOn field.
func (o *Relationship) SetRequiredOn(v BulkWritableRelationshipRequestRequiredOn) {
	o.RequiredOn = &v
}

// GetSourceLabel returns the SourceLabel field value if set, zero value otherwise.
func (o *Relationship) GetSourceLabel() string {
	if o == nil || IsNil(o.SourceLabel) {
		var ret string
		return ret
	}
	return *o.SourceLabel
}

// GetSourceLabelOk returns a tuple with the SourceLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetSourceLabelOk() (*string, bool) {
	if o == nil || IsNil(o.SourceLabel) {
		return nil, false
	}
	return o.SourceLabel, true
}

// HasSourceLabel returns a boolean if a field has been set.
func (o *Relationship) HasSourceLabel() bool {
	if o != nil && !IsNil(o.SourceLabel) {
		return true
	}

	return false
}

// SetSourceLabel gets a reference to the given string and assigns it to the SourceLabel field.
func (o *Relationship) SetSourceLabel(v string) {
	o.SourceLabel = &v
}

// GetSourceHidden returns the SourceHidden field value if set, zero value otherwise.
func (o *Relationship) GetSourceHidden() bool {
	if o == nil || IsNil(o.SourceHidden) {
		var ret bool
		return ret
	}
	return *o.SourceHidden
}

// GetSourceHiddenOk returns a tuple with the SourceHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetSourceHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.SourceHidden) {
		return nil, false
	}
	return o.SourceHidden, true
}

// HasSourceHidden returns a boolean if a field has been set.
func (o *Relationship) HasSourceHidden() bool {
	if o != nil && !IsNil(o.SourceHidden) {
		return true
	}

	return false
}

// SetSourceHidden gets a reference to the given bool and assigns it to the SourceHidden field.
func (o *Relationship) SetSourceHidden(v bool) {
	o.SourceHidden = &v
}

// GetSourceFilter returns the SourceFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Relationship) GetSourceFilter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SourceFilter
}

// GetSourceFilterOk returns a tuple with the SourceFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Relationship) GetSourceFilterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SourceFilter) {
		return nil, false
	}
	return &o.SourceFilter, true
}

// HasSourceFilter returns a boolean if a field has been set.
func (o *Relationship) HasSourceFilter() bool {
	if o != nil && !IsNil(o.SourceFilter) {
		return true
	}

	return false
}

// SetSourceFilter gets a reference to the given interface{} and assigns it to the SourceFilter field.
func (o *Relationship) SetSourceFilter(v interface{}) {
	o.SourceFilter = v
}

// GetDestinationLabel returns the DestinationLabel field value if set, zero value otherwise.
func (o *Relationship) GetDestinationLabel() string {
	if o == nil || IsNil(o.DestinationLabel) {
		var ret string
		return ret
	}
	return *o.DestinationLabel
}

// GetDestinationLabelOk returns a tuple with the DestinationLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetDestinationLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationLabel) {
		return nil, false
	}
	return o.DestinationLabel, true
}

// HasDestinationLabel returns a boolean if a field has been set.
func (o *Relationship) HasDestinationLabel() bool {
	if o != nil && !IsNil(o.DestinationLabel) {
		return true
	}

	return false
}

// SetDestinationLabel gets a reference to the given string and assigns it to the DestinationLabel field.
func (o *Relationship) SetDestinationLabel(v string) {
	o.DestinationLabel = &v
}

// GetDestinationHidden returns the DestinationHidden field value if set, zero value otherwise.
func (o *Relationship) GetDestinationHidden() bool {
	if o == nil || IsNil(o.DestinationHidden) {
		var ret bool
		return ret
	}
	return *o.DestinationHidden
}

// GetDestinationHiddenOk returns a tuple with the DestinationHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetDestinationHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.DestinationHidden) {
		return nil, false
	}
	return o.DestinationHidden, true
}

// HasDestinationHidden returns a boolean if a field has been set.
func (o *Relationship) HasDestinationHidden() bool {
	if o != nil && !IsNil(o.DestinationHidden) {
		return true
	}

	return false
}

// SetDestinationHidden gets a reference to the given bool and assigns it to the DestinationHidden field.
func (o *Relationship) SetDestinationHidden(v bool) {
	o.DestinationHidden = &v
}

// GetDestinationFilter returns the DestinationFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Relationship) GetDestinationFilter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DestinationFilter
}

// GetDestinationFilterOk returns a tuple with the DestinationFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Relationship) GetDestinationFilterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DestinationFilter) {
		return nil, false
	}
	return &o.DestinationFilter, true
}

// HasDestinationFilter returns a boolean if a field has been set.
func (o *Relationship) HasDestinationFilter() bool {
	if o != nil && !IsNil(o.DestinationFilter) {
		return true
	}

	return false
}

// SetDestinationFilter gets a reference to the given interface{} and assigns it to the DestinationFilter field.
func (o *Relationship) SetDestinationFilter(v interface{}) {
	o.DestinationFilter = v
}

// GetAdvancedUi returns the AdvancedUi field value if set, zero value otherwise.
func (o *Relationship) GetAdvancedUi() bool {
	if o == nil || IsNil(o.AdvancedUi) {
		var ret bool
		return ret
	}
	return *o.AdvancedUi
}

// GetAdvancedUiOk returns a tuple with the AdvancedUi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relationship) GetAdvancedUiOk() (*bool, bool) {
	if o == nil || IsNil(o.AdvancedUi) {
		return nil, false
	}
	return o.AdvancedUi, true
}

// HasAdvancedUi returns a boolean if a field has been set.
func (o *Relationship) HasAdvancedUi() bool {
	if o != nil && !IsNil(o.AdvancedUi) {
		return true
	}

	return false
}

// SetAdvancedUi gets a reference to the given bool and assigns it to the AdvancedUi field.
func (o *Relationship) SetAdvancedUi(v bool) {
	o.AdvancedUi = &v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Relationship) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Relationship) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *Relationship) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetLastUpdated returns the LastUpdated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Relationship) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Relationship) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// SetLastUpdated sets field value
func (o *Relationship) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

// GetNotesUrl returns the NotesUrl field value
func (o *Relationship) GetNotesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotesUrl
}

// GetNotesUrlOk returns a tuple with the NotesUrl field value
// and a boolean to check if the value has been set.
func (o *Relationship) GetNotesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotesUrl, true
}

// SetNotesUrl sets field value
func (o *Relationship) SetNotesUrl(v string) {
	o.NotesUrl = v
}

func (o Relationship) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Relationship) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object_type"] = o.ObjectType
	toSerialize["display"] = o.Display
	toSerialize["url"] = o.Url
	toSerialize["natural_slug"] = o.NaturalSlug
	toSerialize["source_type"] = o.SourceType
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["label"] = o.Label
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RequiredOn) {
		toSerialize["required_on"] = o.RequiredOn
	}
	if !IsNil(o.SourceLabel) {
		toSerialize["source_label"] = o.SourceLabel
	}
	if !IsNil(o.SourceHidden) {
		toSerialize["source_hidden"] = o.SourceHidden
	}
	if o.SourceFilter != nil {
		toSerialize["source_filter"] = o.SourceFilter
	}
	if !IsNil(o.DestinationLabel) {
		toSerialize["destination_label"] = o.DestinationLabel
	}
	if !IsNil(o.DestinationHidden) {
		toSerialize["destination_hidden"] = o.DestinationHidden
	}
	if o.DestinationFilter != nil {
		toSerialize["destination_filter"] = o.DestinationFilter
	}
	if !IsNil(o.AdvancedUi) {
		toSerialize["advanced_ui"] = o.AdvancedUi
	}
	toSerialize["created"] = o.Created.Get()
	toSerialize["last_updated"] = o.LastUpdated.Get()
	toSerialize["notes_url"] = o.NotesUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Relationship) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object_type",
		"display",
		"url",
		"natural_slug",
		"source_type",
		"destination_type",
		"label",
		"created",
		"last_updated",
		"notes_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelationship := _Relationship{}

	err = json.Unmarshal(data, &varRelationship)

	if err != nil {
		return err
	}

	*o = Relationship(varRelationship)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "display")
		delete(additionalProperties, "url")
		delete(additionalProperties, "natural_slug")
		delete(additionalProperties, "source_type")
		delete(additionalProperties, "destination_type")
		delete(additionalProperties, "label")
		delete(additionalProperties, "key")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "required_on")
		delete(additionalProperties, "source_label")
		delete(additionalProperties, "source_hidden")
		delete(additionalProperties, "source_filter")
		delete(additionalProperties, "destination_label")
		delete(additionalProperties, "destination_hidden")
		delete(additionalProperties, "destination_filter")
		delete(additionalProperties, "advanced_ui")
		delete(additionalProperties, "created")
		delete(additionalProperties, "last_updated")
		delete(additionalProperties, "notes_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRelationship struct {
	value *Relationship
	isSet bool
}

func (v NullableRelationship) Get() *Relationship {
	return v.value
}

func (v *NullableRelationship) Set(val *Relationship) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationship(val *Relationship) *NullableRelationship {
	return &NullableRelationship{value: val, isSet: true}
}

func (v NullableRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


