/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// PowerPortTypeChoices the model 'PowerPortTypeChoices'
type PowerPortTypeChoices string

// List of PowerPortTypeChoices
const (
	POWERPORTTYPECHOICES_IEC_60320_C6 PowerPortTypeChoices = "iec-60320-c6"
	POWERPORTTYPECHOICES_IEC_60320_C8 PowerPortTypeChoices = "iec-60320-c8"
	POWERPORTTYPECHOICES_IEC_60320_C14 PowerPortTypeChoices = "iec-60320-c14"
	POWERPORTTYPECHOICES_IEC_60320_C16 PowerPortTypeChoices = "iec-60320-c16"
	POWERPORTTYPECHOICES_IEC_60320_C20 PowerPortTypeChoices = "iec-60320-c20"
	POWERPORTTYPECHOICES_IEC_60320_C22 PowerPortTypeChoices = "iec-60320-c22"
	POWERPORTTYPECHOICES_IEC_60309_P_N_E_4H PowerPortTypeChoices = "iec-60309-p-n-e-4h"
	POWERPORTTYPECHOICES_IEC_60309_P_N_E_6H PowerPortTypeChoices = "iec-60309-p-n-e-6h"
	POWERPORTTYPECHOICES_IEC_60309_P_N_E_9H PowerPortTypeChoices = "iec-60309-p-n-e-9h"
	POWERPORTTYPECHOICES_IEC_60309_2P_E_4H PowerPortTypeChoices = "iec-60309-2p-e-4h"
	POWERPORTTYPECHOICES_IEC_60309_2P_E_6H PowerPortTypeChoices = "iec-60309-2p-e-6h"
	POWERPORTTYPECHOICES_IEC_60309_2P_E_9H PowerPortTypeChoices = "iec-60309-2p-e-9h"
	POWERPORTTYPECHOICES_IEC_60309_3P_E_4H PowerPortTypeChoices = "iec-60309-3p-e-4h"
	POWERPORTTYPECHOICES_IEC_60309_3P_E_6H PowerPortTypeChoices = "iec-60309-3p-e-6h"
	POWERPORTTYPECHOICES_IEC_60309_3P_E_9H PowerPortTypeChoices = "iec-60309-3p-e-9h"
	POWERPORTTYPECHOICES_IEC_60309_3P_N_E_4H PowerPortTypeChoices = "iec-60309-3p-n-e-4h"
	POWERPORTTYPECHOICES_IEC_60309_3P_N_E_6H PowerPortTypeChoices = "iec-60309-3p-n-e-6h"
	POWERPORTTYPECHOICES_IEC_60309_3P_N_E_9H PowerPortTypeChoices = "iec-60309-3p-n-e-9h"
	POWERPORTTYPECHOICES_IEC_60906_1 PowerPortTypeChoices = "iec-60906-1"
	POWERPORTTYPECHOICES_NBR_14136_10A PowerPortTypeChoices = "nbr-14136-10a"
	POWERPORTTYPECHOICES_NBR_14136_20A PowerPortTypeChoices = "nbr-14136-20a"
	POWERPORTTYPECHOICES_NEMA_1_15P PowerPortTypeChoices = "nema-1-15p"
	POWERPORTTYPECHOICES_NEMA_5_15P PowerPortTypeChoices = "nema-5-15p"
	POWERPORTTYPECHOICES_NEMA_5_20P PowerPortTypeChoices = "nema-5-20p"
	POWERPORTTYPECHOICES_NEMA_5_30P PowerPortTypeChoices = "nema-5-30p"
	POWERPORTTYPECHOICES_NEMA_5_50P PowerPortTypeChoices = "nema-5-50p"
	POWERPORTTYPECHOICES_NEMA_6_15P PowerPortTypeChoices = "nema-6-15p"
	POWERPORTTYPECHOICES_NEMA_6_20P PowerPortTypeChoices = "nema-6-20p"
	POWERPORTTYPECHOICES_NEMA_6_30P PowerPortTypeChoices = "nema-6-30p"
	POWERPORTTYPECHOICES_NEMA_6_50P PowerPortTypeChoices = "nema-6-50p"
	POWERPORTTYPECHOICES_NEMA_10_30P PowerPortTypeChoices = "nema-10-30p"
	POWERPORTTYPECHOICES_NEMA_10_50P PowerPortTypeChoices = "nema-10-50p"
	POWERPORTTYPECHOICES_NEMA_14_20P PowerPortTypeChoices = "nema-14-20p"
	POWERPORTTYPECHOICES_NEMA_14_30P PowerPortTypeChoices = "nema-14-30p"
	POWERPORTTYPECHOICES_NEMA_14_50P PowerPortTypeChoices = "nema-14-50p"
	POWERPORTTYPECHOICES_NEMA_14_60P PowerPortTypeChoices = "nema-14-60p"
	POWERPORTTYPECHOICES_NEMA_15_15P PowerPortTypeChoices = "nema-15-15p"
	POWERPORTTYPECHOICES_NEMA_15_20P PowerPortTypeChoices = "nema-15-20p"
	POWERPORTTYPECHOICES_NEMA_15_30P PowerPortTypeChoices = "nema-15-30p"
	POWERPORTTYPECHOICES_NEMA_15_50P PowerPortTypeChoices = "nema-15-50p"
	POWERPORTTYPECHOICES_NEMA_15_60P PowerPortTypeChoices = "nema-15-60p"
	POWERPORTTYPECHOICES_NEMA_L1_15P PowerPortTypeChoices = "nema-l1-15p"
	POWERPORTTYPECHOICES_NEMA_L5_15P PowerPortTypeChoices = "nema-l5-15p"
	POWERPORTTYPECHOICES_NEMA_L5_20P PowerPortTypeChoices = "nema-l5-20p"
	POWERPORTTYPECHOICES_NEMA_L5_30P PowerPortTypeChoices = "nema-l5-30p"
	POWERPORTTYPECHOICES_NEMA_L5_50P PowerPortTypeChoices = "nema-l5-50p"
	POWERPORTTYPECHOICES_NEMA_L6_15P PowerPortTypeChoices = "nema-l6-15p"
	POWERPORTTYPECHOICES_NEMA_L6_20P PowerPortTypeChoices = "nema-l6-20p"
	POWERPORTTYPECHOICES_NEMA_L6_30P PowerPortTypeChoices = "nema-l6-30p"
	POWERPORTTYPECHOICES_NEMA_L6_50P PowerPortTypeChoices = "nema-l6-50p"
	POWERPORTTYPECHOICES_NEMA_L10_30P PowerPortTypeChoices = "nema-l10-30p"
	POWERPORTTYPECHOICES_NEMA_L14_20P PowerPortTypeChoices = "nema-l14-20p"
	POWERPORTTYPECHOICES_NEMA_L14_30P PowerPortTypeChoices = "nema-l14-30p"
	POWERPORTTYPECHOICES_NEMA_L14_50P PowerPortTypeChoices = "nema-l14-50p"
	POWERPORTTYPECHOICES_NEMA_L14_60P PowerPortTypeChoices = "nema-l14-60p"
	POWERPORTTYPECHOICES_NEMA_L15_20P PowerPortTypeChoices = "nema-l15-20p"
	POWERPORTTYPECHOICES_NEMA_L15_30P PowerPortTypeChoices = "nema-l15-30p"
	POWERPORTTYPECHOICES_NEMA_L15_50P PowerPortTypeChoices = "nema-l15-50p"
	POWERPORTTYPECHOICES_NEMA_L15_60P PowerPortTypeChoices = "nema-l15-60p"
	POWERPORTTYPECHOICES_NEMA_L21_20P PowerPortTypeChoices = "nema-l21-20p"
	POWERPORTTYPECHOICES_NEMA_L21_30P PowerPortTypeChoices = "nema-l21-30p"
	POWERPORTTYPECHOICES_NEMA_L22_30P PowerPortTypeChoices = "nema-l22-30p"
	POWERPORTTYPECHOICES_CS6361C PowerPortTypeChoices = "cs6361c"
	POWERPORTTYPECHOICES_CS6365C PowerPortTypeChoices = "cs6365c"
	POWERPORTTYPECHOICES_CS8165C PowerPortTypeChoices = "cs8165c"
	POWERPORTTYPECHOICES_CS8265C PowerPortTypeChoices = "cs8265c"
	POWERPORTTYPECHOICES_CS8365C PowerPortTypeChoices = "cs8365c"
	POWERPORTTYPECHOICES_CS8465C PowerPortTypeChoices = "cs8465c"
	POWERPORTTYPECHOICES_ITA_C PowerPortTypeChoices = "ita-c"
	POWERPORTTYPECHOICES_ITA_E PowerPortTypeChoices = "ita-e"
	POWERPORTTYPECHOICES_ITA_F PowerPortTypeChoices = "ita-f"
	POWERPORTTYPECHOICES_ITA_EF PowerPortTypeChoices = "ita-ef"
	POWERPORTTYPECHOICES_ITA_G PowerPortTypeChoices = "ita-g"
	POWERPORTTYPECHOICES_ITA_H PowerPortTypeChoices = "ita-h"
	POWERPORTTYPECHOICES_ITA_I PowerPortTypeChoices = "ita-i"
	POWERPORTTYPECHOICES_ITA_J PowerPortTypeChoices = "ita-j"
	POWERPORTTYPECHOICES_ITA_K PowerPortTypeChoices = "ita-k"
	POWERPORTTYPECHOICES_ITA_L PowerPortTypeChoices = "ita-l"
	POWERPORTTYPECHOICES_ITA_M PowerPortTypeChoices = "ita-m"
	POWERPORTTYPECHOICES_ITA_N PowerPortTypeChoices = "ita-n"
	POWERPORTTYPECHOICES_ITA_O PowerPortTypeChoices = "ita-o"
	POWERPORTTYPECHOICES_USB_A PowerPortTypeChoices = "usb-a"
	POWERPORTTYPECHOICES_USB_B PowerPortTypeChoices = "usb-b"
	POWERPORTTYPECHOICES_USB_C PowerPortTypeChoices = "usb-c"
	POWERPORTTYPECHOICES_USB_MINI_A PowerPortTypeChoices = "usb-mini-a"
	POWERPORTTYPECHOICES_USB_MINI_B PowerPortTypeChoices = "usb-mini-b"
	POWERPORTTYPECHOICES_USB_MICRO_A PowerPortTypeChoices = "usb-micro-a"
	POWERPORTTYPECHOICES_USB_MICRO_B PowerPortTypeChoices = "usb-micro-b"
	POWERPORTTYPECHOICES_USB_MICRO_AB PowerPortTypeChoices = "usb-micro-ab"
	POWERPORTTYPECHOICES_USB_3_B PowerPortTypeChoices = "usb-3-b"
	POWERPORTTYPECHOICES_USB_3_MICRO_B PowerPortTypeChoices = "usb-3-micro-b"
	POWERPORTTYPECHOICES_DC_TERMINAL PowerPortTypeChoices = "dc-terminal"
	POWERPORTTYPECHOICES_SAF_D_GRID PowerPortTypeChoices = "saf-d-grid"
	POWERPORTTYPECHOICES_NEUTRIK_POWERCON_20 PowerPortTypeChoices = "neutrik-powercon-20"
	POWERPORTTYPECHOICES_NEUTRIK_POWERCON_32 PowerPortTypeChoices = "neutrik-powercon-32"
	POWERPORTTYPECHOICES_NEUTRIK_POWERCON_TRUE1 PowerPortTypeChoices = "neutrik-powercon-true1"
	POWERPORTTYPECHOICES_NEUTRIK_POWERCON_TRUE1_TOP PowerPortTypeChoices = "neutrik-powercon-true1-top"
	POWERPORTTYPECHOICES_UBIQUITI_SMARTPOWER PowerPortTypeChoices = "ubiquiti-smartpower"
	POWERPORTTYPECHOICES_HARDWIRED PowerPortTypeChoices = "hardwired"
	POWERPORTTYPECHOICES_OTHER PowerPortTypeChoices = "other"
)

// All allowed values of PowerPortTypeChoices enum
var AllowedPowerPortTypeChoicesEnumValues = []PowerPortTypeChoices{
	"iec-60320-c6",
	"iec-60320-c8",
	"iec-60320-c14",
	"iec-60320-c16",
	"iec-60320-c20",
	"iec-60320-c22",
	"iec-60309-p-n-e-4h",
	"iec-60309-p-n-e-6h",
	"iec-60309-p-n-e-9h",
	"iec-60309-2p-e-4h",
	"iec-60309-2p-e-6h",
	"iec-60309-2p-e-9h",
	"iec-60309-3p-e-4h",
	"iec-60309-3p-e-6h",
	"iec-60309-3p-e-9h",
	"iec-60309-3p-n-e-4h",
	"iec-60309-3p-n-e-6h",
	"iec-60309-3p-n-e-9h",
	"iec-60906-1",
	"nbr-14136-10a",
	"nbr-14136-20a",
	"nema-1-15p",
	"nema-5-15p",
	"nema-5-20p",
	"nema-5-30p",
	"nema-5-50p",
	"nema-6-15p",
	"nema-6-20p",
	"nema-6-30p",
	"nema-6-50p",
	"nema-10-30p",
	"nema-10-50p",
	"nema-14-20p",
	"nema-14-30p",
	"nema-14-50p",
	"nema-14-60p",
	"nema-15-15p",
	"nema-15-20p",
	"nema-15-30p",
	"nema-15-50p",
	"nema-15-60p",
	"nema-l1-15p",
	"nema-l5-15p",
	"nema-l5-20p",
	"nema-l5-30p",
	"nema-l5-50p",
	"nema-l6-15p",
	"nema-l6-20p",
	"nema-l6-30p",
	"nema-l6-50p",
	"nema-l10-30p",
	"nema-l14-20p",
	"nema-l14-30p",
	"nema-l14-50p",
	"nema-l14-60p",
	"nema-l15-20p",
	"nema-l15-30p",
	"nema-l15-50p",
	"nema-l15-60p",
	"nema-l21-20p",
	"nema-l21-30p",
	"nema-l22-30p",
	"cs6361c",
	"cs6365c",
	"cs8165c",
	"cs8265c",
	"cs8365c",
	"cs8465c",
	"ita-c",
	"ita-e",
	"ita-f",
	"ita-ef",
	"ita-g",
	"ita-h",
	"ita-i",
	"ita-j",
	"ita-k",
	"ita-l",
	"ita-m",
	"ita-n",
	"ita-o",
	"usb-a",
	"usb-b",
	"usb-c",
	"usb-mini-a",
	"usb-mini-b",
	"usb-micro-a",
	"usb-micro-b",
	"usb-micro-ab",
	"usb-3-b",
	"usb-3-micro-b",
	"dc-terminal",
	"saf-d-grid",
	"neutrik-powercon-20",
	"neutrik-powercon-32",
	"neutrik-powercon-true1",
	"neutrik-powercon-true1-top",
	"ubiquiti-smartpower",
	"hardwired",
	"other",
}

func (v *PowerPortTypeChoices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerPortTypeChoices(value)
	for _, existing := range AllowedPowerPortTypeChoicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerPortTypeChoices", value)
}

// NewPowerPortTypeChoicesFromValue returns a pointer to a valid PowerPortTypeChoices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerPortTypeChoicesFromValue(v string) (*PowerPortTypeChoices, error) {
	ev := PowerPortTypeChoices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerPortTypeChoices: valid values are %v", v, AllowedPowerPortTypeChoicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerPortTypeChoices) IsValid() bool {
	for _, existing := range AllowedPowerPortTypeChoicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerPortTypeChoices value
func (v PowerPortTypeChoices) Ptr() *PowerPortTypeChoices {
	return &v
}

type NullablePowerPortTypeChoices struct {
	value *PowerPortTypeChoices
	isSet bool
}

func (v NullablePowerPortTypeChoices) Get() *PowerPortTypeChoices {
	return v.value
}

func (v *NullablePowerPortTypeChoices) Set(val *PowerPortTypeChoices) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerPortTypeChoices) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerPortTypeChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerPortTypeChoices(val *PowerPortTypeChoices) *NullablePowerPortTypeChoices {
	return &NullablePowerPortTypeChoices{value: val, isSet: true}
}

func (v NullablePowerPortTypeChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerPortTypeChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

