/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// RequiredOnEnum the model 'RequiredOnEnum'
type RequiredOnEnum string

// List of RequiredOnEnum
const (
	REQUIREDONENUM_SOURCE RequiredOnEnum = "source"
	REQUIREDONENUM_DESTINATION RequiredOnEnum = "destination"
)

// All allowed values of RequiredOnEnum enum
var AllowedRequiredOnEnumEnumValues = []RequiredOnEnum{
	"source",
	"destination",
}

func (v *RequiredOnEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequiredOnEnum(value)
	for _, existing := range AllowedRequiredOnEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequiredOnEnum", value)
}

// NewRequiredOnEnumFromValue returns a pointer to a valid RequiredOnEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequiredOnEnumFromValue(v string) (*RequiredOnEnum, error) {
	ev := RequiredOnEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequiredOnEnum: valid values are %v", v, AllowedRequiredOnEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequiredOnEnum) IsValid() bool {
	for _, existing := range AllowedRequiredOnEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequiredOnEnum value
func (v RequiredOnEnum) Ptr() *RequiredOnEnum {
	return &v
}

type NullableRequiredOnEnum struct {
	value *RequiredOnEnum
	isSet bool
}

func (v NullableRequiredOnEnum) Get() *RequiredOnEnum {
	return v.value
}

func (v *NullableRequiredOnEnum) Set(val *RequiredOnEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRequiredOnEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRequiredOnEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequiredOnEnum(val *RequiredOnEnum) *NullableRequiredOnEnum {
	return &NullableRequiredOnEnum{value: val, isSet: true}
}

func (v NullableRequiredOnEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequiredOnEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

