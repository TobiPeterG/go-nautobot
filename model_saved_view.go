/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SavedView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SavedView{}

// SavedView Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type SavedView struct {
	Id string `json:"id"`
	ObjectType string `json:"object_type" validate:"regexp=^[a-z][a-z0-9_]+\\\\.[a-z][a-z0-9_]+$"`
	// Human friendly display value
	Display string `json:"display"`
	Url string `json:"url"`
	NaturalSlug string `json:"natural_slug"`
	// The name of this view
	Name string `json:"name"`
	// The name of the list view that the saved view is derived from, e.g. dcim:device_list
	View string `json:"view"`
	// Saved Configuration on this view
	Config interface{} `json:"config,omitempty"`
	IsGlobalDefault *bool `json:"is_global_default,omitempty"`
	IsShared *bool `json:"is_shared,omitempty"`
	Owner BulkWritableSavedViewRequestOwner `json:"owner"`
	Created NullableTime `json:"created"`
	LastUpdated NullableTime `json:"last_updated"`
	AdditionalProperties map[string]interface{}
}

type _SavedView SavedView

// NewSavedView instantiates a new SavedView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSavedView(id string, objectType string, display string, url string, naturalSlug string, name string, view string, owner BulkWritableSavedViewRequestOwner, created NullableTime, lastUpdated NullableTime) *SavedView {
	this := SavedView{}
	this.Id = id
	this.ObjectType = objectType
	this.Display = display
	this.Url = url
	this.NaturalSlug = naturalSlug
	this.Name = name
	this.View = view
	this.Owner = owner
	this.Created = created
	this.LastUpdated = lastUpdated
	return &this
}

// NewSavedViewWithDefaults instantiates a new SavedView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSavedViewWithDefaults() *SavedView {
	this := SavedView{}
	return &this
}

// GetId returns the Id field value
func (o *SavedView) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SavedView) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SavedView) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *SavedView) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *SavedView) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *SavedView) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDisplay returns the Display field value
func (o *SavedView) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *SavedView) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *SavedView) SetDisplay(v string) {
	o.Display = v
}

// GetUrl returns the Url field value
func (o *SavedView) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SavedView) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SavedView) SetUrl(v string) {
	o.Url = v
}

// GetNaturalSlug returns the NaturalSlug field value
func (o *SavedView) GetNaturalSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NaturalSlug
}

// GetNaturalSlugOk returns a tuple with the NaturalSlug field value
// and a boolean to check if the value has been set.
func (o *SavedView) GetNaturalSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NaturalSlug, true
}

// SetNaturalSlug sets field value
func (o *SavedView) SetNaturalSlug(v string) {
	o.NaturalSlug = v
}

// GetName returns the Name field value
func (o *SavedView) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SavedView) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SavedView) SetName(v string) {
	o.Name = v
}

// GetView returns the View field value
func (o *SavedView) GetView() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.View
}

// GetViewOk returns a tuple with the View field value
// and a boolean to check if the value has been set.
func (o *SavedView) GetViewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.View, true
}

// SetView sets field value
func (o *SavedView) SetView(v string) {
	o.View = v
}

// GetConfig returns the Config field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SavedView) GetConfig() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SavedView) GetConfigOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return &o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *SavedView) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given interface{} and assigns it to the Config field.
func (o *SavedView) SetConfig(v interface{}) {
	o.Config = v
}

// GetIsGlobalDefault returns the IsGlobalDefault field value if set, zero value otherwise.
func (o *SavedView) GetIsGlobalDefault() bool {
	if o == nil || IsNil(o.IsGlobalDefault) {
		var ret bool
		return ret
	}
	return *o.IsGlobalDefault
}

// GetIsGlobalDefaultOk returns a tuple with the IsGlobalDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SavedView) GetIsGlobalDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGlobalDefault) {
		return nil, false
	}
	return o.IsGlobalDefault, true
}

// HasIsGlobalDefault returns a boolean if a field has been set.
func (o *SavedView) HasIsGlobalDefault() bool {
	if o != nil && !IsNil(o.IsGlobalDefault) {
		return true
	}

	return false
}

// SetIsGlobalDefault gets a reference to the given bool and assigns it to the IsGlobalDefault field.
func (o *SavedView) SetIsGlobalDefault(v bool) {
	o.IsGlobalDefault = &v
}

// GetIsShared returns the IsShared field value if set, zero value otherwise.
func (o *SavedView) GetIsShared() bool {
	if o == nil || IsNil(o.IsShared) {
		var ret bool
		return ret
	}
	return *o.IsShared
}

// GetIsSharedOk returns a tuple with the IsShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SavedView) GetIsSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsShared) {
		return nil, false
	}
	return o.IsShared, true
}

// HasIsShared returns a boolean if a field has been set.
func (o *SavedView) HasIsShared() bool {
	if o != nil && !IsNil(o.IsShared) {
		return true
	}

	return false
}

// SetIsShared gets a reference to the given bool and assigns it to the IsShared field.
func (o *SavedView) SetIsShared(v bool) {
	o.IsShared = &v
}

// GetOwner returns the Owner field value
func (o *SavedView) GetOwner() BulkWritableSavedViewRequestOwner {
	if o == nil {
		var ret BulkWritableSavedViewRequestOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *SavedView) GetOwnerOk() (*BulkWritableSavedViewRequestOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *SavedView) SetOwner(v BulkWritableSavedViewRequestOwner) {
	o.Owner = v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *SavedView) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SavedView) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *SavedView) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetLastUpdated returns the LastUpdated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *SavedView) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SavedView) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// SetLastUpdated sets field value
func (o *SavedView) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

func (o SavedView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SavedView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object_type"] = o.ObjectType
	toSerialize["display"] = o.Display
	toSerialize["url"] = o.Url
	toSerialize["natural_slug"] = o.NaturalSlug
	toSerialize["name"] = o.Name
	toSerialize["view"] = o.View
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.IsGlobalDefault) {
		toSerialize["is_global_default"] = o.IsGlobalDefault
	}
	if !IsNil(o.IsShared) {
		toSerialize["is_shared"] = o.IsShared
	}
	toSerialize["owner"] = o.Owner
	toSerialize["created"] = o.Created.Get()
	toSerialize["last_updated"] = o.LastUpdated.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SavedView) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object_type",
		"display",
		"url",
		"natural_slug",
		"name",
		"view",
		"owner",
		"created",
		"last_updated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSavedView := _SavedView{}

	err = json.Unmarshal(data, &varSavedView)

	if err != nil {
		return err
	}

	*o = SavedView(varSavedView)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "display")
		delete(additionalProperties, "url")
		delete(additionalProperties, "natural_slug")
		delete(additionalProperties, "name")
		delete(additionalProperties, "view")
		delete(additionalProperties, "config")
		delete(additionalProperties, "is_global_default")
		delete(additionalProperties, "is_shared")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "created")
		delete(additionalProperties, "last_updated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSavedView struct {
	value *SavedView
	isSet bool
}

func (v NullableSavedView) Get() *SavedView {
	return v.value
}

func (v *NullableSavedView) Set(val *SavedView) {
	v.value = val
	v.isSet = true
}

func (v NullableSavedView) IsSet() bool {
	return v.isSet
}

func (v *NullableSavedView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSavedView(val *SavedView) *NullableSavedView {
	return &NullableSavedView{value: val, isSet: true}
}

func (v NullableSavedView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSavedView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


