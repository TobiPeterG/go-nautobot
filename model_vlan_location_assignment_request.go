/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// checks if the VLANLocationAssignmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VLANLocationAssignmentRequest{}

// VLANLocationAssignmentRequest Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type VLANLocationAssignmentRequest struct {
	Vlan BulkWritableCableRequestStatus `json:"vlan"`
	Location BulkWritableCableRequestStatus `json:"location"`
	AdditionalProperties map[string]interface{}
}

type _VLANLocationAssignmentRequest VLANLocationAssignmentRequest

// NewVLANLocationAssignmentRequest instantiates a new VLANLocationAssignmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVLANLocationAssignmentRequest(vlan BulkWritableCableRequestStatus, location BulkWritableCableRequestStatus) *VLANLocationAssignmentRequest {
	this := VLANLocationAssignmentRequest{}
	this.Vlan = vlan
	this.Location = location
	return &this
}

// NewVLANLocationAssignmentRequestWithDefaults instantiates a new VLANLocationAssignmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVLANLocationAssignmentRequestWithDefaults() *VLANLocationAssignmentRequest {
	this := VLANLocationAssignmentRequest{}
	return &this
}

// GetVlan returns the Vlan field value
func (o *VLANLocationAssignmentRequest) GetVlan() BulkWritableCableRequestStatus {
	if o == nil {
		var ret BulkWritableCableRequestStatus
		return ret
	}

	return o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value
// and a boolean to check if the value has been set.
func (o *VLANLocationAssignmentRequest) GetVlanOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vlan, true
}

// SetVlan sets field value
func (o *VLANLocationAssignmentRequest) SetVlan(v BulkWritableCableRequestStatus) {
	o.Vlan = v
}

// GetLocation returns the Location field value
func (o *VLANLocationAssignmentRequest) GetLocation() BulkWritableCableRequestStatus {
	if o == nil {
		var ret BulkWritableCableRequestStatus
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *VLANLocationAssignmentRequest) GetLocationOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *VLANLocationAssignmentRequest) SetLocation(v BulkWritableCableRequestStatus) {
	o.Location = v
}

func (o VLANLocationAssignmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VLANLocationAssignmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vlan"] = o.Vlan
	toSerialize["location"] = o.Location

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VLANLocationAssignmentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vlan",
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVLANLocationAssignmentRequest := _VLANLocationAssignmentRequest{}

	err = json.Unmarshal(data, &varVLANLocationAssignmentRequest)

	if err != nil {
		return err
	}

	*o = VLANLocationAssignmentRequest(varVLANLocationAssignmentRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vlan")
		delete(additionalProperties, "location")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVLANLocationAssignmentRequest struct {
	value *VLANLocationAssignmentRequest
	isSet bool
}

func (v NullableVLANLocationAssignmentRequest) Get() *VLANLocationAssignmentRequest {
	return v.value
}

func (v *NullableVLANLocationAssignmentRequest) Set(val *VLANLocationAssignmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVLANLocationAssignmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVLANLocationAssignmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVLANLocationAssignmentRequest(val *VLANLocationAssignmentRequest) *NullableVLANLocationAssignmentRequest {
	return &NullableVLANLocationAssignmentRequest{value: val, isSet: true}
}

func (v NullableVLANLocationAssignmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVLANLocationAssignmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


