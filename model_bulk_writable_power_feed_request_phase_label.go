/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// BulkWritablePowerFeedRequestPhaseLabel the model 'BulkWritablePowerFeedRequestPhaseLabel'
type BulkWritablePowerFeedRequestPhaseLabel string

// List of BulkWritablePowerFeedRequest_phase_label
const (
	BULKWRITABLEPOWERFEEDREQUESTPHASELABEL_SINGLE_PHASE BulkWritablePowerFeedRequestPhaseLabel = "Single phase"
	BULKWRITABLEPOWERFEEDREQUESTPHASELABEL_THREE_PHASE BulkWritablePowerFeedRequestPhaseLabel = "Three phase"
)

// All allowed values of BulkWritablePowerFeedRequestPhaseLabel enum
var AllowedBulkWritablePowerFeedRequestPhaseLabelEnumValues = []BulkWritablePowerFeedRequestPhaseLabel{
	"Single phase",
	"Three phase",
}

func (v *BulkWritablePowerFeedRequestPhaseLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BulkWritablePowerFeedRequestPhaseLabel(value)
	for _, existing := range AllowedBulkWritablePowerFeedRequestPhaseLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BulkWritablePowerFeedRequestPhaseLabel", value)
}

// NewBulkWritablePowerFeedRequestPhaseLabelFromValue returns a pointer to a valid BulkWritablePowerFeedRequestPhaseLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBulkWritablePowerFeedRequestPhaseLabelFromValue(v string) (*BulkWritablePowerFeedRequestPhaseLabel, error) {
	ev := BulkWritablePowerFeedRequestPhaseLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BulkWritablePowerFeedRequestPhaseLabel: valid values are %v", v, AllowedBulkWritablePowerFeedRequestPhaseLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BulkWritablePowerFeedRequestPhaseLabel) IsValid() bool {
	for _, existing := range AllowedBulkWritablePowerFeedRequestPhaseLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BulkWritablePowerFeedRequest_phase_label value
func (v BulkWritablePowerFeedRequestPhaseLabel) Ptr() *BulkWritablePowerFeedRequestPhaseLabel {
	return &v
}

type NullableBulkWritablePowerFeedRequestPhaseLabel struct {
	value *BulkWritablePowerFeedRequestPhaseLabel
	isSet bool
}

func (v NullableBulkWritablePowerFeedRequestPhaseLabel) Get() *BulkWritablePowerFeedRequestPhaseLabel {
	return v.value
}

func (v *NullableBulkWritablePowerFeedRequestPhaseLabel) Set(val *BulkWritablePowerFeedRequestPhaseLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkWritablePowerFeedRequestPhaseLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkWritablePowerFeedRequestPhaseLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkWritablePowerFeedRequestPhaseLabel(val *BulkWritablePowerFeedRequestPhaseLabel) *NullableBulkWritablePowerFeedRequestPhaseLabel {
	return &NullableBulkWritablePowerFeedRequestPhaseLabel{value: val, isSet: true}
}

func (v NullableBulkWritablePowerFeedRequestPhaseLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkWritablePowerFeedRequestPhaseLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

