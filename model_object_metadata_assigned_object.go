/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ObjectMetadataAssignedObject - struct for ObjectMetadataAssignedObject
type ObjectMetadataAssignedObject struct {
	NestedCable *NestedCable
	NestedCircuit *NestedCircuit
	NestedCircuitTermination *NestedCircuitTermination
	NestedCircuitType *NestedCircuitType
	NestedCloudAccount *NestedCloudAccount
	NestedCloudNetwork *NestedCloudNetwork
	NestedCloudResourceType *NestedCloudResourceType
	NestedCloudService *NestedCloudService
	NestedCluster *NestedCluster
	NestedClusterGroup *NestedClusterGroup
	NestedClusterType *NestedClusterType
	NestedComputedField *NestedComputedField
	NestedConfigContext *NestedConfigContext
	NestedConfigContextSchema *NestedConfigContextSchema
	NestedConsolePort *NestedConsolePort
	NestedConsolePortTemplate *NestedConsolePortTemplate
	NestedConsoleServerPort *NestedConsoleServerPort
	NestedConsoleServerPortTemplate *NestedConsoleServerPortTemplate
	NestedContact *NestedContact
	NestedContactAssociation *NestedContactAssociation
	NestedController *NestedController
	NestedControllerManagedDeviceGroup *NestedControllerManagedDeviceGroup
	NestedCustomField *NestedCustomField
	NestedCustomLink *NestedCustomLink
	NestedDevice *NestedDevice
	NestedDeviceBay *NestedDeviceBay
	NestedDeviceBayTemplate *NestedDeviceBayTemplate
	NestedDeviceFamily *NestedDeviceFamily
	NestedDeviceRedundancyGroup *NestedDeviceRedundancyGroup
	NestedDeviceType *NestedDeviceType
	NestedDynamicGroup *NestedDynamicGroup
	NestedExportTemplate *NestedExportTemplate
	NestedExternalIntegration *NestedExternalIntegration
	NestedFileProxy *NestedFileProxy
	NestedFrontPort *NestedFrontPort
	NestedFrontPortTemplate *NestedFrontPortTemplate
	NestedGitRepository *NestedGitRepository
	NestedGraphQLQuery *NestedGraphQLQuery
	NestedIPAddress *NestedIPAddress
	NestedImageAttachment *NestedImageAttachment
	NestedInterface *NestedInterface
	NestedInterfaceRedundancyGroup *NestedInterfaceRedundancyGroup
	NestedInterfaceTemplate *NestedInterfaceTemplate
	NestedInventoryItem *NestedInventoryItem
	NestedJob *NestedJob
	NestedJobButton *NestedJobButton
	NestedJobHook *NestedJobHook
	NestedJobResult *NestedJobResult
	NestedLocation *NestedLocation
	NestedLocationType *NestedLocationType
	NestedManufacturer *NestedManufacturer
	NestedMetadataType *NestedMetadataType
	NestedModule *NestedModule
	NestedModuleBay *NestedModuleBay
	NestedModuleBayTemplate *NestedModuleBayTemplate
	NestedModuleType *NestedModuleType
	NestedNamespace *NestedNamespace
	NestedObjectChange *NestedObjectChange
	NestedObjectMetadata *NestedObjectMetadata
	NestedPlatform *NestedPlatform
	NestedPowerFeed *NestedPowerFeed
	NestedPowerOutlet *NestedPowerOutlet
	NestedPowerOutletTemplate *NestedPowerOutletTemplate
	NestedPowerPanel *NestedPowerPanel
	NestedPowerPort *NestedPowerPort
	NestedPowerPortTemplate *NestedPowerPortTemplate
	NestedPrefix *NestedPrefix
	NestedProvider *NestedProvider
	NestedProviderNetwork *NestedProviderNetwork
	NestedRIR *NestedRIR
	NestedRack *NestedRack
	NestedRackGroup *NestedRackGroup
	NestedRackReservation *NestedRackReservation
	NestedRearPort *NestedRearPort
	NestedRearPortTemplate *NestedRearPortTemplate
	NestedRelationship *NestedRelationship
	NestedRelationshipAssociation *NestedRelationshipAssociation
	NestedRole *NestedRole
	NestedRouteTarget *NestedRouteTarget
	NestedSavedView *NestedSavedView
	NestedScheduledJob *NestedScheduledJob
	NestedSecret *NestedSecret
	NestedSecretsGroup *NestedSecretsGroup
	NestedSecretsGroupAssociation *NestedSecretsGroupAssociation
	NestedService *NestedService
	NestedSoftwareImageFile *NestedSoftwareImageFile
	NestedSoftwareVersion *NestedSoftwareVersion
	NestedStaticGroupAssociation *NestedStaticGroupAssociation
	NestedStatus *NestedStatus
	NestedTag *NestedTag
	NestedTeam *NestedTeam
	NestedTenant *NestedTenant
	NestedTenantGroup *NestedTenantGroup
	NestedVLAN *NestedVLAN
	NestedVLANGroup *NestedVLANGroup
	NestedVMInterface *NestedVMInterface
	NestedVRF *NestedVRF
	NestedVirtualChassis *NestedVirtualChassis
	NestedVirtualMachine *NestedVirtualMachine
	NestedWebhook *NestedWebhook
}

// NestedCableAsObjectMetadataAssignedObject is a convenience function that returns NestedCable wrapped in ObjectMetadataAssignedObject
func NestedCableAsObjectMetadataAssignedObject(v *NestedCable) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCable: v,
	}
}

// NestedCircuitAsObjectMetadataAssignedObject is a convenience function that returns NestedCircuit wrapped in ObjectMetadataAssignedObject
func NestedCircuitAsObjectMetadataAssignedObject(v *NestedCircuit) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCircuit: v,
	}
}

// NestedCircuitTerminationAsObjectMetadataAssignedObject is a convenience function that returns NestedCircuitTermination wrapped in ObjectMetadataAssignedObject
func NestedCircuitTerminationAsObjectMetadataAssignedObject(v *NestedCircuitTermination) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCircuitTermination: v,
	}
}

// NestedCircuitTypeAsObjectMetadataAssignedObject is a convenience function that returns NestedCircuitType wrapped in ObjectMetadataAssignedObject
func NestedCircuitTypeAsObjectMetadataAssignedObject(v *NestedCircuitType) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCircuitType: v,
	}
}

// NestedCloudAccountAsObjectMetadataAssignedObject is a convenience function that returns NestedCloudAccount wrapped in ObjectMetadataAssignedObject
func NestedCloudAccountAsObjectMetadataAssignedObject(v *NestedCloudAccount) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCloudAccount: v,
	}
}

// NestedCloudNetworkAsObjectMetadataAssignedObject is a convenience function that returns NestedCloudNetwork wrapped in ObjectMetadataAssignedObject
func NestedCloudNetworkAsObjectMetadataAssignedObject(v *NestedCloudNetwork) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCloudNetwork: v,
	}
}

// NestedCloudResourceTypeAsObjectMetadataAssignedObject is a convenience function that returns NestedCloudResourceType wrapped in ObjectMetadataAssignedObject
func NestedCloudResourceTypeAsObjectMetadataAssignedObject(v *NestedCloudResourceType) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCloudResourceType: v,
	}
}

// NestedCloudServiceAsObjectMetadataAssignedObject is a convenience function that returns NestedCloudService wrapped in ObjectMetadataAssignedObject
func NestedCloudServiceAsObjectMetadataAssignedObject(v *NestedCloudService) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCloudService: v,
	}
}

// NestedClusterAsObjectMetadataAssignedObject is a convenience function that returns NestedCluster wrapped in ObjectMetadataAssignedObject
func NestedClusterAsObjectMetadataAssignedObject(v *NestedCluster) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCluster: v,
	}
}

// NestedClusterGroupAsObjectMetadataAssignedObject is a convenience function that returns NestedClusterGroup wrapped in ObjectMetadataAssignedObject
func NestedClusterGroupAsObjectMetadataAssignedObject(v *NestedClusterGroup) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedClusterGroup: v,
	}
}

// NestedClusterTypeAsObjectMetadataAssignedObject is a convenience function that returns NestedClusterType wrapped in ObjectMetadataAssignedObject
func NestedClusterTypeAsObjectMetadataAssignedObject(v *NestedClusterType) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedClusterType: v,
	}
}

// NestedComputedFieldAsObjectMetadataAssignedObject is a convenience function that returns NestedComputedField wrapped in ObjectMetadataAssignedObject
func NestedComputedFieldAsObjectMetadataAssignedObject(v *NestedComputedField) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedComputedField: v,
	}
}

// NestedConfigContextAsObjectMetadataAssignedObject is a convenience function that returns NestedConfigContext wrapped in ObjectMetadataAssignedObject
func NestedConfigContextAsObjectMetadataAssignedObject(v *NestedConfigContext) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedConfigContext: v,
	}
}

// NestedConfigContextSchemaAsObjectMetadataAssignedObject is a convenience function that returns NestedConfigContextSchema wrapped in ObjectMetadataAssignedObject
func NestedConfigContextSchemaAsObjectMetadataAssignedObject(v *NestedConfigContextSchema) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedConfigContextSchema: v,
	}
}

// NestedConsolePortAsObjectMetadataAssignedObject is a convenience function that returns NestedConsolePort wrapped in ObjectMetadataAssignedObject
func NestedConsolePortAsObjectMetadataAssignedObject(v *NestedConsolePort) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedConsolePort: v,
	}
}

// NestedConsolePortTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedConsolePortTemplate wrapped in ObjectMetadataAssignedObject
func NestedConsolePortTemplateAsObjectMetadataAssignedObject(v *NestedConsolePortTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedConsolePortTemplate: v,
	}
}

// NestedConsoleServerPortAsObjectMetadataAssignedObject is a convenience function that returns NestedConsoleServerPort wrapped in ObjectMetadataAssignedObject
func NestedConsoleServerPortAsObjectMetadataAssignedObject(v *NestedConsoleServerPort) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedConsoleServerPort: v,
	}
}

// NestedConsoleServerPortTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedConsoleServerPortTemplate wrapped in ObjectMetadataAssignedObject
func NestedConsoleServerPortTemplateAsObjectMetadataAssignedObject(v *NestedConsoleServerPortTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedConsoleServerPortTemplate: v,
	}
}

// NestedContactAsObjectMetadataAssignedObject is a convenience function that returns NestedContact wrapped in ObjectMetadataAssignedObject
func NestedContactAsObjectMetadataAssignedObject(v *NestedContact) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedContact: v,
	}
}

// NestedContactAssociationAsObjectMetadataAssignedObject is a convenience function that returns NestedContactAssociation wrapped in ObjectMetadataAssignedObject
func NestedContactAssociationAsObjectMetadataAssignedObject(v *NestedContactAssociation) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedContactAssociation: v,
	}
}

// NestedControllerAsObjectMetadataAssignedObject is a convenience function that returns NestedController wrapped in ObjectMetadataAssignedObject
func NestedControllerAsObjectMetadataAssignedObject(v *NestedController) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedController: v,
	}
}

// NestedControllerManagedDeviceGroupAsObjectMetadataAssignedObject is a convenience function that returns NestedControllerManagedDeviceGroup wrapped in ObjectMetadataAssignedObject
func NestedControllerManagedDeviceGroupAsObjectMetadataAssignedObject(v *NestedControllerManagedDeviceGroup) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedControllerManagedDeviceGroup: v,
	}
}

// NestedCustomFieldAsObjectMetadataAssignedObject is a convenience function that returns NestedCustomField wrapped in ObjectMetadataAssignedObject
func NestedCustomFieldAsObjectMetadataAssignedObject(v *NestedCustomField) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCustomField: v,
	}
}

// NestedCustomLinkAsObjectMetadataAssignedObject is a convenience function that returns NestedCustomLink wrapped in ObjectMetadataAssignedObject
func NestedCustomLinkAsObjectMetadataAssignedObject(v *NestedCustomLink) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedCustomLink: v,
	}
}

// NestedDeviceAsObjectMetadataAssignedObject is a convenience function that returns NestedDevice wrapped in ObjectMetadataAssignedObject
func NestedDeviceAsObjectMetadataAssignedObject(v *NestedDevice) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedDevice: v,
	}
}

// NestedDeviceBayAsObjectMetadataAssignedObject is a convenience function that returns NestedDeviceBay wrapped in ObjectMetadataAssignedObject
func NestedDeviceBayAsObjectMetadataAssignedObject(v *NestedDeviceBay) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedDeviceBay: v,
	}
}

// NestedDeviceBayTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedDeviceBayTemplate wrapped in ObjectMetadataAssignedObject
func NestedDeviceBayTemplateAsObjectMetadataAssignedObject(v *NestedDeviceBayTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedDeviceBayTemplate: v,
	}
}

// NestedDeviceFamilyAsObjectMetadataAssignedObject is a convenience function that returns NestedDeviceFamily wrapped in ObjectMetadataAssignedObject
func NestedDeviceFamilyAsObjectMetadataAssignedObject(v *NestedDeviceFamily) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedDeviceFamily: v,
	}
}

// NestedDeviceRedundancyGroupAsObjectMetadataAssignedObject is a convenience function that returns NestedDeviceRedundancyGroup wrapped in ObjectMetadataAssignedObject
func NestedDeviceRedundancyGroupAsObjectMetadataAssignedObject(v *NestedDeviceRedundancyGroup) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedDeviceRedundancyGroup: v,
	}
}

// NestedDeviceTypeAsObjectMetadataAssignedObject is a convenience function that returns NestedDeviceType wrapped in ObjectMetadataAssignedObject
func NestedDeviceTypeAsObjectMetadataAssignedObject(v *NestedDeviceType) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedDeviceType: v,
	}
}

// NestedDynamicGroupAsObjectMetadataAssignedObject is a convenience function that returns NestedDynamicGroup wrapped in ObjectMetadataAssignedObject
func NestedDynamicGroupAsObjectMetadataAssignedObject(v *NestedDynamicGroup) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedDynamicGroup: v,
	}
}

// NestedExportTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedExportTemplate wrapped in ObjectMetadataAssignedObject
func NestedExportTemplateAsObjectMetadataAssignedObject(v *NestedExportTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedExportTemplate: v,
	}
}

// NestedExternalIntegrationAsObjectMetadataAssignedObject is a convenience function that returns NestedExternalIntegration wrapped in ObjectMetadataAssignedObject
func NestedExternalIntegrationAsObjectMetadataAssignedObject(v *NestedExternalIntegration) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedExternalIntegration: v,
	}
}

// NestedFileProxyAsObjectMetadataAssignedObject is a convenience function that returns NestedFileProxy wrapped in ObjectMetadataAssignedObject
func NestedFileProxyAsObjectMetadataAssignedObject(v *NestedFileProxy) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedFileProxy: v,
	}
}

// NestedFrontPortAsObjectMetadataAssignedObject is a convenience function that returns NestedFrontPort wrapped in ObjectMetadataAssignedObject
func NestedFrontPortAsObjectMetadataAssignedObject(v *NestedFrontPort) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedFrontPort: v,
	}
}

// NestedFrontPortTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedFrontPortTemplate wrapped in ObjectMetadataAssignedObject
func NestedFrontPortTemplateAsObjectMetadataAssignedObject(v *NestedFrontPortTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedFrontPortTemplate: v,
	}
}

// NestedGitRepositoryAsObjectMetadataAssignedObject is a convenience function that returns NestedGitRepository wrapped in ObjectMetadataAssignedObject
func NestedGitRepositoryAsObjectMetadataAssignedObject(v *NestedGitRepository) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedGitRepository: v,
	}
}

// NestedGraphQLQueryAsObjectMetadataAssignedObject is a convenience function that returns NestedGraphQLQuery wrapped in ObjectMetadataAssignedObject
func NestedGraphQLQueryAsObjectMetadataAssignedObject(v *NestedGraphQLQuery) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedGraphQLQuery: v,
	}
}

// NestedIPAddressAsObjectMetadataAssignedObject is a convenience function that returns NestedIPAddress wrapped in ObjectMetadataAssignedObject
func NestedIPAddressAsObjectMetadataAssignedObject(v *NestedIPAddress) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedIPAddress: v,
	}
}

// NestedImageAttachmentAsObjectMetadataAssignedObject is a convenience function that returns NestedImageAttachment wrapped in ObjectMetadataAssignedObject
func NestedImageAttachmentAsObjectMetadataAssignedObject(v *NestedImageAttachment) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedImageAttachment: v,
	}
}

// NestedInterfaceAsObjectMetadataAssignedObject is a convenience function that returns NestedInterface wrapped in ObjectMetadataAssignedObject
func NestedInterfaceAsObjectMetadataAssignedObject(v *NestedInterface) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedInterface: v,
	}
}

// NestedInterfaceRedundancyGroupAsObjectMetadataAssignedObject is a convenience function that returns NestedInterfaceRedundancyGroup wrapped in ObjectMetadataAssignedObject
func NestedInterfaceRedundancyGroupAsObjectMetadataAssignedObject(v *NestedInterfaceRedundancyGroup) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedInterfaceRedundancyGroup: v,
	}
}

// NestedInterfaceTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedInterfaceTemplate wrapped in ObjectMetadataAssignedObject
func NestedInterfaceTemplateAsObjectMetadataAssignedObject(v *NestedInterfaceTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedInterfaceTemplate: v,
	}
}

// NestedInventoryItemAsObjectMetadataAssignedObject is a convenience function that returns NestedInventoryItem wrapped in ObjectMetadataAssignedObject
func NestedInventoryItemAsObjectMetadataAssignedObject(v *NestedInventoryItem) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedInventoryItem: v,
	}
}

// NestedJobAsObjectMetadataAssignedObject is a convenience function that returns NestedJob wrapped in ObjectMetadataAssignedObject
func NestedJobAsObjectMetadataAssignedObject(v *NestedJob) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedJob: v,
	}
}

// NestedJobButtonAsObjectMetadataAssignedObject is a convenience function that returns NestedJobButton wrapped in ObjectMetadataAssignedObject
func NestedJobButtonAsObjectMetadataAssignedObject(v *NestedJobButton) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedJobButton: v,
	}
}

// NestedJobHookAsObjectMetadataAssignedObject is a convenience function that returns NestedJobHook wrapped in ObjectMetadataAssignedObject
func NestedJobHookAsObjectMetadataAssignedObject(v *NestedJobHook) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedJobHook: v,
	}
}

// NestedJobResultAsObjectMetadataAssignedObject is a convenience function that returns NestedJobResult wrapped in ObjectMetadataAssignedObject
func NestedJobResultAsObjectMetadataAssignedObject(v *NestedJobResult) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedJobResult: v,
	}
}

// NestedLocationAsObjectMetadataAssignedObject is a convenience function that returns NestedLocation wrapped in ObjectMetadataAssignedObject
func NestedLocationAsObjectMetadataAssignedObject(v *NestedLocation) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedLocation: v,
	}
}

// NestedLocationTypeAsObjectMetadataAssignedObject is a convenience function that returns NestedLocationType wrapped in ObjectMetadataAssignedObject
func NestedLocationTypeAsObjectMetadataAssignedObject(v *NestedLocationType) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedLocationType: v,
	}
}

// NestedManufacturerAsObjectMetadataAssignedObject is a convenience function that returns NestedManufacturer wrapped in ObjectMetadataAssignedObject
func NestedManufacturerAsObjectMetadataAssignedObject(v *NestedManufacturer) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedManufacturer: v,
	}
}

// NestedMetadataTypeAsObjectMetadataAssignedObject is a convenience function that returns NestedMetadataType wrapped in ObjectMetadataAssignedObject
func NestedMetadataTypeAsObjectMetadataAssignedObject(v *NestedMetadataType) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedMetadataType: v,
	}
}

// NestedModuleAsObjectMetadataAssignedObject is a convenience function that returns NestedModule wrapped in ObjectMetadataAssignedObject
func NestedModuleAsObjectMetadataAssignedObject(v *NestedModule) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedModule: v,
	}
}

// NestedModuleBayAsObjectMetadataAssignedObject is a convenience function that returns NestedModuleBay wrapped in ObjectMetadataAssignedObject
func NestedModuleBayAsObjectMetadataAssignedObject(v *NestedModuleBay) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedModuleBay: v,
	}
}

// NestedModuleBayTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedModuleBayTemplate wrapped in ObjectMetadataAssignedObject
func NestedModuleBayTemplateAsObjectMetadataAssignedObject(v *NestedModuleBayTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedModuleBayTemplate: v,
	}
}

// NestedModuleTypeAsObjectMetadataAssignedObject is a convenience function that returns NestedModuleType wrapped in ObjectMetadataAssignedObject
func NestedModuleTypeAsObjectMetadataAssignedObject(v *NestedModuleType) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedModuleType: v,
	}
}

// NestedNamespaceAsObjectMetadataAssignedObject is a convenience function that returns NestedNamespace wrapped in ObjectMetadataAssignedObject
func NestedNamespaceAsObjectMetadataAssignedObject(v *NestedNamespace) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedNamespace: v,
	}
}

// NestedObjectChangeAsObjectMetadataAssignedObject is a convenience function that returns NestedObjectChange wrapped in ObjectMetadataAssignedObject
func NestedObjectChangeAsObjectMetadataAssignedObject(v *NestedObjectChange) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedObjectChange: v,
	}
}

// NestedObjectMetadataAsObjectMetadataAssignedObject is a convenience function that returns NestedObjectMetadata wrapped in ObjectMetadataAssignedObject
func NestedObjectMetadataAsObjectMetadataAssignedObject(v *NestedObjectMetadata) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedObjectMetadata: v,
	}
}

// NestedPlatformAsObjectMetadataAssignedObject is a convenience function that returns NestedPlatform wrapped in ObjectMetadataAssignedObject
func NestedPlatformAsObjectMetadataAssignedObject(v *NestedPlatform) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedPlatform: v,
	}
}

// NestedPowerFeedAsObjectMetadataAssignedObject is a convenience function that returns NestedPowerFeed wrapped in ObjectMetadataAssignedObject
func NestedPowerFeedAsObjectMetadataAssignedObject(v *NestedPowerFeed) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedPowerFeed: v,
	}
}

// NestedPowerOutletAsObjectMetadataAssignedObject is a convenience function that returns NestedPowerOutlet wrapped in ObjectMetadataAssignedObject
func NestedPowerOutletAsObjectMetadataAssignedObject(v *NestedPowerOutlet) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedPowerOutlet: v,
	}
}

// NestedPowerOutletTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedPowerOutletTemplate wrapped in ObjectMetadataAssignedObject
func NestedPowerOutletTemplateAsObjectMetadataAssignedObject(v *NestedPowerOutletTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedPowerOutletTemplate: v,
	}
}

// NestedPowerPanelAsObjectMetadataAssignedObject is a convenience function that returns NestedPowerPanel wrapped in ObjectMetadataAssignedObject
func NestedPowerPanelAsObjectMetadataAssignedObject(v *NestedPowerPanel) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedPowerPanel: v,
	}
}

// NestedPowerPortAsObjectMetadataAssignedObject is a convenience function that returns NestedPowerPort wrapped in ObjectMetadataAssignedObject
func NestedPowerPortAsObjectMetadataAssignedObject(v *NestedPowerPort) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedPowerPort: v,
	}
}

// NestedPowerPortTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedPowerPortTemplate wrapped in ObjectMetadataAssignedObject
func NestedPowerPortTemplateAsObjectMetadataAssignedObject(v *NestedPowerPortTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedPowerPortTemplate: v,
	}
}

// NestedPrefixAsObjectMetadataAssignedObject is a convenience function that returns NestedPrefix wrapped in ObjectMetadataAssignedObject
func NestedPrefixAsObjectMetadataAssignedObject(v *NestedPrefix) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedPrefix: v,
	}
}

// NestedProviderAsObjectMetadataAssignedObject is a convenience function that returns NestedProvider wrapped in ObjectMetadataAssignedObject
func NestedProviderAsObjectMetadataAssignedObject(v *NestedProvider) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedProvider: v,
	}
}

// NestedProviderNetworkAsObjectMetadataAssignedObject is a convenience function that returns NestedProviderNetwork wrapped in ObjectMetadataAssignedObject
func NestedProviderNetworkAsObjectMetadataAssignedObject(v *NestedProviderNetwork) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedProviderNetwork: v,
	}
}

// NestedRIRAsObjectMetadataAssignedObject is a convenience function that returns NestedRIR wrapped in ObjectMetadataAssignedObject
func NestedRIRAsObjectMetadataAssignedObject(v *NestedRIR) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRIR: v,
	}
}

// NestedRackAsObjectMetadataAssignedObject is a convenience function that returns NestedRack wrapped in ObjectMetadataAssignedObject
func NestedRackAsObjectMetadataAssignedObject(v *NestedRack) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRack: v,
	}
}

// NestedRackGroupAsObjectMetadataAssignedObject is a convenience function that returns NestedRackGroup wrapped in ObjectMetadataAssignedObject
func NestedRackGroupAsObjectMetadataAssignedObject(v *NestedRackGroup) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRackGroup: v,
	}
}

// NestedRackReservationAsObjectMetadataAssignedObject is a convenience function that returns NestedRackReservation wrapped in ObjectMetadataAssignedObject
func NestedRackReservationAsObjectMetadataAssignedObject(v *NestedRackReservation) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRackReservation: v,
	}
}

// NestedRearPortAsObjectMetadataAssignedObject is a convenience function that returns NestedRearPort wrapped in ObjectMetadataAssignedObject
func NestedRearPortAsObjectMetadataAssignedObject(v *NestedRearPort) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRearPort: v,
	}
}

// NestedRearPortTemplateAsObjectMetadataAssignedObject is a convenience function that returns NestedRearPortTemplate wrapped in ObjectMetadataAssignedObject
func NestedRearPortTemplateAsObjectMetadataAssignedObject(v *NestedRearPortTemplate) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRearPortTemplate: v,
	}
}

// NestedRelationshipAsObjectMetadataAssignedObject is a convenience function that returns NestedRelationship wrapped in ObjectMetadataAssignedObject
func NestedRelationshipAsObjectMetadataAssignedObject(v *NestedRelationship) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRelationship: v,
	}
}

// NestedRelationshipAssociationAsObjectMetadataAssignedObject is a convenience function that returns NestedRelationshipAssociation wrapped in ObjectMetadataAssignedObject
func NestedRelationshipAssociationAsObjectMetadataAssignedObject(v *NestedRelationshipAssociation) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRelationshipAssociation: v,
	}
}

// NestedRoleAsObjectMetadataAssignedObject is a convenience function that returns NestedRole wrapped in ObjectMetadataAssignedObject
func NestedRoleAsObjectMetadataAssignedObject(v *NestedRole) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRole: v,
	}
}

// NestedRouteTargetAsObjectMetadataAssignedObject is a convenience function that returns NestedRouteTarget wrapped in ObjectMetadataAssignedObject
func NestedRouteTargetAsObjectMetadataAssignedObject(v *NestedRouteTarget) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedRouteTarget: v,
	}
}

// NestedSavedViewAsObjectMetadataAssignedObject is a convenience function that returns NestedSavedView wrapped in ObjectMetadataAssignedObject
func NestedSavedViewAsObjectMetadataAssignedObject(v *NestedSavedView) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedSavedView: v,
	}
}

// NestedScheduledJobAsObjectMetadataAssignedObject is a convenience function that returns NestedScheduledJob wrapped in ObjectMetadataAssignedObject
func NestedScheduledJobAsObjectMetadataAssignedObject(v *NestedScheduledJob) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedScheduledJob: v,
	}
}

// NestedSecretAsObjectMetadataAssignedObject is a convenience function that returns NestedSecret wrapped in ObjectMetadataAssignedObject
func NestedSecretAsObjectMetadataAssignedObject(v *NestedSecret) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedSecret: v,
	}
}

// NestedSecretsGroupAsObjectMetadataAssignedObject is a convenience function that returns NestedSecretsGroup wrapped in ObjectMetadataAssignedObject
func NestedSecretsGroupAsObjectMetadataAssignedObject(v *NestedSecretsGroup) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedSecretsGroup: v,
	}
}

// NestedSecretsGroupAssociationAsObjectMetadataAssignedObject is a convenience function that returns NestedSecretsGroupAssociation wrapped in ObjectMetadataAssignedObject
func NestedSecretsGroupAssociationAsObjectMetadataAssignedObject(v *NestedSecretsGroupAssociation) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedSecretsGroupAssociation: v,
	}
}

// NestedServiceAsObjectMetadataAssignedObject is a convenience function that returns NestedService wrapped in ObjectMetadataAssignedObject
func NestedServiceAsObjectMetadataAssignedObject(v *NestedService) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedService: v,
	}
}

// NestedSoftwareImageFileAsObjectMetadataAssignedObject is a convenience function that returns NestedSoftwareImageFile wrapped in ObjectMetadataAssignedObject
func NestedSoftwareImageFileAsObjectMetadataAssignedObject(v *NestedSoftwareImageFile) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedSoftwareImageFile: v,
	}
}

// NestedSoftwareVersionAsObjectMetadataAssignedObject is a convenience function that returns NestedSoftwareVersion wrapped in ObjectMetadataAssignedObject
func NestedSoftwareVersionAsObjectMetadataAssignedObject(v *NestedSoftwareVersion) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedSoftwareVersion: v,
	}
}

// NestedStaticGroupAssociationAsObjectMetadataAssignedObject is a convenience function that returns NestedStaticGroupAssociation wrapped in ObjectMetadataAssignedObject
func NestedStaticGroupAssociationAsObjectMetadataAssignedObject(v *NestedStaticGroupAssociation) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedStaticGroupAssociation: v,
	}
}

// NestedStatusAsObjectMetadataAssignedObject is a convenience function that returns NestedStatus wrapped in ObjectMetadataAssignedObject
func NestedStatusAsObjectMetadataAssignedObject(v *NestedStatus) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedStatus: v,
	}
}

// NestedTagAsObjectMetadataAssignedObject is a convenience function that returns NestedTag wrapped in ObjectMetadataAssignedObject
func NestedTagAsObjectMetadataAssignedObject(v *NestedTag) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedTag: v,
	}
}

// NestedTeamAsObjectMetadataAssignedObject is a convenience function that returns NestedTeam wrapped in ObjectMetadataAssignedObject
func NestedTeamAsObjectMetadataAssignedObject(v *NestedTeam) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedTeam: v,
	}
}

// NestedTenantAsObjectMetadataAssignedObject is a convenience function that returns NestedTenant wrapped in ObjectMetadataAssignedObject
func NestedTenantAsObjectMetadataAssignedObject(v *NestedTenant) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedTenant: v,
	}
}

// NestedTenantGroupAsObjectMetadataAssignedObject is a convenience function that returns NestedTenantGroup wrapped in ObjectMetadataAssignedObject
func NestedTenantGroupAsObjectMetadataAssignedObject(v *NestedTenantGroup) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedTenantGroup: v,
	}
}

// NestedVLANAsObjectMetadataAssignedObject is a convenience function that returns NestedVLAN wrapped in ObjectMetadataAssignedObject
func NestedVLANAsObjectMetadataAssignedObject(v *NestedVLAN) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedVLAN: v,
	}
}

// NestedVLANGroupAsObjectMetadataAssignedObject is a convenience function that returns NestedVLANGroup wrapped in ObjectMetadataAssignedObject
func NestedVLANGroupAsObjectMetadataAssignedObject(v *NestedVLANGroup) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedVLANGroup: v,
	}
}

// NestedVMInterfaceAsObjectMetadataAssignedObject is a convenience function that returns NestedVMInterface wrapped in ObjectMetadataAssignedObject
func NestedVMInterfaceAsObjectMetadataAssignedObject(v *NestedVMInterface) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedVMInterface: v,
	}
}

// NestedVRFAsObjectMetadataAssignedObject is a convenience function that returns NestedVRF wrapped in ObjectMetadataAssignedObject
func NestedVRFAsObjectMetadataAssignedObject(v *NestedVRF) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedVRF: v,
	}
}

// NestedVirtualChassisAsObjectMetadataAssignedObject is a convenience function that returns NestedVirtualChassis wrapped in ObjectMetadataAssignedObject
func NestedVirtualChassisAsObjectMetadataAssignedObject(v *NestedVirtualChassis) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedVirtualChassis: v,
	}
}

// NestedVirtualMachineAsObjectMetadataAssignedObject is a convenience function that returns NestedVirtualMachine wrapped in ObjectMetadataAssignedObject
func NestedVirtualMachineAsObjectMetadataAssignedObject(v *NestedVirtualMachine) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedVirtualMachine: v,
	}
}

// NestedWebhookAsObjectMetadataAssignedObject is a convenience function that returns NestedWebhook wrapped in ObjectMetadataAssignedObject
func NestedWebhookAsObjectMetadataAssignedObject(v *NestedWebhook) ObjectMetadataAssignedObject {
	return ObjectMetadataAssignedObject{
		NestedWebhook: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ObjectMetadataAssignedObject) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NestedCable
	err = newStrictDecoder(data).Decode(&dst.NestedCable)
	if err == nil {
		jsonNestedCable, _ := json.Marshal(dst.NestedCable)
		if string(jsonNestedCable) == "{}" { // empty struct
			dst.NestedCable = nil
		} else {
			if err = validator.Validate(dst.NestedCable); err != nil {
				dst.NestedCable = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCable = nil
	}

	// try to unmarshal data into NestedCircuit
	err = newStrictDecoder(data).Decode(&dst.NestedCircuit)
	if err == nil {
		jsonNestedCircuit, _ := json.Marshal(dst.NestedCircuit)
		if string(jsonNestedCircuit) == "{}" { // empty struct
			dst.NestedCircuit = nil
		} else {
			if err = validator.Validate(dst.NestedCircuit); err != nil {
				dst.NestedCircuit = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCircuit = nil
	}

	// try to unmarshal data into NestedCircuitTermination
	err = newStrictDecoder(data).Decode(&dst.NestedCircuitTermination)
	if err == nil {
		jsonNestedCircuitTermination, _ := json.Marshal(dst.NestedCircuitTermination)
		if string(jsonNestedCircuitTermination) == "{}" { // empty struct
			dst.NestedCircuitTermination = nil
		} else {
			if err = validator.Validate(dst.NestedCircuitTermination); err != nil {
				dst.NestedCircuitTermination = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCircuitTermination = nil
	}

	// try to unmarshal data into NestedCircuitType
	err = newStrictDecoder(data).Decode(&dst.NestedCircuitType)
	if err == nil {
		jsonNestedCircuitType, _ := json.Marshal(dst.NestedCircuitType)
		if string(jsonNestedCircuitType) == "{}" { // empty struct
			dst.NestedCircuitType = nil
		} else {
			if err = validator.Validate(dst.NestedCircuitType); err != nil {
				dst.NestedCircuitType = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCircuitType = nil
	}

	// try to unmarshal data into NestedCloudAccount
	err = newStrictDecoder(data).Decode(&dst.NestedCloudAccount)
	if err == nil {
		jsonNestedCloudAccount, _ := json.Marshal(dst.NestedCloudAccount)
		if string(jsonNestedCloudAccount) == "{}" { // empty struct
			dst.NestedCloudAccount = nil
		} else {
			if err = validator.Validate(dst.NestedCloudAccount); err != nil {
				dst.NestedCloudAccount = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCloudAccount = nil
	}

	// try to unmarshal data into NestedCloudNetwork
	err = newStrictDecoder(data).Decode(&dst.NestedCloudNetwork)
	if err == nil {
		jsonNestedCloudNetwork, _ := json.Marshal(dst.NestedCloudNetwork)
		if string(jsonNestedCloudNetwork) == "{}" { // empty struct
			dst.NestedCloudNetwork = nil
		} else {
			if err = validator.Validate(dst.NestedCloudNetwork); err != nil {
				dst.NestedCloudNetwork = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCloudNetwork = nil
	}

	// try to unmarshal data into NestedCloudResourceType
	err = newStrictDecoder(data).Decode(&dst.NestedCloudResourceType)
	if err == nil {
		jsonNestedCloudResourceType, _ := json.Marshal(dst.NestedCloudResourceType)
		if string(jsonNestedCloudResourceType) == "{}" { // empty struct
			dst.NestedCloudResourceType = nil
		} else {
			if err = validator.Validate(dst.NestedCloudResourceType); err != nil {
				dst.NestedCloudResourceType = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCloudResourceType = nil
	}

	// try to unmarshal data into NestedCloudService
	err = newStrictDecoder(data).Decode(&dst.NestedCloudService)
	if err == nil {
		jsonNestedCloudService, _ := json.Marshal(dst.NestedCloudService)
		if string(jsonNestedCloudService) == "{}" { // empty struct
			dst.NestedCloudService = nil
		} else {
			if err = validator.Validate(dst.NestedCloudService); err != nil {
				dst.NestedCloudService = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCloudService = nil
	}

	// try to unmarshal data into NestedCluster
	err = newStrictDecoder(data).Decode(&dst.NestedCluster)
	if err == nil {
		jsonNestedCluster, _ := json.Marshal(dst.NestedCluster)
		if string(jsonNestedCluster) == "{}" { // empty struct
			dst.NestedCluster = nil
		} else {
			if err = validator.Validate(dst.NestedCluster); err != nil {
				dst.NestedCluster = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCluster = nil
	}

	// try to unmarshal data into NestedClusterGroup
	err = newStrictDecoder(data).Decode(&dst.NestedClusterGroup)
	if err == nil {
		jsonNestedClusterGroup, _ := json.Marshal(dst.NestedClusterGroup)
		if string(jsonNestedClusterGroup) == "{}" { // empty struct
			dst.NestedClusterGroup = nil
		} else {
			if err = validator.Validate(dst.NestedClusterGroup); err != nil {
				dst.NestedClusterGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedClusterGroup = nil
	}

	// try to unmarshal data into NestedClusterType
	err = newStrictDecoder(data).Decode(&dst.NestedClusterType)
	if err == nil {
		jsonNestedClusterType, _ := json.Marshal(dst.NestedClusterType)
		if string(jsonNestedClusterType) == "{}" { // empty struct
			dst.NestedClusterType = nil
		} else {
			if err = validator.Validate(dst.NestedClusterType); err != nil {
				dst.NestedClusterType = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedClusterType = nil
	}

	// try to unmarshal data into NestedComputedField
	err = newStrictDecoder(data).Decode(&dst.NestedComputedField)
	if err == nil {
		jsonNestedComputedField, _ := json.Marshal(dst.NestedComputedField)
		if string(jsonNestedComputedField) == "{}" { // empty struct
			dst.NestedComputedField = nil
		} else {
			if err = validator.Validate(dst.NestedComputedField); err != nil {
				dst.NestedComputedField = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedComputedField = nil
	}

	// try to unmarshal data into NestedConfigContext
	err = newStrictDecoder(data).Decode(&dst.NestedConfigContext)
	if err == nil {
		jsonNestedConfigContext, _ := json.Marshal(dst.NestedConfigContext)
		if string(jsonNestedConfigContext) == "{}" { // empty struct
			dst.NestedConfigContext = nil
		} else {
			if err = validator.Validate(dst.NestedConfigContext); err != nil {
				dst.NestedConfigContext = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedConfigContext = nil
	}

	// try to unmarshal data into NestedConfigContextSchema
	err = newStrictDecoder(data).Decode(&dst.NestedConfigContextSchema)
	if err == nil {
		jsonNestedConfigContextSchema, _ := json.Marshal(dst.NestedConfigContextSchema)
		if string(jsonNestedConfigContextSchema) == "{}" { // empty struct
			dst.NestedConfigContextSchema = nil
		} else {
			if err = validator.Validate(dst.NestedConfigContextSchema); err != nil {
				dst.NestedConfigContextSchema = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedConfigContextSchema = nil
	}

	// try to unmarshal data into NestedConsolePort
	err = newStrictDecoder(data).Decode(&dst.NestedConsolePort)
	if err == nil {
		jsonNestedConsolePort, _ := json.Marshal(dst.NestedConsolePort)
		if string(jsonNestedConsolePort) == "{}" { // empty struct
			dst.NestedConsolePort = nil
		} else {
			if err = validator.Validate(dst.NestedConsolePort); err != nil {
				dst.NestedConsolePort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedConsolePort = nil
	}

	// try to unmarshal data into NestedConsolePortTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedConsolePortTemplate)
	if err == nil {
		jsonNestedConsolePortTemplate, _ := json.Marshal(dst.NestedConsolePortTemplate)
		if string(jsonNestedConsolePortTemplate) == "{}" { // empty struct
			dst.NestedConsolePortTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedConsolePortTemplate); err != nil {
				dst.NestedConsolePortTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedConsolePortTemplate = nil
	}

	// try to unmarshal data into NestedConsoleServerPort
	err = newStrictDecoder(data).Decode(&dst.NestedConsoleServerPort)
	if err == nil {
		jsonNestedConsoleServerPort, _ := json.Marshal(dst.NestedConsoleServerPort)
		if string(jsonNestedConsoleServerPort) == "{}" { // empty struct
			dst.NestedConsoleServerPort = nil
		} else {
			if err = validator.Validate(dst.NestedConsoleServerPort); err != nil {
				dst.NestedConsoleServerPort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedConsoleServerPort = nil
	}

	// try to unmarshal data into NestedConsoleServerPortTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedConsoleServerPortTemplate)
	if err == nil {
		jsonNestedConsoleServerPortTemplate, _ := json.Marshal(dst.NestedConsoleServerPortTemplate)
		if string(jsonNestedConsoleServerPortTemplate) == "{}" { // empty struct
			dst.NestedConsoleServerPortTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedConsoleServerPortTemplate); err != nil {
				dst.NestedConsoleServerPortTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedConsoleServerPortTemplate = nil
	}

	// try to unmarshal data into NestedContact
	err = newStrictDecoder(data).Decode(&dst.NestedContact)
	if err == nil {
		jsonNestedContact, _ := json.Marshal(dst.NestedContact)
		if string(jsonNestedContact) == "{}" { // empty struct
			dst.NestedContact = nil
		} else {
			if err = validator.Validate(dst.NestedContact); err != nil {
				dst.NestedContact = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedContact = nil
	}

	// try to unmarshal data into NestedContactAssociation
	err = newStrictDecoder(data).Decode(&dst.NestedContactAssociation)
	if err == nil {
		jsonNestedContactAssociation, _ := json.Marshal(dst.NestedContactAssociation)
		if string(jsonNestedContactAssociation) == "{}" { // empty struct
			dst.NestedContactAssociation = nil
		} else {
			if err = validator.Validate(dst.NestedContactAssociation); err != nil {
				dst.NestedContactAssociation = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedContactAssociation = nil
	}

	// try to unmarshal data into NestedController
	err = newStrictDecoder(data).Decode(&dst.NestedController)
	if err == nil {
		jsonNestedController, _ := json.Marshal(dst.NestedController)
		if string(jsonNestedController) == "{}" { // empty struct
			dst.NestedController = nil
		} else {
			if err = validator.Validate(dst.NestedController); err != nil {
				dst.NestedController = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedController = nil
	}

	// try to unmarshal data into NestedControllerManagedDeviceGroup
	err = newStrictDecoder(data).Decode(&dst.NestedControllerManagedDeviceGroup)
	if err == nil {
		jsonNestedControllerManagedDeviceGroup, _ := json.Marshal(dst.NestedControllerManagedDeviceGroup)
		if string(jsonNestedControllerManagedDeviceGroup) == "{}" { // empty struct
			dst.NestedControllerManagedDeviceGroup = nil
		} else {
			if err = validator.Validate(dst.NestedControllerManagedDeviceGroup); err != nil {
				dst.NestedControllerManagedDeviceGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedControllerManagedDeviceGroup = nil
	}

	// try to unmarshal data into NestedCustomField
	err = newStrictDecoder(data).Decode(&dst.NestedCustomField)
	if err == nil {
		jsonNestedCustomField, _ := json.Marshal(dst.NestedCustomField)
		if string(jsonNestedCustomField) == "{}" { // empty struct
			dst.NestedCustomField = nil
		} else {
			if err = validator.Validate(dst.NestedCustomField); err != nil {
				dst.NestedCustomField = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCustomField = nil
	}

	// try to unmarshal data into NestedCustomLink
	err = newStrictDecoder(data).Decode(&dst.NestedCustomLink)
	if err == nil {
		jsonNestedCustomLink, _ := json.Marshal(dst.NestedCustomLink)
		if string(jsonNestedCustomLink) == "{}" { // empty struct
			dst.NestedCustomLink = nil
		} else {
			if err = validator.Validate(dst.NestedCustomLink); err != nil {
				dst.NestedCustomLink = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedCustomLink = nil
	}

	// try to unmarshal data into NestedDevice
	err = newStrictDecoder(data).Decode(&dst.NestedDevice)
	if err == nil {
		jsonNestedDevice, _ := json.Marshal(dst.NestedDevice)
		if string(jsonNestedDevice) == "{}" { // empty struct
			dst.NestedDevice = nil
		} else {
			if err = validator.Validate(dst.NestedDevice); err != nil {
				dst.NestedDevice = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedDevice = nil
	}

	// try to unmarshal data into NestedDeviceBay
	err = newStrictDecoder(data).Decode(&dst.NestedDeviceBay)
	if err == nil {
		jsonNestedDeviceBay, _ := json.Marshal(dst.NestedDeviceBay)
		if string(jsonNestedDeviceBay) == "{}" { // empty struct
			dst.NestedDeviceBay = nil
		} else {
			if err = validator.Validate(dst.NestedDeviceBay); err != nil {
				dst.NestedDeviceBay = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedDeviceBay = nil
	}

	// try to unmarshal data into NestedDeviceBayTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedDeviceBayTemplate)
	if err == nil {
		jsonNestedDeviceBayTemplate, _ := json.Marshal(dst.NestedDeviceBayTemplate)
		if string(jsonNestedDeviceBayTemplate) == "{}" { // empty struct
			dst.NestedDeviceBayTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedDeviceBayTemplate); err != nil {
				dst.NestedDeviceBayTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedDeviceBayTemplate = nil
	}

	// try to unmarshal data into NestedDeviceFamily
	err = newStrictDecoder(data).Decode(&dst.NestedDeviceFamily)
	if err == nil {
		jsonNestedDeviceFamily, _ := json.Marshal(dst.NestedDeviceFamily)
		if string(jsonNestedDeviceFamily) == "{}" { // empty struct
			dst.NestedDeviceFamily = nil
		} else {
			if err = validator.Validate(dst.NestedDeviceFamily); err != nil {
				dst.NestedDeviceFamily = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedDeviceFamily = nil
	}

	// try to unmarshal data into NestedDeviceRedundancyGroup
	err = newStrictDecoder(data).Decode(&dst.NestedDeviceRedundancyGroup)
	if err == nil {
		jsonNestedDeviceRedundancyGroup, _ := json.Marshal(dst.NestedDeviceRedundancyGroup)
		if string(jsonNestedDeviceRedundancyGroup) == "{}" { // empty struct
			dst.NestedDeviceRedundancyGroup = nil
		} else {
			if err = validator.Validate(dst.NestedDeviceRedundancyGroup); err != nil {
				dst.NestedDeviceRedundancyGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedDeviceRedundancyGroup = nil
	}

	// try to unmarshal data into NestedDeviceType
	err = newStrictDecoder(data).Decode(&dst.NestedDeviceType)
	if err == nil {
		jsonNestedDeviceType, _ := json.Marshal(dst.NestedDeviceType)
		if string(jsonNestedDeviceType) == "{}" { // empty struct
			dst.NestedDeviceType = nil
		} else {
			if err = validator.Validate(dst.NestedDeviceType); err != nil {
				dst.NestedDeviceType = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedDeviceType = nil
	}

	// try to unmarshal data into NestedDynamicGroup
	err = newStrictDecoder(data).Decode(&dst.NestedDynamicGroup)
	if err == nil {
		jsonNestedDynamicGroup, _ := json.Marshal(dst.NestedDynamicGroup)
		if string(jsonNestedDynamicGroup) == "{}" { // empty struct
			dst.NestedDynamicGroup = nil
		} else {
			if err = validator.Validate(dst.NestedDynamicGroup); err != nil {
				dst.NestedDynamicGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedDynamicGroup = nil
	}

	// try to unmarshal data into NestedExportTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedExportTemplate)
	if err == nil {
		jsonNestedExportTemplate, _ := json.Marshal(dst.NestedExportTemplate)
		if string(jsonNestedExportTemplate) == "{}" { // empty struct
			dst.NestedExportTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedExportTemplate); err != nil {
				dst.NestedExportTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedExportTemplate = nil
	}

	// try to unmarshal data into NestedExternalIntegration
	err = newStrictDecoder(data).Decode(&dst.NestedExternalIntegration)
	if err == nil {
		jsonNestedExternalIntegration, _ := json.Marshal(dst.NestedExternalIntegration)
		if string(jsonNestedExternalIntegration) == "{}" { // empty struct
			dst.NestedExternalIntegration = nil
		} else {
			if err = validator.Validate(dst.NestedExternalIntegration); err != nil {
				dst.NestedExternalIntegration = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedExternalIntegration = nil
	}

	// try to unmarshal data into NestedFileProxy
	err = newStrictDecoder(data).Decode(&dst.NestedFileProxy)
	if err == nil {
		jsonNestedFileProxy, _ := json.Marshal(dst.NestedFileProxy)
		if string(jsonNestedFileProxy) == "{}" { // empty struct
			dst.NestedFileProxy = nil
		} else {
			if err = validator.Validate(dst.NestedFileProxy); err != nil {
				dst.NestedFileProxy = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedFileProxy = nil
	}

	// try to unmarshal data into NestedFrontPort
	err = newStrictDecoder(data).Decode(&dst.NestedFrontPort)
	if err == nil {
		jsonNestedFrontPort, _ := json.Marshal(dst.NestedFrontPort)
		if string(jsonNestedFrontPort) == "{}" { // empty struct
			dst.NestedFrontPort = nil
		} else {
			if err = validator.Validate(dst.NestedFrontPort); err != nil {
				dst.NestedFrontPort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedFrontPort = nil
	}

	// try to unmarshal data into NestedFrontPortTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedFrontPortTemplate)
	if err == nil {
		jsonNestedFrontPortTemplate, _ := json.Marshal(dst.NestedFrontPortTemplate)
		if string(jsonNestedFrontPortTemplate) == "{}" { // empty struct
			dst.NestedFrontPortTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedFrontPortTemplate); err != nil {
				dst.NestedFrontPortTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedFrontPortTemplate = nil
	}

	// try to unmarshal data into NestedGitRepository
	err = newStrictDecoder(data).Decode(&dst.NestedGitRepository)
	if err == nil {
		jsonNestedGitRepository, _ := json.Marshal(dst.NestedGitRepository)
		if string(jsonNestedGitRepository) == "{}" { // empty struct
			dst.NestedGitRepository = nil
		} else {
			if err = validator.Validate(dst.NestedGitRepository); err != nil {
				dst.NestedGitRepository = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedGitRepository = nil
	}

	// try to unmarshal data into NestedGraphQLQuery
	err = newStrictDecoder(data).Decode(&dst.NestedGraphQLQuery)
	if err == nil {
		jsonNestedGraphQLQuery, _ := json.Marshal(dst.NestedGraphQLQuery)
		if string(jsonNestedGraphQLQuery) == "{}" { // empty struct
			dst.NestedGraphQLQuery = nil
		} else {
			if err = validator.Validate(dst.NestedGraphQLQuery); err != nil {
				dst.NestedGraphQLQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedGraphQLQuery = nil
	}

	// try to unmarshal data into NestedIPAddress
	err = newStrictDecoder(data).Decode(&dst.NestedIPAddress)
	if err == nil {
		jsonNestedIPAddress, _ := json.Marshal(dst.NestedIPAddress)
		if string(jsonNestedIPAddress) == "{}" { // empty struct
			dst.NestedIPAddress = nil
		} else {
			if err = validator.Validate(dst.NestedIPAddress); err != nil {
				dst.NestedIPAddress = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedIPAddress = nil
	}

	// try to unmarshal data into NestedImageAttachment
	err = newStrictDecoder(data).Decode(&dst.NestedImageAttachment)
	if err == nil {
		jsonNestedImageAttachment, _ := json.Marshal(dst.NestedImageAttachment)
		if string(jsonNestedImageAttachment) == "{}" { // empty struct
			dst.NestedImageAttachment = nil
		} else {
			if err = validator.Validate(dst.NestedImageAttachment); err != nil {
				dst.NestedImageAttachment = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedImageAttachment = nil
	}

	// try to unmarshal data into NestedInterface
	err = newStrictDecoder(data).Decode(&dst.NestedInterface)
	if err == nil {
		jsonNestedInterface, _ := json.Marshal(dst.NestedInterface)
		if string(jsonNestedInterface) == "{}" { // empty struct
			dst.NestedInterface = nil
		} else {
			if err = validator.Validate(dst.NestedInterface); err != nil {
				dst.NestedInterface = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedInterface = nil
	}

	// try to unmarshal data into NestedInterfaceRedundancyGroup
	err = newStrictDecoder(data).Decode(&dst.NestedInterfaceRedundancyGroup)
	if err == nil {
		jsonNestedInterfaceRedundancyGroup, _ := json.Marshal(dst.NestedInterfaceRedundancyGroup)
		if string(jsonNestedInterfaceRedundancyGroup) == "{}" { // empty struct
			dst.NestedInterfaceRedundancyGroup = nil
		} else {
			if err = validator.Validate(dst.NestedInterfaceRedundancyGroup); err != nil {
				dst.NestedInterfaceRedundancyGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedInterfaceRedundancyGroup = nil
	}

	// try to unmarshal data into NestedInterfaceTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedInterfaceTemplate)
	if err == nil {
		jsonNestedInterfaceTemplate, _ := json.Marshal(dst.NestedInterfaceTemplate)
		if string(jsonNestedInterfaceTemplate) == "{}" { // empty struct
			dst.NestedInterfaceTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedInterfaceTemplate); err != nil {
				dst.NestedInterfaceTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedInterfaceTemplate = nil
	}

	// try to unmarshal data into NestedInventoryItem
	err = newStrictDecoder(data).Decode(&dst.NestedInventoryItem)
	if err == nil {
		jsonNestedInventoryItem, _ := json.Marshal(dst.NestedInventoryItem)
		if string(jsonNestedInventoryItem) == "{}" { // empty struct
			dst.NestedInventoryItem = nil
		} else {
			if err = validator.Validate(dst.NestedInventoryItem); err != nil {
				dst.NestedInventoryItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedInventoryItem = nil
	}

	// try to unmarshal data into NestedJob
	err = newStrictDecoder(data).Decode(&dst.NestedJob)
	if err == nil {
		jsonNestedJob, _ := json.Marshal(dst.NestedJob)
		if string(jsonNestedJob) == "{}" { // empty struct
			dst.NestedJob = nil
		} else {
			if err = validator.Validate(dst.NestedJob); err != nil {
				dst.NestedJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedJob = nil
	}

	// try to unmarshal data into NestedJobButton
	err = newStrictDecoder(data).Decode(&dst.NestedJobButton)
	if err == nil {
		jsonNestedJobButton, _ := json.Marshal(dst.NestedJobButton)
		if string(jsonNestedJobButton) == "{}" { // empty struct
			dst.NestedJobButton = nil
		} else {
			if err = validator.Validate(dst.NestedJobButton); err != nil {
				dst.NestedJobButton = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedJobButton = nil
	}

	// try to unmarshal data into NestedJobHook
	err = newStrictDecoder(data).Decode(&dst.NestedJobHook)
	if err == nil {
		jsonNestedJobHook, _ := json.Marshal(dst.NestedJobHook)
		if string(jsonNestedJobHook) == "{}" { // empty struct
			dst.NestedJobHook = nil
		} else {
			if err = validator.Validate(dst.NestedJobHook); err != nil {
				dst.NestedJobHook = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedJobHook = nil
	}

	// try to unmarshal data into NestedJobResult
	err = newStrictDecoder(data).Decode(&dst.NestedJobResult)
	if err == nil {
		jsonNestedJobResult, _ := json.Marshal(dst.NestedJobResult)
		if string(jsonNestedJobResult) == "{}" { // empty struct
			dst.NestedJobResult = nil
		} else {
			if err = validator.Validate(dst.NestedJobResult); err != nil {
				dst.NestedJobResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedJobResult = nil
	}

	// try to unmarshal data into NestedLocation
	err = newStrictDecoder(data).Decode(&dst.NestedLocation)
	if err == nil {
		jsonNestedLocation, _ := json.Marshal(dst.NestedLocation)
		if string(jsonNestedLocation) == "{}" { // empty struct
			dst.NestedLocation = nil
		} else {
			if err = validator.Validate(dst.NestedLocation); err != nil {
				dst.NestedLocation = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedLocation = nil
	}

	// try to unmarshal data into NestedLocationType
	err = newStrictDecoder(data).Decode(&dst.NestedLocationType)
	if err == nil {
		jsonNestedLocationType, _ := json.Marshal(dst.NestedLocationType)
		if string(jsonNestedLocationType) == "{}" { // empty struct
			dst.NestedLocationType = nil
		} else {
			if err = validator.Validate(dst.NestedLocationType); err != nil {
				dst.NestedLocationType = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedLocationType = nil
	}

	// try to unmarshal data into NestedManufacturer
	err = newStrictDecoder(data).Decode(&dst.NestedManufacturer)
	if err == nil {
		jsonNestedManufacturer, _ := json.Marshal(dst.NestedManufacturer)
		if string(jsonNestedManufacturer) == "{}" { // empty struct
			dst.NestedManufacturer = nil
		} else {
			if err = validator.Validate(dst.NestedManufacturer); err != nil {
				dst.NestedManufacturer = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedManufacturer = nil
	}

	// try to unmarshal data into NestedMetadataType
	err = newStrictDecoder(data).Decode(&dst.NestedMetadataType)
	if err == nil {
		jsonNestedMetadataType, _ := json.Marshal(dst.NestedMetadataType)
		if string(jsonNestedMetadataType) == "{}" { // empty struct
			dst.NestedMetadataType = nil
		} else {
			if err = validator.Validate(dst.NestedMetadataType); err != nil {
				dst.NestedMetadataType = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedMetadataType = nil
	}

	// try to unmarshal data into NestedModule
	err = newStrictDecoder(data).Decode(&dst.NestedModule)
	if err == nil {
		jsonNestedModule, _ := json.Marshal(dst.NestedModule)
		if string(jsonNestedModule) == "{}" { // empty struct
			dst.NestedModule = nil
		} else {
			if err = validator.Validate(dst.NestedModule); err != nil {
				dst.NestedModule = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedModule = nil
	}

	// try to unmarshal data into NestedModuleBay
	err = newStrictDecoder(data).Decode(&dst.NestedModuleBay)
	if err == nil {
		jsonNestedModuleBay, _ := json.Marshal(dst.NestedModuleBay)
		if string(jsonNestedModuleBay) == "{}" { // empty struct
			dst.NestedModuleBay = nil
		} else {
			if err = validator.Validate(dst.NestedModuleBay); err != nil {
				dst.NestedModuleBay = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedModuleBay = nil
	}

	// try to unmarshal data into NestedModuleBayTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedModuleBayTemplate)
	if err == nil {
		jsonNestedModuleBayTemplate, _ := json.Marshal(dst.NestedModuleBayTemplate)
		if string(jsonNestedModuleBayTemplate) == "{}" { // empty struct
			dst.NestedModuleBayTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedModuleBayTemplate); err != nil {
				dst.NestedModuleBayTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedModuleBayTemplate = nil
	}

	// try to unmarshal data into NestedModuleType
	err = newStrictDecoder(data).Decode(&dst.NestedModuleType)
	if err == nil {
		jsonNestedModuleType, _ := json.Marshal(dst.NestedModuleType)
		if string(jsonNestedModuleType) == "{}" { // empty struct
			dst.NestedModuleType = nil
		} else {
			if err = validator.Validate(dst.NestedModuleType); err != nil {
				dst.NestedModuleType = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedModuleType = nil
	}

	// try to unmarshal data into NestedNamespace
	err = newStrictDecoder(data).Decode(&dst.NestedNamespace)
	if err == nil {
		jsonNestedNamespace, _ := json.Marshal(dst.NestedNamespace)
		if string(jsonNestedNamespace) == "{}" { // empty struct
			dst.NestedNamespace = nil
		} else {
			if err = validator.Validate(dst.NestedNamespace); err != nil {
				dst.NestedNamespace = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedNamespace = nil
	}

	// try to unmarshal data into NestedObjectChange
	err = newStrictDecoder(data).Decode(&dst.NestedObjectChange)
	if err == nil {
		jsonNestedObjectChange, _ := json.Marshal(dst.NestedObjectChange)
		if string(jsonNestedObjectChange) == "{}" { // empty struct
			dst.NestedObjectChange = nil
		} else {
			if err = validator.Validate(dst.NestedObjectChange); err != nil {
				dst.NestedObjectChange = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedObjectChange = nil
	}

	// try to unmarshal data into NestedObjectMetadata
	err = newStrictDecoder(data).Decode(&dst.NestedObjectMetadata)
	if err == nil {
		jsonNestedObjectMetadata, _ := json.Marshal(dst.NestedObjectMetadata)
		if string(jsonNestedObjectMetadata) == "{}" { // empty struct
			dst.NestedObjectMetadata = nil
		} else {
			if err = validator.Validate(dst.NestedObjectMetadata); err != nil {
				dst.NestedObjectMetadata = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedObjectMetadata = nil
	}

	// try to unmarshal data into NestedPlatform
	err = newStrictDecoder(data).Decode(&dst.NestedPlatform)
	if err == nil {
		jsonNestedPlatform, _ := json.Marshal(dst.NestedPlatform)
		if string(jsonNestedPlatform) == "{}" { // empty struct
			dst.NestedPlatform = nil
		} else {
			if err = validator.Validate(dst.NestedPlatform); err != nil {
				dst.NestedPlatform = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPlatform = nil
	}

	// try to unmarshal data into NestedPowerFeed
	err = newStrictDecoder(data).Decode(&dst.NestedPowerFeed)
	if err == nil {
		jsonNestedPowerFeed, _ := json.Marshal(dst.NestedPowerFeed)
		if string(jsonNestedPowerFeed) == "{}" { // empty struct
			dst.NestedPowerFeed = nil
		} else {
			if err = validator.Validate(dst.NestedPowerFeed); err != nil {
				dst.NestedPowerFeed = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPowerFeed = nil
	}

	// try to unmarshal data into NestedPowerOutlet
	err = newStrictDecoder(data).Decode(&dst.NestedPowerOutlet)
	if err == nil {
		jsonNestedPowerOutlet, _ := json.Marshal(dst.NestedPowerOutlet)
		if string(jsonNestedPowerOutlet) == "{}" { // empty struct
			dst.NestedPowerOutlet = nil
		} else {
			if err = validator.Validate(dst.NestedPowerOutlet); err != nil {
				dst.NestedPowerOutlet = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPowerOutlet = nil
	}

	// try to unmarshal data into NestedPowerOutletTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedPowerOutletTemplate)
	if err == nil {
		jsonNestedPowerOutletTemplate, _ := json.Marshal(dst.NestedPowerOutletTemplate)
		if string(jsonNestedPowerOutletTemplate) == "{}" { // empty struct
			dst.NestedPowerOutletTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedPowerOutletTemplate); err != nil {
				dst.NestedPowerOutletTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPowerOutletTemplate = nil
	}

	// try to unmarshal data into NestedPowerPanel
	err = newStrictDecoder(data).Decode(&dst.NestedPowerPanel)
	if err == nil {
		jsonNestedPowerPanel, _ := json.Marshal(dst.NestedPowerPanel)
		if string(jsonNestedPowerPanel) == "{}" { // empty struct
			dst.NestedPowerPanel = nil
		} else {
			if err = validator.Validate(dst.NestedPowerPanel); err != nil {
				dst.NestedPowerPanel = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPowerPanel = nil
	}

	// try to unmarshal data into NestedPowerPort
	err = newStrictDecoder(data).Decode(&dst.NestedPowerPort)
	if err == nil {
		jsonNestedPowerPort, _ := json.Marshal(dst.NestedPowerPort)
		if string(jsonNestedPowerPort) == "{}" { // empty struct
			dst.NestedPowerPort = nil
		} else {
			if err = validator.Validate(dst.NestedPowerPort); err != nil {
				dst.NestedPowerPort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPowerPort = nil
	}

	// try to unmarshal data into NestedPowerPortTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedPowerPortTemplate)
	if err == nil {
		jsonNestedPowerPortTemplate, _ := json.Marshal(dst.NestedPowerPortTemplate)
		if string(jsonNestedPowerPortTemplate) == "{}" { // empty struct
			dst.NestedPowerPortTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedPowerPortTemplate); err != nil {
				dst.NestedPowerPortTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPowerPortTemplate = nil
	}

	// try to unmarshal data into NestedPrefix
	err = newStrictDecoder(data).Decode(&dst.NestedPrefix)
	if err == nil {
		jsonNestedPrefix, _ := json.Marshal(dst.NestedPrefix)
		if string(jsonNestedPrefix) == "{}" { // empty struct
			dst.NestedPrefix = nil
		} else {
			if err = validator.Validate(dst.NestedPrefix); err != nil {
				dst.NestedPrefix = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedPrefix = nil
	}

	// try to unmarshal data into NestedProvider
	err = newStrictDecoder(data).Decode(&dst.NestedProvider)
	if err == nil {
		jsonNestedProvider, _ := json.Marshal(dst.NestedProvider)
		if string(jsonNestedProvider) == "{}" { // empty struct
			dst.NestedProvider = nil
		} else {
			if err = validator.Validate(dst.NestedProvider); err != nil {
				dst.NestedProvider = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedProvider = nil
	}

	// try to unmarshal data into NestedProviderNetwork
	err = newStrictDecoder(data).Decode(&dst.NestedProviderNetwork)
	if err == nil {
		jsonNestedProviderNetwork, _ := json.Marshal(dst.NestedProviderNetwork)
		if string(jsonNestedProviderNetwork) == "{}" { // empty struct
			dst.NestedProviderNetwork = nil
		} else {
			if err = validator.Validate(dst.NestedProviderNetwork); err != nil {
				dst.NestedProviderNetwork = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedProviderNetwork = nil
	}

	// try to unmarshal data into NestedRIR
	err = newStrictDecoder(data).Decode(&dst.NestedRIR)
	if err == nil {
		jsonNestedRIR, _ := json.Marshal(dst.NestedRIR)
		if string(jsonNestedRIR) == "{}" { // empty struct
			dst.NestedRIR = nil
		} else {
			if err = validator.Validate(dst.NestedRIR); err != nil {
				dst.NestedRIR = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRIR = nil
	}

	// try to unmarshal data into NestedRack
	err = newStrictDecoder(data).Decode(&dst.NestedRack)
	if err == nil {
		jsonNestedRack, _ := json.Marshal(dst.NestedRack)
		if string(jsonNestedRack) == "{}" { // empty struct
			dst.NestedRack = nil
		} else {
			if err = validator.Validate(dst.NestedRack); err != nil {
				dst.NestedRack = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRack = nil
	}

	// try to unmarshal data into NestedRackGroup
	err = newStrictDecoder(data).Decode(&dst.NestedRackGroup)
	if err == nil {
		jsonNestedRackGroup, _ := json.Marshal(dst.NestedRackGroup)
		if string(jsonNestedRackGroup) == "{}" { // empty struct
			dst.NestedRackGroup = nil
		} else {
			if err = validator.Validate(dst.NestedRackGroup); err != nil {
				dst.NestedRackGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRackGroup = nil
	}

	// try to unmarshal data into NestedRackReservation
	err = newStrictDecoder(data).Decode(&dst.NestedRackReservation)
	if err == nil {
		jsonNestedRackReservation, _ := json.Marshal(dst.NestedRackReservation)
		if string(jsonNestedRackReservation) == "{}" { // empty struct
			dst.NestedRackReservation = nil
		} else {
			if err = validator.Validate(dst.NestedRackReservation); err != nil {
				dst.NestedRackReservation = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRackReservation = nil
	}

	// try to unmarshal data into NestedRearPort
	err = newStrictDecoder(data).Decode(&dst.NestedRearPort)
	if err == nil {
		jsonNestedRearPort, _ := json.Marshal(dst.NestedRearPort)
		if string(jsonNestedRearPort) == "{}" { // empty struct
			dst.NestedRearPort = nil
		} else {
			if err = validator.Validate(dst.NestedRearPort); err != nil {
				dst.NestedRearPort = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRearPort = nil
	}

	// try to unmarshal data into NestedRearPortTemplate
	err = newStrictDecoder(data).Decode(&dst.NestedRearPortTemplate)
	if err == nil {
		jsonNestedRearPortTemplate, _ := json.Marshal(dst.NestedRearPortTemplate)
		if string(jsonNestedRearPortTemplate) == "{}" { // empty struct
			dst.NestedRearPortTemplate = nil
		} else {
			if err = validator.Validate(dst.NestedRearPortTemplate); err != nil {
				dst.NestedRearPortTemplate = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRearPortTemplate = nil
	}

	// try to unmarshal data into NestedRelationship
	err = newStrictDecoder(data).Decode(&dst.NestedRelationship)
	if err == nil {
		jsonNestedRelationship, _ := json.Marshal(dst.NestedRelationship)
		if string(jsonNestedRelationship) == "{}" { // empty struct
			dst.NestedRelationship = nil
		} else {
			if err = validator.Validate(dst.NestedRelationship); err != nil {
				dst.NestedRelationship = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRelationship = nil
	}

	// try to unmarshal data into NestedRelationshipAssociation
	err = newStrictDecoder(data).Decode(&dst.NestedRelationshipAssociation)
	if err == nil {
		jsonNestedRelationshipAssociation, _ := json.Marshal(dst.NestedRelationshipAssociation)
		if string(jsonNestedRelationshipAssociation) == "{}" { // empty struct
			dst.NestedRelationshipAssociation = nil
		} else {
			if err = validator.Validate(dst.NestedRelationshipAssociation); err != nil {
				dst.NestedRelationshipAssociation = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRelationshipAssociation = nil
	}

	// try to unmarshal data into NestedRole
	err = newStrictDecoder(data).Decode(&dst.NestedRole)
	if err == nil {
		jsonNestedRole, _ := json.Marshal(dst.NestedRole)
		if string(jsonNestedRole) == "{}" { // empty struct
			dst.NestedRole = nil
		} else {
			if err = validator.Validate(dst.NestedRole); err != nil {
				dst.NestedRole = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRole = nil
	}

	// try to unmarshal data into NestedRouteTarget
	err = newStrictDecoder(data).Decode(&dst.NestedRouteTarget)
	if err == nil {
		jsonNestedRouteTarget, _ := json.Marshal(dst.NestedRouteTarget)
		if string(jsonNestedRouteTarget) == "{}" { // empty struct
			dst.NestedRouteTarget = nil
		} else {
			if err = validator.Validate(dst.NestedRouteTarget); err != nil {
				dst.NestedRouteTarget = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedRouteTarget = nil
	}

	// try to unmarshal data into NestedSavedView
	err = newStrictDecoder(data).Decode(&dst.NestedSavedView)
	if err == nil {
		jsonNestedSavedView, _ := json.Marshal(dst.NestedSavedView)
		if string(jsonNestedSavedView) == "{}" { // empty struct
			dst.NestedSavedView = nil
		} else {
			if err = validator.Validate(dst.NestedSavedView); err != nil {
				dst.NestedSavedView = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedSavedView = nil
	}

	// try to unmarshal data into NestedScheduledJob
	err = newStrictDecoder(data).Decode(&dst.NestedScheduledJob)
	if err == nil {
		jsonNestedScheduledJob, _ := json.Marshal(dst.NestedScheduledJob)
		if string(jsonNestedScheduledJob) == "{}" { // empty struct
			dst.NestedScheduledJob = nil
		} else {
			if err = validator.Validate(dst.NestedScheduledJob); err != nil {
				dst.NestedScheduledJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedScheduledJob = nil
	}

	// try to unmarshal data into NestedSecret
	err = newStrictDecoder(data).Decode(&dst.NestedSecret)
	if err == nil {
		jsonNestedSecret, _ := json.Marshal(dst.NestedSecret)
		if string(jsonNestedSecret) == "{}" { // empty struct
			dst.NestedSecret = nil
		} else {
			if err = validator.Validate(dst.NestedSecret); err != nil {
				dst.NestedSecret = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedSecret = nil
	}

	// try to unmarshal data into NestedSecretsGroup
	err = newStrictDecoder(data).Decode(&dst.NestedSecretsGroup)
	if err == nil {
		jsonNestedSecretsGroup, _ := json.Marshal(dst.NestedSecretsGroup)
		if string(jsonNestedSecretsGroup) == "{}" { // empty struct
			dst.NestedSecretsGroup = nil
		} else {
			if err = validator.Validate(dst.NestedSecretsGroup); err != nil {
				dst.NestedSecretsGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedSecretsGroup = nil
	}

	// try to unmarshal data into NestedSecretsGroupAssociation
	err = newStrictDecoder(data).Decode(&dst.NestedSecretsGroupAssociation)
	if err == nil {
		jsonNestedSecretsGroupAssociation, _ := json.Marshal(dst.NestedSecretsGroupAssociation)
		if string(jsonNestedSecretsGroupAssociation) == "{}" { // empty struct
			dst.NestedSecretsGroupAssociation = nil
		} else {
			if err = validator.Validate(dst.NestedSecretsGroupAssociation); err != nil {
				dst.NestedSecretsGroupAssociation = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedSecretsGroupAssociation = nil
	}

	// try to unmarshal data into NestedService
	err = newStrictDecoder(data).Decode(&dst.NestedService)
	if err == nil {
		jsonNestedService, _ := json.Marshal(dst.NestedService)
		if string(jsonNestedService) == "{}" { // empty struct
			dst.NestedService = nil
		} else {
			if err = validator.Validate(dst.NestedService); err != nil {
				dst.NestedService = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedService = nil
	}

	// try to unmarshal data into NestedSoftwareImageFile
	err = newStrictDecoder(data).Decode(&dst.NestedSoftwareImageFile)
	if err == nil {
		jsonNestedSoftwareImageFile, _ := json.Marshal(dst.NestedSoftwareImageFile)
		if string(jsonNestedSoftwareImageFile) == "{}" { // empty struct
			dst.NestedSoftwareImageFile = nil
		} else {
			if err = validator.Validate(dst.NestedSoftwareImageFile); err != nil {
				dst.NestedSoftwareImageFile = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedSoftwareImageFile = nil
	}

	// try to unmarshal data into NestedSoftwareVersion
	err = newStrictDecoder(data).Decode(&dst.NestedSoftwareVersion)
	if err == nil {
		jsonNestedSoftwareVersion, _ := json.Marshal(dst.NestedSoftwareVersion)
		if string(jsonNestedSoftwareVersion) == "{}" { // empty struct
			dst.NestedSoftwareVersion = nil
		} else {
			if err = validator.Validate(dst.NestedSoftwareVersion); err != nil {
				dst.NestedSoftwareVersion = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedSoftwareVersion = nil
	}

	// try to unmarshal data into NestedStaticGroupAssociation
	err = newStrictDecoder(data).Decode(&dst.NestedStaticGroupAssociation)
	if err == nil {
		jsonNestedStaticGroupAssociation, _ := json.Marshal(dst.NestedStaticGroupAssociation)
		if string(jsonNestedStaticGroupAssociation) == "{}" { // empty struct
			dst.NestedStaticGroupAssociation = nil
		} else {
			if err = validator.Validate(dst.NestedStaticGroupAssociation); err != nil {
				dst.NestedStaticGroupAssociation = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedStaticGroupAssociation = nil
	}

	// try to unmarshal data into NestedStatus
	err = newStrictDecoder(data).Decode(&dst.NestedStatus)
	if err == nil {
		jsonNestedStatus, _ := json.Marshal(dst.NestedStatus)
		if string(jsonNestedStatus) == "{}" { // empty struct
			dst.NestedStatus = nil
		} else {
			if err = validator.Validate(dst.NestedStatus); err != nil {
				dst.NestedStatus = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedStatus = nil
	}

	// try to unmarshal data into NestedTag
	err = newStrictDecoder(data).Decode(&dst.NestedTag)
	if err == nil {
		jsonNestedTag, _ := json.Marshal(dst.NestedTag)
		if string(jsonNestedTag) == "{}" { // empty struct
			dst.NestedTag = nil
		} else {
			if err = validator.Validate(dst.NestedTag); err != nil {
				dst.NestedTag = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedTag = nil
	}

	// try to unmarshal data into NestedTeam
	err = newStrictDecoder(data).Decode(&dst.NestedTeam)
	if err == nil {
		jsonNestedTeam, _ := json.Marshal(dst.NestedTeam)
		if string(jsonNestedTeam) == "{}" { // empty struct
			dst.NestedTeam = nil
		} else {
			if err = validator.Validate(dst.NestedTeam); err != nil {
				dst.NestedTeam = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedTeam = nil
	}

	// try to unmarshal data into NestedTenant
	err = newStrictDecoder(data).Decode(&dst.NestedTenant)
	if err == nil {
		jsonNestedTenant, _ := json.Marshal(dst.NestedTenant)
		if string(jsonNestedTenant) == "{}" { // empty struct
			dst.NestedTenant = nil
		} else {
			if err = validator.Validate(dst.NestedTenant); err != nil {
				dst.NestedTenant = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedTenant = nil
	}

	// try to unmarshal data into NestedTenantGroup
	err = newStrictDecoder(data).Decode(&dst.NestedTenantGroup)
	if err == nil {
		jsonNestedTenantGroup, _ := json.Marshal(dst.NestedTenantGroup)
		if string(jsonNestedTenantGroup) == "{}" { // empty struct
			dst.NestedTenantGroup = nil
		} else {
			if err = validator.Validate(dst.NestedTenantGroup); err != nil {
				dst.NestedTenantGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedTenantGroup = nil
	}

	// try to unmarshal data into NestedVLAN
	err = newStrictDecoder(data).Decode(&dst.NestedVLAN)
	if err == nil {
		jsonNestedVLAN, _ := json.Marshal(dst.NestedVLAN)
		if string(jsonNestedVLAN) == "{}" { // empty struct
			dst.NestedVLAN = nil
		} else {
			if err = validator.Validate(dst.NestedVLAN); err != nil {
				dst.NestedVLAN = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedVLAN = nil
	}

	// try to unmarshal data into NestedVLANGroup
	err = newStrictDecoder(data).Decode(&dst.NestedVLANGroup)
	if err == nil {
		jsonNestedVLANGroup, _ := json.Marshal(dst.NestedVLANGroup)
		if string(jsonNestedVLANGroup) == "{}" { // empty struct
			dst.NestedVLANGroup = nil
		} else {
			if err = validator.Validate(dst.NestedVLANGroup); err != nil {
				dst.NestedVLANGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedVLANGroup = nil
	}

	// try to unmarshal data into NestedVMInterface
	err = newStrictDecoder(data).Decode(&dst.NestedVMInterface)
	if err == nil {
		jsonNestedVMInterface, _ := json.Marshal(dst.NestedVMInterface)
		if string(jsonNestedVMInterface) == "{}" { // empty struct
			dst.NestedVMInterface = nil
		} else {
			if err = validator.Validate(dst.NestedVMInterface); err != nil {
				dst.NestedVMInterface = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedVMInterface = nil
	}

	// try to unmarshal data into NestedVRF
	err = newStrictDecoder(data).Decode(&dst.NestedVRF)
	if err == nil {
		jsonNestedVRF, _ := json.Marshal(dst.NestedVRF)
		if string(jsonNestedVRF) == "{}" { // empty struct
			dst.NestedVRF = nil
		} else {
			if err = validator.Validate(dst.NestedVRF); err != nil {
				dst.NestedVRF = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedVRF = nil
	}

	// try to unmarshal data into NestedVirtualChassis
	err = newStrictDecoder(data).Decode(&dst.NestedVirtualChassis)
	if err == nil {
		jsonNestedVirtualChassis, _ := json.Marshal(dst.NestedVirtualChassis)
		if string(jsonNestedVirtualChassis) == "{}" { // empty struct
			dst.NestedVirtualChassis = nil
		} else {
			if err = validator.Validate(dst.NestedVirtualChassis); err != nil {
				dst.NestedVirtualChassis = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedVirtualChassis = nil
	}

	// try to unmarshal data into NestedVirtualMachine
	err = newStrictDecoder(data).Decode(&dst.NestedVirtualMachine)
	if err == nil {
		jsonNestedVirtualMachine, _ := json.Marshal(dst.NestedVirtualMachine)
		if string(jsonNestedVirtualMachine) == "{}" { // empty struct
			dst.NestedVirtualMachine = nil
		} else {
			if err = validator.Validate(dst.NestedVirtualMachine); err != nil {
				dst.NestedVirtualMachine = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedVirtualMachine = nil
	}

	// try to unmarshal data into NestedWebhook
	err = newStrictDecoder(data).Decode(&dst.NestedWebhook)
	if err == nil {
		jsonNestedWebhook, _ := json.Marshal(dst.NestedWebhook)
		if string(jsonNestedWebhook) == "{}" { // empty struct
			dst.NestedWebhook = nil
		} else {
			if err = validator.Validate(dst.NestedWebhook); err != nil {
				dst.NestedWebhook = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedWebhook = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NestedCable = nil
		dst.NestedCircuit = nil
		dst.NestedCircuitTermination = nil
		dst.NestedCircuitType = nil
		dst.NestedCloudAccount = nil
		dst.NestedCloudNetwork = nil
		dst.NestedCloudResourceType = nil
		dst.NestedCloudService = nil
		dst.NestedCluster = nil
		dst.NestedClusterGroup = nil
		dst.NestedClusterType = nil
		dst.NestedComputedField = nil
		dst.NestedConfigContext = nil
		dst.NestedConfigContextSchema = nil
		dst.NestedConsolePort = nil
		dst.NestedConsolePortTemplate = nil
		dst.NestedConsoleServerPort = nil
		dst.NestedConsoleServerPortTemplate = nil
		dst.NestedContact = nil
		dst.NestedContactAssociation = nil
		dst.NestedController = nil
		dst.NestedControllerManagedDeviceGroup = nil
		dst.NestedCustomField = nil
		dst.NestedCustomLink = nil
		dst.NestedDevice = nil
		dst.NestedDeviceBay = nil
		dst.NestedDeviceBayTemplate = nil
		dst.NestedDeviceFamily = nil
		dst.NestedDeviceRedundancyGroup = nil
		dst.NestedDeviceType = nil
		dst.NestedDynamicGroup = nil
		dst.NestedExportTemplate = nil
		dst.NestedExternalIntegration = nil
		dst.NestedFileProxy = nil
		dst.NestedFrontPort = nil
		dst.NestedFrontPortTemplate = nil
		dst.NestedGitRepository = nil
		dst.NestedGraphQLQuery = nil
		dst.NestedIPAddress = nil
		dst.NestedImageAttachment = nil
		dst.NestedInterface = nil
		dst.NestedInterfaceRedundancyGroup = nil
		dst.NestedInterfaceTemplate = nil
		dst.NestedInventoryItem = nil
		dst.NestedJob = nil
		dst.NestedJobButton = nil
		dst.NestedJobHook = nil
		dst.NestedJobResult = nil
		dst.NestedLocation = nil
		dst.NestedLocationType = nil
		dst.NestedManufacturer = nil
		dst.NestedMetadataType = nil
		dst.NestedModule = nil
		dst.NestedModuleBay = nil
		dst.NestedModuleBayTemplate = nil
		dst.NestedModuleType = nil
		dst.NestedNamespace = nil
		dst.NestedObjectChange = nil
		dst.NestedObjectMetadata = nil
		dst.NestedPlatform = nil
		dst.NestedPowerFeed = nil
		dst.NestedPowerOutlet = nil
		dst.NestedPowerOutletTemplate = nil
		dst.NestedPowerPanel = nil
		dst.NestedPowerPort = nil
		dst.NestedPowerPortTemplate = nil
		dst.NestedPrefix = nil
		dst.NestedProvider = nil
		dst.NestedProviderNetwork = nil
		dst.NestedRIR = nil
		dst.NestedRack = nil
		dst.NestedRackGroup = nil
		dst.NestedRackReservation = nil
		dst.NestedRearPort = nil
		dst.NestedRearPortTemplate = nil
		dst.NestedRelationship = nil
		dst.NestedRelationshipAssociation = nil
		dst.NestedRole = nil
		dst.NestedRouteTarget = nil
		dst.NestedSavedView = nil
		dst.NestedScheduledJob = nil
		dst.NestedSecret = nil
		dst.NestedSecretsGroup = nil
		dst.NestedSecretsGroupAssociation = nil
		dst.NestedService = nil
		dst.NestedSoftwareImageFile = nil
		dst.NestedSoftwareVersion = nil
		dst.NestedStaticGroupAssociation = nil
		dst.NestedStatus = nil
		dst.NestedTag = nil
		dst.NestedTeam = nil
		dst.NestedTenant = nil
		dst.NestedTenantGroup = nil
		dst.NestedVLAN = nil
		dst.NestedVLANGroup = nil
		dst.NestedVMInterface = nil
		dst.NestedVRF = nil
		dst.NestedVirtualChassis = nil
		dst.NestedVirtualMachine = nil
		dst.NestedWebhook = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ObjectMetadataAssignedObject)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ObjectMetadataAssignedObject)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ObjectMetadataAssignedObject) MarshalJSON() ([]byte, error) {
	if src.NestedCable != nil {
		return json.Marshal(&src.NestedCable)
	}

	if src.NestedCircuit != nil {
		return json.Marshal(&src.NestedCircuit)
	}

	if src.NestedCircuitTermination != nil {
		return json.Marshal(&src.NestedCircuitTermination)
	}

	if src.NestedCircuitType != nil {
		return json.Marshal(&src.NestedCircuitType)
	}

	if src.NestedCloudAccount != nil {
		return json.Marshal(&src.NestedCloudAccount)
	}

	if src.NestedCloudNetwork != nil {
		return json.Marshal(&src.NestedCloudNetwork)
	}

	if src.NestedCloudResourceType != nil {
		return json.Marshal(&src.NestedCloudResourceType)
	}

	if src.NestedCloudService != nil {
		return json.Marshal(&src.NestedCloudService)
	}

	if src.NestedCluster != nil {
		return json.Marshal(&src.NestedCluster)
	}

	if src.NestedClusterGroup != nil {
		return json.Marshal(&src.NestedClusterGroup)
	}

	if src.NestedClusterType != nil {
		return json.Marshal(&src.NestedClusterType)
	}

	if src.NestedComputedField != nil {
		return json.Marshal(&src.NestedComputedField)
	}

	if src.NestedConfigContext != nil {
		return json.Marshal(&src.NestedConfigContext)
	}

	if src.NestedConfigContextSchema != nil {
		return json.Marshal(&src.NestedConfigContextSchema)
	}

	if src.NestedConsolePort != nil {
		return json.Marshal(&src.NestedConsolePort)
	}

	if src.NestedConsolePortTemplate != nil {
		return json.Marshal(&src.NestedConsolePortTemplate)
	}

	if src.NestedConsoleServerPort != nil {
		return json.Marshal(&src.NestedConsoleServerPort)
	}

	if src.NestedConsoleServerPortTemplate != nil {
		return json.Marshal(&src.NestedConsoleServerPortTemplate)
	}

	if src.NestedContact != nil {
		return json.Marshal(&src.NestedContact)
	}

	if src.NestedContactAssociation != nil {
		return json.Marshal(&src.NestedContactAssociation)
	}

	if src.NestedController != nil {
		return json.Marshal(&src.NestedController)
	}

	if src.NestedControllerManagedDeviceGroup != nil {
		return json.Marshal(&src.NestedControllerManagedDeviceGroup)
	}

	if src.NestedCustomField != nil {
		return json.Marshal(&src.NestedCustomField)
	}

	if src.NestedCustomLink != nil {
		return json.Marshal(&src.NestedCustomLink)
	}

	if src.NestedDevice != nil {
		return json.Marshal(&src.NestedDevice)
	}

	if src.NestedDeviceBay != nil {
		return json.Marshal(&src.NestedDeviceBay)
	}

	if src.NestedDeviceBayTemplate != nil {
		return json.Marshal(&src.NestedDeviceBayTemplate)
	}

	if src.NestedDeviceFamily != nil {
		return json.Marshal(&src.NestedDeviceFamily)
	}

	if src.NestedDeviceRedundancyGroup != nil {
		return json.Marshal(&src.NestedDeviceRedundancyGroup)
	}

	if src.NestedDeviceType != nil {
		return json.Marshal(&src.NestedDeviceType)
	}

	if src.NestedDynamicGroup != nil {
		return json.Marshal(&src.NestedDynamicGroup)
	}

	if src.NestedExportTemplate != nil {
		return json.Marshal(&src.NestedExportTemplate)
	}

	if src.NestedExternalIntegration != nil {
		return json.Marshal(&src.NestedExternalIntegration)
	}

	if src.NestedFileProxy != nil {
		return json.Marshal(&src.NestedFileProxy)
	}

	if src.NestedFrontPort != nil {
		return json.Marshal(&src.NestedFrontPort)
	}

	if src.NestedFrontPortTemplate != nil {
		return json.Marshal(&src.NestedFrontPortTemplate)
	}

	if src.NestedGitRepository != nil {
		return json.Marshal(&src.NestedGitRepository)
	}

	if src.NestedGraphQLQuery != nil {
		return json.Marshal(&src.NestedGraphQLQuery)
	}

	if src.NestedIPAddress != nil {
		return json.Marshal(&src.NestedIPAddress)
	}

	if src.NestedImageAttachment != nil {
		return json.Marshal(&src.NestedImageAttachment)
	}

	if src.NestedInterface != nil {
		return json.Marshal(&src.NestedInterface)
	}

	if src.NestedInterfaceRedundancyGroup != nil {
		return json.Marshal(&src.NestedInterfaceRedundancyGroup)
	}

	if src.NestedInterfaceTemplate != nil {
		return json.Marshal(&src.NestedInterfaceTemplate)
	}

	if src.NestedInventoryItem != nil {
		return json.Marshal(&src.NestedInventoryItem)
	}

	if src.NestedJob != nil {
		return json.Marshal(&src.NestedJob)
	}

	if src.NestedJobButton != nil {
		return json.Marshal(&src.NestedJobButton)
	}

	if src.NestedJobHook != nil {
		return json.Marshal(&src.NestedJobHook)
	}

	if src.NestedJobResult != nil {
		return json.Marshal(&src.NestedJobResult)
	}

	if src.NestedLocation != nil {
		return json.Marshal(&src.NestedLocation)
	}

	if src.NestedLocationType != nil {
		return json.Marshal(&src.NestedLocationType)
	}

	if src.NestedManufacturer != nil {
		return json.Marshal(&src.NestedManufacturer)
	}

	if src.NestedMetadataType != nil {
		return json.Marshal(&src.NestedMetadataType)
	}

	if src.NestedModule != nil {
		return json.Marshal(&src.NestedModule)
	}

	if src.NestedModuleBay != nil {
		return json.Marshal(&src.NestedModuleBay)
	}

	if src.NestedModuleBayTemplate != nil {
		return json.Marshal(&src.NestedModuleBayTemplate)
	}

	if src.NestedModuleType != nil {
		return json.Marshal(&src.NestedModuleType)
	}

	if src.NestedNamespace != nil {
		return json.Marshal(&src.NestedNamespace)
	}

	if src.NestedObjectChange != nil {
		return json.Marshal(&src.NestedObjectChange)
	}

	if src.NestedObjectMetadata != nil {
		return json.Marshal(&src.NestedObjectMetadata)
	}

	if src.NestedPlatform != nil {
		return json.Marshal(&src.NestedPlatform)
	}

	if src.NestedPowerFeed != nil {
		return json.Marshal(&src.NestedPowerFeed)
	}

	if src.NestedPowerOutlet != nil {
		return json.Marshal(&src.NestedPowerOutlet)
	}

	if src.NestedPowerOutletTemplate != nil {
		return json.Marshal(&src.NestedPowerOutletTemplate)
	}

	if src.NestedPowerPanel != nil {
		return json.Marshal(&src.NestedPowerPanel)
	}

	if src.NestedPowerPort != nil {
		return json.Marshal(&src.NestedPowerPort)
	}

	if src.NestedPowerPortTemplate != nil {
		return json.Marshal(&src.NestedPowerPortTemplate)
	}

	if src.NestedPrefix != nil {
		return json.Marshal(&src.NestedPrefix)
	}

	if src.NestedProvider != nil {
		return json.Marshal(&src.NestedProvider)
	}

	if src.NestedProviderNetwork != nil {
		return json.Marshal(&src.NestedProviderNetwork)
	}

	if src.NestedRIR != nil {
		return json.Marshal(&src.NestedRIR)
	}

	if src.NestedRack != nil {
		return json.Marshal(&src.NestedRack)
	}

	if src.NestedRackGroup != nil {
		return json.Marshal(&src.NestedRackGroup)
	}

	if src.NestedRackReservation != nil {
		return json.Marshal(&src.NestedRackReservation)
	}

	if src.NestedRearPort != nil {
		return json.Marshal(&src.NestedRearPort)
	}

	if src.NestedRearPortTemplate != nil {
		return json.Marshal(&src.NestedRearPortTemplate)
	}

	if src.NestedRelationship != nil {
		return json.Marshal(&src.NestedRelationship)
	}

	if src.NestedRelationshipAssociation != nil {
		return json.Marshal(&src.NestedRelationshipAssociation)
	}

	if src.NestedRole != nil {
		return json.Marshal(&src.NestedRole)
	}

	if src.NestedRouteTarget != nil {
		return json.Marshal(&src.NestedRouteTarget)
	}

	if src.NestedSavedView != nil {
		return json.Marshal(&src.NestedSavedView)
	}

	if src.NestedScheduledJob != nil {
		return json.Marshal(&src.NestedScheduledJob)
	}

	if src.NestedSecret != nil {
		return json.Marshal(&src.NestedSecret)
	}

	if src.NestedSecretsGroup != nil {
		return json.Marshal(&src.NestedSecretsGroup)
	}

	if src.NestedSecretsGroupAssociation != nil {
		return json.Marshal(&src.NestedSecretsGroupAssociation)
	}

	if src.NestedService != nil {
		return json.Marshal(&src.NestedService)
	}

	if src.NestedSoftwareImageFile != nil {
		return json.Marshal(&src.NestedSoftwareImageFile)
	}

	if src.NestedSoftwareVersion != nil {
		return json.Marshal(&src.NestedSoftwareVersion)
	}

	if src.NestedStaticGroupAssociation != nil {
		return json.Marshal(&src.NestedStaticGroupAssociation)
	}

	if src.NestedStatus != nil {
		return json.Marshal(&src.NestedStatus)
	}

	if src.NestedTag != nil {
		return json.Marshal(&src.NestedTag)
	}

	if src.NestedTeam != nil {
		return json.Marshal(&src.NestedTeam)
	}

	if src.NestedTenant != nil {
		return json.Marshal(&src.NestedTenant)
	}

	if src.NestedTenantGroup != nil {
		return json.Marshal(&src.NestedTenantGroup)
	}

	if src.NestedVLAN != nil {
		return json.Marshal(&src.NestedVLAN)
	}

	if src.NestedVLANGroup != nil {
		return json.Marshal(&src.NestedVLANGroup)
	}

	if src.NestedVMInterface != nil {
		return json.Marshal(&src.NestedVMInterface)
	}

	if src.NestedVRF != nil {
		return json.Marshal(&src.NestedVRF)
	}

	if src.NestedVirtualChassis != nil {
		return json.Marshal(&src.NestedVirtualChassis)
	}

	if src.NestedVirtualMachine != nil {
		return json.Marshal(&src.NestedVirtualMachine)
	}

	if src.NestedWebhook != nil {
		return json.Marshal(&src.NestedWebhook)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ObjectMetadataAssignedObject) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NestedCable != nil {
		return obj.NestedCable
	}

	if obj.NestedCircuit != nil {
		return obj.NestedCircuit
	}

	if obj.NestedCircuitTermination != nil {
		return obj.NestedCircuitTermination
	}

	if obj.NestedCircuitType != nil {
		return obj.NestedCircuitType
	}

	if obj.NestedCloudAccount != nil {
		return obj.NestedCloudAccount
	}

	if obj.NestedCloudNetwork != nil {
		return obj.NestedCloudNetwork
	}

	if obj.NestedCloudResourceType != nil {
		return obj.NestedCloudResourceType
	}

	if obj.NestedCloudService != nil {
		return obj.NestedCloudService
	}

	if obj.NestedCluster != nil {
		return obj.NestedCluster
	}

	if obj.NestedClusterGroup != nil {
		return obj.NestedClusterGroup
	}

	if obj.NestedClusterType != nil {
		return obj.NestedClusterType
	}

	if obj.NestedComputedField != nil {
		return obj.NestedComputedField
	}

	if obj.NestedConfigContext != nil {
		return obj.NestedConfigContext
	}

	if obj.NestedConfigContextSchema != nil {
		return obj.NestedConfigContextSchema
	}

	if obj.NestedConsolePort != nil {
		return obj.NestedConsolePort
	}

	if obj.NestedConsolePortTemplate != nil {
		return obj.NestedConsolePortTemplate
	}

	if obj.NestedConsoleServerPort != nil {
		return obj.NestedConsoleServerPort
	}

	if obj.NestedConsoleServerPortTemplate != nil {
		return obj.NestedConsoleServerPortTemplate
	}

	if obj.NestedContact != nil {
		return obj.NestedContact
	}

	if obj.NestedContactAssociation != nil {
		return obj.NestedContactAssociation
	}

	if obj.NestedController != nil {
		return obj.NestedController
	}

	if obj.NestedControllerManagedDeviceGroup != nil {
		return obj.NestedControllerManagedDeviceGroup
	}

	if obj.NestedCustomField != nil {
		return obj.NestedCustomField
	}

	if obj.NestedCustomLink != nil {
		return obj.NestedCustomLink
	}

	if obj.NestedDevice != nil {
		return obj.NestedDevice
	}

	if obj.NestedDeviceBay != nil {
		return obj.NestedDeviceBay
	}

	if obj.NestedDeviceBayTemplate != nil {
		return obj.NestedDeviceBayTemplate
	}

	if obj.NestedDeviceFamily != nil {
		return obj.NestedDeviceFamily
	}

	if obj.NestedDeviceRedundancyGroup != nil {
		return obj.NestedDeviceRedundancyGroup
	}

	if obj.NestedDeviceType != nil {
		return obj.NestedDeviceType
	}

	if obj.NestedDynamicGroup != nil {
		return obj.NestedDynamicGroup
	}

	if obj.NestedExportTemplate != nil {
		return obj.NestedExportTemplate
	}

	if obj.NestedExternalIntegration != nil {
		return obj.NestedExternalIntegration
	}

	if obj.NestedFileProxy != nil {
		return obj.NestedFileProxy
	}

	if obj.NestedFrontPort != nil {
		return obj.NestedFrontPort
	}

	if obj.NestedFrontPortTemplate != nil {
		return obj.NestedFrontPortTemplate
	}

	if obj.NestedGitRepository != nil {
		return obj.NestedGitRepository
	}

	if obj.NestedGraphQLQuery != nil {
		return obj.NestedGraphQLQuery
	}

	if obj.NestedIPAddress != nil {
		return obj.NestedIPAddress
	}

	if obj.NestedImageAttachment != nil {
		return obj.NestedImageAttachment
	}

	if obj.NestedInterface != nil {
		return obj.NestedInterface
	}

	if obj.NestedInterfaceRedundancyGroup != nil {
		return obj.NestedInterfaceRedundancyGroup
	}

	if obj.NestedInterfaceTemplate != nil {
		return obj.NestedInterfaceTemplate
	}

	if obj.NestedInventoryItem != nil {
		return obj.NestedInventoryItem
	}

	if obj.NestedJob != nil {
		return obj.NestedJob
	}

	if obj.NestedJobButton != nil {
		return obj.NestedJobButton
	}

	if obj.NestedJobHook != nil {
		return obj.NestedJobHook
	}

	if obj.NestedJobResult != nil {
		return obj.NestedJobResult
	}

	if obj.NestedLocation != nil {
		return obj.NestedLocation
	}

	if obj.NestedLocationType != nil {
		return obj.NestedLocationType
	}

	if obj.NestedManufacturer != nil {
		return obj.NestedManufacturer
	}

	if obj.NestedMetadataType != nil {
		return obj.NestedMetadataType
	}

	if obj.NestedModule != nil {
		return obj.NestedModule
	}

	if obj.NestedModuleBay != nil {
		return obj.NestedModuleBay
	}

	if obj.NestedModuleBayTemplate != nil {
		return obj.NestedModuleBayTemplate
	}

	if obj.NestedModuleType != nil {
		return obj.NestedModuleType
	}

	if obj.NestedNamespace != nil {
		return obj.NestedNamespace
	}

	if obj.NestedObjectChange != nil {
		return obj.NestedObjectChange
	}

	if obj.NestedObjectMetadata != nil {
		return obj.NestedObjectMetadata
	}

	if obj.NestedPlatform != nil {
		return obj.NestedPlatform
	}

	if obj.NestedPowerFeed != nil {
		return obj.NestedPowerFeed
	}

	if obj.NestedPowerOutlet != nil {
		return obj.NestedPowerOutlet
	}

	if obj.NestedPowerOutletTemplate != nil {
		return obj.NestedPowerOutletTemplate
	}

	if obj.NestedPowerPanel != nil {
		return obj.NestedPowerPanel
	}

	if obj.NestedPowerPort != nil {
		return obj.NestedPowerPort
	}

	if obj.NestedPowerPortTemplate != nil {
		return obj.NestedPowerPortTemplate
	}

	if obj.NestedPrefix != nil {
		return obj.NestedPrefix
	}

	if obj.NestedProvider != nil {
		return obj.NestedProvider
	}

	if obj.NestedProviderNetwork != nil {
		return obj.NestedProviderNetwork
	}

	if obj.NestedRIR != nil {
		return obj.NestedRIR
	}

	if obj.NestedRack != nil {
		return obj.NestedRack
	}

	if obj.NestedRackGroup != nil {
		return obj.NestedRackGroup
	}

	if obj.NestedRackReservation != nil {
		return obj.NestedRackReservation
	}

	if obj.NestedRearPort != nil {
		return obj.NestedRearPort
	}

	if obj.NestedRearPortTemplate != nil {
		return obj.NestedRearPortTemplate
	}

	if obj.NestedRelationship != nil {
		return obj.NestedRelationship
	}

	if obj.NestedRelationshipAssociation != nil {
		return obj.NestedRelationshipAssociation
	}

	if obj.NestedRole != nil {
		return obj.NestedRole
	}

	if obj.NestedRouteTarget != nil {
		return obj.NestedRouteTarget
	}

	if obj.NestedSavedView != nil {
		return obj.NestedSavedView
	}

	if obj.NestedScheduledJob != nil {
		return obj.NestedScheduledJob
	}

	if obj.NestedSecret != nil {
		return obj.NestedSecret
	}

	if obj.NestedSecretsGroup != nil {
		return obj.NestedSecretsGroup
	}

	if obj.NestedSecretsGroupAssociation != nil {
		return obj.NestedSecretsGroupAssociation
	}

	if obj.NestedService != nil {
		return obj.NestedService
	}

	if obj.NestedSoftwareImageFile != nil {
		return obj.NestedSoftwareImageFile
	}

	if obj.NestedSoftwareVersion != nil {
		return obj.NestedSoftwareVersion
	}

	if obj.NestedStaticGroupAssociation != nil {
		return obj.NestedStaticGroupAssociation
	}

	if obj.NestedStatus != nil {
		return obj.NestedStatus
	}

	if obj.NestedTag != nil {
		return obj.NestedTag
	}

	if obj.NestedTeam != nil {
		return obj.NestedTeam
	}

	if obj.NestedTenant != nil {
		return obj.NestedTenant
	}

	if obj.NestedTenantGroup != nil {
		return obj.NestedTenantGroup
	}

	if obj.NestedVLAN != nil {
		return obj.NestedVLAN
	}

	if obj.NestedVLANGroup != nil {
		return obj.NestedVLANGroup
	}

	if obj.NestedVMInterface != nil {
		return obj.NestedVMInterface
	}

	if obj.NestedVRF != nil {
		return obj.NestedVRF
	}

	if obj.NestedVirtualChassis != nil {
		return obj.NestedVirtualChassis
	}

	if obj.NestedVirtualMachine != nil {
		return obj.NestedVirtualMachine
	}

	if obj.NestedWebhook != nil {
		return obj.NestedWebhook
	}

	// all schemas are nil
	return nil
}

type NullableObjectMetadataAssignedObject struct {
	value *ObjectMetadataAssignedObject
	isSet bool
}

func (v NullableObjectMetadataAssignedObject) Get() *ObjectMetadataAssignedObject {
	return v.value
}

func (v *NullableObjectMetadataAssignedObject) Set(val *ObjectMetadataAssignedObject) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectMetadataAssignedObject) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectMetadataAssignedObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectMetadataAssignedObject(val *ObjectMetadataAssignedObject) *NullableObjectMetadataAssignedObject {
	return &NullableObjectMetadataAssignedObject{value: val, isSet: true}
}

func (v NullableObjectMetadataAssignedObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectMetadataAssignedObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


