/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// checks if the RelationshipAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipAssociation{}

// RelationshipAssociation Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type RelationshipAssociation struct {
	Id string `json:"id"`
	ObjectType string `json:"object_type" validate:"regexp=^[a-z][a-z0-9_]+\\\\.[a-z][a-z0-9_]+$"`
	// Human friendly display value
	Display string `json:"display"`
	Url string `json:"url"`
	NaturalSlug string `json:"natural_slug"`
	SourceType string `json:"source_type"`
	DestinationType string `json:"destination_type"`
	SourceId string `json:"source_id"`
	DestinationId string `json:"destination_id"`
	Relationship BulkWritableCableRequestStatus `json:"relationship"`
	AdditionalProperties map[string]interface{}
}

type _RelationshipAssociation RelationshipAssociation

// NewRelationshipAssociation instantiates a new RelationshipAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipAssociation(id string, objectType string, display string, url string, naturalSlug string, sourceType string, destinationType string, sourceId string, destinationId string, relationship BulkWritableCableRequestStatus) *RelationshipAssociation {
	this := RelationshipAssociation{}
	this.Id = id
	this.ObjectType = objectType
	this.Display = display
	this.Url = url
	this.NaturalSlug = naturalSlug
	this.SourceType = sourceType
	this.DestinationType = destinationType
	this.SourceId = sourceId
	this.DestinationId = destinationId
	this.Relationship = relationship
	return &this
}

// NewRelationshipAssociationWithDefaults instantiates a new RelationshipAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipAssociationWithDefaults() *RelationshipAssociation {
	this := RelationshipAssociation{}
	return &this
}

// GetId returns the Id field value
func (o *RelationshipAssociation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RelationshipAssociation) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *RelationshipAssociation) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *RelationshipAssociation) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDisplay returns the Display field value
func (o *RelationshipAssociation) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *RelationshipAssociation) SetDisplay(v string) {
	o.Display = v
}

// GetUrl returns the Url field value
func (o *RelationshipAssociation) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RelationshipAssociation) SetUrl(v string) {
	o.Url = v
}

// GetNaturalSlug returns the NaturalSlug field value
func (o *RelationshipAssociation) GetNaturalSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NaturalSlug
}

// GetNaturalSlugOk returns a tuple with the NaturalSlug field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetNaturalSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NaturalSlug, true
}

// SetNaturalSlug sets field value
func (o *RelationshipAssociation) SetNaturalSlug(v string) {
	o.NaturalSlug = v
}

// GetSourceType returns the SourceType field value
func (o *RelationshipAssociation) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *RelationshipAssociation) SetSourceType(v string) {
	o.SourceType = v
}

// GetDestinationType returns the DestinationType field value
func (o *RelationshipAssociation) GetDestinationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetDestinationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *RelationshipAssociation) SetDestinationType(v string) {
	o.DestinationType = v
}

// GetSourceId returns the SourceId field value
func (o *RelationshipAssociation) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *RelationshipAssociation) SetSourceId(v string) {
	o.SourceId = v
}

// GetDestinationId returns the DestinationId field value
func (o *RelationshipAssociation) GetDestinationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationId, true
}

// SetDestinationId sets field value
func (o *RelationshipAssociation) SetDestinationId(v string) {
	o.DestinationId = v
}

// GetRelationship returns the Relationship field value
func (o *RelationshipAssociation) GetRelationship() BulkWritableCableRequestStatus {
	if o == nil {
		var ret BulkWritableCableRequestStatus
		return ret
	}

	return o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetRelationshipOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationship, true
}

// SetRelationship sets field value
func (o *RelationshipAssociation) SetRelationship(v BulkWritableCableRequestStatus) {
	o.Relationship = v
}

func (o RelationshipAssociation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object_type"] = o.ObjectType
	toSerialize["display"] = o.Display
	toSerialize["url"] = o.Url
	toSerialize["natural_slug"] = o.NaturalSlug
	toSerialize["source_type"] = o.SourceType
	toSerialize["destination_type"] = o.DestinationType
	toSerialize["source_id"] = o.SourceId
	toSerialize["destination_id"] = o.DestinationId
	toSerialize["relationship"] = o.Relationship

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RelationshipAssociation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object_type",
		"display",
		"url",
		"natural_slug",
		"source_type",
		"destination_type",
		"source_id",
		"destination_id",
		"relationship",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelationshipAssociation := _RelationshipAssociation{}

	err = json.Unmarshal(data, &varRelationshipAssociation)

	if err != nil {
		return err
	}

	*o = RelationshipAssociation(varRelationshipAssociation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "display")
		delete(additionalProperties, "url")
		delete(additionalProperties, "natural_slug")
		delete(additionalProperties, "source_type")
		delete(additionalProperties, "destination_type")
		delete(additionalProperties, "source_id")
		delete(additionalProperties, "destination_id")
		delete(additionalProperties, "relationship")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRelationshipAssociation struct {
	value *RelationshipAssociation
	isSet bool
}

func (v NullableRelationshipAssociation) Get() *RelationshipAssociation {
	return v.value
}

func (v *NullableRelationshipAssociation) Set(val *RelationshipAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipAssociation(val *RelationshipAssociation) *NullableRelationshipAssociation {
	return &NullableRelationshipAssociation{value: val, isSet: true}
}

func (v NullableRelationshipAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


