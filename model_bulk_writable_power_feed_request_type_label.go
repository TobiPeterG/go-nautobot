/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// BulkWritablePowerFeedRequestTypeLabel the model 'BulkWritablePowerFeedRequestTypeLabel'
type BulkWritablePowerFeedRequestTypeLabel string

// List of BulkWritablePowerFeedRequest_type_label
const (
	BULKWRITABLEPOWERFEEDREQUESTTYPELABEL_PRIMARY BulkWritablePowerFeedRequestTypeLabel = "Primary"
	BULKWRITABLEPOWERFEEDREQUESTTYPELABEL_SECONDARY BulkWritablePowerFeedRequestTypeLabel = "Secondary"
)

// All allowed values of BulkWritablePowerFeedRequestTypeLabel enum
var AllowedBulkWritablePowerFeedRequestTypeLabelEnumValues = []BulkWritablePowerFeedRequestTypeLabel{
	"Primary",
	"Secondary",
}

func (v *BulkWritablePowerFeedRequestTypeLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BulkWritablePowerFeedRequestTypeLabel(value)
	for _, existing := range AllowedBulkWritablePowerFeedRequestTypeLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BulkWritablePowerFeedRequestTypeLabel", value)
}

// NewBulkWritablePowerFeedRequestTypeLabelFromValue returns a pointer to a valid BulkWritablePowerFeedRequestTypeLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBulkWritablePowerFeedRequestTypeLabelFromValue(v string) (*BulkWritablePowerFeedRequestTypeLabel, error) {
	ev := BulkWritablePowerFeedRequestTypeLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BulkWritablePowerFeedRequestTypeLabel: valid values are %v", v, AllowedBulkWritablePowerFeedRequestTypeLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BulkWritablePowerFeedRequestTypeLabel) IsValid() bool {
	for _, existing := range AllowedBulkWritablePowerFeedRequestTypeLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BulkWritablePowerFeedRequest_type_label value
func (v BulkWritablePowerFeedRequestTypeLabel) Ptr() *BulkWritablePowerFeedRequestTypeLabel {
	return &v
}

type NullableBulkWritablePowerFeedRequestTypeLabel struct {
	value *BulkWritablePowerFeedRequestTypeLabel
	isSet bool
}

func (v NullableBulkWritablePowerFeedRequestTypeLabel) Get() *BulkWritablePowerFeedRequestTypeLabel {
	return v.value
}

func (v *NullableBulkWritablePowerFeedRequestTypeLabel) Set(val *BulkWritablePowerFeedRequestTypeLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkWritablePowerFeedRequestTypeLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkWritablePowerFeedRequestTypeLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkWritablePowerFeedRequestTypeLabel(val *BulkWritablePowerFeedRequestTypeLabel) *NullableBulkWritablePowerFeedRequestTypeLabel {
	return &NullableBulkWritablePowerFeedRequestTypeLabel{value: val, isSet: true}
}

func (v NullableBulkWritablePowerFeedRequestTypeLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkWritablePowerFeedRequestTypeLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

