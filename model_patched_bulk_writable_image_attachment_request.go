/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"os"
	"fmt"
)

// checks if the PatchedBulkWritableImageAttachmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedBulkWritableImageAttachmentRequest{}

// PatchedBulkWritableImageAttachmentRequest Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type PatchedBulkWritableImageAttachmentRequest struct {
	Id string `json:"id"`
	ContentType *string `json:"content_type,omitempty"`
	ObjectId *string `json:"object_id,omitempty"`
	Image **os.File `json:"image,omitempty"`
	ImageHeight *int32 `json:"image_height,omitempty"`
	ImageWidth *int32 `json:"image_width,omitempty"`
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedBulkWritableImageAttachmentRequest PatchedBulkWritableImageAttachmentRequest

// NewPatchedBulkWritableImageAttachmentRequest instantiates a new PatchedBulkWritableImageAttachmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedBulkWritableImageAttachmentRequest(id string) *PatchedBulkWritableImageAttachmentRequest {
	this := PatchedBulkWritableImageAttachmentRequest{}
	this.Id = id
	return &this
}

// NewPatchedBulkWritableImageAttachmentRequestWithDefaults instantiates a new PatchedBulkWritableImageAttachmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedBulkWritableImageAttachmentRequestWithDefaults() *PatchedBulkWritableImageAttachmentRequest {
	this := PatchedBulkWritableImageAttachmentRequest{}
	return &this
}

// GetId returns the Id field value
func (o *PatchedBulkWritableImageAttachmentRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PatchedBulkWritableImageAttachmentRequest) SetId(v string) {
	o.Id = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *PatchedBulkWritableImageAttachmentRequest) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *PatchedBulkWritableImageAttachmentRequest) SetContentType(v string) {
	o.ContentType = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *PatchedBulkWritableImageAttachmentRequest) GetObjectId() string {
	if o == nil || IsNil(o.ObjectId) {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) GetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) HasObjectId() bool {
	if o != nil && !IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *PatchedBulkWritableImageAttachmentRequest) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *PatchedBulkWritableImageAttachmentRequest) GetImage() *os.File {
	if o == nil || IsNil(o.Image) {
		var ret *os.File
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) GetImageOk() (**os.File, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given *os.File and assigns it to the Image field.
func (o *PatchedBulkWritableImageAttachmentRequest) SetImage(v *os.File) {
	o.Image = &v
}

// GetImageHeight returns the ImageHeight field value if set, zero value otherwise.
func (o *PatchedBulkWritableImageAttachmentRequest) GetImageHeight() int32 {
	if o == nil || IsNil(o.ImageHeight) {
		var ret int32
		return ret
	}
	return *o.ImageHeight
}

// GetImageHeightOk returns a tuple with the ImageHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) GetImageHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.ImageHeight) {
		return nil, false
	}
	return o.ImageHeight, true
}

// HasImageHeight returns a boolean if a field has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) HasImageHeight() bool {
	if o != nil && !IsNil(o.ImageHeight) {
		return true
	}

	return false
}

// SetImageHeight gets a reference to the given int32 and assigns it to the ImageHeight field.
func (o *PatchedBulkWritableImageAttachmentRequest) SetImageHeight(v int32) {
	o.ImageHeight = &v
}

// GetImageWidth returns the ImageWidth field value if set, zero value otherwise.
func (o *PatchedBulkWritableImageAttachmentRequest) GetImageWidth() int32 {
	if o == nil || IsNil(o.ImageWidth) {
		var ret int32
		return ret
	}
	return *o.ImageWidth
}

// GetImageWidthOk returns a tuple with the ImageWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) GetImageWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.ImageWidth) {
		return nil, false
	}
	return o.ImageWidth, true
}

// HasImageWidth returns a boolean if a field has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) HasImageWidth() bool {
	if o != nil && !IsNil(o.ImageWidth) {
		return true
	}

	return false
}

// SetImageWidth gets a reference to the given int32 and assigns it to the ImageWidth field.
func (o *PatchedBulkWritableImageAttachmentRequest) SetImageWidth(v int32) {
	o.ImageWidth = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedBulkWritableImageAttachmentRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedBulkWritableImageAttachmentRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedBulkWritableImageAttachmentRequest) SetName(v string) {
	o.Name = &v
}

func (o PatchedBulkWritableImageAttachmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedBulkWritableImageAttachmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.ObjectId) {
		toSerialize["object_id"] = o.ObjectId
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.ImageHeight) {
		toSerialize["image_height"] = o.ImageHeight
	}
	if !IsNil(o.ImageWidth) {
		toSerialize["image_width"] = o.ImageWidth
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedBulkWritableImageAttachmentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchedBulkWritableImageAttachmentRequest := _PatchedBulkWritableImageAttachmentRequest{}

	err = json.Unmarshal(data, &varPatchedBulkWritableImageAttachmentRequest)

	if err != nil {
		return err
	}

	*o = PatchedBulkWritableImageAttachmentRequest(varPatchedBulkWritableImageAttachmentRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "content_type")
		delete(additionalProperties, "object_id")
		delete(additionalProperties, "image")
		delete(additionalProperties, "image_height")
		delete(additionalProperties, "image_width")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedBulkWritableImageAttachmentRequest struct {
	value *PatchedBulkWritableImageAttachmentRequest
	isSet bool
}

func (v NullablePatchedBulkWritableImageAttachmentRequest) Get() *PatchedBulkWritableImageAttachmentRequest {
	return v.value
}

func (v *NullablePatchedBulkWritableImageAttachmentRequest) Set(val *PatchedBulkWritableImageAttachmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedBulkWritableImageAttachmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedBulkWritableImageAttachmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedBulkWritableImageAttachmentRequest(val *PatchedBulkWritableImageAttachmentRequest) *NullablePatchedBulkWritableImageAttachmentRequest {
	return &NullablePatchedBulkWritableImageAttachmentRequest{value: val, isSet: true}
}

func (v NullablePatchedBulkWritableImageAttachmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedBulkWritableImageAttachmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


