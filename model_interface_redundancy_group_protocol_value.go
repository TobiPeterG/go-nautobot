/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// InterfaceRedundancyGroupProtocolValue the model 'InterfaceRedundancyGroupProtocolValue'
type InterfaceRedundancyGroupProtocolValue string

// List of InterfaceRedundancyGroup_protocol_value
const (
	INTERFACEREDUNDANCYGROUPPROTOCOLVALUE_HSRP InterfaceRedundancyGroupProtocolValue = "hsrp"
	INTERFACEREDUNDANCYGROUPPROTOCOLVALUE_VRRP InterfaceRedundancyGroupProtocolValue = "vrrp"
	INTERFACEREDUNDANCYGROUPPROTOCOLVALUE_GLBP InterfaceRedundancyGroupProtocolValue = "glbp"
	INTERFACEREDUNDANCYGROUPPROTOCOLVALUE_CARP InterfaceRedundancyGroupProtocolValue = "carp"
)

// All allowed values of InterfaceRedundancyGroupProtocolValue enum
var AllowedInterfaceRedundancyGroupProtocolValueEnumValues = []InterfaceRedundancyGroupProtocolValue{
	"hsrp",
	"vrrp",
	"glbp",
	"carp",
}

func (v *InterfaceRedundancyGroupProtocolValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceRedundancyGroupProtocolValue(value)
	for _, existing := range AllowedInterfaceRedundancyGroupProtocolValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceRedundancyGroupProtocolValue", value)
}

// NewInterfaceRedundancyGroupProtocolValueFromValue returns a pointer to a valid InterfaceRedundancyGroupProtocolValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceRedundancyGroupProtocolValueFromValue(v string) (*InterfaceRedundancyGroupProtocolValue, error) {
	ev := InterfaceRedundancyGroupProtocolValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceRedundancyGroupProtocolValue: valid values are %v", v, AllowedInterfaceRedundancyGroupProtocolValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceRedundancyGroupProtocolValue) IsValid() bool {
	for _, existing := range AllowedInterfaceRedundancyGroupProtocolValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterfaceRedundancyGroup_protocol_value value
func (v InterfaceRedundancyGroupProtocolValue) Ptr() *InterfaceRedundancyGroupProtocolValue {
	return &v
}

type NullableInterfaceRedundancyGroupProtocolValue struct {
	value *InterfaceRedundancyGroupProtocolValue
	isSet bool
}

func (v NullableInterfaceRedundancyGroupProtocolValue) Get() *InterfaceRedundancyGroupProtocolValue {
	return v.value
}

func (v *NullableInterfaceRedundancyGroupProtocolValue) Set(val *InterfaceRedundancyGroupProtocolValue) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceRedundancyGroupProtocolValue) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceRedundancyGroupProtocolValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceRedundancyGroupProtocolValue(val *InterfaceRedundancyGroupProtocolValue) *NullableInterfaceRedundancyGroupProtocolValue {
	return &NullableInterfaceRedundancyGroupProtocolValue{value: val, isSet: true}
}

func (v NullableInterfaceRedundancyGroupProtocolValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceRedundancyGroupProtocolValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

