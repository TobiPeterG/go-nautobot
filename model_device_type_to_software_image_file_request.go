/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceTypeToSoftwareImageFileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceTypeToSoftwareImageFileRequest{}

// DeviceTypeToSoftwareImageFileRequest Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type DeviceTypeToSoftwareImageFileRequest struct {
	DeviceType BulkWritableCableRequestStatus `json:"device_type"`
	SoftwareImageFile BulkWritableCableRequestStatus `json:"software_image_file"`
	AdditionalProperties map[string]interface{}
}

type _DeviceTypeToSoftwareImageFileRequest DeviceTypeToSoftwareImageFileRequest

// NewDeviceTypeToSoftwareImageFileRequest instantiates a new DeviceTypeToSoftwareImageFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTypeToSoftwareImageFileRequest(deviceType BulkWritableCableRequestStatus, softwareImageFile BulkWritableCableRequestStatus) *DeviceTypeToSoftwareImageFileRequest {
	this := DeviceTypeToSoftwareImageFileRequest{}
	this.DeviceType = deviceType
	this.SoftwareImageFile = softwareImageFile
	return &this
}

// NewDeviceTypeToSoftwareImageFileRequestWithDefaults instantiates a new DeviceTypeToSoftwareImageFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTypeToSoftwareImageFileRequestWithDefaults() *DeviceTypeToSoftwareImageFileRequest {
	this := DeviceTypeToSoftwareImageFileRequest{}
	return &this
}

// GetDeviceType returns the DeviceType field value
func (o *DeviceTypeToSoftwareImageFileRequest) GetDeviceType() BulkWritableCableRequestStatus {
	if o == nil {
		var ret BulkWritableCableRequestStatus
		return ret
	}

	return o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value
// and a boolean to check if the value has been set.
func (o *DeviceTypeToSoftwareImageFileRequest) GetDeviceTypeOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceType, true
}

// SetDeviceType sets field value
func (o *DeviceTypeToSoftwareImageFileRequest) SetDeviceType(v BulkWritableCableRequestStatus) {
	o.DeviceType = v
}

// GetSoftwareImageFile returns the SoftwareImageFile field value
func (o *DeviceTypeToSoftwareImageFileRequest) GetSoftwareImageFile() BulkWritableCableRequestStatus {
	if o == nil {
		var ret BulkWritableCableRequestStatus
		return ret
	}

	return o.SoftwareImageFile
}

// GetSoftwareImageFileOk returns a tuple with the SoftwareImageFile field value
// and a boolean to check if the value has been set.
func (o *DeviceTypeToSoftwareImageFileRequest) GetSoftwareImageFileOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoftwareImageFile, true
}

// SetSoftwareImageFile sets field value
func (o *DeviceTypeToSoftwareImageFileRequest) SetSoftwareImageFile(v BulkWritableCableRequestStatus) {
	o.SoftwareImageFile = v
}

func (o DeviceTypeToSoftwareImageFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceTypeToSoftwareImageFileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device_type"] = o.DeviceType
	toSerialize["software_image_file"] = o.SoftwareImageFile

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceTypeToSoftwareImageFileRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device_type",
		"software_image_file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceTypeToSoftwareImageFileRequest := _DeviceTypeToSoftwareImageFileRequest{}

	err = json.Unmarshal(data, &varDeviceTypeToSoftwareImageFileRequest)

	if err != nil {
		return err
	}

	*o = DeviceTypeToSoftwareImageFileRequest(varDeviceTypeToSoftwareImageFileRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device_type")
		delete(additionalProperties, "software_image_file")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceTypeToSoftwareImageFileRequest struct {
	value *DeviceTypeToSoftwareImageFileRequest
	isSet bool
}

func (v NullableDeviceTypeToSoftwareImageFileRequest) Get() *DeviceTypeToSoftwareImageFileRequest {
	return v.value
}

func (v *NullableDeviceTypeToSoftwareImageFileRequest) Set(val *DeviceTypeToSoftwareImageFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTypeToSoftwareImageFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTypeToSoftwareImageFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTypeToSoftwareImageFileRequest(val *DeviceTypeToSoftwareImageFileRequest) *NullableDeviceTypeToSoftwareImageFileRequest {
	return &NullableDeviceTypeToSoftwareImageFileRequest{value: val, isSet: true}
}

func (v NullableDeviceTypeToSoftwareImageFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTypeToSoftwareImageFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


