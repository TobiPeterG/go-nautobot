/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// checks if the PatchedBulkWritableVRFPrefixAssignmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedBulkWritableVRFPrefixAssignmentRequest{}

// PatchedBulkWritableVRFPrefixAssignmentRequest Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type PatchedBulkWritableVRFPrefixAssignmentRequest struct {
	Id string `json:"id"`
	Vrf *BulkWritableCableRequestStatus `json:"vrf,omitempty"`
	Prefix *BulkWritableCableRequestStatus `json:"prefix,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedBulkWritableVRFPrefixAssignmentRequest PatchedBulkWritableVRFPrefixAssignmentRequest

// NewPatchedBulkWritableVRFPrefixAssignmentRequest instantiates a new PatchedBulkWritableVRFPrefixAssignmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedBulkWritableVRFPrefixAssignmentRequest(id string) *PatchedBulkWritableVRFPrefixAssignmentRequest {
	this := PatchedBulkWritableVRFPrefixAssignmentRequest{}
	this.Id = id
	return &this
}

// NewPatchedBulkWritableVRFPrefixAssignmentRequestWithDefaults instantiates a new PatchedBulkWritableVRFPrefixAssignmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedBulkWritableVRFPrefixAssignmentRequestWithDefaults() *PatchedBulkWritableVRFPrefixAssignmentRequest {
	this := PatchedBulkWritableVRFPrefixAssignmentRequest{}
	return &this
}

// GetId returns the Id field value
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) SetId(v string) {
	o.Id = v
}

// GetVrf returns the Vrf field value if set, zero value otherwise.
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) GetVrf() BulkWritableCableRequestStatus {
	if o == nil || IsNil(o.Vrf) {
		var ret BulkWritableCableRequestStatus
		return ret
	}
	return *o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) GetVrfOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil || IsNil(o.Vrf) {
		return nil, false
	}
	return o.Vrf, true
}

// HasVrf returns a boolean if a field has been set.
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) HasVrf() bool {
	if o != nil && !IsNil(o.Vrf) {
		return true
	}

	return false
}

// SetVrf gets a reference to the given BulkWritableCableRequestStatus and assigns it to the Vrf field.
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) SetVrf(v BulkWritableCableRequestStatus) {
	o.Vrf = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) GetPrefix() BulkWritableCableRequestStatus {
	if o == nil || IsNil(o.Prefix) {
		var ret BulkWritableCableRequestStatus
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) GetPrefixOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given BulkWritableCableRequestStatus and assigns it to the Prefix field.
func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) SetPrefix(v BulkWritableCableRequestStatus) {
	o.Prefix = &v
}

func (o PatchedBulkWritableVRFPrefixAssignmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedBulkWritableVRFPrefixAssignmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Vrf) {
		toSerialize["vrf"] = o.Vrf
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedBulkWritableVRFPrefixAssignmentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchedBulkWritableVRFPrefixAssignmentRequest := _PatchedBulkWritableVRFPrefixAssignmentRequest{}

	err = json.Unmarshal(data, &varPatchedBulkWritableVRFPrefixAssignmentRequest)

	if err != nil {
		return err
	}

	*o = PatchedBulkWritableVRFPrefixAssignmentRequest(varPatchedBulkWritableVRFPrefixAssignmentRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "vrf")
		delete(additionalProperties, "prefix")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedBulkWritableVRFPrefixAssignmentRequest struct {
	value *PatchedBulkWritableVRFPrefixAssignmentRequest
	isSet bool
}

func (v NullablePatchedBulkWritableVRFPrefixAssignmentRequest) Get() *PatchedBulkWritableVRFPrefixAssignmentRequest {
	return v.value
}

func (v *NullablePatchedBulkWritableVRFPrefixAssignmentRequest) Set(val *PatchedBulkWritableVRFPrefixAssignmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedBulkWritableVRFPrefixAssignmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedBulkWritableVRFPrefixAssignmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedBulkWritableVRFPrefixAssignmentRequest(val *PatchedBulkWritableVRFPrefixAssignmentRequest) *NullablePatchedBulkWritableVRFPrefixAssignmentRequest {
	return &NullablePatchedBulkWritableVRFPrefixAssignmentRequest{value: val, isSet: true}
}

func (v NullablePatchedBulkWritableVRFPrefixAssignmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedBulkWritableVRFPrefixAssignmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


