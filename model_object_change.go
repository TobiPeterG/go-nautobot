/*
API Documentation

Source of truth and network automation platform

API version: 2.3.1 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ObjectChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectChange{}

// ObjectChange This base serializer implements common fields and logic for all ModelSerializers.  Namely, it:  - defines the `display` field which exposes a human friendly value for the given object. - ensures that `id` field is always present on the serializer as well. - ensures that `created` and `last_updated` fields are always present if applicable to this model and serializer. - ensures that `object_type` field is always present on the serializer which represents the content-type of this   serializer's associated model (e.g. \"dcim.device\"). This is required as the OpenAPI schema, using the   PolymorphicProxySerializer class defined below, relies upon this field as a way to identify to the client   which of several possible serializers are in use for a given attribute. - supports `?depth` query parameter. It is passed in as `nested_depth` to the `build_nested_field()` function   to enable the dynamic generation of nested serializers.
type ObjectChange struct {
	Id string `json:"id"`
	ObjectType string `json:"object_type" validate:"regexp=^[a-z][a-z0-9_]+\\\\.[a-z][a-z0-9_]+$"`
	// Human friendly display value
	Display string `json:"display"`
	Url string `json:"url"`
	NaturalSlug string `json:"natural_slug"`
	Action ObjectChangeAction `json:"action"`
	ChangedObjectType string `json:"changed_object_type"`
	RelatedObjectType string `json:"related_object_type"`
	ChangedObject NullableObjectChangeChangedObject `json:"changed_object"`
	Time time.Time `json:"time"`
	UserName string `json:"user_name"`
	RequestId string `json:"request_id"`
	ChangedObjectId string `json:"changed_object_id"`
	ChangeContext string `json:"change_context"`
	ChangeContextDetail string `json:"change_context_detail"`
	RelatedObjectId NullableString `json:"related_object_id,omitempty"`
	ObjectRepr string `json:"object_repr"`
	ObjectData interface{} `json:"object_data"`
	ObjectDataV2 interface{} `json:"object_data_v2"`
	User NullableBulkWritableCircuitRequestTenant `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ObjectChange ObjectChange

// NewObjectChange instantiates a new ObjectChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectChange(id string, objectType string, display string, url string, naturalSlug string, action ObjectChangeAction, changedObjectType string, relatedObjectType string, changedObject NullableObjectChangeChangedObject, time time.Time, userName string, requestId string, changedObjectId string, changeContext string, changeContextDetail string, objectRepr string, objectData interface{}, objectDataV2 interface{}) *ObjectChange {
	this := ObjectChange{}
	this.Id = id
	this.ObjectType = objectType
	this.Display = display
	this.Url = url
	this.NaturalSlug = naturalSlug
	this.Action = action
	this.ChangedObjectType = changedObjectType
	this.RelatedObjectType = relatedObjectType
	this.ChangedObject = changedObject
	this.Time = time
	this.UserName = userName
	this.RequestId = requestId
	this.ChangedObjectId = changedObjectId
	this.ChangeContext = changeContext
	this.ChangeContextDetail = changeContextDetail
	this.ObjectRepr = objectRepr
	this.ObjectData = objectData
	this.ObjectDataV2 = objectDataV2
	return &this
}

// NewObjectChangeWithDefaults instantiates a new ObjectChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectChangeWithDefaults() *ObjectChange {
	this := ObjectChange{}
	return &this
}

// GetId returns the Id field value
func (o *ObjectChange) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjectChange) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *ObjectChange) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ObjectChange) SetObjectType(v string) {
	o.ObjectType = v
}

// GetDisplay returns the Display field value
func (o *ObjectChange) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *ObjectChange) SetDisplay(v string) {
	o.Display = v
}

// GetUrl returns the Url field value
func (o *ObjectChange) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ObjectChange) SetUrl(v string) {
	o.Url = v
}

// GetNaturalSlug returns the NaturalSlug field value
func (o *ObjectChange) GetNaturalSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NaturalSlug
}

// GetNaturalSlugOk returns a tuple with the NaturalSlug field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetNaturalSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NaturalSlug, true
}

// SetNaturalSlug sets field value
func (o *ObjectChange) SetNaturalSlug(v string) {
	o.NaturalSlug = v
}

// GetAction returns the Action field value
func (o *ObjectChange) GetAction() ObjectChangeAction {
	if o == nil {
		var ret ObjectChangeAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetActionOk() (*ObjectChangeAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ObjectChange) SetAction(v ObjectChangeAction) {
	o.Action = v
}

// GetChangedObjectType returns the ChangedObjectType field value
func (o *ObjectChange) GetChangedObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangedObjectType
}

// GetChangedObjectTypeOk returns a tuple with the ChangedObjectType field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetChangedObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangedObjectType, true
}

// SetChangedObjectType sets field value
func (o *ObjectChange) SetChangedObjectType(v string) {
	o.ChangedObjectType = v
}

// GetRelatedObjectType returns the RelatedObjectType field value
func (o *ObjectChange) GetRelatedObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelatedObjectType
}

// GetRelatedObjectTypeOk returns a tuple with the RelatedObjectType field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetRelatedObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedObjectType, true
}

// SetRelatedObjectType sets field value
func (o *ObjectChange) SetRelatedObjectType(v string) {
	o.RelatedObjectType = v
}

// GetChangedObject returns the ChangedObject field value
// If the value is explicit nil, the zero value for ObjectChangeChangedObject will be returned
func (o *ObjectChange) GetChangedObject() ObjectChangeChangedObject {
	if o == nil || o.ChangedObject.Get() == nil {
		var ret ObjectChangeChangedObject
		return ret
	}

	return *o.ChangedObject.Get()
}

// GetChangedObjectOk returns a tuple with the ChangedObject field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectChange) GetChangedObjectOk() (*ObjectChangeChangedObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChangedObject.Get(), o.ChangedObject.IsSet()
}

// SetChangedObject sets field value
func (o *ObjectChange) SetChangedObject(v ObjectChangeChangedObject) {
	o.ChangedObject.Set(&v)
}

// GetTime returns the Time field value
func (o *ObjectChange) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *ObjectChange) SetTime(v time.Time) {
	o.Time = v
}

// GetUserName returns the UserName field value
func (o *ObjectChange) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *ObjectChange) SetUserName(v string) {
	o.UserName = v
}

// GetRequestId returns the RequestId field value
func (o *ObjectChange) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *ObjectChange) SetRequestId(v string) {
	o.RequestId = v
}

// GetChangedObjectId returns the ChangedObjectId field value
func (o *ObjectChange) GetChangedObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangedObjectId
}

// GetChangedObjectIdOk returns a tuple with the ChangedObjectId field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetChangedObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangedObjectId, true
}

// SetChangedObjectId sets field value
func (o *ObjectChange) SetChangedObjectId(v string) {
	o.ChangedObjectId = v
}

// GetChangeContext returns the ChangeContext field value
func (o *ObjectChange) GetChangeContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangeContext
}

// GetChangeContextOk returns a tuple with the ChangeContext field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetChangeContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeContext, true
}

// SetChangeContext sets field value
func (o *ObjectChange) SetChangeContext(v string) {
	o.ChangeContext = v
}

// GetChangeContextDetail returns the ChangeContextDetail field value
func (o *ObjectChange) GetChangeContextDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangeContextDetail
}

// GetChangeContextDetailOk returns a tuple with the ChangeContextDetail field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetChangeContextDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeContextDetail, true
}

// SetChangeContextDetail sets field value
func (o *ObjectChange) SetChangeContextDetail(v string) {
	o.ChangeContextDetail = v
}

// GetRelatedObjectId returns the RelatedObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectChange) GetRelatedObjectId() string {
	if o == nil || IsNil(o.RelatedObjectId.Get()) {
		var ret string
		return ret
	}
	return *o.RelatedObjectId.Get()
}

// GetRelatedObjectIdOk returns a tuple with the RelatedObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectChange) GetRelatedObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelatedObjectId.Get(), o.RelatedObjectId.IsSet()
}

// HasRelatedObjectId returns a boolean if a field has been set.
func (o *ObjectChange) HasRelatedObjectId() bool {
	if o != nil && o.RelatedObjectId.IsSet() {
		return true
	}

	return false
}

// SetRelatedObjectId gets a reference to the given NullableString and assigns it to the RelatedObjectId field.
func (o *ObjectChange) SetRelatedObjectId(v string) {
	o.RelatedObjectId.Set(&v)
}
// SetRelatedObjectIdNil sets the value for RelatedObjectId to be an explicit nil
func (o *ObjectChange) SetRelatedObjectIdNil() {
	o.RelatedObjectId.Set(nil)
}

// UnsetRelatedObjectId ensures that no value is present for RelatedObjectId, not even an explicit nil
func (o *ObjectChange) UnsetRelatedObjectId() {
	o.RelatedObjectId.Unset()
}

// GetObjectRepr returns the ObjectRepr field value
func (o *ObjectChange) GetObjectRepr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectRepr
}

// GetObjectReprOk returns a tuple with the ObjectRepr field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetObjectReprOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectRepr, true
}

// SetObjectRepr sets field value
func (o *ObjectChange) SetObjectRepr(v string) {
	o.ObjectRepr = v
}

// GetObjectData returns the ObjectData field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ObjectChange) GetObjectData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ObjectData
}

// GetObjectDataOk returns a tuple with the ObjectData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectChange) GetObjectDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ObjectData) {
		return nil, false
	}
	return &o.ObjectData, true
}

// SetObjectData sets field value
func (o *ObjectChange) SetObjectData(v interface{}) {
	o.ObjectData = v
}

// GetObjectDataV2 returns the ObjectDataV2 field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ObjectChange) GetObjectDataV2() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ObjectDataV2
}

// GetObjectDataV2Ok returns a tuple with the ObjectDataV2 field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectChange) GetObjectDataV2Ok() (*interface{}, bool) {
	if o == nil || IsNil(o.ObjectDataV2) {
		return nil, false
	}
	return &o.ObjectDataV2, true
}

// SetObjectDataV2 sets field value
func (o *ObjectChange) SetObjectDataV2(v interface{}) {
	o.ObjectDataV2 = v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectChange) GetUser() BulkWritableCircuitRequestTenant {
	if o == nil || IsNil(o.User.Get()) {
		var ret BulkWritableCircuitRequestTenant
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectChange) GetUserOk() (*BulkWritableCircuitRequestTenant, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *ObjectChange) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableBulkWritableCircuitRequestTenant and assigns it to the User field.
func (o *ObjectChange) SetUser(v BulkWritableCircuitRequestTenant) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *ObjectChange) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *ObjectChange) UnsetUser() {
	o.User.Unset()
}

func (o ObjectChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object_type"] = o.ObjectType
	toSerialize["display"] = o.Display
	toSerialize["url"] = o.Url
	toSerialize["natural_slug"] = o.NaturalSlug
	toSerialize["action"] = o.Action
	toSerialize["changed_object_type"] = o.ChangedObjectType
	toSerialize["related_object_type"] = o.RelatedObjectType
	toSerialize["changed_object"] = o.ChangedObject.Get()
	toSerialize["time"] = o.Time
	toSerialize["user_name"] = o.UserName
	toSerialize["request_id"] = o.RequestId
	toSerialize["changed_object_id"] = o.ChangedObjectId
	toSerialize["change_context"] = o.ChangeContext
	toSerialize["change_context_detail"] = o.ChangeContextDetail
	if o.RelatedObjectId.IsSet() {
		toSerialize["related_object_id"] = o.RelatedObjectId.Get()
	}
	toSerialize["object_repr"] = o.ObjectRepr
	if o.ObjectData != nil {
		toSerialize["object_data"] = o.ObjectData
	}
	if o.ObjectDataV2 != nil {
		toSerialize["object_data_v2"] = o.ObjectDataV2
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObjectChange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object_type",
		"display",
		"url",
		"natural_slug",
		"action",
		"changed_object_type",
		"related_object_type",
		"changed_object",
		"time",
		"user_name",
		"request_id",
		"changed_object_id",
		"change_context",
		"change_context_detail",
		"object_repr",
		"object_data",
		"object_data_v2",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectChange := _ObjectChange{}

	err = json.Unmarshal(data, &varObjectChange)

	if err != nil {
		return err
	}

	*o = ObjectChange(varObjectChange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "display")
		delete(additionalProperties, "url")
		delete(additionalProperties, "natural_slug")
		delete(additionalProperties, "action")
		delete(additionalProperties, "changed_object_type")
		delete(additionalProperties, "related_object_type")
		delete(additionalProperties, "changed_object")
		delete(additionalProperties, "time")
		delete(additionalProperties, "user_name")
		delete(additionalProperties, "request_id")
		delete(additionalProperties, "changed_object_id")
		delete(additionalProperties, "change_context")
		delete(additionalProperties, "change_context_detail")
		delete(additionalProperties, "related_object_id")
		delete(additionalProperties, "object_repr")
		delete(additionalProperties, "object_data")
		delete(additionalProperties, "object_data_v2")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObjectChange struct {
	value *ObjectChange
	isSet bool
}

func (v NullableObjectChange) Get() *ObjectChange {
	return v.value
}

func (v *NullableObjectChange) Set(val *ObjectChange) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectChange) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectChange(val *ObjectChange) *NullableObjectChange {
	return &NullableObjectChange{value: val, isSet: true}
}

func (v NullableObjectChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


