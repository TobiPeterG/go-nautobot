/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ConfigContextSchemaOwner - struct for ConfigContextSchemaOwner
type ConfigContextSchemaOwner struct {
	NestedGitRepository *NestedGitRepository
}

// NestedGitRepositoryAsConfigContextSchemaOwner is a convenience function that returns NestedGitRepository wrapped in ConfigContextSchemaOwner
func NestedGitRepositoryAsConfigContextSchemaOwner(v *NestedGitRepository) ConfigContextSchemaOwner {
	return ConfigContextSchemaOwner{
		NestedGitRepository: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConfigContextSchemaOwner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NestedGitRepository
	err = newStrictDecoder(data).Decode(&dst.NestedGitRepository)
	if err == nil {
		jsonNestedGitRepository, _ := json.Marshal(dst.NestedGitRepository)
		if string(jsonNestedGitRepository) == "{}" { // empty struct
			dst.NestedGitRepository = nil
		} else {
			if err = validator.Validate(dst.NestedGitRepository); err != nil {
				dst.NestedGitRepository = nil
			} else {
				match++
			}
		}
	} else {
		dst.NestedGitRepository = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NestedGitRepository = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ConfigContextSchemaOwner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ConfigContextSchemaOwner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConfigContextSchemaOwner) MarshalJSON() ([]byte, error) {
	if src.NestedGitRepository != nil {
		return json.Marshal(&src.NestedGitRepository)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConfigContextSchemaOwner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NestedGitRepository != nil {
		return obj.NestedGitRepository
	}

	// all schemas are nil
	return nil
}

type NullableConfigContextSchemaOwner struct {
	value *ConfigContextSchemaOwner
	isSet bool
}

func (v NullableConfigContextSchemaOwner) Get() *ConfigContextSchemaOwner {
	return v.value
}

func (v *NullableConfigContextSchemaOwner) Set(val *ConfigContextSchemaOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigContextSchemaOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigContextSchemaOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigContextSchemaOwner(val *ConfigContextSchemaOwner) *NullableConfigContextSchemaOwner {
	return &NullableConfigContextSchemaOwner{value: val, isSet: true}
}

func (v NullableConfigContextSchemaOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigContextSchemaOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


