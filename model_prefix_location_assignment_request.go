/*
API Documentation

Source of truth and network automation platform

API version: 2.3.2 (2.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"encoding/json"
	"fmt"
)

// checks if the PrefixLocationAssignmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrefixLocationAssignmentRequest{}

// PrefixLocationAssignmentRequest Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type PrefixLocationAssignmentRequest struct {
	Prefix BulkWritableCableRequestStatus `json:"prefix"`
	Location BulkWritableCableRequestStatus `json:"location"`
	AdditionalProperties map[string]interface{}
}

type _PrefixLocationAssignmentRequest PrefixLocationAssignmentRequest

// NewPrefixLocationAssignmentRequest instantiates a new PrefixLocationAssignmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrefixLocationAssignmentRequest(prefix BulkWritableCableRequestStatus, location BulkWritableCableRequestStatus) *PrefixLocationAssignmentRequest {
	this := PrefixLocationAssignmentRequest{}
	this.Prefix = prefix
	this.Location = location
	return &this
}

// NewPrefixLocationAssignmentRequestWithDefaults instantiates a new PrefixLocationAssignmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrefixLocationAssignmentRequestWithDefaults() *PrefixLocationAssignmentRequest {
	this := PrefixLocationAssignmentRequest{}
	return &this
}

// GetPrefix returns the Prefix field value
func (o *PrefixLocationAssignmentRequest) GetPrefix() BulkWritableCableRequestStatus {
	if o == nil {
		var ret BulkWritableCableRequestStatus
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *PrefixLocationAssignmentRequest) GetPrefixOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *PrefixLocationAssignmentRequest) SetPrefix(v BulkWritableCableRequestStatus) {
	o.Prefix = v
}

// GetLocation returns the Location field value
func (o *PrefixLocationAssignmentRequest) GetLocation() BulkWritableCableRequestStatus {
	if o == nil {
		var ret BulkWritableCableRequestStatus
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *PrefixLocationAssignmentRequest) GetLocationOk() (*BulkWritableCableRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *PrefixLocationAssignmentRequest) SetLocation(v BulkWritableCableRequestStatus) {
	o.Location = v
}

func (o PrefixLocationAssignmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrefixLocationAssignmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["prefix"] = o.Prefix
	toSerialize["location"] = o.Location

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrefixLocationAssignmentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prefix",
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrefixLocationAssignmentRequest := _PrefixLocationAssignmentRequest{}

	err = json.Unmarshal(data, &varPrefixLocationAssignmentRequest)

	if err != nil {
		return err
	}

	*o = PrefixLocationAssignmentRequest(varPrefixLocationAssignmentRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "location")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrefixLocationAssignmentRequest struct {
	value *PrefixLocationAssignmentRequest
	isSet bool
}

func (v NullablePrefixLocationAssignmentRequest) Get() *PrefixLocationAssignmentRequest {
	return v.value
}

func (v *NullablePrefixLocationAssignmentRequest) Set(val *PrefixLocationAssignmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePrefixLocationAssignmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePrefixLocationAssignmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrefixLocationAssignmentRequest(val *PrefixLocationAssignmentRequest) *NullablePrefixLocationAssignmentRequest {
	return &NullablePrefixLocationAssignmentRequest{value: val, isSet: true}
}

func (v NullablePrefixLocationAssignmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrefixLocationAssignmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


