/*
API Documentation

Source of truth and network automation platform

API version: 2.2.5 (2.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nautobot

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// TenancyAPIService TenancyAPI service
type TenancyAPIService service

type ApiTenancyTenantGroupsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantGroupsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiTenancyTenantGroupsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiTenancyTenantGroupsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.TenancyTenantGroupsBulkDestroyExecute(r)
}

/*
TenancyTenantGroupsBulkDestroy Method for TenancyTenantGroupsBulkDestroy

Destroy a list of tenant group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantGroupsBulkDestroyRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsBulkDestroy(ctx context.Context) ApiTenancyTenantGroupsBulkDestroyRequest {
	return ApiTenancyTenantGroupsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *TenancyAPIService) TenancyTenantGroupsBulkDestroyExecute(r ApiTenancyTenantGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	patchedBulkWritableTenantGroupRequest *[]PatchedBulkWritableTenantGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantGroupsBulkPartialUpdateRequest) PatchedBulkWritableTenantGroupRequest(patchedBulkWritableTenantGroupRequest []PatchedBulkWritableTenantGroupRequest) ApiTenancyTenantGroupsBulkPartialUpdateRequest {
	r.patchedBulkWritableTenantGroupRequest = &patchedBulkWritableTenantGroupRequest
	return r
}

func (r ApiTenancyTenantGroupsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantGroupsBulkPartialUpdateRequest) Execute() ([]TenantGroup, *http.Response, error) {
	return r.ApiService.TenancyTenantGroupsBulkPartialUpdateExecute(r)
}

/*
TenancyTenantGroupsBulkPartialUpdate Method for TenancyTenantGroupsBulkPartialUpdate

Partial update a list of tenant group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantGroupsBulkPartialUpdateRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsBulkPartialUpdate(ctx context.Context) ApiTenancyTenantGroupsBulkPartialUpdateRequest {
	return ApiTenancyTenantGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TenantGroup
func (a *TenancyAPIService) TenancyTenantGroupsBulkPartialUpdateExecute(r ApiTenancyTenantGroupsBulkPartialUpdateRequest) ([]TenantGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TenantGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableTenantGroupRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableTenantGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableTenantGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	bulkWritableTenantGroupRequest *[]BulkWritableTenantGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantGroupsBulkUpdateRequest) BulkWritableTenantGroupRequest(bulkWritableTenantGroupRequest []BulkWritableTenantGroupRequest) ApiTenancyTenantGroupsBulkUpdateRequest {
	r.bulkWritableTenantGroupRequest = &bulkWritableTenantGroupRequest
	return r
}

func (r ApiTenancyTenantGroupsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantGroupsBulkUpdateRequest) Execute() ([]TenantGroup, *http.Response, error) {
	return r.ApiService.TenancyTenantGroupsBulkUpdateExecute(r)
}

/*
TenancyTenantGroupsBulkUpdate Method for TenancyTenantGroupsBulkUpdate

Update a list of tenant group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantGroupsBulkUpdateRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsBulkUpdate(ctx context.Context) ApiTenancyTenantGroupsBulkUpdateRequest {
	return ApiTenancyTenantGroupsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TenantGroup
func (a *TenancyAPIService) TenancyTenantGroupsBulkUpdateExecute(r ApiTenancyTenantGroupsBulkUpdateRequest) ([]TenantGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TenantGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableTenantGroupRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableTenantGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableTenantGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsCreateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	tenantGroupRequest *TenantGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantGroupsCreateRequest) TenantGroupRequest(tenantGroupRequest TenantGroupRequest) ApiTenancyTenantGroupsCreateRequest {
	r.tenantGroupRequest = &tenantGroupRequest
	return r
}

func (r ApiTenancyTenantGroupsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsCreateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantGroupsCreateRequest) Execute() (*TenantGroup, *http.Response, error) {
	return r.ApiService.TenancyTenantGroupsCreateExecute(r)
}

/*
TenancyTenantGroupsCreate Method for TenancyTenantGroupsCreate

Create one or more tenant group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantGroupsCreateRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsCreate(ctx context.Context) ApiTenancyTenantGroupsCreateRequest {
	return ApiTenancyTenantGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TenantGroup
func (a *TenancyAPIService) TenancyTenantGroupsCreateExecute(r ApiTenancyTenantGroupsCreateRequest) (*TenantGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TenantGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantGroupRequest == nil {
		return localVarReturnValue, nil, reportError("tenantGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tenantGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsDestroyRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantGroupsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.TenancyTenantGroupsDestroyExecute(r)
}

/*
TenancyTenantGroupsDestroy Method for TenancyTenantGroupsDestroy

Destroy a tenant group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant group.
 @return ApiTenancyTenantGroupsDestroyRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsDestroy(ctx context.Context, id string) ApiTenancyTenantGroupsDestroyRequest {
	return ApiTenancyTenantGroupsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TenancyAPIService) TenancyTenantGroupsDestroyExecute(r ApiTenancyTenantGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsListRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	children *[]string
	childrenIsnull *bool
	childrenN *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasChildren *bool
	hasTenants *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	parent *[]string
	parentIsnull *bool
	parentN *[]string
	q *string
	sort *string
	tenants *[]string
	tenantsIsnull *bool
	tenantsN *[]string
	depth *int32
}

func (r ApiTenancyTenantGroupsListRequest) Children(children []string) ApiTenancyTenantGroupsListRequest {
	r.children = &children
	return r
}

func (r ApiTenancyTenantGroupsListRequest) ChildrenIsnull(childrenIsnull bool) ApiTenancyTenantGroupsListRequest {
	r.childrenIsnull = &childrenIsnull
	return r
}

func (r ApiTenancyTenantGroupsListRequest) ChildrenN(childrenN []string) ApiTenancyTenantGroupsListRequest {
	r.childrenN = &childrenN
	return r
}

func (r ApiTenancyTenantGroupsListRequest) Created(created []time.Time) ApiTenancyTenantGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiTenancyTenantGroupsListRequest) CreatedGt(createdGt []time.Time) ApiTenancyTenantGroupsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiTenancyTenantGroupsListRequest) CreatedGte(createdGte []time.Time) ApiTenancyTenantGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiTenancyTenantGroupsListRequest) CreatedIsnull(createdIsnull bool) ApiTenancyTenantGroupsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiTenancyTenantGroupsListRequest) CreatedLt(createdLt []time.Time) ApiTenancyTenantGroupsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiTenancyTenantGroupsListRequest) CreatedLte(createdLte []time.Time) ApiTenancyTenantGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiTenancyTenantGroupsListRequest) CreatedN(createdN []time.Time) ApiTenancyTenantGroupsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiTenancyTenantGroupsListRequest) Description(description []string) ApiTenancyTenantGroupsListRequest {
	r.description = &description
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionIc(descriptionIc []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionIe(descriptionIe []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionIew(descriptionIew []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionIre(descriptionIre []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionIsw(descriptionIsw []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionN(descriptionN []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionNic(descriptionNic []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionNie(descriptionNie []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionNiew(descriptionNiew []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionNire(descriptionNire []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionNisw(descriptionNisw []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionNre(descriptionNre []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiTenancyTenantGroupsListRequest) DescriptionRe(descriptionRe []string) ApiTenancyTenantGroupsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiTenancyTenantGroupsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsListRequest {
	r.format = &format
	return r
}

// Has children
func (r ApiTenancyTenantGroupsListRequest) HasChildren(hasChildren bool) ApiTenancyTenantGroupsListRequest {
	r.hasChildren = &hasChildren
	return r
}

// Has tenants
func (r ApiTenancyTenantGroupsListRequest) HasTenants(hasTenants bool) ApiTenancyTenantGroupsListRequest {
	r.hasTenants = &hasTenants
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiTenancyTenantGroupsListRequest) Id(id []string) ApiTenancyTenantGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdIc(idIc []string) ApiTenancyTenantGroupsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdIe(idIe []string) ApiTenancyTenantGroupsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdIew(idIew []string) ApiTenancyTenantGroupsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdIre(idIre []string) ApiTenancyTenantGroupsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdIsw(idIsw []string) ApiTenancyTenantGroupsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdN(idN []string) ApiTenancyTenantGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdNic(idNic []string) ApiTenancyTenantGroupsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdNie(idNie []string) ApiTenancyTenantGroupsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdNiew(idNiew []string) ApiTenancyTenantGroupsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdNire(idNire []string) ApiTenancyTenantGroupsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdNisw(idNisw []string) ApiTenancyTenantGroupsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdNre(idNre []string) ApiTenancyTenantGroupsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiTenancyTenantGroupsListRequest) IdRe(idRe []string) ApiTenancyTenantGroupsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiTenancyTenantGroupsListRequest) LastUpdated(lastUpdated []time.Time) ApiTenancyTenantGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiTenancyTenantGroupsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiTenancyTenantGroupsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiTenancyTenantGroupsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiTenancyTenantGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiTenancyTenantGroupsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiTenancyTenantGroupsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiTenancyTenantGroupsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiTenancyTenantGroupsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiTenancyTenantGroupsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiTenancyTenantGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiTenancyTenantGroupsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiTenancyTenantGroupsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiTenancyTenantGroupsListRequest) Limit(limit int32) ApiTenancyTenantGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiTenancyTenantGroupsListRequest) Name(name []string) ApiTenancyTenantGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameIc(nameIc []string) ApiTenancyTenantGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameIe(nameIe []string) ApiTenancyTenantGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameIew(nameIew []string) ApiTenancyTenantGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameIre(nameIre []string) ApiTenancyTenantGroupsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameIsw(nameIsw []string) ApiTenancyTenantGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameN(nameN []string) ApiTenancyTenantGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameNic(nameNic []string) ApiTenancyTenantGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameNie(nameNie []string) ApiTenancyTenantGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameNiew(nameNiew []string) ApiTenancyTenantGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameNire(nameNire []string) ApiTenancyTenantGroupsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameNisw(nameNisw []string) ApiTenancyTenantGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameNre(nameNre []string) ApiTenancyTenantGroupsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiTenancyTenantGroupsListRequest) NameRe(nameRe []string) ApiTenancyTenantGroupsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiTenancyTenantGroupsListRequest) Offset(offset int32) ApiTenancyTenantGroupsListRequest {
	r.offset = &offset
	return r
}

func (r ApiTenancyTenantGroupsListRequest) Parent(parent []string) ApiTenancyTenantGroupsListRequest {
	r.parent = &parent
	return r
}

func (r ApiTenancyTenantGroupsListRequest) ParentIsnull(parentIsnull bool) ApiTenancyTenantGroupsListRequest {
	r.parentIsnull = &parentIsnull
	return r
}

func (r ApiTenancyTenantGroupsListRequest) ParentN(parentN []string) ApiTenancyTenantGroupsListRequest {
	r.parentN = &parentN
	return r
}

// Search
func (r ApiTenancyTenantGroupsListRequest) Q(q string) ApiTenancyTenantGroupsListRequest {
	r.q = &q
	return r
}

// Which field to use when ordering the results.
func (r ApiTenancyTenantGroupsListRequest) Sort(sort string) ApiTenancyTenantGroupsListRequest {
	r.sort = &sort
	return r
}

func (r ApiTenancyTenantGroupsListRequest) Tenants(tenants []string) ApiTenancyTenantGroupsListRequest {
	r.tenants = &tenants
	return r
}

func (r ApiTenancyTenantGroupsListRequest) TenantsIsnull(tenantsIsnull bool) ApiTenancyTenantGroupsListRequest {
	r.tenantsIsnull = &tenantsIsnull
	return r
}

func (r ApiTenancyTenantGroupsListRequest) TenantsN(tenantsN []string) ApiTenancyTenantGroupsListRequest {
	r.tenantsN = &tenantsN
	return r
}

// Serializer Depth
func (r ApiTenancyTenantGroupsListRequest) Depth(depth int32) ApiTenancyTenantGroupsListRequest {
	r.depth = &depth
	return r
}

func (r ApiTenancyTenantGroupsListRequest) Execute() (*PaginatedTenantGroupList, *http.Response, error) {
	return r.ApiService.TenancyTenantGroupsListExecute(r)
}

/*
TenancyTenantGroupsList Method for TenancyTenantGroupsList

Retrieve a list of tenant group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantGroupsListRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsList(ctx context.Context) ApiTenancyTenantGroupsListRequest {
	return ApiTenancyTenantGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedTenantGroupList
func (a *TenancyAPIService) TenancyTenantGroupsListExecute(r ApiTenancyTenantGroupsListRequest) (*PaginatedTenantGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedTenantGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.children != nil {
		t := *r.children
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "children", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "children", t, "form", "multi")
		}
	}
	if r.childrenIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "children__isnull", r.childrenIsnull, "form", "")
	}
	if r.childrenN != nil {
		t := *r.childrenN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "children__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "children__n", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.hasChildren != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_children", r.hasChildren, "form", "")
	}
	if r.hasTenants != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_tenants", r.hasTenants, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.parent != nil {
		t := *r.parent
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent", t, "form", "multi")
		}
	}
	if r.parentIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parent__isnull", r.parentIsnull, "form", "")
	}
	if r.parentN != nil {
		t := *r.parentN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tenants != nil {
		t := *r.tenants
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenants", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenants", t, "form", "multi")
		}
	}
	if r.tenantsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenants__isnull", r.tenantsIsnull, "form", "")
	}
	if r.tenantsN != nil {
		t := *r.tenantsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenants__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenants__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsNotesCreateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantGroupsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiTenancyTenantGroupsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiTenancyTenantGroupsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantGroupsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.TenancyTenantGroupsNotesCreateExecute(r)
}

/*
TenancyTenantGroupsNotesCreate Method for TenancyTenantGroupsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant group.
 @return ApiTenancyTenantGroupsNotesCreateRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsNotesCreate(ctx context.Context, id string) ApiTenancyTenantGroupsNotesCreateRequest {
	return ApiTenancyTenantGroupsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *TenancyAPIService) TenancyTenantGroupsNotesCreateExecute(r ApiTenancyTenantGroupsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsNotesListRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiTenancyTenantGroupsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiTenancyTenantGroupsNotesListRequest) Limit(limit int32) ApiTenancyTenantGroupsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiTenancyTenantGroupsNotesListRequest) Offset(offset int32) ApiTenancyTenantGroupsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiTenancyTenantGroupsNotesListRequest) Depth(depth int32) ApiTenancyTenantGroupsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiTenancyTenantGroupsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.TenancyTenantGroupsNotesListExecute(r)
}

/*
TenancyTenantGroupsNotesList Method for TenancyTenantGroupsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant group.
 @return ApiTenancyTenantGroupsNotesListRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsNotesList(ctx context.Context, id string) ApiTenancyTenantGroupsNotesListRequest {
	return ApiTenancyTenantGroupsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *TenancyAPIService) TenancyTenantGroupsNotesListExecute(r ApiTenancyTenantGroupsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedTenantGroupRequest *PatchedTenantGroupRequest
}

func (r ApiTenancyTenantGroupsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantGroupsPartialUpdateRequest) PatchedTenantGroupRequest(patchedTenantGroupRequest PatchedTenantGroupRequest) ApiTenancyTenantGroupsPartialUpdateRequest {
	r.patchedTenantGroupRequest = &patchedTenantGroupRequest
	return r
}

func (r ApiTenancyTenantGroupsPartialUpdateRequest) Execute() (*TenantGroup, *http.Response, error) {
	return r.ApiService.TenancyTenantGroupsPartialUpdateExecute(r)
}

/*
TenancyTenantGroupsPartialUpdate Method for TenancyTenantGroupsPartialUpdate

Partial update a tenant group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant group.
 @return ApiTenancyTenantGroupsPartialUpdateRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsPartialUpdate(ctx context.Context, id string) ApiTenancyTenantGroupsPartialUpdateRequest {
	return ApiTenancyTenantGroupsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TenantGroup
func (a *TenancyAPIService) TenancyTenantGroupsPartialUpdateExecute(r ApiTenancyTenantGroupsPartialUpdateRequest) (*TenantGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TenantGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedTenantGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsRetrieveRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiTenancyTenantGroupsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiTenancyTenantGroupsRetrieveRequest) Depth(depth int32) ApiTenancyTenantGroupsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiTenancyTenantGroupsRetrieveRequest) Execute() (*TenantGroup, *http.Response, error) {
	return r.ApiService.TenancyTenantGroupsRetrieveExecute(r)
}

/*
TenancyTenantGroupsRetrieve Method for TenancyTenantGroupsRetrieve

Retrieve a tenant group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant group.
 @return ApiTenancyTenantGroupsRetrieveRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsRetrieve(ctx context.Context, id string) ApiTenancyTenantGroupsRetrieveRequest {
	return ApiTenancyTenantGroupsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TenantGroup
func (a *TenancyAPIService) TenancyTenantGroupsRetrieveExecute(r ApiTenancyTenantGroupsRetrieveRequest) (*TenantGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TenantGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	tenantGroupRequest *TenantGroupRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantGroupsUpdateRequest) TenantGroupRequest(tenantGroupRequest TenantGroupRequest) ApiTenancyTenantGroupsUpdateRequest {
	r.tenantGroupRequest = &tenantGroupRequest
	return r
}

func (r ApiTenancyTenantGroupsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantGroupsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantGroupsUpdateRequest) Execute() (*TenantGroup, *http.Response, error) {
	return r.ApiService.TenancyTenantGroupsUpdateExecute(r)
}

/*
TenancyTenantGroupsUpdate Method for TenancyTenantGroupsUpdate

Update a tenant group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant group.
 @return ApiTenancyTenantGroupsUpdateRequest
*/
func (a *TenancyAPIService) TenancyTenantGroupsUpdate(ctx context.Context, id string) ApiTenancyTenantGroupsUpdateRequest {
	return ApiTenancyTenantGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TenantGroup
func (a *TenancyAPIService) TenancyTenantGroupsUpdateExecute(r ApiTenancyTenantGroupsUpdateRequest) (*TenantGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TenantGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenant-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantGroupRequest == nil {
		return localVarReturnValue, nil, reportError("tenantGroupRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tenantGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	bulkOperationRequest *[]BulkOperationRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantsBulkDestroyRequest) BulkOperationRequest(bulkOperationRequest []BulkOperationRequest) ApiTenancyTenantsBulkDestroyRequest {
	r.bulkOperationRequest = &bulkOperationRequest
	return r
}

func (r ApiTenancyTenantsBulkDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsBulkDestroyRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.TenancyTenantsBulkDestroyExecute(r)
}

/*
TenancyTenantsBulkDestroy Method for TenancyTenantsBulkDestroy

Destroy a list of tenant objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantsBulkDestroyRequest
*/
func (a *TenancyAPIService) TenancyTenantsBulkDestroy(ctx context.Context) ApiTenancyTenantsBulkDestroyRequest {
	return ApiTenancyTenantsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *TenancyAPIService) TenancyTenantsBulkDestroyExecute(r ApiTenancyTenantsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkOperationRequest == nil {
		return nil, reportError("bulkOperationRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTenancyTenantsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	patchedBulkWritableTenantRequest *[]PatchedBulkWritableTenantRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantsBulkPartialUpdateRequest) PatchedBulkWritableTenantRequest(patchedBulkWritableTenantRequest []PatchedBulkWritableTenantRequest) ApiTenancyTenantsBulkPartialUpdateRequest {
	r.patchedBulkWritableTenantRequest = &patchedBulkWritableTenantRequest
	return r
}

func (r ApiTenancyTenantsBulkPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsBulkPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantsBulkPartialUpdateRequest) Execute() ([]Tenant, *http.Response, error) {
	return r.ApiService.TenancyTenantsBulkPartialUpdateExecute(r)
}

/*
TenancyTenantsBulkPartialUpdate Method for TenancyTenantsBulkPartialUpdate

Partial update a list of tenant objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantsBulkPartialUpdateRequest
*/
func (a *TenancyAPIService) TenancyTenantsBulkPartialUpdate(ctx context.Context) ApiTenancyTenantsBulkPartialUpdateRequest {
	return ApiTenancyTenantsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Tenant
func (a *TenancyAPIService) TenancyTenantsBulkPartialUpdateExecute(r ApiTenancyTenantsBulkPartialUpdateRequest) ([]Tenant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Tenant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchedBulkWritableTenantRequest == nil {
		return localVarReturnValue, nil, reportError("patchedBulkWritableTenantRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBulkWritableTenantRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	bulkWritableTenantRequest *[]BulkWritableTenantRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantsBulkUpdateRequest) BulkWritableTenantRequest(bulkWritableTenantRequest []BulkWritableTenantRequest) ApiTenancyTenantsBulkUpdateRequest {
	r.bulkWritableTenantRequest = &bulkWritableTenantRequest
	return r
}

func (r ApiTenancyTenantsBulkUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsBulkUpdateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantsBulkUpdateRequest) Execute() ([]Tenant, *http.Response, error) {
	return r.ApiService.TenancyTenantsBulkUpdateExecute(r)
}

/*
TenancyTenantsBulkUpdate Method for TenancyTenantsBulkUpdate

Update a list of tenant objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantsBulkUpdateRequest
*/
func (a *TenancyAPIService) TenancyTenantsBulkUpdate(ctx context.Context) ApiTenancyTenantsBulkUpdateRequest {
	return ApiTenancyTenantsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Tenant
func (a *TenancyAPIService) TenancyTenantsBulkUpdateExecute(r ApiTenancyTenantsBulkUpdateRequest) ([]Tenant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Tenant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkWritableTenantRequest == nil {
		return localVarReturnValue, nil, reportError("bulkWritableTenantRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkWritableTenantRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantsCreateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	tenantRequest *TenantRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantsCreateRequest) TenantRequest(tenantRequest TenantRequest) ApiTenancyTenantsCreateRequest {
	r.tenantRequest = &tenantRequest
	return r
}

func (r ApiTenancyTenantsCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsCreateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantsCreateRequest) Execute() (*Tenant, *http.Response, error) {
	return r.ApiService.TenancyTenantsCreateExecute(r)
}

/*
TenancyTenantsCreate Method for TenancyTenantsCreate

Create one or more tenant objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantsCreateRequest
*/
func (a *TenancyAPIService) TenancyTenantsCreate(ctx context.Context) ApiTenancyTenantsCreateRequest {
	return ApiTenancyTenantsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Tenant
func (a *TenancyAPIService) TenancyTenantsCreateExecute(r ApiTenancyTenantsCreateRequest) (*Tenant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tenant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantRequest == nil {
		return localVarReturnValue, nil, reportError("tenantRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tenantRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantsDestroyRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantsDestroyRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsDestroyRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.TenancyTenantsDestroyExecute(r)
}

/*
TenancyTenantsDestroy Method for TenancyTenantsDestroy

Destroy a tenant object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant.
 @return ApiTenancyTenantsDestroyRequest
*/
func (a *TenancyAPIService) TenancyTenantsDestroy(ctx context.Context, id string) ApiTenancyTenantsDestroyRequest {
	return ApiTenancyTenantsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TenancyAPIService) TenancyTenantsDestroyExecute(r ApiTenancyTenantsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTenancyTenantsListRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	circuits *[]string
	circuitsIsnull *bool
	circuitsN *[]string
	clusters *[]string
	clustersIsnull *bool
	clustersN *[]string
	comments *[]string
	commentsIc *[]string
	commentsIe *[]string
	commentsIew *[]string
	commentsIre *[]string
	commentsIsw *[]string
	commentsN *[]string
	commentsNic *[]string
	commentsNie *[]string
	commentsNiew *[]string
	commentsNire *[]string
	commentsNisw *[]string
	commentsNre *[]string
	commentsRe *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdIsnull *bool
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	devices *[]string
	devicesIsnull *bool
	devicesN *[]string
	format *CircuitsCircuitTerminationsListFormatParameter
	hasCircuits *bool
	hasClusters *bool
	hasDevices *bool
	hasIpAddresses *bool
	hasLocations *bool
	hasPrefixes *bool
	hasRackReservations *bool
	hasRacks *bool
	hasRouteTargets *bool
	hasVirtualMachines *bool
	hasVlans *bool
	hasVrfs *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	ipAddresses *[]string
	ipAddressesIsnull *bool
	ipAddressesN *[]string
	lastUpdated *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedIsnull *bool
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	locations *[]string
	locationsIsnull *bool
	locationsN *[]string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	prefixes *[]string
	prefixesIsnull *bool
	prefixesN *[]string
	q *string
	rackReservations *[]string
	rackReservationsIsnull *bool
	rackReservationsN *[]string
	racks *[]string
	racksIsnull *bool
	racksN *[]string
	routeTargets *[]string
	routeTargetsIsnull *bool
	routeTargetsN *[]string
	sort *string
	tags *[]string
	tagsIsnull *bool
	tagsN *[]string
	tenantGroup *[]string
	tenantGroupIsnull *bool
	tenantGroupN *[]string
	virtualMachines *[]string
	virtualMachinesIsnull *bool
	virtualMachinesN *[]string
	vlans *[]string
	vlansIsnull *bool
	vlansN *[]string
	vrfs *[]string
	vrfsIsnull *bool
	vrfsN *[]string
	depth *int32
}

// Circuits (ID)
func (r ApiTenancyTenantsListRequest) Circuits(circuits []string) ApiTenancyTenantsListRequest {
	r.circuits = &circuits
	return r
}

func (r ApiTenancyTenantsListRequest) CircuitsIsnull(circuitsIsnull bool) ApiTenancyTenantsListRequest {
	r.circuitsIsnull = &circuitsIsnull
	return r
}

// Circuits (ID)
func (r ApiTenancyTenantsListRequest) CircuitsN(circuitsN []string) ApiTenancyTenantsListRequest {
	r.circuitsN = &circuitsN
	return r
}

func (r ApiTenancyTenantsListRequest) Clusters(clusters []string) ApiTenancyTenantsListRequest {
	r.clusters = &clusters
	return r
}

func (r ApiTenancyTenantsListRequest) ClustersIsnull(clustersIsnull bool) ApiTenancyTenantsListRequest {
	r.clustersIsnull = &clustersIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) ClustersN(clustersN []string) ApiTenancyTenantsListRequest {
	r.clustersN = &clustersN
	return r
}

func (r ApiTenancyTenantsListRequest) Comments(comments []string) ApiTenancyTenantsListRequest {
	r.comments = &comments
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsIc(commentsIc []string) ApiTenancyTenantsListRequest {
	r.commentsIc = &commentsIc
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsIe(commentsIe []string) ApiTenancyTenantsListRequest {
	r.commentsIe = &commentsIe
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsIew(commentsIew []string) ApiTenancyTenantsListRequest {
	r.commentsIew = &commentsIew
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsIre(commentsIre []string) ApiTenancyTenantsListRequest {
	r.commentsIre = &commentsIre
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsIsw(commentsIsw []string) ApiTenancyTenantsListRequest {
	r.commentsIsw = &commentsIsw
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsN(commentsN []string) ApiTenancyTenantsListRequest {
	r.commentsN = &commentsN
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsNic(commentsNic []string) ApiTenancyTenantsListRequest {
	r.commentsNic = &commentsNic
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsNie(commentsNie []string) ApiTenancyTenantsListRequest {
	r.commentsNie = &commentsNie
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsNiew(commentsNiew []string) ApiTenancyTenantsListRequest {
	r.commentsNiew = &commentsNiew
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsNire(commentsNire []string) ApiTenancyTenantsListRequest {
	r.commentsNire = &commentsNire
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsNisw(commentsNisw []string) ApiTenancyTenantsListRequest {
	r.commentsNisw = &commentsNisw
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsNre(commentsNre []string) ApiTenancyTenantsListRequest {
	r.commentsNre = &commentsNre
	return r
}

func (r ApiTenancyTenantsListRequest) CommentsRe(commentsRe []string) ApiTenancyTenantsListRequest {
	r.commentsRe = &commentsRe
	return r
}

func (r ApiTenancyTenantsListRequest) Created(created []time.Time) ApiTenancyTenantsListRequest {
	r.created = &created
	return r
}

func (r ApiTenancyTenantsListRequest) CreatedGt(createdGt []time.Time) ApiTenancyTenantsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiTenancyTenantsListRequest) CreatedGte(createdGte []time.Time) ApiTenancyTenantsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiTenancyTenantsListRequest) CreatedIsnull(createdIsnull bool) ApiTenancyTenantsListRequest {
	r.createdIsnull = &createdIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) CreatedLt(createdLt []time.Time) ApiTenancyTenantsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiTenancyTenantsListRequest) CreatedLte(createdLte []time.Time) ApiTenancyTenantsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiTenancyTenantsListRequest) CreatedN(createdN []time.Time) ApiTenancyTenantsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiTenancyTenantsListRequest) Description(description []string) ApiTenancyTenantsListRequest {
	r.description = &description
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionIc(descriptionIc []string) ApiTenancyTenantsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionIe(descriptionIe []string) ApiTenancyTenantsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionIew(descriptionIew []string) ApiTenancyTenantsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionIre(descriptionIre []string) ApiTenancyTenantsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionIsw(descriptionIsw []string) ApiTenancyTenantsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionN(descriptionN []string) ApiTenancyTenantsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionNic(descriptionNic []string) ApiTenancyTenantsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionNie(descriptionNie []string) ApiTenancyTenantsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionNiew(descriptionNiew []string) ApiTenancyTenantsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionNire(descriptionNire []string) ApiTenancyTenantsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionNisw(descriptionNisw []string) ApiTenancyTenantsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionNre(descriptionNre []string) ApiTenancyTenantsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiTenancyTenantsListRequest) DescriptionRe(descriptionRe []string) ApiTenancyTenantsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiTenancyTenantsListRequest) Devices(devices []string) ApiTenancyTenantsListRequest {
	r.devices = &devices
	return r
}

func (r ApiTenancyTenantsListRequest) DevicesIsnull(devicesIsnull bool) ApiTenancyTenantsListRequest {
	r.devicesIsnull = &devicesIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) DevicesN(devicesN []string) ApiTenancyTenantsListRequest {
	r.devicesN = &devicesN
	return r
}

func (r ApiTenancyTenantsListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsListRequest {
	r.format = &format
	return r
}

// Has circuits
func (r ApiTenancyTenantsListRequest) HasCircuits(hasCircuits bool) ApiTenancyTenantsListRequest {
	r.hasCircuits = &hasCircuits
	return r
}

// Has clusters
func (r ApiTenancyTenantsListRequest) HasClusters(hasClusters bool) ApiTenancyTenantsListRequest {
	r.hasClusters = &hasClusters
	return r
}

// Has devices
func (r ApiTenancyTenantsListRequest) HasDevices(hasDevices bool) ApiTenancyTenantsListRequest {
	r.hasDevices = &hasDevices
	return r
}

// Has IP addresses
func (r ApiTenancyTenantsListRequest) HasIpAddresses(hasIpAddresses bool) ApiTenancyTenantsListRequest {
	r.hasIpAddresses = &hasIpAddresses
	return r
}

// Has locations
func (r ApiTenancyTenantsListRequest) HasLocations(hasLocations bool) ApiTenancyTenantsListRequest {
	r.hasLocations = &hasLocations
	return r
}

// Has prefixes
func (r ApiTenancyTenantsListRequest) HasPrefixes(hasPrefixes bool) ApiTenancyTenantsListRequest {
	r.hasPrefixes = &hasPrefixes
	return r
}

// Has rack reservations
func (r ApiTenancyTenantsListRequest) HasRackReservations(hasRackReservations bool) ApiTenancyTenantsListRequest {
	r.hasRackReservations = &hasRackReservations
	return r
}

// Has racks
func (r ApiTenancyTenantsListRequest) HasRacks(hasRacks bool) ApiTenancyTenantsListRequest {
	r.hasRacks = &hasRacks
	return r
}

// Has route targets
func (r ApiTenancyTenantsListRequest) HasRouteTargets(hasRouteTargets bool) ApiTenancyTenantsListRequest {
	r.hasRouteTargets = &hasRouteTargets
	return r
}

// Has virtual machines
func (r ApiTenancyTenantsListRequest) HasVirtualMachines(hasVirtualMachines bool) ApiTenancyTenantsListRequest {
	r.hasVirtualMachines = &hasVirtualMachines
	return r
}

// Has VLANs
func (r ApiTenancyTenantsListRequest) HasVlans(hasVlans bool) ApiTenancyTenantsListRequest {
	r.hasVlans = &hasVlans
	return r
}

// Has VRFs
func (r ApiTenancyTenantsListRequest) HasVrfs(hasVrfs bool) ApiTenancyTenantsListRequest {
	r.hasVrfs = &hasVrfs
	return r
}

// Unique object identifier, either a UUID primary key or a composite key.
func (r ApiTenancyTenantsListRequest) Id(id []string) ApiTenancyTenantsListRequest {
	r.id = &id
	return r
}

func (r ApiTenancyTenantsListRequest) IdIc(idIc []string) ApiTenancyTenantsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiTenancyTenantsListRequest) IdIe(idIe []string) ApiTenancyTenantsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiTenancyTenantsListRequest) IdIew(idIew []string) ApiTenancyTenantsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiTenancyTenantsListRequest) IdIre(idIre []string) ApiTenancyTenantsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiTenancyTenantsListRequest) IdIsw(idIsw []string) ApiTenancyTenantsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiTenancyTenantsListRequest) IdN(idN []string) ApiTenancyTenantsListRequest {
	r.idN = &idN
	return r
}

func (r ApiTenancyTenantsListRequest) IdNic(idNic []string) ApiTenancyTenantsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiTenancyTenantsListRequest) IdNie(idNie []string) ApiTenancyTenantsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiTenancyTenantsListRequest) IdNiew(idNiew []string) ApiTenancyTenantsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiTenancyTenantsListRequest) IdNire(idNire []string) ApiTenancyTenantsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiTenancyTenantsListRequest) IdNisw(idNisw []string) ApiTenancyTenantsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiTenancyTenantsListRequest) IdNre(idNre []string) ApiTenancyTenantsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiTenancyTenantsListRequest) IdRe(idRe []string) ApiTenancyTenantsListRequest {
	r.idRe = &idRe
	return r
}

// IP addresses (ID)
func (r ApiTenancyTenantsListRequest) IpAddresses(ipAddresses []string) ApiTenancyTenantsListRequest {
	r.ipAddresses = &ipAddresses
	return r
}

func (r ApiTenancyTenantsListRequest) IpAddressesIsnull(ipAddressesIsnull bool) ApiTenancyTenantsListRequest {
	r.ipAddressesIsnull = &ipAddressesIsnull
	return r
}

// IP addresses (ID)
func (r ApiTenancyTenantsListRequest) IpAddressesN(ipAddressesN []string) ApiTenancyTenantsListRequest {
	r.ipAddressesN = &ipAddressesN
	return r
}

func (r ApiTenancyTenantsListRequest) LastUpdated(lastUpdated []time.Time) ApiTenancyTenantsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiTenancyTenantsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiTenancyTenantsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiTenancyTenantsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiTenancyTenantsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiTenancyTenantsListRequest) LastUpdatedIsnull(lastUpdatedIsnull bool) ApiTenancyTenantsListRequest {
	r.lastUpdatedIsnull = &lastUpdatedIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiTenancyTenantsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiTenancyTenantsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiTenancyTenantsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiTenancyTenantsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiTenancyTenantsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiTenancyTenantsListRequest) Limit(limit int32) ApiTenancyTenantsListRequest {
	r.limit = &limit
	return r
}

func (r ApiTenancyTenantsListRequest) Locations(locations []string) ApiTenancyTenantsListRequest {
	r.locations = &locations
	return r
}

func (r ApiTenancyTenantsListRequest) LocationsIsnull(locationsIsnull bool) ApiTenancyTenantsListRequest {
	r.locationsIsnull = &locationsIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) LocationsN(locationsN []string) ApiTenancyTenantsListRequest {
	r.locationsN = &locationsN
	return r
}

func (r ApiTenancyTenantsListRequest) Name(name []string) ApiTenancyTenantsListRequest {
	r.name = &name
	return r
}

func (r ApiTenancyTenantsListRequest) NameIc(nameIc []string) ApiTenancyTenantsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiTenancyTenantsListRequest) NameIe(nameIe []string) ApiTenancyTenantsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiTenancyTenantsListRequest) NameIew(nameIew []string) ApiTenancyTenantsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiTenancyTenantsListRequest) NameIre(nameIre []string) ApiTenancyTenantsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiTenancyTenantsListRequest) NameIsw(nameIsw []string) ApiTenancyTenantsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiTenancyTenantsListRequest) NameN(nameN []string) ApiTenancyTenantsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiTenancyTenantsListRequest) NameNic(nameNic []string) ApiTenancyTenantsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiTenancyTenantsListRequest) NameNie(nameNie []string) ApiTenancyTenantsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiTenancyTenantsListRequest) NameNiew(nameNiew []string) ApiTenancyTenantsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiTenancyTenantsListRequest) NameNire(nameNire []string) ApiTenancyTenantsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiTenancyTenantsListRequest) NameNisw(nameNisw []string) ApiTenancyTenantsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiTenancyTenantsListRequest) NameNre(nameNre []string) ApiTenancyTenantsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiTenancyTenantsListRequest) NameRe(nameRe []string) ApiTenancyTenantsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiTenancyTenantsListRequest) Offset(offset int32) ApiTenancyTenantsListRequest {
	r.offset = &offset
	return r
}

// Prefixes (ID)
func (r ApiTenancyTenantsListRequest) Prefixes(prefixes []string) ApiTenancyTenantsListRequest {
	r.prefixes = &prefixes
	return r
}

func (r ApiTenancyTenantsListRequest) PrefixesIsnull(prefixesIsnull bool) ApiTenancyTenantsListRequest {
	r.prefixesIsnull = &prefixesIsnull
	return r
}

// Prefixes (ID)
func (r ApiTenancyTenantsListRequest) PrefixesN(prefixesN []string) ApiTenancyTenantsListRequest {
	r.prefixesN = &prefixesN
	return r
}

// Search
func (r ApiTenancyTenantsListRequest) Q(q string) ApiTenancyTenantsListRequest {
	r.q = &q
	return r
}

// Rack reservations (ID)
func (r ApiTenancyTenantsListRequest) RackReservations(rackReservations []string) ApiTenancyTenantsListRequest {
	r.rackReservations = &rackReservations
	return r
}

func (r ApiTenancyTenantsListRequest) RackReservationsIsnull(rackReservationsIsnull bool) ApiTenancyTenantsListRequest {
	r.rackReservationsIsnull = &rackReservationsIsnull
	return r
}

// Rack reservations (ID)
func (r ApiTenancyTenantsListRequest) RackReservationsN(rackReservationsN []string) ApiTenancyTenantsListRequest {
	r.rackReservationsN = &rackReservationsN
	return r
}

func (r ApiTenancyTenantsListRequest) Racks(racks []string) ApiTenancyTenantsListRequest {
	r.racks = &racks
	return r
}

func (r ApiTenancyTenantsListRequest) RacksIsnull(racksIsnull bool) ApiTenancyTenantsListRequest {
	r.racksIsnull = &racksIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) RacksN(racksN []string) ApiTenancyTenantsListRequest {
	r.racksN = &racksN
	return r
}

func (r ApiTenancyTenantsListRequest) RouteTargets(routeTargets []string) ApiTenancyTenantsListRequest {
	r.routeTargets = &routeTargets
	return r
}

func (r ApiTenancyTenantsListRequest) RouteTargetsIsnull(routeTargetsIsnull bool) ApiTenancyTenantsListRequest {
	r.routeTargetsIsnull = &routeTargetsIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) RouteTargetsN(routeTargetsN []string) ApiTenancyTenantsListRequest {
	r.routeTargetsN = &routeTargetsN
	return r
}

// Which field to use when ordering the results.
func (r ApiTenancyTenantsListRequest) Sort(sort string) ApiTenancyTenantsListRequest {
	r.sort = &sort
	return r
}

func (r ApiTenancyTenantsListRequest) Tags(tags []string) ApiTenancyTenantsListRequest {
	r.tags = &tags
	return r
}

func (r ApiTenancyTenantsListRequest) TagsIsnull(tagsIsnull bool) ApiTenancyTenantsListRequest {
	r.tagsIsnull = &tagsIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) TagsN(tagsN []string) ApiTenancyTenantsListRequest {
	r.tagsN = &tagsN
	return r
}

func (r ApiTenancyTenantsListRequest) TenantGroup(tenantGroup []string) ApiTenancyTenantsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiTenancyTenantsListRequest) TenantGroupIsnull(tenantGroupIsnull bool) ApiTenancyTenantsListRequest {
	r.tenantGroupIsnull = &tenantGroupIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) TenantGroupN(tenantGroupN []string) ApiTenancyTenantsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiTenancyTenantsListRequest) VirtualMachines(virtualMachines []string) ApiTenancyTenantsListRequest {
	r.virtualMachines = &virtualMachines
	return r
}

func (r ApiTenancyTenantsListRequest) VirtualMachinesIsnull(virtualMachinesIsnull bool) ApiTenancyTenantsListRequest {
	r.virtualMachinesIsnull = &virtualMachinesIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) VirtualMachinesN(virtualMachinesN []string) ApiTenancyTenantsListRequest {
	r.virtualMachinesN = &virtualMachinesN
	return r
}

// VLANs (ID)
func (r ApiTenancyTenantsListRequest) Vlans(vlans []string) ApiTenancyTenantsListRequest {
	r.vlans = &vlans
	return r
}

func (r ApiTenancyTenantsListRequest) VlansIsnull(vlansIsnull bool) ApiTenancyTenantsListRequest {
	r.vlansIsnull = &vlansIsnull
	return r
}

// VLANs (ID)
func (r ApiTenancyTenantsListRequest) VlansN(vlansN []string) ApiTenancyTenantsListRequest {
	r.vlansN = &vlansN
	return r
}

func (r ApiTenancyTenantsListRequest) Vrfs(vrfs []string) ApiTenancyTenantsListRequest {
	r.vrfs = &vrfs
	return r
}

func (r ApiTenancyTenantsListRequest) VrfsIsnull(vrfsIsnull bool) ApiTenancyTenantsListRequest {
	r.vrfsIsnull = &vrfsIsnull
	return r
}

func (r ApiTenancyTenantsListRequest) VrfsN(vrfsN []string) ApiTenancyTenantsListRequest {
	r.vrfsN = &vrfsN
	return r
}

// Serializer Depth
func (r ApiTenancyTenantsListRequest) Depth(depth int32) ApiTenancyTenantsListRequest {
	r.depth = &depth
	return r
}

func (r ApiTenancyTenantsListRequest) Execute() (*PaginatedTenantList, *http.Response, error) {
	return r.ApiService.TenancyTenantsListExecute(r)
}

/*
TenancyTenantsList Method for TenancyTenantsList

Retrieve a list of tenant objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTenancyTenantsListRequest
*/
func (a *TenancyAPIService) TenancyTenantsList(ctx context.Context) ApiTenancyTenantsListRequest {
	return ApiTenancyTenantsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedTenantList
func (a *TenancyAPIService) TenancyTenantsListExecute(r ApiTenancyTenantsListRequest) (*PaginatedTenantList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedTenantList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.circuits != nil {
		t := *r.circuits
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuits", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuits", t, "form", "multi")
		}
	}
	if r.circuitsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "circuits__isnull", r.circuitsIsnull, "form", "")
	}
	if r.circuitsN != nil {
		t := *r.circuitsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuits__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuits__n", t, "form", "multi")
		}
	}
	if r.clusters != nil {
		t := *r.clusters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusters", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusters", t, "form", "multi")
		}
	}
	if r.clustersIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clusters__isnull", r.clustersIsnull, "form", "")
	}
	if r.clustersN != nil {
		t := *r.clustersN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "clusters__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "clusters__n", t, "form", "multi")
		}
	}
	if r.comments != nil {
		t := *r.comments
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments", t, "form", "multi")
		}
	}
	if r.commentsIc != nil {
		t := *r.commentsIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ic", t, "form", "multi")
		}
	}
	if r.commentsIe != nil {
		t := *r.commentsIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ie", t, "form", "multi")
		}
	}
	if r.commentsIew != nil {
		t := *r.commentsIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__iew", t, "form", "multi")
		}
	}
	if r.commentsIre != nil {
		t := *r.commentsIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__ire", t, "form", "multi")
		}
	}
	if r.commentsIsw != nil {
		t := *r.commentsIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__isw", t, "form", "multi")
		}
	}
	if r.commentsN != nil {
		t := *r.commentsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__n", t, "form", "multi")
		}
	}
	if r.commentsNic != nil {
		t := *r.commentsNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nic", t, "form", "multi")
		}
	}
	if r.commentsNie != nil {
		t := *r.commentsNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nie", t, "form", "multi")
		}
	}
	if r.commentsNiew != nil {
		t := *r.commentsNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__niew", t, "form", "multi")
		}
	}
	if r.commentsNire != nil {
		t := *r.commentsNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nire", t, "form", "multi")
		}
	}
	if r.commentsNisw != nil {
		t := *r.commentsNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nisw", t, "form", "multi")
		}
	}
	if r.commentsNre != nil {
		t := *r.commentsNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__nre", t, "form", "multi")
		}
	}
	if r.commentsRe != nil {
		t := *r.commentsRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "comments__re", t, "form", "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "form", "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "form", "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "form", "multi")
		}
	}
	if r.createdIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__isnull", r.createdIsnull, "form", "")
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "form", "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "form", "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "form", "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "form", "multi")
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "form", "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "form", "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "form", "multi")
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ire", t, "form", "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "form", "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "form", "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "form", "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "form", "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "form", "multi")
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nire", t, "form", "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "form", "multi")
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nre", t, "form", "multi")
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__re", t, "form", "multi")
		}
	}
	if r.devices != nil {
		t := *r.devices
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devices", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devices", t, "form", "multi")
		}
	}
	if r.devicesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "devices__isnull", r.devicesIsnull, "form", "")
	}
	if r.devicesN != nil {
		t := *r.devicesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devices__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devices__n", t, "form", "multi")
		}
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.hasCircuits != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_circuits", r.hasCircuits, "form", "")
	}
	if r.hasClusters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_clusters", r.hasClusters, "form", "")
	}
	if r.hasDevices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_devices", r.hasDevices, "form", "")
	}
	if r.hasIpAddresses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_ip_addresses", r.hasIpAddresses, "form", "")
	}
	if r.hasLocations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_locations", r.hasLocations, "form", "")
	}
	if r.hasPrefixes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_prefixes", r.hasPrefixes, "form", "")
	}
	if r.hasRackReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_rack_reservations", r.hasRackReservations, "form", "")
	}
	if r.hasRacks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_racks", r.hasRacks, "form", "")
	}
	if r.hasRouteTargets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_route_targets", r.hasRouteTargets, "form", "")
	}
	if r.hasVirtualMachines != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_virtual_machines", r.hasVirtualMachines, "form", "")
	}
	if r.hasVlans != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_vlans", r.hasVlans, "form", "")
	}
	if r.hasVrfs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_vrfs", r.hasVrfs, "form", "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "form", "multi")
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ic", t, "form", "multi")
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ie", t, "form", "multi")
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__iew", t, "form", "multi")
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__ire", t, "form", "multi")
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__isw", t, "form", "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "form", "multi")
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nic", t, "form", "multi")
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nie", t, "form", "multi")
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__niew", t, "form", "multi")
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nire", t, "form", "multi")
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nisw", t, "form", "multi")
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__nre", t, "form", "multi")
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__re", t, "form", "multi")
		}
	}
	if r.ipAddresses != nil {
		t := *r.ipAddresses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ip_addresses", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ip_addresses", t, "form", "multi")
		}
	}
	if r.ipAddressesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip_addresses__isnull", r.ipAddressesIsnull, "form", "")
	}
	if r.ipAddressesN != nil {
		t := *r.ipAddressesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ip_addresses__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ip_addresses__n", t, "form", "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "form", "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "form", "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "form", "multi")
		}
	}
	if r.lastUpdatedIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__isnull", r.lastUpdatedIsnull, "form", "")
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "form", "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "form", "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.locations != nil {
		t := *r.locations
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "locations", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "locations", t, "form", "multi")
		}
	}
	if r.locationsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locations__isnull", r.locationsIsnull, "form", "")
	}
	if r.locationsN != nil {
		t := *r.locationsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "locations__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "locations__n", t, "form", "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "form", "multi")
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "form", "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "form", "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "form", "multi")
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ire", t, "form", "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "form", "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "form", "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "form", "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "form", "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "form", "multi")
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nire", t, "form", "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "form", "multi")
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nre", t, "form", "multi")
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__re", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.prefixes != nil {
		t := *r.prefixes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefixes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefixes", t, "form", "multi")
		}
	}
	if r.prefixesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefixes__isnull", r.prefixesIsnull, "form", "")
	}
	if r.prefixesN != nil {
		t := *r.prefixesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefixes__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefixes__n", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.rackReservations != nil {
		t := *r.rackReservations
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_reservations", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_reservations", t, "form", "multi")
		}
	}
	if r.rackReservationsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rack_reservations__isnull", r.rackReservationsIsnull, "form", "")
	}
	if r.rackReservationsN != nil {
		t := *r.rackReservationsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_reservations__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_reservations__n", t, "form", "multi")
		}
	}
	if r.racks != nil {
		t := *r.racks
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "racks", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "racks", t, "form", "multi")
		}
	}
	if r.racksIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "racks__isnull", r.racksIsnull, "form", "")
	}
	if r.racksN != nil {
		t := *r.racksN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "racks__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "racks__n", t, "form", "multi")
		}
	}
	if r.routeTargets != nil {
		t := *r.routeTargets
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "route_targets", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "route_targets", t, "form", "multi")
		}
	}
	if r.routeTargetsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "route_targets__isnull", r.routeTargetsIsnull, "form", "")
	}
	if r.routeTargetsN != nil {
		t := *r.routeTargetsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "route_targets__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "route_targets__n", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.tagsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags__isnull", r.tagsIsnull, "form", "")
	}
	if r.tagsN != nil {
		t := *r.tagsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags__n", t, "form", "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "form", "multi")
		}
	}
	if r.tenantGroupIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__isnull", r.tenantGroupIsnull, "form", "")
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "form", "multi")
		}
	}
	if r.virtualMachines != nil {
		t := *r.virtualMachines
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines", t, "form", "multi")
		}
	}
	if r.virtualMachinesIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines__isnull", r.virtualMachinesIsnull, "form", "")
	}
	if r.virtualMachinesN != nil {
		t := *r.virtualMachinesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_machines__n", t, "form", "multi")
		}
	}
	if r.vlans != nil {
		t := *r.vlans
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vlans", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vlans", t, "form", "multi")
		}
	}
	if r.vlansIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlans__isnull", r.vlansIsnull, "form", "")
	}
	if r.vlansN != nil {
		t := *r.vlansN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vlans__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vlans__n", t, "form", "multi")
		}
	}
	if r.vrfs != nil {
		t := *r.vrfs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vrfs", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vrfs", t, "form", "multi")
		}
	}
	if r.vrfsIsnull != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vrfs__isnull", r.vrfsIsnull, "form", "")
	}
	if r.vrfsN != nil {
		t := *r.vrfsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vrfs__n", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vrfs__n", t, "form", "multi")
		}
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantsNotesCreateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	noteInputRequest *NoteInputRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantsNotesCreateRequest) NoteInputRequest(noteInputRequest NoteInputRequest) ApiTenancyTenantsNotesCreateRequest {
	r.noteInputRequest = &noteInputRequest
	return r
}

func (r ApiTenancyTenantsNotesCreateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsNotesCreateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantsNotesCreateRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.TenancyTenantsNotesCreateExecute(r)
}

/*
TenancyTenantsNotesCreate Method for TenancyTenantsNotesCreate

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant.
 @return ApiTenancyTenantsNotesCreateRequest
*/
func (a *TenancyAPIService) TenancyTenantsNotesCreate(ctx context.Context, id string) ApiTenancyTenantsNotesCreateRequest {
	return ApiTenancyTenantsNotesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *TenancyAPIService) TenancyTenantsNotesCreateExecute(r ApiTenancyTenantsNotesCreateRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsNotesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noteInputRequest == nil {
		return localVarReturnValue, nil, reportError("noteInputRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noteInputRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantsNotesListRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	limit *int32
	offset *int32
	depth *int32
}

func (r ApiTenancyTenantsNotesListRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsNotesListRequest {
	r.format = &format
	return r
}

// Number of results to return per page.
func (r ApiTenancyTenantsNotesListRequest) Limit(limit int32) ApiTenancyTenantsNotesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiTenancyTenantsNotesListRequest) Offset(offset int32) ApiTenancyTenantsNotesListRequest {
	r.offset = &offset
	return r
}

// Serializer Depth
func (r ApiTenancyTenantsNotesListRequest) Depth(depth int32) ApiTenancyTenantsNotesListRequest {
	r.depth = &depth
	return r
}

func (r ApiTenancyTenantsNotesListRequest) Execute() (*PaginatedNoteList, *http.Response, error) {
	return r.ApiService.TenancyTenantsNotesListExecute(r)
}

/*
TenancyTenantsNotesList Method for TenancyTenantsNotesList

API methods for returning or creating notes on an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant.
 @return ApiTenancyTenantsNotesListRequest
*/
func (a *TenancyAPIService) TenancyTenantsNotesList(ctx context.Context, id string) ApiTenancyTenantsNotesListRequest {
	return ApiTenancyTenantsNotesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedNoteList
func (a *TenancyAPIService) TenancyTenantsNotesListExecute(r ApiTenancyTenantsNotesListRequest) (*PaginatedNoteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNoteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsNotesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/{id}/notes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	patchedTenantRequest *PatchedTenantRequest
}

func (r ApiTenancyTenantsPartialUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsPartialUpdateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantsPartialUpdateRequest) PatchedTenantRequest(patchedTenantRequest PatchedTenantRequest) ApiTenancyTenantsPartialUpdateRequest {
	r.patchedTenantRequest = &patchedTenantRequest
	return r
}

func (r ApiTenancyTenantsPartialUpdateRequest) Execute() (*Tenant, *http.Response, error) {
	return r.ApiService.TenancyTenantsPartialUpdateExecute(r)
}

/*
TenancyTenantsPartialUpdate Method for TenancyTenantsPartialUpdate

Partial update a tenant object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant.
 @return ApiTenancyTenantsPartialUpdateRequest
*/
func (a *TenancyAPIService) TenancyTenantsPartialUpdate(ctx context.Context, id string) ApiTenancyTenantsPartialUpdateRequest {
	return ApiTenancyTenantsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Tenant
func (a *TenancyAPIService) TenancyTenantsPartialUpdateExecute(r ApiTenancyTenantsPartialUpdateRequest) (*Tenant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tenant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedTenantRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantsRetrieveRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	format *CircuitsCircuitTerminationsListFormatParameter
	depth *int32
}

func (r ApiTenancyTenantsRetrieveRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsRetrieveRequest {
	r.format = &format
	return r
}

// Serializer Depth
func (r ApiTenancyTenantsRetrieveRequest) Depth(depth int32) ApiTenancyTenantsRetrieveRequest {
	r.depth = &depth
	return r
}

func (r ApiTenancyTenantsRetrieveRequest) Execute() (*Tenant, *http.Response, error) {
	return r.ApiService.TenancyTenantsRetrieveExecute(r)
}

/*
TenancyTenantsRetrieve Method for TenancyTenantsRetrieve

Retrieve a tenant object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant.
 @return ApiTenancyTenantsRetrieveRequest
*/
func (a *TenancyAPIService) TenancyTenantsRetrieve(ctx context.Context, id string) ApiTenancyTenantsRetrieveRequest {
	return ApiTenancyTenantsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Tenant
func (a *TenancyAPIService) TenancyTenantsRetrieveExecute(r ApiTenancyTenantsRetrieveRequest) (*Tenant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tenant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	} else {
		var defaultValue int32 = 1
		r.depth = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTenancyTenantsUpdateRequest struct {
	ctx context.Context
	ApiService *TenancyAPIService
	id string
	tenantRequest *TenantRequest
	format *CircuitsCircuitTerminationsListFormatParameter
}

func (r ApiTenancyTenantsUpdateRequest) TenantRequest(tenantRequest TenantRequest) ApiTenancyTenantsUpdateRequest {
	r.tenantRequest = &tenantRequest
	return r
}

func (r ApiTenancyTenantsUpdateRequest) Format(format CircuitsCircuitTerminationsListFormatParameter) ApiTenancyTenantsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiTenancyTenantsUpdateRequest) Execute() (*Tenant, *http.Response, error) {
	return r.ApiService.TenancyTenantsUpdateExecute(r)
}

/*
TenancyTenantsUpdate Method for TenancyTenantsUpdate

Update a tenant object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tenant.
 @return ApiTenancyTenantsUpdateRequest
*/
func (a *TenancyAPIService) TenancyTenantsUpdate(ctx context.Context, id string) ApiTenancyTenantsUpdateRequest {
	return ApiTenancyTenantsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Tenant
func (a *TenancyAPIService) TenancyTenantsUpdateExecute(r ApiTenancyTenantsUpdateRequest) (*Tenant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tenant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TenancyAPIService.TenancyTenantsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenancy/tenants/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantRequest == nil {
		return localVarReturnValue, nil, reportError("tenantRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tenantRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
